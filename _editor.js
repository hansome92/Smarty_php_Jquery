var url_prefix = '/elance/trinketlily/', base_url = 'http://www.upgradeyourdeveloper.com/elance/trinketlily/';
/*! jQuery v1.7.2 jquery.com | jquery.org/license */
(function(a,b){function cy(a){return f.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}function cu(a){if(!cj[a]){var b=c.body,d=f("<"+a+">").appendTo(b),e=d.css("display");d.remove();if(e==="none"||e===""){ck||(ck=c.createElement("iframe"),ck.frameBorder=ck.width=ck.height=0),b.appendChild(ck);if(!cl||!ck.createElement)cl=(ck.contentWindow||ck.contentDocument).document,cl.write((f.support.boxModel?"<!doctype html>":"")+"<html><body>"),cl.close();d=cl.createElement(a),cl.body.appendChild(d),e=f.css(d,"display"),b.removeChild(ck)}cj[a]=e}return cj[a]}function ct(a,b){var c={};f.each(cp.concat.apply([],cp.slice(0,b)),function(){c[this]=a});return c}function cs(){cq=b}function cr(){setTimeout(cs,0);return cq=f.now()}function ci(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function ch(){try{return new a.XMLHttpRequest}catch(b){}}function cb(a,c){a.dataFilter&&(c=a.dataFilter(c,a.dataType));var d=a.dataTypes,e={},g,h,i=d.length,j,k=d[0],l,m,n,o,p;for(g=1;g<i;g++){if(g===1)for(h in a.converters)typeof h=="string"&&(e[h.toLowerCase()]=a.converters[h]);l=k,k=d[g];if(k==="*")k=l;else if(l!=="*"&&l!==k){m=l+" "+k,n=e[m]||e["* "+k];if(!n){p=b;for(o in e){j=o.split(" ");if(j[0]===l||j[0]==="*"){p=e[j[1]+" "+k];if(p){o=e[o],o===!0?n=p:p===!0&&(n=o);break}}}}!n&&!p&&f.error("No conversion from "+m.replace(" "," to ")),n!==!0&&(c=n?n(c):p(o(c)))}}return c}function ca(a,c,d){var e=a.contents,f=a.dataTypes,g=a.responseFields,h,i,j,k;for(i in g)i in d&&(c[g[i]]=d[i]);while(f[0]==="*")f.shift(),h===b&&(h=a.mimeType||c.getResponseHeader("content-type"));if(h)for(i in e)if(e[i]&&e[i].test(h)){f.unshift(i);break}if(f[0]in d)j=f[0];else{for(i in d){if(!f[0]||a.converters[i+" "+f[0]]){j=i;break}k||(k=i)}j=j||k}if(j){j!==f[0]&&f.unshift(j);return d[j]}}function b_(a,b,c,d){if(f.isArray(b))f.each(b,function(b,e){c||bD.test(a)?d(a,e):b_(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&f.type(b)==="object")for(var e in b)b_(a+"["+e+"]",b[e],c,d);else d(a,b)}function b$(a,c){var d,e,g=f.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((g[d]?a:e||(e={}))[d]=c[d]);e&&f.extend(!0,a,e)}function bZ(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h=a[f],i=0,j=h?h.length:0,k=a===bS,l;for(;i<j&&(k||!l);i++)l=h[i](c,d,e),typeof l=="string"&&(!k||g[l]?l=b:(c.dataTypes.unshift(l),l=bZ(a,c,d,e,l,g)));(k||!l)&&!g["*"]&&(l=bZ(a,c,d,e,"*",g));return l}function bY(a){return function(b,c){typeof b!="string"&&(c=b,b="*");if(f.isFunction(c)){var d=b.toLowerCase().split(bO),e=0,g=d.length,h,i,j;for(;e<g;e++)h=d[e],j=/^\+/.test(h),j&&(h=h.substr(1)||"*"),i=a[h]=a[h]||[],i[j?"unshift":"push"](c)}}}function bB(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=b==="width"?1:0,g=4;if(d>0){if(c!=="border")for(;e<g;e+=2)c||(d-=parseFloat(f.css(a,"padding"+bx[e]))||0),c==="margin"?d+=parseFloat(f.css(a,c+bx[e]))||0:d-=parseFloat(f.css(a,"border"+bx[e]+"Width"))||0;return d+"px"}d=by(a,b);if(d<0||d==null)d=a.style[b];if(bt.test(d))return d;d=parseFloat(d)||0;if(c)for(;e<g;e+=2)d+=parseFloat(f.css(a,"padding"+bx[e]))||0,c!=="padding"&&(d+=parseFloat(f.css(a,"border"+bx[e]+"Width"))||0),c==="margin"&&(d+=parseFloat(f.css(a,c+bx[e]))||0);return d+"px"}function bo(a){var b=c.createElement("div");bh.appendChild(b),b.innerHTML=a.outerHTML;return b.firstChild}function bn(a){var b=(a.nodeName||"").toLowerCase();b==="input"?bm(a):b!=="script"&&typeof a.getElementsByTagName!="undefined"&&f.grep(a.getElementsByTagName("input"),bm)}function bm(a){if(a.type==="checkbox"||a.type==="radio")a.defaultChecked=a.checked}function bl(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bk(a,b){var c;b.nodeType===1&&(b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?b.outerHTML=a.outerHTML:c!=="input"||a.type!=="checkbox"&&a.type!=="radio"?c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text):(a.checked&&(b.defaultChecked=b.checked=a.checked),b.value!==a.value&&(b.value=a.value)),b.removeAttribute(f.expando),b.removeAttribute("_submit_attached"),b.removeAttribute("_change_attached"))}function bj(a,b){if(b.nodeType===1&&!!f.hasData(a)){var c,d,e,g=f._data(a),h=f._data(b,g),i=g.events;if(i){delete h.handle,h.events={};for(c in i)for(d=0,e=i[c].length;d<e;d++)f.event.add(b,c,i[c][d])}h.data&&(h.data=f.extend({},h.data))}}function bi(a,b){return f.nodeName(a,"table")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function U(a){var b=V.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function T(a,b,c){b=b||0;if(f.isFunction(b))return f.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return f.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=f.grep(a,function(a){return a.nodeType===1});if(O.test(b))return f.filter(b,d,!c);b=f.filter(b,d)}return f.grep(a,function(a,d){return f.inArray(a,b)>=0===c})}function S(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function K(){return!0}function J(){return!1}function n(a,b,c){var d=b+"defer",e=b+"queue",g=b+"mark",h=f._data(a,d);h&&(c==="queue"||!f._data(a,e))&&(c==="mark"||!f._data(a,g))&&setTimeout(function(){!f._data(a,e)&&!f._data(a,g)&&(f.removeData(a,d,!0),h.fire())},0)}function m(a){for(var b in a){if(b==="data"&&f.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function l(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(k,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:f.isNumeric(d)?+d:j.test(d)?f.parseJSON(d):d}catch(g){}f.data(a,c,d)}else d=b}return d}function h(a){var b=g[a]={},c,d;a=a.split(/\s+/);for(c=0,d=a.length;c<d;c++)b[a[c]]=!0;return b}var c=a.document,d=a.navigator,e=a.location,f=function(){function J(){if(!e.isReady){try{c.documentElement.doScroll("left")}catch(a){setTimeout(J,1);return}e.ready()}}var e=function(a,b){return new e.fn.init(a,b,h)},f=a.jQuery,g=a.$,h,i=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,j=/\S/,k=/^\s+/,l=/\s+$/,m=/^<(\w+)\s*\/?>(?:<\/\1>)?$/,n=/^[\],:{}\s]*$/,o=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,p=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,q=/(?:^|:|,)(?:\s*\[)+/g,r=/(webkit)[ \/]([\w.]+)/,s=/(opera)(?:.*version)?[ \/]([\w.]+)/,t=/(msie) ([\w.]+)/,u=/(mozilla)(?:.*? rv:([\w.]+))?/,v=/-([a-z]|[0-9])/ig,w=/^-ms-/,x=function(a,b){return(b+"").toUpperCase()},y=d.userAgent,z,A,B,C=Object.prototype.toString,D=Object.prototype.hasOwnProperty,E=Array.prototype.push,F=Array.prototype.slice,G=String.prototype.trim,H=Array.prototype.indexOf,I={};e.fn=e.prototype={constructor:e,init:function(a,d,f){var g,h,j,k;if(!a)return this;if(a.nodeType){this.context=this[0]=a,this.length=1;return this}if(a==="body"&&!d&&c.body){this.context=c,this[0]=c.body,this.selector=a,this.length=1;return this}if(typeof a=="string"){a.charAt(0)!=="<"||a.charAt(a.length-1)!==">"||a.length<3?g=i.exec(a):g=[null,a,null];if(g&&(g[1]||!d)){if(g[1]){d=d instanceof e?d[0]:d,k=d?d.ownerDocument||d:c,j=m.exec(a),j?e.isPlainObject(d)?(a=[c.createElement(j[1])],e.fn.attr.call(a,d,!0)):a=[k.createElement(j[1])]:(j=e.buildFragment([g[1]],[k]),a=(j.cacheable?e.clone(j.fragment):j.fragment).childNodes);return e.merge(this,a)}h=c.getElementById(g[2]);if(h&&h.parentNode){if(h.id!==g[2])return f.find(a);this.length=1,this[0]=h}this.context=c,this.selector=a;return this}return!d||d.jquery?(d||f).find(a):this.constructor(d).find(a)}if(e.isFunction(a))return f.ready(a);a.selector!==b&&(this.selector=a.selector,this.context=a.context);return e.makeArray(a,this)},selector:"",jquery:"1.7.2",length:0,size:function(){return this.length},toArray:function(){return F.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=this.constructor();e.isArray(a)?E.apply(d,a):e.merge(d,a),d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")");return d},each:function(a,b){return e.each(this,a,b)},ready:function(a){e.bindReady(),A.add(a);return this},eq:function(a){a=+a;return a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(F.apply(this,arguments),"slice",F.call(arguments).join(","))},map:function(a){return this.pushStack(e.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:E,sort:[].sort,splice:[].splice},e.fn.init.prototype=e.fn,e.extend=e.fn.extend=function(){var a,c,d,f,g,h,i=arguments[0]||{},j=1,k=arguments.length,l=!1;typeof i=="boolean"&&(l=i,i=arguments[1]||{},j=2),typeof i!="object"&&!e.isFunction(i)&&(i={}),k===j&&(i=this,--j);for(;j<k;j++)if((a=arguments[j])!=null)for(c in a){d=i[c],f=a[c];if(i===f)continue;l&&f&&(e.isPlainObject(f)||(g=e.isArray(f)))?(g?(g=!1,h=d&&e.isArray(d)?d:[]):h=d&&e.isPlainObject(d)?d:{},i[c]=e.extend(l,h,f)):f!==b&&(i[c]=f)}return i},e.extend({noConflict:function(b){a.$===e&&(a.$=g),b&&a.jQuery===e&&(a.jQuery=f);return e},isReady:!1,readyWait:1,holdReady:function(a){a?e.readyWait++:e.ready(!0)},ready:function(a){if(a===!0&&!--e.readyWait||a!==!0&&!e.isReady){if(!c.body)return setTimeout(e.ready,1);e.isReady=!0;if(a!==!0&&--e.readyWait>0)return;A.fireWith(c,[e]),e.fn.trigger&&e(c).trigger("ready").off("ready")}},bindReady:function(){if(!A){A=e.Callbacks("once memory");if(c.readyState==="complete")return setTimeout(e.ready,1);if(c.addEventListener)c.addEventListener("DOMContentLoaded",B,!1),a.addEventListener("load",e.ready,!1);else if(c.attachEvent){c.attachEvent("onreadystatechange",B),a.attachEvent("onload",e.ready);var b=!1;try{b=a.frameElement==null}catch(d){}c.documentElement.doScroll&&b&&J()}}},isFunction:function(a){return e.type(a)==="function"},isArray:Array.isArray||function(a){return e.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):I[C.call(a)]||"object"},isPlainObject:function(a){if(!a||e.type(a)!=="object"||a.nodeType||e.isWindow(a))return!1;try{if(a.constructor&&!D.call(a,"constructor")&&!D.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||D.call(a,d)},isEmptyObject:function(a){for(var b in a)return!1;return!0},error:function(a){throw new Error(a)},parseJSON:function(b){if(typeof b!="string"||!b)return null;b=e.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(n.test(b.replace(o,"@").replace(p,"]").replace(q,"")))return(new Function("return "+b))();e.error("Invalid JSON: "+b)},parseXML:function(c){if(typeof c!="string"||!c)return null;var d,f;try{a.DOMParser?(f=new DOMParser,d=f.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(g){d=b}(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&e.error("Invalid XML: "+c);return d},noop:function(){},globalEval:function(b){b&&j.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(w,"ms-").replace(v,x)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,c,d){var f,g=0,h=a.length,i=h===b||e.isFunction(a);if(d){if(i){for(f in a)if(c.apply(a[f],d)===!1)break}else for(;g<h;)if(c.apply(a[g++],d)===!1)break}else if(i){for(f in a)if(c.call(a[f],f,a[f])===!1)break}else for(;g<h;)if(c.call(a[g],g,a[g++])===!1)break;return a},trim:G?function(a){return a==null?"":G.call(a)}:function(a){return a==null?"":(a+"").replace(k,"").replace(l,"")},makeArray:function(a,b){var c=b||[];if(a!=null){var d=e.type(a);a.length==null||d==="string"||d==="function"||d==="regexp"||e.isWindow(a)?E.call(c,a):e.merge(c,a)}return c},inArray:function(a,b,c){var d;if(b){if(H)return H.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=a.length,e=0;if(typeof c.length=="number")for(var f=c.length;e<f;e++)a[d++]=c[e];else while(c[e]!==b)a[d++]=c[e++];a.length=d;return a},grep:function(a,b,c){var d=[],e;c=!!c;for(var f=0,g=a.length;f<g;f++)e=!!b(a[f],f),c!==e&&d.push(a[f]);return d},map:function(a,c,d){var f,g,h=[],i=0,j=a.length,k=a instanceof e||j!==b&&typeof j=="number"&&(j>0&&a[0]&&a[j-1]||j===0||e.isArray(a));if(k)for(;i<j;i++)f=c(a[i],i,d),f!=null&&(h[h.length]=f);else for(g in a)f=c(a[g],g,d),f!=null&&(h[h.length]=f);return h.concat.apply([],h)},guid:1,proxy:function(a,c){if(typeof c=="string"){var d=a[c];c=a,a=d}if(!e.isFunction(a))return b;var f=F.call(arguments,2),g=function(){return a.apply(c,f.concat(F.call(arguments)))};g.guid=a.guid=a.guid||g.guid||e.guid++;return g},access:function(a,c,d,f,g,h,i){var j,k=d==null,l=0,m=a.length;if(d&&typeof d=="object"){for(l in d)e.access(a,c,l,d[l],1,h,f);g=1}else if(f!==b){j=i===b&&e.isFunction(f),k&&(j?(j=c,c=function(a,b,c){return j.call(e(a),c)}):(c.call(a,f),c=null));if(c)for(;l<m;l++)c(a[l],d,j?f.call(a[l],l,c(a[l],d)):f,i);g=1}return g?a:k?c.call(a):m?c(a[0],d):h},now:function(){return(new Date).getTime()},uaMatch:function(a){a=a.toLowerCase();var b=r.exec(a)||s.exec(a)||t.exec(a)||a.indexOf("compatible")<0&&u.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},sub:function(){function a(b,c){return new a.fn.init(b,c)}e.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function(d,f){f&&f instanceof e&&!(f instanceof a)&&(f=a(f));return e.fn.init.call(this,d,f,b)},a.fn.init.prototype=a.fn;var b=a(c);return a},browser:{}}),e.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){I["[object "+b+"]"]=b.toLowerCase()}),z=e.uaMatch(y),z.browser&&(e.browser[z.browser]=!0,e.browser.version=z.version),e.browser.webkit&&(e.browser.safari=!0),j.test(" ")&&(k=/^[\s\xA0]+/,l=/[\s\xA0]+$/),h=e(c),c.addEventListener?B=function(){c.removeEventListener("DOMContentLoaded",B,!1),e.ready()}:c.attachEvent&&(B=function(){c.readyState==="complete"&&(c.detachEvent("onreadystatechange",B),e.ready())});return e}(),g={};f.Callbacks=function(a){a=a?g[a]||h(a):{};var c=[],d=[],e,i,j,k,l,m,n=function(b){var d,e,g,h,i;for(d=0,e=b.length;d<e;d++)g=b[d],h=f.type(g),h==="array"?n(g):h==="function"&&(!a.unique||!p.has(g))&&c.push(g)},o=function(b,f){f=f||[],e=!a.memory||[b,f],i=!0,j=!0,m=k||0,k=0,l=c.length;for(;c&&m<l;m++)if(c[m].apply(b,f)===!1&&a.stopOnFalse){e=!0;break}j=!1,c&&(a.once?e===!0?p.disable():c=[]:d&&d.length&&(e=d.shift(),p.fireWith(e[0],e[1])))},p={add:function(){if(c){var a=c.length;n(arguments),j?l=c.length:e&&e!==!0&&(k=a,o(e[0],e[1]))}return this},remove:function(){if(c){var b=arguments,d=0,e=b.length;for(;d<e;d++)for(var f=0;f<c.length;f++)if(b[d]===c[f]){j&&f<=l&&(l--,f<=m&&m--),c.splice(f--,1);if(a.unique)break}}return this},has:function(a){if(c){var b=0,d=c.length;for(;b<d;b++)if(a===c[b])return!0}return!1},empty:function(){c=[];return this},disable:function(){c=d=e=b;return this},disabled:function(){return!c},lock:function(){d=b,(!e||e===!0)&&p.disable();return this},locked:function(){return!d},fireWith:function(b,c){d&&(j?a.once||d.push([b,c]):(!a.once||!e)&&o(b,c));return this},fire:function(){p.fireWith(this,arguments);return this},fired:function(){return!!i}};return p};var i=[].slice;f.extend({Deferred:function(a){var b=f.Callbacks("once memory"),c=f.Callbacks("once memory"),d=f.Callbacks("memory"),e="pending",g={resolve:b,reject:c,notify:d},h={done:b.add,fail:c.add,progress:d.add,state:function(){return e},isResolved:b.fired,isRejected:c.fired,then:function(a,b,c){i.done(a).fail(b).progress(c);return this},always:function(){i.done.apply(i,arguments).fail.apply(i,arguments);return this},pipe:function(a,b,c){return f.Deferred(function(d){f.each({done:[a,"resolve"],fail:[b,"reject"],progress:[c,"notify"]},function(a,b){var c=b[0],e=b[1],g;f.isFunction(c)?i[a](function(){g=c.apply(this,arguments),g&&f.isFunction(g.promise)?g.promise().then(d.resolve,d.reject,d.notify):d[e+"With"](this===i?d:this,[g])}):i[a](d[e])})}).promise()},promise:function(a){if(a==null)a=h;else for(var b in h)a[b]=h[b];return a}},i=h.promise({}),j;for(j in g)i[j]=g[j].fire,i[j+"With"]=g[j].fireWith;i.done(function(){e="resolved"},c.disable,d.lock).fail(function(){e="rejected"},b.disable,d.lock),a&&a.call(i,i);return i},when:function(a){function m(a){return function(b){e[a]=arguments.length>1?i.call(arguments,0):b,j.notifyWith(k,e)}}function l(a){return function(c){b[a]=arguments.length>1?i.call(arguments,0):c,--g||j.resolveWith(j,b)}}var b=i.call(arguments,0),c=0,d=b.length,e=Array(d),g=d,h=d,j=d<=1&&a&&f.isFunction(a.promise)?a:f.Deferred(),k=j.promise();if(d>1){for(;c<d;c++)b[c]&&b[c].promise&&f.isFunction(b[c].promise)?b[c].promise().then(l(c),j.reject,m(c)):--g;g||j.resolveWith(j,b)}else j!==a&&j.resolveWith(j,d?[a]:[]);return k}}),f.support=function(){var b,d,e,g,h,i,j,k,l,m,n,o,p=c.createElement("div"),q=c.documentElement;p.setAttribute("className","t"),p.innerHTML="   <link/><table></table><a href='/a' style='top:1px;float:left;opacity:.55;'>a</a><input type='checkbox'/>",d=p.getElementsByTagName("*"),e=p.getElementsByTagName("a")[0];if(!d||!d.length||!e)return{};g=c.createElement("select"),h=g.appendChild(c.createElement("option")),i=p.getElementsByTagName("input")[0],b={leadingWhitespace:p.firstChild.nodeType===3,tbody:!p.getElementsByTagName("tbody").length,htmlSerialize:!!p.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.55/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:i.value==="on",optSelected:h.selected,getSetAttribute:p.className!=="t",enctype:!!c.createElement("form").enctype,html5Clone:c.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,pixelMargin:!0},f.boxModel=b.boxModel=c.compatMode==="CSS1Compat",i.checked=!0,b.noCloneChecked=i.cloneNode(!0).checked,g.disabled=!0,b.optDisabled=!h.disabled;try{delete p.test}catch(r){b.deleteExpando=!1}!p.addEventListener&&p.attachEvent&&p.fireEvent&&(p.attachEvent("onclick",function(){b.noCloneEvent=!1}),p.cloneNode(!0).fireEvent("onclick")),i=c.createElement("input"),i.value="t",i.setAttribute("type","radio"),b.radioValue=i.value==="t",i.setAttribute("checked","checked"),i.setAttribute("name","t"),p.appendChild(i),j=c.createDocumentFragment(),j.appendChild(p.lastChild),b.checkClone=j.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=i.checked,j.removeChild(i),j.appendChild(p);if(p.attachEvent)for(n in{submit:1,change:1,focusin:1})m="on"+n,o=m in p,o||(p.setAttribute(m,"return;"),o=typeof p[m]=="function"),b[n+"Bubbles"]=o;j.removeChild(p),j=g=h=p=i=null,f(function(){var d,e,g,h,i,j,l,m,n,q,r,s,t,u=c.getElementsByTagName("body")[0];!u||(m=1,t="padding:0;margin:0;border:",r="position:absolute;top:0;left:0;width:1px;height:1px;",s=t+"0;visibility:hidden;",n="style='"+r+t+"5px solid #000;",q="<div "+n+"display:block;'><div style='"+t+"0;display:block;overflow:hidden;'></div></div>"+"<table "+n+"' cellpadding='0' cellspacing='0'>"+"<tr><td></td></tr></table>",d=c.createElement("div"),d.style.cssText=s+"width:0;height:0;position:static;top:0;margin-top:"+m+"px",u.insertBefore(d,u.firstChild),p=c.createElement("div"),d.appendChild(p),p.innerHTML="<table><tr><td style='"+t+"0;display:none'></td><td>t</td></tr></table>",k=p.getElementsByTagName("td"),o=k[0].offsetHeight===0,k[0].style.display="",k[1].style.display="none",b.reliableHiddenOffsets=o&&k[0].offsetHeight===0,a.getComputedStyle&&(p.innerHTML="",l=c.createElement("div"),l.style.width="0",l.style.marginRight="0",p.style.width="2px",p.appendChild(l),b.reliableMarginRight=(parseInt((a.getComputedStyle(l,null)||{marginRight:0}).marginRight,10)||0)===0),typeof p.style.zoom!="undefined"&&(p.innerHTML="",p.style.width=p.style.padding="1px",p.style.border=0,p.style.overflow="hidden",p.style.display="inline",p.style.zoom=1,b.inlineBlockNeedsLayout=p.offsetWidth===3,p.style.display="block",p.style.overflow="visible",p.innerHTML="<div style='width:5px;'></div>",b.shrinkWrapBlocks=p.offsetWidth!==3),p.style.cssText=r+s,p.innerHTML=q,e=p.firstChild,g=e.firstChild,i=e.nextSibling.firstChild.firstChild,j={doesNotAddBorder:g.offsetTop!==5,doesAddBorderForTableAndCells:i.offsetTop===5},g.style.position="fixed",g.style.top="20px",j.fixedPosition=g.offsetTop===20||g.offsetTop===15,g.style.position=g.style.top="",e.style.overflow="hidden",e.style.position="relative",j.subtractsBorderForOverflowNotVisible=g.offsetTop===-5,j.doesNotIncludeMarginInBodyOffset=u.offsetTop!==m,a.getComputedStyle&&(p.style.marginTop="1%",b.pixelMargin=(a.getComputedStyle(p,null)||{marginTop:0}).marginTop!=="1%"),typeof d.style.zoom!="undefined"&&(d.style.zoom=1),u.removeChild(d),l=p=d=null,f.extend(b,j))});return b}();var j=/^(?:\{.*\}|\[.*\])$/,k=/([A-Z])/g;f.extend({cache:{},uuid:0,expando:"jQuery"+(f.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){a=a.nodeType?f.cache[a[f.expando]]:a[f.expando];return!!a&&!m(a)},data:function(a,c,d,e){if(!!f.acceptData(a)){var g,h,i,j=f.expando,k=typeof c=="string",l=a.nodeType,m=l?f.cache:a,n=l?a[j]:a[j]&&j,o=c==="events";if((!n||!m[n]||!o&&!e&&!m[n].data)&&k&&d===b)return;n||(l?a[j]=n=++f.uuid:n=j),m[n]||(m[n]={},l||(m[n].toJSON=f.noop));if(typeof c=="object"||typeof c=="function")e?m[n]=f.extend(m[n],c):m[n].data=f.extend(m[n].data,c);g=h=m[n],e||(h.data||(h.data={}),h=h.data),d!==b&&(h[f.camelCase(c)]=d);if(o&&!h[c])return g.events;k?(i=h[c],i==null&&(i=h[f.camelCase(c)])):i=h;return i}},removeData:function(a,b,c){if(!!f.acceptData(a)){var d,e,g,h=f.expando,i=a.nodeType,j=i?f.cache:a,k=i?a[h]:h;if(!j[k])return;if(b){d=c?j[k]:j[k].data;if(d){f.isArray(b)||(b in d?b=[b]:(b=f.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,g=b.length;e<g;e++)delete d[b[e]];if(!(c?m:f.isEmptyObject)(d))return}}if(!c){delete j[k].data;if(!m(j[k]))return}f.support.deleteExpando||!j.setInterval?delete j[k]:j[k]=null,i&&(f.support.deleteExpando?delete a[h]:a.removeAttribute?a.removeAttribute(h):a[h]=null)}},_data:function(a,b,c){return f.data(a,b,c,!0)},acceptData:function(a){if(a.nodeName){var b=f.noData[a.nodeName.toLowerCase()];if(b)return b!==!0&&a.getAttribute("classid")===b}return!0}}),f.fn.extend({data:function(a,c){var d,e,g,h,i,j=this[0],k=0,m=null;if(a===b){if(this.length){m=f.data(j);if(j.nodeType===1&&!f._data(j,"parsedAttrs")){g=j.attributes;for(i=g.length;k<i;k++)h=g[k].name,h.indexOf("data-")===0&&(h=f.camelCase(h.substring(5)),l(j,h,m[h]));f._data(j,"parsedAttrs",!0)}}return m}if(typeof a=="object")return this.each(function(){f.data(this,a)});d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!";return f.access(this,function(c){if(c===b){m=this.triggerHandler("getData"+e,[d[0]]),m===b&&j&&(m=f.data(j,a),m=l(j,a,m));return m===b&&d[1]?this.data(d[0]):m}d[1]=c,this.each(function(){var b=f(this);b.triggerHandler("setData"+e,d),f.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1)},removeData:function(a){return this.each(function(){f.removeData(this,a)})}}),f.extend({_mark:function(a,b){a&&(b=(b||"fx")+"mark",f._data(a,b,(f._data(a,b)||0)+1))},_unmark:function(a,b,c){a!==!0&&(c=b,b=a,a=!1);if(b){c=c||"fx";var d=c+"mark",e=a?0:(f._data(b,d)||1)-1;e?f._data(b,d,e):(f.removeData(b,d,!0),n(b,c,"mark"))}},queue:function(a,b,c){var d;if(a){b=(b||"fx")+"queue",d=f._data(a,b),c&&(!d||f.isArray(c)?d=f._data(a,b,f.makeArray(c)):d.push(c));return d||[]}},dequeue:function(a,b){b=b||"fx";var c=f.queue(a,b),d=c.shift(),e={};d==="inprogress"&&(d=c.shift()),d&&(b==="fx"&&c.unshift("inprogress"),f._data(a,b+".run",e),d.call(a,function(){f.dequeue(a,b)},e)),c.length||(f.removeData(a,b+"queue "+b+".run",!0),n(a,b,"queue"))}}),f.fn.extend({queue:function(a,c){var d=2;typeof a!="string"&&(c=a,a="fx",d--);if(arguments.length<d)return f.queue(this[0],a);return c===b?this:this.each(function(){var b=f.queue(this,a,c);a==="fx"&&b[0]!=="inprogress"&&f.dequeue(this,a)})},dequeue:function(a){return this.each(function(){f.dequeue(this,a)})},delay:function(a,b){a=f.fx?f.fx.speeds[a]||a:a,b=b||"fx";return this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){function m(){--h||d.resolveWith(e,[e])}typeof a!="string"&&(c=a,a=b),a=a||"fx";var d=f.Deferred(),e=this,g=e.length,h=1,i=a+"defer",j=a+"queue",k=a+"mark",l;while(g--)if(l=f.data(e[g],i,b,!0)||(f.data(e[g],j,b,!0)||f.data(e[g],k,b,!0))&&f.data(e[g],i,f.Callbacks("once memory"),!0))h++,l.add(m);m();return d.promise(c)}});var o=/[\n\t\r]/g,p=/\s+/,q=/\r/g,r=/^(?:button|input)$/i,s=/^(?:button|input|object|select|textarea)$/i,t=/^a(?:rea)?$/i,u=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,v=f.support.getSetAttribute,w,x,y;f.fn.extend({attr:function(a,b){return f.access(this,f.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){f.removeAttr(this,a)})},prop:function(a,b){return f.access(this,f.prop,a,b,arguments.length>1)},removeProp:function(a){a=f.propFix[a]||a;return this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,g,h,i;if(f.isFunction(a))return this.each(function(b){f(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(p);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{g=" "+e.className+" ";for(h=0,i=b.length;h<i;h++)~g.indexOf(" "+b[h]+" ")||(g+=b[h]+" ");e.className=f.trim(g)}}}return this},removeClass:function(a){var c,d,e,g,h,i,j;if(f.isFunction(a))return this.each(function(b){f(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(p);for(d=0,e=this.length;d<e;d++){g=this[d];if(g.nodeType===1&&g.className)if(a){h=(" "+g.className+" ").replace(o," ");for(i=0,j=c.length;i<j;i++)h=h.replace(" "+c[i]+" "," ");g.className=f.trim(h)}else g.className=""}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";if(f.isFunction(a))return this.each(function(c){f(this).toggleClass(a.call(this,c,this.className,b),b)});return this.each(function(){if(c==="string"){var e,g=0,h=f(this),i=b,j=a.split(p);while(e=j[g++])i=d?i:!h.hasClass(e),h[i?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&f._data(this,"__className__",this.className),this.className=this.className||a===!1?"":f._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(o," ").indexOf(b)>-1)return!0;return!1},val:function(a){var c,d,e,g=this[0];{if(!!arguments.length){e=f.isFunction(a);return this.each(function(d){var g=f(this),h;if(this.nodeType===1){e?h=a.call(this,d,g.val()):h=a,h==null?h="":typeof h=="number"?h+="":f.isArray(h)&&(h=f.map(h,function(a){return a==null?"":a+""})),c=f.valHooks[this.type]||f.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,h,"value")===b)this.value=h}})}if(g){c=f.valHooks[g.type]||f.valHooks[g.nodeName.toLowerCase()];if(c&&"get"in c&&(d=c.get(g,"value"))!==b)return d;d=g.value;return typeof d=="string"?d.replace(q,""):d==null?"":d}}}}),f.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,g=a.selectedIndex,h=[],i=a.options,j=a.type==="select-one";if(g<0)return null;c=j?g:0,d=j?g+1:i.length;for(;c<d;c++){e=i[c];if(e.selected&&(f.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!f.nodeName(e.parentNode,"optgroup"))){b=f(e).val();if(j)return b;h.push(b)}}if(j&&!h.length&&i.length)return f(i[g]).val();return h},set:function(a,b){var c=f.makeArray(b);f(a).find("option").each(function(){this.selected=f.inArray(f(this).val(),c)>=0}),c.length||(a.selectedIndex=-1);return c}}},attrFn:{val:!0,css:!0,html:!0,text:!0,data:!0,width:!0,height:!0,offset:!0},attr:function(a,c,d,e){var g,h,i,j=a.nodeType;if(!!a&&j!==3&&j!==8&&j!==2){if(e&&c in f.attrFn)return f(a)[c](d);if(typeof a.getAttribute=="undefined")return f.prop(a,c,d);i=j!==1||!f.isXMLDoc(a),i&&(c=c.toLowerCase(),h=f.attrHooks[c]||(u.test(c)?x:w));if(d!==b){if(d===null){f.removeAttr(a,c);return}if(h&&"set"in h&&i&&(g=h.set(a,d,c))!==b)return g;a.setAttribute(c,""+d);return d}if(h&&"get"in h&&i&&(g=h.get(a,c))!==null)return g;g=a.getAttribute(c);return g===null?b:g}},removeAttr:function(a,b){var c,d,e,g,h,i=0;if(b&&a.nodeType===1){d=b.toLowerCase().split(p),g=d.length;for(;i<g;i++)e=d[i],e&&(c=f.propFix[e]||e,h=u.test(e),h||f.attr(a,e,""),a.removeAttribute(v?e:c),h&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(r.test(a.nodeName)&&a.parentNode)f.error("type property can't be changed");else if(!f.support.radioValue&&b==="radio"&&f.nodeName(a,"input")){var c=a.value;a.setAttribute("type",b),c&&(a.value=c);return b}}},value:{get:function(a,b){if(w&&f.nodeName(a,"button"))return w.get(a,b);return b in a?a.value:null},set:function(a,b,c){if(w&&f.nodeName(a,"button"))return w.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,g,h,i=a.nodeType;if(!!a&&i!==3&&i!==8&&i!==2){h=i!==1||!f.isXMLDoc(a),h&&(c=f.propFix[c]||c,g=f.propHooks[c]);return d!==b?g&&"set"in g&&(e=g.set(a,d,c))!==b?e:a[c]=d:g&&"get"in g&&(e=g.get(a,c))!==null?e:a[c]}},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):s.test(a.nodeName)||t.test(a.nodeName)&&a.href?0:b}}}}),f.attrHooks.tabindex=f.propHooks.tabIndex,x={get:function(a,c){var d,e=f.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;b===!1?f.removeAttr(a,c):(d=f.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase()));return c}},v||(y={name:!0,id:!0,coords:!0},w=f.valHooks.button={get:function(a,c){var d;d=a.getAttributeNode(c);return d&&(y[c]?d.nodeValue!=="":d.specified)?d.nodeValue:b},set:function(a,b,d){var e=a.getAttributeNode(d);e||(e=c.createAttribute(d),a.setAttributeNode(e));return e.nodeValue=b+""}},f.attrHooks.tabindex.set=w.set,f.each(["width","height"],function(a,b){f.attrHooks[b]=f.extend(f.attrHooks[b],{set:function(a,c){if(c===""){a.setAttribute(b,"auto");return c}}})}),f.attrHooks.contenteditable={get:w.get,set:function(a,b,c){b===""&&(b="false"),w.set(a,b,c)}}),f.support.hrefNormalized||f.each(["href","src","width","height"],function(a,c){f.attrHooks[c]=f.extend(f.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),f.support.style||(f.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=""+b}}),f.support.optSelected||(f.propHooks.selected=f.extend(f.propHooks.selected,{get:function(a){var b=a.parentNode;b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex);return null}})),f.support.enctype||(f.propFix.enctype="encoding"),f.support.checkOn||f.each(["radio","checkbox"],function(){f.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),f.each(["radio","checkbox"],function(){f.valHooks[this]=f.extend(f.valHooks[this],{set:function(a,b){if(f.isArray(b))return a.checked=f.inArray(f(a).val(),b)>=0}})});var z=/^(?:textarea|input|select)$/i,A=/^([^\.]*)?(?:\.(.+))?$/,B=/(?:^|\s)hover(\.\S+)?\b/,C=/^key/,D=/^(?:mouse|contextmenu)|click/,E=/^(?:focusinfocus|focusoutblur)$/,F=/^(\w*)(?:#([\w\-]+))?(?:\.([\w\-]+))?$/,G=function(
    a){var b=F.exec(a);b&&(b[1]=(b[1]||"").toLowerCase(),b[3]=b[3]&&new RegExp("(?:^|\\s)"+b[3]+"(?:\\s|$)"));return b},H=function(a,b){var c=a.attributes||{};return(!b[1]||a.nodeName.toLowerCase()===b[1])&&(!b[2]||(c.id||{}).value===b[2])&&(!b[3]||b[3].test((c["class"]||{}).value))},I=function(a){return f.event.special.hover?a:a.replace(B,"mouseenter$1 mouseleave$1")};f.event={add:function(a,c,d,e,g){var h,i,j,k,l,m,n,o,p,q,r,s;if(!(a.nodeType===3||a.nodeType===8||!c||!d||!(h=f._data(a)))){d.handler&&(p=d,d=p.handler,g=p.selector),d.guid||(d.guid=f.guid++),j=h.events,j||(h.events=j={}),i=h.handle,i||(h.handle=i=function(a){return typeof f!="undefined"&&(!a||f.event.triggered!==a.type)?f.event.dispatch.apply(i.elem,arguments):b},i.elem=a),c=f.trim(I(c)).split(" ");for(k=0;k<c.length;k++){l=A.exec(c[k])||[],m=l[1],n=(l[2]||"").split(".").sort(),s=f.event.special[m]||{},m=(g?s.delegateType:s.bindType)||m,s=f.event.special[m]||{},o=f.extend({type:m,origType:l[1],data:e,handler:d,guid:d.guid,selector:g,quick:g&&G(g),namespace:n.join(".")},p),r=j[m];if(!r){r=j[m]=[],r.delegateCount=0;if(!s.setup||s.setup.call(a,e,n,i)===!1)a.addEventListener?a.addEventListener(m,i,!1):a.attachEvent&&a.attachEvent("on"+m,i)}s.add&&(s.add.call(a,o),o.handler.guid||(o.handler.guid=d.guid)),g?r.splice(r.delegateCount++,0,o):r.push(o),f.event.global[m]=!0}a=null}},global:{},remove:function(a,b,c,d,e){var g=f.hasData(a)&&f._data(a),h,i,j,k,l,m,n,o,p,q,r,s;if(!!g&&!!(o=g.events)){b=f.trim(I(b||"")).split(" ");for(h=0;h<b.length;h++){i=A.exec(b[h])||[],j=k=i[1],l=i[2];if(!j){for(j in o)f.event.remove(a,j+b[h],c,d,!0);continue}p=f.event.special[j]||{},j=(d?p.delegateType:p.bindType)||j,r=o[j]||[],m=r.length,l=l?new RegExp("(^|\\.)"+l.split(".").sort().join("\\.(?:.*\\.)?")+"(\\.|$)"):null;for(n=0;n<r.length;n++)s=r[n],(e||k===s.origType)&&(!c||c.guid===s.guid)&&(!l||l.test(s.namespace))&&(!d||d===s.selector||d==="**"&&s.selector)&&(r.splice(n--,1),s.selector&&r.delegateCount--,p.remove&&p.remove.call(a,s));r.length===0&&m!==r.length&&((!p.teardown||p.teardown.call(a,l)===!1)&&f.removeEvent(a,j,g.handle),delete o[j])}f.isEmptyObject(o)&&(q=g.handle,q&&(q.elem=null),f.removeData(a,["events","handle"],!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,e,g){if(!e||e.nodeType!==3&&e.nodeType!==8){var h=c.type||c,i=[],j,k,l,m,n,o,p,q,r,s;if(E.test(h+f.event.triggered))return;h.indexOf("!")>=0&&(h=h.slice(0,-1),k=!0),h.indexOf(".")>=0&&(i=h.split("."),h=i.shift(),i.sort());if((!e||f.event.customEvent[h])&&!f.event.global[h])return;c=typeof c=="object"?c[f.expando]?c:new f.Event(h,c):new f.Event(h),c.type=h,c.isTrigger=!0,c.exclusive=k,c.namespace=i.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+i.join("\\.(?:.*\\.)?")+"(\\.|$)"):null,o=h.indexOf(":")<0?"on"+h:"";if(!e){j=f.cache;for(l in j)j[l].events&&j[l].events[h]&&f.event.trigger(c,d,j[l].handle.elem,!0);return}c.result=b,c.target||(c.target=e),d=d!=null?f.makeArray(d):[],d.unshift(c),p=f.event.special[h]||{};if(p.trigger&&p.trigger.apply(e,d)===!1)return;r=[[e,p.bindType||h]];if(!g&&!p.noBubble&&!f.isWindow(e)){s=p.delegateType||h,m=E.test(s+h)?e:e.parentNode,n=null;for(;m;m=m.parentNode)r.push([m,s]),n=m;n&&n===e.ownerDocument&&r.push([n.defaultView||n.parentWindow||a,s])}for(l=0;l<r.length&&!c.isPropagationStopped();l++)m=r[l][0],c.type=r[l][1],q=(f._data(m,"events")||{})[c.type]&&f._data(m,"handle"),q&&q.apply(m,d),q=o&&m[o],q&&f.acceptData(m)&&q.apply(m,d)===!1&&c.preventDefault();c.type=h,!g&&!c.isDefaultPrevented()&&(!p._default||p._default.apply(e.ownerDocument,d)===!1)&&(h!=="click"||!f.nodeName(e,"a"))&&f.acceptData(e)&&o&&e[h]&&(h!=="focus"&&h!=="blur"||c.target.offsetWidth!==0)&&!f.isWindow(e)&&(n=e[o],n&&(e[o]=null),f.event.triggered=h,e[h](),f.event.triggered=b,n&&(e[o]=n));return c.result}},dispatch:function(c){c=f.event.fix(c||a.event);var d=(f._data(this,"events")||{})[c.type]||[],e=d.delegateCount,g=[].slice.call(arguments,0),h=!c.exclusive&&!c.namespace,i=f.event.special[c.type]||{},j=[],k,l,m,n,o,p,q,r,s,t,u;g[0]=c,c.delegateTarget=this;if(!i.preDispatch||i.preDispatch.call(this,c)!==!1){if(e&&(!c.button||c.type!=="click")){n=f(this),n.context=this.ownerDocument||this;for(m=c.target;m!=this;m=m.parentNode||this)if(m.disabled!==!0){p={},r=[],n[0]=m;for(k=0;k<e;k++)s=d[k],t=s.selector,p[t]===b&&(p[t]=s.quick?H(m,s.quick):n.is(t)),p[t]&&r.push(s);r.length&&j.push({elem:m,matches:r})}}d.length>e&&j.push({elem:this,matches:d.slice(e)});for(k=0;k<j.length&&!c.isPropagationStopped();k++){q=j[k],c.currentTarget=q.elem;for(l=0;l<q.matches.length&&!c.isImmediatePropagationStopped();l++){s=q.matches[l];if(h||!c.namespace&&!s.namespace||c.namespace_re&&c.namespace_re.test(s.namespace))c.data=s.data,c.handleObj=s,o=((f.event.special[s.origType]||{}).handle||s.handler).apply(q.elem,g),o!==b&&(c.result=o,o===!1&&(c.preventDefault(),c.stopPropagation()))}}i.postDispatch&&i.postDispatch.call(this,c);return c.result}},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode);return a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,d){var e,f,g,h=d.button,i=d.fromElement;a.pageX==null&&d.clientX!=null&&(e=a.target.ownerDocument||c,f=e.documentElement,g=e.body,a.pageX=d.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=d.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?d.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0);return a}},fix:function(a){if(a[f.expando])return a;var d,e,g=a,h=f.event.fixHooks[a.type]||{},i=h.props?this.props.concat(h.props):this.props;a=f.Event(g);for(d=i.length;d;)e=i[--d],a[e]=g[e];a.target||(a.target=g.srcElement||c),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey===b&&(a.metaKey=a.ctrlKey);return h.filter?h.filter(a,g):a},special:{ready:{setup:f.bindReady},load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){f.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=f.extend(new f.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?f.event.trigger(e,null,b):f.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},f.event.handle=f.event.dispatch,f.removeEvent=c.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){a.detachEvent&&a.detachEvent("on"+b,c)},f.Event=function(a,b){if(!(this instanceof f.Event))return new f.Event(a,b);a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?K:J):this.type=a,b&&f.extend(this,b),this.timeStamp=a&&a.timeStamp||f.now(),this[f.expando]=!0},f.Event.prototype={preventDefault:function(){this.isDefaultPrevented=K;var a=this.originalEvent;!a||(a.preventDefault?a.preventDefault():a.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=K;var a=this.originalEvent;!a||(a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=K,this.stopPropagation()},isDefaultPrevented:J,isPropagationStopped:J,isImmediatePropagationStopped:J},f.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){f.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c=this,d=a.relatedTarget,e=a.handleObj,g=e.selector,h;if(!d||d!==c&&!f.contains(c,d))a.type=e.origType,h=e.handler.apply(this,arguments),a.type=b;return h}}}),f.support.submitBubbles||(f.event.special.submit={setup:function(){if(f.nodeName(this,"form"))return!1;f.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=f.nodeName(c,"input")||f.nodeName(c,"button")?c.form:b;d&&!d._submit_attached&&(f.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),d._submit_attached=!0)})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&f.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(f.nodeName(this,"form"))return!1;f.event.remove(this,"._submit")}}),f.support.changeBubbles||(f.event.special.change={setup:function(){if(z.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")f.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),f.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1,f.event.simulate("change",this,a,!0))});return!1}f.event.add(this,"beforeactivate._change",function(a){var b=a.target;z.test(b.nodeName)&&!b._change_attached&&(f.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&f.event.simulate("change",this.parentNode,a,!0)}),b._change_attached=!0)})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){f.event.remove(this,"._change");return z.test(this.nodeName)}}),f.support.focusinBubbles||f.each({focus:"focusin",blur:"focusout"},function(a,b){var d=0,e=function(a){f.event.simulate(b,a.target,f.event.fix(a),!0)};f.event.special[b]={setup:function(){d++===0&&c.addEventListener(a,e,!0)},teardown:function(){--d===0&&c.removeEventListener(a,e,!0)}}}),f.fn.extend({on:function(a,c,d,e,g){var h,i;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(i in a)this.on(i,c,d,a[i],g);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=J;else if(!e)return this;g===1&&(h=e,e=function(a){f().off(a);return h.apply(this,arguments)},e.guid=h.guid||(h.guid=f.guid++));return this.each(function(){f.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){if(a&&a.preventDefault&&a.handleObj){var e=a.handleObj;f(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler);return this}if(typeof a=="object"){for(var g in a)this.off(g,c,a[g]);return this}if(c===!1||typeof c=="function")d=c,c=b;d===!1&&(d=J);return this.each(function(){f.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){f(this.context).on(a,this.selector,b,c);return this},die:function(a,b){f(this.context).off(a,this.selector||"**",b);return this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length==1?this.off(a,"**"):this.off(b,a,c)},trigger:function(a,b){return this.each(function(){f.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return f.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||f.guid++,d=0,e=function(c){var e=(f._data(this,"lastToggle"+a.guid)||0)%d;f._data(this,"lastToggle"+a.guid,e+1),c.preventDefault();return b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),f.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){f.fn[b]=function(a,c){c==null&&(c=a,a=null);return arguments.length>0?this.on(b,null,a,c):this.trigger(b)},f.attrFn&&(f.attrFn[b]=!0),C.test(b)&&(f.event.fixHooks[b]=f.event.keyHooks),D.test(b)&&(f.event.fixHooks[b]=f.event.mouseHooks)}),function(){function x(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}if(j.nodeType===1){g||(j[d]=c,j.sizset=h);if(typeof b!="string"){if(j===b){k=!0;break}}else if(m.filter(b,[j]).length>0){k=j;break}}j=j[a]}e[h]=k}}}function w(a,b,c,e,f,g){for(var h=0,i=e.length;h<i;h++){var j=e[h];if(j){var k=!1;j=j[a];while(j){if(j[d]===c){k=e[j.sizset];break}j.nodeType===1&&!g&&(j[d]=c,j.sizset=h);if(j.nodeName.toLowerCase()===b){k=j;break}j=j[a]}e[h]=k}}}var a=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,d="sizcache"+(Math.random()+"").replace(".",""),e=0,g=Object.prototype.toString,h=!1,i=!0,j=/\\/g,k=/\r\n/g,l=/\W/;[0,0].sort(function(){i=!1;return 0});var m=function(b,d,e,f){e=e||[],d=d||c;var h=d;if(d.nodeType!==1&&d.nodeType!==9)return[];if(!b||typeof b!="string")return e;var i,j,k,l,n,q,r,t,u=!0,v=m.isXML(d),w=[],x=b;do{a.exec(""),i=a.exec(x);if(i){x=i[3],w.push(i[1]);if(i[2]){l=i[3];break}}}while(i);if(w.length>1&&p.exec(b))if(w.length===2&&o.relative[w[0]])j=y(w[0]+w[1],d,f);else{j=o.relative[w[0]]?[d]:m(w.shift(),d);while(w.length)b=w.shift(),o.relative[b]&&(b+=w.shift()),j=y(b,j,f)}else{!f&&w.length>1&&d.nodeType===9&&!v&&o.match.ID.test(w[0])&&!o.match.ID.test(w[w.length-1])&&(n=m.find(w.shift(),d,v),d=n.expr?m.filter(n.expr,n.set)[0]:n.set[0]);if(d){n=f?{expr:w.pop(),set:s(f)}:m.find(w.pop(),w.length===1&&(w[0]==="~"||w[0]==="+")&&d.parentNode?d.parentNode:d,v),j=n.expr?m.filter(n.expr,n.set):n.set,w.length>0?k=s(j):u=!1;while(w.length)q=w.pop(),r=q,o.relative[q]?r=w.pop():q="",r==null&&(r=d),o.relative[q](k,r,v)}else k=w=[]}k||(k=j),k||m.error(q||b);if(g.call(k)==="[object Array]")if(!u)e.push.apply(e,k);else if(d&&d.nodeType===1)for(t=0;k[t]!=null;t++)k[t]&&(k[t]===!0||k[t].nodeType===1&&m.contains(d,k[t]))&&e.push(j[t]);else for(t=0;k[t]!=null;t++)k[t]&&k[t].nodeType===1&&e.push(j[t]);else s(k,e);l&&(m(l,h,e,f),m.uniqueSort(e));return e};m.uniqueSort=function(a){if(u){h=i,a.sort(u);if(h)for(var b=1;b<a.length;b++)a[b]===a[b-1]&&a.splice(b--,1)}return a},m.matches=function(a,b){return m(a,null,null,b)},m.matchesSelector=function(a,b){return m(b,null,null,[a]).length>0},m.find=function(a,b,c){var d,e,f,g,h,i;if(!a)return[];for(e=0,f=o.order.length;e<f;e++){h=o.order[e];if(g=o.leftMatch[h].exec(a)){i=g[1],g.splice(1,1);if(i.substr(i.length-1)!=="\\"){g[1]=(g[1]||"").replace(j,""),d=o.find[h](g,b,c);if(d!=null){a=a.replace(o.match[h],"");break}}}}d||(d=typeof b.getElementsByTagName!="undefined"?b.getElementsByTagName("*"):[]);return{set:d,expr:a}},m.filter=function(a,c,d,e){var f,g,h,i,j,k,l,n,p,q=a,r=[],s=c,t=c&&c[0]&&m.isXML(c[0]);while(a&&c.length){for(h in o.filter)if((f=o.leftMatch[h].exec(a))!=null&&f[2]){k=o.filter[h],l=f[1],g=!1,f.splice(1,1);if(l.substr(l.length-1)==="\\")continue;s===r&&(r=[]);if(o.preFilter[h]){f=o.preFilter[h](f,s,d,r,e,t);if(!f)g=i=!0;else if(f===!0)continue}if(f)for(n=0;(j=s[n])!=null;n++)j&&(i=k(j,f,n,s),p=e^i,d&&i!=null?p?g=!0:s[n]=!1:p&&(r.push(j),g=!0));if(i!==b){d||(s=r),a=a.replace(o.match[h],"");if(!g)return[];break}}if(a===q)if(g==null)m.error(a);else break;q=a}return s},m.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)};var n=m.getText=function(a){var b,c,d=a.nodeType,e="";if(d){if(d===1||d===9||d===11){if(typeof a.textContent=="string")return a.textContent;if(typeof a.innerText=="string")return a.innerText.replace(k,"");for(a=a.firstChild;a;a=a.nextSibling)e+=n(a)}else if(d===3||d===4)return a.nodeValue}else for(b=0;c=a[b];b++)c.nodeType!==8&&(e+=n(c));return e},o=m.selectors={order:["ID","NAME","TAG"],match:{ID:/#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,CLASS:/\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,NAME:/\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,ATTR:/\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(?:(['"])(.*?)\3|(#?(?:[\w\u00c0-\uFFFF\-]|\\.)*)|)|)\s*\]/,TAG:/^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\(\s*(even|odd|(?:[+\-]?\d+|(?:[+\-]?\d*)?n\s*(?:[+\-]\s*\d+)?))\s*\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,PSEUDO:/:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/},leftMatch:{},attrMap:{"class":"className","for":"htmlFor"},attrHandle:{href:function(a){return a.getAttribute("href")},type:function(a){return a.getAttribute("type")}},relative:{"+":function(a,b){var c=typeof b=="string",d=c&&!l.test(b),e=c&&!d;d&&(b=b.toLowerCase());for(var f=0,g=a.length,h;f<g;f++)if(h=a[f]){while((h=h.previousSibling)&&h.nodeType!==1);a[f]=e||h&&h.nodeName.toLowerCase()===b?h||!1:h===b}e&&m.filter(b,a,!0)},">":function(a,b){var c,d=typeof b=="string",e=0,f=a.length;if(d&&!l.test(b)){b=b.toLowerCase();for(;e<f;e++){c=a[e];if(c){var g=c.parentNode;a[e]=g.nodeName.toLowerCase()===b?g:!1}}}else{for(;e<f;e++)c=a[e],c&&(a[e]=d?c.parentNode:c.parentNode===b);d&&m.filter(b,a,!0)}},"":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("parentNode",b,f,a,d,c)},"~":function(a,b,c){var d,f=e++,g=x;typeof b=="string"&&!l.test(b)&&(b=b.toLowerCase(),d=b,g=w),g("previousSibling",b,f,a,d,c)}},find:{ID:function(a,b,c){if(typeof b.getElementById!="undefined"&&!c){var d=b.getElementById(a[1]);return d&&d.parentNode?[d]:[]}},NAME:function(a,b){if(typeof b.getElementsByName!="undefined"){var c=[],d=b.getElementsByName(a[1]);for(var e=0,f=d.length;e<f;e++)d[e].getAttribute("name")===a[1]&&c.push(d[e]);return c.length===0?null:c}},TAG:function(a,b){if(typeof b.getElementsByTagName!="undefined")return b.getElementsByTagName(a[1])}},preFilter:{CLASS:function(a,b,c,d,e,f){a=" "+a[1].replace(j,"")+" ";if(f)return a;for(var g=0,h;(h=b[g])!=null;g++)h&&(e^(h.className&&(" "+h.className+" ").replace(/[\t\n\r]/g," ").indexOf(a)>=0)?c||d.push(h):c&&(b[g]=!1));return!1},ID:function(a){return a[1].replace(j,"")},TAG:function(a,b){return a[1].replace(j,"").toLowerCase()},CHILD:function(a){if(a[1]==="nth"){a[2]||m.error(a[0]),a[2]=a[2].replace(/^\+|\s*/g,"");var b=/(-?)(\d*)(?:n([+\-]?\d*))?/.exec(a[2]==="even"&&"2n"||a[2]==="odd"&&"2n+1"||!/\D/.test(a[2])&&"0n+"+a[2]||a[2]);a[2]=b[1]+(b[2]||1)-0,a[3]=b[3]-0}else a[2]&&m.error(a[0]);a[0]=e++;return a},ATTR:function(a,b,c,d,e,f){var g=a[1]=a[1].replace(j,"");!f&&o.attrMap[g]&&(a[1]=o.attrMap[g]),a[4]=(a[4]||a[5]||"").replace(j,""),a[2]==="~="&&(a[4]=" "+a[4]+" ");return a},PSEUDO:function(b,c,d,e,f){if(b[1]==="not")if((a.exec(b[3])||"").length>1||/^\w/.test(b[3]))b[3]=m(b[3],null,null,c);else{var g=m.filter(b[3],c,d,!0^f);d||e.push.apply(e,g);return!1}else if(o.match.POS.test(b[0])||o.match.CHILD.test(b[0]))return!0;return b},POS:function(a){a.unshift(!0);return a}},filters:{enabled:function(a){return a.disabled===!1&&a.type!=="hidden"},disabled:function(a){return a.disabled===!0},checked:function(a){return a.checked===!0},selected:function(a){a.parentNode&&a.parentNode.selectedIndex;return a.selected===!0},parent:function(a){return!!a.firstChild},empty:function(a){return!a.firstChild},has:function(a,b,c){return!!m(c[3],a).length},header:function(a){return/h\d/i.test(a.nodeName)},text:function(a){var b=a.getAttribute("type"),c=a.type;return a.nodeName.toLowerCase()==="input"&&"text"===c&&(b===c||b===null)},radio:function(a){return a.nodeName.toLowerCase()==="input"&&"radio"===a.type},checkbox:function(a){return a.nodeName.toLowerCase()==="input"&&"checkbox"===a.type},file:function(a){return a.nodeName.toLowerCase()==="input"&&"file"===a.type},password:function(a){return a.nodeName.toLowerCase()==="input"&&"password"===a.type},submit:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"submit"===a.type},image:function(a){return a.nodeName.toLowerCase()==="input"&&"image"===a.type},reset:function(a){var b=a.nodeName.toLowerCase();return(b==="input"||b==="button")&&"reset"===a.type},button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&"button"===a.type||b==="button"},input:function(a){return/input|select|textarea|button/i.test(a.nodeName)},focus:function(a){return a===a.ownerDocument.activeElement}},setFilters:{first:function(a,b){return b===0},last:function(a,b,c,d){return b===d.length-1},even:function(a,b){return b%2===0},odd:function(a,b){return b%2===1},lt:function(a,b,c){return b<c[3]-0},gt:function(a,b,c){return b>c[3]-0},nth:function(a,b,c){return c[3]-0===b},eq:function(a,b,c){return c[3]-0===b}},filter:{PSEUDO:function(a,b,c,d){var e=b[1],f=o.filters[e];if(f)return f(a,c,b,d);if(e==="contains")return(a.textContent||a.innerText||n([a])||"").indexOf(b[3])>=0;if(e==="not"){var g=b[3];for(var h=0,i=g.length;h<i;h++)if(g[h]===a)return!1;return!0}m.error(e)},CHILD:function(a,b){var c,e,f,g,h,i,j,k=b[1],l=a;switch(k){case"only":case"first":while(l=l.previousSibling)if(l.nodeType===1)return!1;if(k==="first")return!0;l=a;case"last":while(l=l.nextSibling)if(l.nodeType===1)return!1;return!0;case"nth":c=b[2],e=b[3];if(c===1&&e===0)return!0;f=b[0],g=a.parentNode;if(g&&(g[d]!==f||!a.nodeIndex)){i=0;for(l=g.firstChild;l;l=l.nextSibling)l.nodeType===1&&(l.nodeIndex=++i);g[d]=f}j=a.nodeIndex-e;return c===0?j===0:j%c===0&&j/c>=0}},ID:function(a,b){return a.nodeType===1&&a.getAttribute("id")===b},TAG:function(a,b){return b==="*"&&a.nodeType===1||!!a.nodeName&&a.nodeName.toLowerCase()===b},CLASS:function(a,b){return(" "+(a.className||a.getAttribute("class"))+" ").indexOf(b)>-1},ATTR:function(a,b){var c=b[1],d=m.attr?m.attr(a,c):o.attrHandle[c]?o.attrHandle[c](a):a[c]!=null?a[c]:a.getAttribute(c),e=d+"",f=b[2],g=b[4];return d==null?f==="!=":!f&&m.attr?d!=null:f==="="?e===g:f==="*="?e.indexOf(g)>=0:f==="~="?(" "+e+" ").indexOf(g)>=0:g?f==="!="?e!==g:f==="^="?e.indexOf(g)===0:f==="$="?e.substr(e.length-g.length)===g:f==="|="?e===g||e.substr(0,g.length+1)===g+"-":!1:e&&d!==!1},POS:function(a,b,c,d){var e=b[2],f=o.setFilters[e];if(f)return f(a,c,b,d)}}},p=o.match.POS,q=function(a,b){return"\\"+(b-0+1)};for(var r in o.match)o.match[r]=new RegExp(o.match[r].source+/(?![^\[]*\])(?![^\(]*\))/.source),o.leftMatch[r]=new RegExp(/(^(?:.|\r|\n)*?)/.source+o.match[r].source.replace(/\\(\d+)/g,q));o.match.globalPOS=p;var s=function(a,b){a=Array.prototype.slice.call(a,0);if(b){b.push.apply(b,a);return b}return a};try{Array.prototype.slice.call(c.documentElement.childNodes,0)[0].nodeType}catch(t){s=function(a,b){var c=0,d=b||[];if(g.call(a)==="[object Array]")Array.prototype.push.apply(d,a);else if(typeof a.length=="number")for(var e=a.length;c<e;c++)d.push(a[c]);else for(;a[c];c++)d.push(a[c]);return d}}var u,v;c.documentElement.compareDocumentPosition?u=function(a,b){if(a===b){h=!0;return 0}if(!a.compareDocumentPosition||!b.compareDocumentPosition)return a.compareDocumentPosition?-1:1;return a.compareDocumentPosition(b)&4?-1:1}:(u=function(a,b){if(a===b){h=!0;return 0}if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,i=b.parentNode,j=g;if(g===i)return v(a,b);if(!g)return-1;if(!i)return 1;while(j)e.unshift(j),j=j.parentNode;j=i;while(j)f.unshift(j),j=j.parentNode;c=e.length,d=f.length;for(var k=0;k<c&&k<d;k++)if(e[k]!==f[k])return v(e[k],f[k]);return k===c?v(a,f[k],-1):v(e[k],b,1)},v=function(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}),function(){var a=c.createElement("div"),d="script"+(new Date).getTime(),e=c.documentElement;a.innerHTML="<a name='"+d+"'/>",e.insertBefore(a,e.firstChild),c.getElementById(d)&&(o.find.ID=function(a,c,d){if(typeof c.getElementById!="undefined"&&!d){var e=c.getElementById(a[1]);return e?e.id===a[1]||typeof e.getAttributeNode!="undefined"&&e.getAttributeNode("id").nodeValue===a[1]?[e]:b:[]}},o.filter.ID=function(a,b){var c=typeof a.getAttributeNode!="undefined"&&a.getAttributeNode("id");return a.nodeType===1&&c&&c.nodeValue===b}),e.removeChild(a),e=a=null}(),function(){var a=c.createElement("div");a.appendChild(c.createComment("")),a.getElementsByTagName("*").length>0&&(o.find.TAG=function(a,b){var c=b.getElementsByTagName(a[1]);if(a[1]==="*"){var d=[];for(var e=0;c[e];e++)c[e].nodeType===1&&d.push(c[e]);c=d}return c}),a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!="undefined"&&a.firstChild.getAttribute("href")!=="#"&&(o.attrHandle.href=function(a){return a.getAttribute("href",2)}),a=null}(),c.querySelectorAll&&function(){var a=m,b=c.createElement("div"),d="__sizzle__";b.innerHTML="<p class='TEST'></p>";if(!b.querySelectorAll||b.querySelectorAll(".TEST").length!==0){m=function(b,e,f,g){e=e||c;if(!g&&!m.isXML(e)){var h=/^(\w+$)|^\.([\w\-]+$)|^#([\w\-]+$)/.exec(b);if(h&&(e.nodeType===1||e.nodeType===9)){if(h[1])return s(e.getElementsByTagName(b),f);if(h[2]&&o.find.CLASS&&e.getElementsByClassName)return s(e.getElementsByClassName(h[2]),f)}if(e.nodeType===9){if(b==="body"&&e.body)return s([e.body],f);if(h&&h[3]){var i=e.getElementById(h[3]);if(!i||!i.parentNode)return s([],f);if(i.id===h[3])return s([i],f)}try{return s(e.querySelectorAll(b),f)}catch(j){}}else if(e.nodeType===1&&e.nodeName.toLowerCase()!=="object"){var k=e,l=e.getAttribute("id"),n=l||d,p=e.parentNode,q=/^\s*[+~]/.test(b);l?n=n.replace(/'/g,"\\$&"):e.setAttribute("id",n),q&&p&&(e=e.parentNode);try{if(!q||p)return s(e.querySelectorAll("[id='"+n+"'] "+b),f)}catch(r){}finally{l||k.removeAttribute("id")}}}return a(b,e,f,g)};for(var e in a)m[e]=a[e];b=null}}(),function(){var a=c.documentElement,b=a.matchesSelector||a.mozMatchesSelector||a.webkitMatchesSelector||a.msMatchesSelector;if(b){var d=!b.call(c.createElement("div"),"div"),e=!1;try{b.call(c.documentElement,"[test!='']:sizzle")}catch(f){e=!0}m.matchesSelector=function(a,c){c=c.replace(/\=\s*([^'"\]]*)\s*\]/g,"='$1']");if(!m.isXML(a))try{if(e||!o.match.PSEUDO.test(c)&&!/!=/.test(c)){var f=b.call(a,c);if(f||!d||a.document&&a.document.nodeType!==11)return f}}catch(g){}return m(c,null,null,[a]).length>0}}}(),function(){var a=c.createElement("div");a.innerHTML="<div class='test e'></div><div class='test'></div>";if(!!a.getElementsByClassName&&a.getElementsByClassName("e").length!==0){a.lastChild.className="e";if(a.getElementsByClassName("e").length===1)return;o.order.splice(1,0,"CLASS"),o.find.CLASS=function(a,b,c){if(typeof b.getElementsByClassName!="undefined"&&!c)return b.getElementsByClassName(a[1])},a=null}}(),c.documentElement.contains?m.contains=function(a,b){return a!==b&&(a.contains?a.contains(b):!0)}:c.documentElement.compareDocumentPosition?m.contains=function(a,b){return!!(a.compareDocumentPosition(b)&16)}:m.contains=function(){return!1},m.isXML=function(a){var b=(a?a.ownerDocument||a:0).documentElement;return b?b.nodeName!=="HTML":!1};var y=function(a,b,c){var d,e=[],f="",g=b.nodeType?[b]:b;while(d=o.match.PSEUDO.exec(a))f+=d[0],a=a.replace(o.match.PSEUDO,"");a=o.relative[a]?a+"*":a;for(var h=0,i=g.length;h<i;h++)m(a,g[h],e,c);return m.filter(f,e)};m.attr=f.attr,m.selectors.attrMap={},f.find=m,f.expr=m.selectors,f.expr[":"]=f.expr.filters,f.unique=m.uniqueSort,f.text=m.getText,f.isXMLDoc=m.isXML,f.contains=m.contains}();var L=/Until$/,M=/^(?:parents|prevUntil|prevAll)/,N=/,/,O=/^.[^:#\[\.,]*$/,P=Array.prototype.slice,Q=f.expr.match.globalPOS,R={children:!0,contents:!0,next:!0,prev:!0};f.fn.extend({find:function(a){var b=this,c,d;if(typeof a!="string")return f(a).filter(function(){for(c=0,d=b.length;c<d;c++)if(f.contains(b[c],this))return!0});var e=this.pushStack("","find",a),g,h,i;for(c=0,d=this.length;c<d;c++){g=e.length,f.find(a,this[c],e);if(c>0)for(h=g;h<e.length;h++)for(i=0;i<g;i++)if(e[i]===e[h]){e.splice(h--,1);break}}return e},has:function(a){var b=f(a);return this.filter(function(){for(var a=0,c=b.length;a<c;a++)if(f.contains(this,b[a]))return!0})},not:function(a){return this.pushStack(T(this,a,!1),"not",a)},filter:function(a){return this.pushStack(T(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?Q.test(a)?f(a,this.context).index(this[0])>=0:f.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c=[],d,e,g=this[0];if(f.isArray(a)){var h=1;while(g&&g.ownerDocument&&g!==b){for(d=0;d<a.length;d++)f(g).is(a[d])&&c.push({selector:a[d],elem:g,level:h});g=g.parentNode,h++}return c}var i=Q.test(a)||typeof a!="string"?f(a,b||this.context):0;for(d=0,e=this.length;d<e;d++){g=this[d];while(g){if(i?i.index(g)>-1:f.find.matchesSelector(g,a)){c.push(g);break}g=g.parentNode;if(!g||!g.ownerDocument||g===b||g.nodeType===11)break}}c=c.length>1?f.unique(c):c;return this.pushStack(c,"closest",a)},index:function(a){if(!a)return this[0]&&this[0].parentNode?this.prevAll().length:-1;if(typeof a=="string")return f.inArray(this[0],f(a));return f.inArray(a.jquery?a[0]:a,this)},add:function(a,b){var c=typeof a=="string"?f(a,b):f.makeArray(a&&a.nodeType?[a]:a),d=f.merge(this.get(),c);return this.pushStack(S(c[0])||S(d[0])?d:f.unique(d))},andSelf:function(){return this.add(this.prevObject)}}),f.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return f.dir(a,"parentNode")},parentsUntil:function(a,b,c){return f.dir(a,"parentNode",c)},next:function(a){return f.nth(a,2,"nextSibling")},prev:function(a){return f.nth(a,2,"previousSibling")},nextAll:function(a){return f.dir(a,"nextSibling")},prevAll:function(a){return f.dir(a,"previousSibling")},nextUntil:function(a,b,c){return f.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return f.dir(a,"previousSibling",c)},siblings:function(a){return f.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return f.sibling(a.firstChild)},contents:function(a){return f.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:f.makeArray(a.childNodes)}},function(a,b){f.fn[a]=function(c,d){var e=f.map(this,b,c);L.test(a)||(d=c),d&&typeof d=="string"&&(e=f.filter(d,e)),e=this.length>1&&!R[a]?f.unique(e):e,(this.length>1||N.test(d))&&M.test(a)&&(e=e.reverse());return this.pushStack(e,a,P.call(arguments).join(","))}}),f.extend({filter:function(a,b,c){c&&(a=":not("+a+")");return b.length===1?f.find.matchesSelector(b[0],a)?[b[0]]:[]:f.find.matches(a,b)},dir:function(a,c,d){var e=[],g=a[c];while(g&&g.nodeType!==9&&(d===b||g.nodeType!==1||!f(g).is(d)))g.nodeType===1&&e.push(g),g=g[c];return e},nth:function(a,b,c,d){b=b||1;var e=0;for(;a;a=a[c])if(a.nodeType===1&&++e===b)break;return a},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var V="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",W=/ jQuery\d+="(?:\d+|null)"/g,X=/^\s+/,Y=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/ig,Z=/<([\w:]+)/,$=/<tbody/i,_=/<|&#?\w+;/,ba=/<(?:script|style)/i,bb=/<(?:script|object|embed|option|style)/i,bc=new RegExp("<(?:"+V+")[\\s/>]","i"),bd=/checked\s*(?:[^=]|=\s*.checked.)/i,be=/\/(java|ecma)script/i,bf=/^\s*<!(?:\[CDATA\[|\-\-)/,bg={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bh=U(c);bg.optgroup=bg.option,bg.tbody=bg.tfoot=bg.colgroup=bg.caption=bg.thead,bg.th=bg.td,f.support.htmlSerialize||(bg._default=[1,"div<div>","</div>"]),f.fn.extend({text:function(a){return f.access(this,function(a){return a===b?f.text(this):this.empty().append((this[0]&&this[0].ownerDocument||c).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapAll(a.call(this,b))});if(this[0]){var b=f(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){if(f.isFunction(a))return this.each(function(b){f(this).wrapInner(a.call(this,b))});return this.each(function(){var b=f(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=f.isFunction(a);return this.each(function(c){f(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){f.nodeName(this,"body")||f(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=f
    .clean(arguments);a.push.apply(a,this.toArray());return this.pushStack(a,"before",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=this.pushStack(this,"after",arguments);a.push.apply(a,f.clean(arguments));return a}},remove:function(a,b){for(var c=0,d;(d=this[c])!=null;c++)if(!a||f.filter(a,[d]).length)!b&&d.nodeType===1&&(f.cleanData(d.getElementsByTagName("*")),f.cleanData([d])),d.parentNode&&d.parentNode.removeChild(d);return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++){b.nodeType===1&&f.cleanData(b.getElementsByTagName("*"));while(b.firstChild)b.removeChild(b.firstChild)}return this},clone:function(a,b){a=a==null?!1:a,b=b==null?a:b;return this.map(function(){return f.clone(this,a,b)})},html:function(a){return f.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(W,""):null;if(typeof a=="string"&&!ba.test(a)&&(f.support.leadingWhitespace||!X.test(a))&&!bg[(Z.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Y,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(f.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(g){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){if(this[0]&&this[0].parentNode){if(f.isFunction(a))return this.each(function(b){var c=f(this),d=c.html();c.replaceWith(a.call(this,b,d))});typeof a!="string"&&(a=f(a).detach());return this.each(function(){var b=this.nextSibling,c=this.parentNode;f(this).remove(),b?f(b).before(a):f(c).append(a)})}return this.length?this.pushStack(f(f.isFunction(a)?a():a),"replaceWith",a):this},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){var e,g,h,i,j=a[0],k=[];if(!f.support.checkClone&&arguments.length===3&&typeof j=="string"&&bd.test(j))return this.each(function(){f(this).domManip(a,c,d,!0)});if(f.isFunction(j))return this.each(function(e){var g=f(this);a[0]=j.call(this,e,c?g.html():b),g.domManip(a,c,d)});if(this[0]){i=j&&j.parentNode,f.support.parentNode&&i&&i.nodeType===11&&i.childNodes.length===this.length?e={fragment:i}:e=f.buildFragment(a,this,k),h=e.fragment,h.childNodes.length===1?g=h=h.firstChild:g=h.firstChild;if(g){c=c&&f.nodeName(g,"tr");for(var l=0,m=this.length,n=m-1;l<m;l++)d.call(c?bi(this[l],g):this[l],e.cacheable||m>1&&l<n?f.clone(h,!0,!0):h)}k.length&&f.each(k,function(a,b){b.src?f.ajax({type:"GET",global:!1,url:b.src,async:!1,dataType:"script"}):f.globalEval((b.text||b.textContent||b.innerHTML||"").replace(bf,"/*$0*/")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),f.buildFragment=function(a,b,d){var e,g,h,i,j=a[0];b&&b[0]&&(i=b[0].ownerDocument||b[0]),i.createDocumentFragment||(i=c),a.length===1&&typeof j=="string"&&j.length<512&&i===c&&j.charAt(0)==="<"&&!bb.test(j)&&(f.support.checkClone||!bd.test(j))&&(f.support.html5Clone||!bc.test(j))&&(g=!0,h=f.fragments[j],h&&h!==1&&(e=h)),e||(e=i.createDocumentFragment(),f.clean(a,i,e,d)),g&&(f.fragments[j]=h?e:1);return{fragment:e,cacheable:g}},f.fragments={},f.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){f.fn[a]=function(c){var d=[],e=f(c),g=this.length===1&&this[0].parentNode;if(g&&g.nodeType===11&&g.childNodes.length===1&&e.length===1){e[b](this[0]);return this}for(var h=0,i=e.length;h<i;h++){var j=(h>0?this.clone(!0):this).get();f(e[h])[b](j),d=d.concat(j)}return this.pushStack(d,a,e.selector)}}),f.extend({clone:function(a,b,c){var d,e,g,h=f.support.html5Clone||f.isXMLDoc(a)||!bc.test("<"+a.nodeName+">")?a.cloneNode(!0):bo(a);if((!f.support.noCloneEvent||!f.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!f.isXMLDoc(a)){bk(a,h),d=bl(a),e=bl(h);for(g=0;d[g];++g)e[g]&&bk(d[g],e[g])}if(b){bj(a,h);if(c){d=bl(a),e=bl(h);for(g=0;d[g];++g)bj(d[g],e[g])}}d=e=null;return h},clean:function(a,b,d,e){var g,h,i,j=[];b=b||c,typeof b.createElement=="undefined"&&(b=b.ownerDocument||b[0]&&b[0].ownerDocument||c);for(var k=0,l;(l=a[k])!=null;k++){typeof l=="number"&&(l+="");if(!l)continue;if(typeof l=="string")if(!_.test(l))l=b.createTextNode(l);else{l=l.replace(Y,"<$1></$2>");var m=(Z.exec(l)||["",""])[1].toLowerCase(),n=bg[m]||bg._default,o=n[0],p=b.createElement("div"),q=bh.childNodes,r;b===c?bh.appendChild(p):U(b).appendChild(p),p.innerHTML=n[1]+l+n[2];while(o--)p=p.lastChild;if(!f.support.tbody){var s=$.test(l),t=m==="table"&&!s?p.firstChild&&p.firstChild.childNodes:n[1]==="<table>"&&!s?p.childNodes:[];for(i=t.length-1;i>=0;--i)f.nodeName(t[i],"tbody")&&!t[i].childNodes.length&&t[i].parentNode.removeChild(t[i])}!f.support.leadingWhitespace&&X.test(l)&&p.insertBefore(b.createTextNode(X.exec(l)[0]),p.firstChild),l=p.childNodes,p&&(p.parentNode.removeChild(p),q.length>0&&(r=q[q.length-1],r&&r.parentNode&&r.parentNode.removeChild(r)))}var u;if(!f.support.appendChecked)if(l[0]&&typeof (u=l.length)=="number")for(i=0;i<u;i++)bn(l[i]);else bn(l);l.nodeType?j.push(l):j=f.merge(j,l)}if(d){g=function(a){return!a.type||be.test(a.type)};for(k=0;j[k];k++){h=j[k];if(e&&f.nodeName(h,"script")&&(!h.type||be.test(h.type)))e.push(h.parentNode?h.parentNode.removeChild(h):h);else{if(h.nodeType===1){var v=f.grep(h.getElementsByTagName("script"),g);j.splice.apply(j,[k+1,0].concat(v))}d.appendChild(h)}}}return j},cleanData:function(a){var b,c,d=f.cache,e=f.event.special,g=f.support.deleteExpando;for(var h=0,i;(i=a[h])!=null;h++){if(i.nodeName&&f.noData[i.nodeName.toLowerCase()])continue;c=i[f.expando];if(c){b=d[c];if(b&&b.events){for(var j in b.events)e[j]?f.event.remove(i,j):f.removeEvent(i,j,b.handle);b.handle&&(b.handle.elem=null)}g?delete i[f.expando]:i.removeAttribute&&i.removeAttribute(f.expando),delete d[c]}}}});var bp=/alpha\([^)]*\)/i,bq=/opacity=([^)]*)/,br=/([A-Z]|^ms)/g,bs=/^[\-+]?(?:\d*\.)?\d+$/i,bt=/^-?(?:\d*\.)?\d+(?!px)[^\d\s]+$/i,bu=/^([\-+])=([\-+.\de]+)/,bv=/^margin/,bw={position:"absolute",visibility:"hidden",display:"block"},bx=["Top","Right","Bottom","Left"],by,bz,bA;f.fn.css=function(a,c){return f.access(this,function(a,c,d){return d!==b?f.style(a,c,d):f.css(a,c)},a,c,arguments.length>1)},f.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=by(a,"opacity");return c===""?"1":c}return a.style.opacity}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":f.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!!a&&a.nodeType!==3&&a.nodeType!==8&&!!a.style){var g,h,i=f.camelCase(c),j=a.style,k=f.cssHooks[i];c=f.cssProps[i]||i;if(d===b){if(k&&"get"in k&&(g=k.get(a,!1,e))!==b)return g;return j[c]}h=typeof d,h==="string"&&(g=bu.exec(d))&&(d=+(g[1]+1)*+g[2]+parseFloat(f.css(a,c)),h="number");if(d==null||h==="number"&&isNaN(d))return;h==="number"&&!f.cssNumber[i]&&(d+="px");if(!k||!("set"in k)||(d=k.set(a,d))!==b)try{j[c]=d}catch(l){}}},css:function(a,c,d){var e,g;c=f.camelCase(c),g=f.cssHooks[c],c=f.cssProps[c]||c,c==="cssFloat"&&(c="float");if(g&&"get"in g&&(e=g.get(a,!0,d))!==b)return e;if(by)return by(a,c)},swap:function(a,b,c){var d={},e,f;for(f in b)d[f]=a.style[f],a.style[f]=b[f];e=c.call(a);for(f in b)a.style[f]=d[f];return e}}),f.curCSS=f.css,c.defaultView&&c.defaultView.getComputedStyle&&(bz=function(a,b){var c,d,e,g,h=a.style;b=b.replace(br,"-$1").toLowerCase(),(d=a.ownerDocument.defaultView)&&(e=d.getComputedStyle(a,null))&&(c=e.getPropertyValue(b),c===""&&!f.contains(a.ownerDocument.documentElement,a)&&(c=f.style(a,b))),!f.support.pixelMargin&&e&&bv.test(b)&&bt.test(c)&&(g=h.width,h.width=c,c=e.width,h.width=g);return c}),c.documentElement.currentStyle&&(bA=function(a,b){var c,d,e,f=a.currentStyle&&a.currentStyle[b],g=a.style;f==null&&g&&(e=g[b])&&(f=e),bt.test(f)&&(c=g.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),g.left=b==="fontSize"?"1em":f,f=g.pixelLeft+"px",g.left=c,d&&(a.runtimeStyle.left=d));return f===""?"auto":f}),by=bz||bA,f.each(["height","width"],function(a,b){f.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth!==0?bB(a,b,d):f.swap(a,bw,function(){return bB(a,b,d)})},set:function(a,b){return bs.test(b)?b+"px":b}}}),f.support.opacity||(f.cssHooks.opacity={get:function(a,b){return bq.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?parseFloat(RegExp.$1)/100+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=f.isNumeric(b)?"alpha(opacity="+b*100+")":"",g=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&f.trim(g.replace(bp,""))===""){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bp.test(g)?g.replace(bp,e):g+" "+e}}),f(function(){f.support.reliableMarginRight||(f.cssHooks.marginRight={get:function(a,b){return f.swap(a,{display:"inline-block"},function(){return b?by(a,"margin-right"):a.style.marginRight})}})}),f.expr&&f.expr.filters&&(f.expr.filters.hidden=function(a){var b=a.offsetWidth,c=a.offsetHeight;return b===0&&c===0||!f.support.reliableHiddenOffsets&&(a.style&&a.style.display||f.css(a,"display"))==="none"},f.expr.filters.visible=function(a){return!f.expr.filters.hidden(a)}),f.each({margin:"",padding:"",border:"Width"},function(a,b){f.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bx[d]+b]=e[d]||e[d-2]||e[0];return f}}});var bC=/%20/g,bD=/\[\]$/,bE=/\r?\n/g,bF=/#.*$/,bG=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,bH=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,bI=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,bJ=/^(?:GET|HEAD)$/,bK=/^\/\//,bL=/\?/,bM=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,bN=/^(?:select|textarea)/i,bO=/\s+/,bP=/([?&])_=[^&]*/,bQ=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/,bR=f.fn.load,bS={},bT={},bU,bV,bW=["*/"]+["*"];try{bU=e.href}catch(bX){bU=c.createElement("a"),bU.href="",bU=bU.href}bV=bQ.exec(bU.toLowerCase())||[],f.fn.extend({load:function(a,c,d){if(typeof a!="string"&&bR)return bR.apply(this,arguments);if(!this.length)return this;var e=a.indexOf(" ");if(e>=0){var g=a.slice(e,a.length);a=a.slice(0,e)}var h="GET";c&&(f.isFunction(c)?(d=c,c=b):typeof c=="object"&&(c=f.param(c,f.ajaxSettings.traditional),h="POST"));var i=this;f.ajax({url:a,type:h,dataType:"html",data:c,complete:function(a,b,c){c=a.responseText,a.isResolved()&&(a.done(function(a){c=a}),i.html(g?f("<div>").append(c.replace(bM,"")).find(g):c)),d&&i.each(d,[c,b,a])}});return this},serialize:function(){return f.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?f.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||bN.test(this.nodeName)||bH.test(this.type))}).map(function(a,b){var c=f(this).val();return c==null?null:f.isArray(c)?f.map(c,function(a,c){return{name:b.name,value:a.replace(bE,"\r\n")}}):{name:b.name,value:c.replace(bE,"\r\n")}}).get()}}),f.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){f.fn[b]=function(a){return this.on(b,a)}}),f.each(["get","post"],function(a,c){f[c]=function(a,d,e,g){f.isFunction(d)&&(g=g||e,e=d,d=b);return f.ajax({type:c,url:a,data:d,success:e,dataType:g})}}),f.extend({getScript:function(a,c){return f.get(a,b,c,"script")},getJSON:function(a,b,c){return f.get(a,b,c,"json")},ajaxSetup:function(a,b){b?b$(a,f.ajaxSettings):(b=a,a=f.ajaxSettings),b$(a,b);return a},ajaxSettings:{url:bU,isLocal:bI.test(bV[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":bW},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":f.parseJSON,"text xml":f.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bY(bS),ajaxTransport:bY(bT),ajax:function(a,c){function w(a,c,l,m){if(s!==2){s=2,q&&clearTimeout(q),p=b,n=m||"",v.readyState=a>0?4:0;var o,r,u,w=c,x=l?ca(d,v,l):b,y,z;if(a>=200&&a<300||a===304){if(d.ifModified){if(y=v.getResponseHeader("Last-Modified"))f.lastModified[k]=y;if(z=v.getResponseHeader("Etag"))f.etag[k]=z}if(a===304)w="notmodified",o=!0;else try{r=cb(d,x),w="success",o=!0}catch(A){w="parsererror",u=A}}else{u=w;if(!w||a)w="error",a<0&&(a=0)}v.status=a,v.statusText=""+(c||w),o?h.resolveWith(e,[r,w,v]):h.rejectWith(e,[v,w,u]),v.statusCode(j),j=b,t&&g.trigger("ajax"+(o?"Success":"Error"),[v,d,o?r:u]),i.fireWith(e,[v,w]),t&&(g.trigger("ajaxComplete",[v,d]),--f.active||f.event.trigger("ajaxStop"))}}typeof a=="object"&&(c=a,a=b),c=c||{};var d=f.ajaxSetup({},c),e=d.context||d,g=e!==d&&(e.nodeType||e instanceof f)?f(e):f.event,h=f.Deferred(),i=f.Callbacks("once memory"),j=d.statusCode||{},k,l={},m={},n,o,p,q,r,s=0,t,u,v={readyState:0,setRequestHeader:function(a,b){if(!s){var c=a.toLowerCase();a=m[c]=m[c]||a,l[a]=b}return this},getAllResponseHeaders:function(){return s===2?n:null},getResponseHeader:function(a){var c;if(s===2){if(!o){o={};while(c=bG.exec(n))o[c[1].toLowerCase()]=c[2]}c=o[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){s||(d.mimeType=a);return this},abort:function(a){a=a||"abort",p&&p.abort(a),w(0,a);return this}};h.promise(v),v.success=v.done,v.error=v.fail,v.complete=i.add,v.statusCode=function(a){if(a){var b;if(s<2)for(b in a)j[b]=[j[b],a[b]];else b=a[v.status],v.then(b,b)}return this},d.url=((a||d.url)+"").replace(bF,"").replace(bK,bV[1]+"//"),d.dataTypes=f.trim(d.dataType||"*").toLowerCase().split(bO),d.crossDomain==null&&(r=bQ.exec(d.url.toLowerCase()),d.crossDomain=!(!r||r[1]==bV[1]&&r[2]==bV[2]&&(r[3]||(r[1]==="http:"?80:443))==(bV[3]||(bV[1]==="http:"?80:443)))),d.data&&d.processData&&typeof d.data!="string"&&(d.data=f.param(d.data,d.traditional)),bZ(bS,d,c,v);if(s===2)return!1;t=d.global,d.type=d.type.toUpperCase(),d.hasContent=!bJ.test(d.type),t&&f.active++===0&&f.event.trigger("ajaxStart");if(!d.hasContent){d.data&&(d.url+=(bL.test(d.url)?"&":"?")+d.data,delete d.data),k=d.url;if(d.cache===!1){var x=f.now(),y=d.url.replace(bP,"$1_="+x);d.url=y+(y===d.url?(bL.test(d.url)?"&":"?")+"_="+x:"")}}(d.data&&d.hasContent&&d.contentType!==!1||c.contentType)&&v.setRequestHeader("Content-Type",d.contentType),d.ifModified&&(k=k||d.url,f.lastModified[k]&&v.setRequestHeader("If-Modified-Since",f.lastModified[k]),f.etag[k]&&v.setRequestHeader("If-None-Match",f.etag[k])),v.setRequestHeader("Accept",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(d.dataTypes[0]!=="*"?", "+bW+"; q=0.01":""):d.accepts["*"]);for(u in d.headers)v.setRequestHeader(u,d.headers[u]);if(d.beforeSend&&(d.beforeSend.call(e,v,d)===!1||s===2)){v.abort();return!1}for(u in{success:1,error:1,complete:1})v[u](d[u]);p=bZ(bT,d,c,v);if(!p)w(-1,"No Transport");else{v.readyState=1,t&&g.trigger("ajaxSend",[v,d]),d.async&&d.timeout>0&&(q=setTimeout(function(){v.abort("timeout")},d.timeout));try{s=1,p.send(l,w)}catch(z){if(s<2)w(-1,z);else throw z}}return v},param:function(a,c){var d=[],e=function(a,b){b=f.isFunction(b)?b():b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=f.ajaxSettings.traditional);if(f.isArray(a)||a.jquery&&!f.isPlainObject(a))f.each(a,function(){e(this.name,this.value)});else for(var g in a)b_(g,a[g],c,e);return d.join("&").replace(bC,"+")}}),f.extend({active:0,lastModified:{},etag:{}});var cc=f.now(),cd=/(\=)\?(&|$)|\?\?/i;f.ajaxSetup({jsonp:"callback",jsonpCallback:function(){return f.expando+"_"+cc++}}),f.ajaxPrefilter("json jsonp",function(b,c,d){var e=typeof b.data=="string"&&/^application\/x\-www\-form\-urlencoded/.test(b.contentType);if(b.dataTypes[0]==="jsonp"||b.jsonp!==!1&&(cd.test(b.url)||e&&cd.test(b.data))){var g,h=b.jsonpCallback=f.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,i=a[h],j=b.url,k=b.data,l="$1"+h+"$2";b.jsonp!==!1&&(j=j.replace(cd,l),b.url===j&&(e&&(k=k.replace(cd,l)),b.data===k&&(j+=(/\?/.test(j)?"&":"?")+b.jsonp+"="+h))),b.url=j,b.data=k,a[h]=function(a){g=[a]},d.always(function(){a[h]=i,g&&f.isFunction(i)&&a[h](g[0])}),b.converters["script json"]=function(){g||f.error(h+" was not called");return g[0]},b.dataTypes[0]="json";return"script"}}),f.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){f.globalEval(a);return a}}}),f.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),f.ajaxTransport("script",function(a){if(a.crossDomain){var d,e=c.head||c.getElementsByTagName("head")[0]||c.documentElement;return{send:function(f,g){d=c.createElement("script"),d.async="async",a.scriptCharset&&(d.charset=a.scriptCharset),d.src=a.url,d.onload=d.onreadystatechange=function(a,c){if(c||!d.readyState||/loaded|complete/.test(d.readyState))d.onload=d.onreadystatechange=null,e&&d.parentNode&&e.removeChild(d),d=b,c||g(200,"success")},e.insertBefore(d,e.firstChild)},abort:function(){d&&d.onload(0,1)}}}});var ce=a.ActiveXObject?function(){for(var a in cg)cg[a](0,1)}:!1,cf=0,cg;f.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&ch()||ci()}:ch,function(a){f.extend(f.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(f.ajaxSettings.xhr()),f.support.ajax&&f.ajaxTransport(function(c){if(!c.crossDomain||f.support.cors){var d;return{send:function(e,g){var h=c.xhr(),i,j;c.username?h.open(c.type,c.url,c.async,c.username,c.password):h.open(c.type,c.url,c.async);if(c.xhrFields)for(j in c.xhrFields)h[j]=c.xhrFields[j];c.mimeType&&h.overrideMimeType&&h.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(j in e)h.setRequestHeader(j,e[j])}catch(k){}h.send(c.hasContent&&c.data||null),d=function(a,e){var j,k,l,m,n;try{if(d&&(e||h.readyState===4)){d=b,i&&(h.onreadystatechange=f.noop,ce&&delete cg[i]);if(e)h.readyState!==4&&h.abort();else{j=h.status,l=h.getAllResponseHeaders(),m={},n=h.responseXML,n&&n.documentElement&&(m.xml=n);try{m.text=h.responseText}catch(a){}try{k=h.statusText}catch(o){k=""}!j&&c.isLocal&&!c.crossDomain?j=m.text?200:404:j===1223&&(j=204)}}}catch(p){e||g(-1,p)}m&&g(j,k,m,l)},!c.async||h.readyState===4?d():(i=++cf,ce&&(cg||(cg={},f(a).unload(ce)),cg[i]=d),h.onreadystatechange=d)},abort:function(){d&&d(0,1)}}}});var cj={},ck,cl,cm=/^(?:toggle|show|hide)$/,cn=/^([+\-]=)?([\d+.\-]+)([a-z%]*)$/i,co,cp=[["height","marginTop","marginBottom","paddingTop","paddingBottom"],["width","marginLeft","marginRight","paddingLeft","paddingRight"],["opacity"]],cq;f.fn.extend({show:function(a,b,c){var d,e;if(a||a===0)return this.animate(ct("show",3),a,b,c);for(var g=0,h=this.length;g<h;g++)d=this[g],d.style&&(e=d.style.display,!f._data(d,"olddisplay")&&e==="none"&&(e=d.style.display=""),(e===""&&f.css(d,"display")==="none"||!f.contains(d.ownerDocument.documentElement,d))&&f._data(d,"olddisplay",cu(d.nodeName)));for(g=0;g<h;g++){d=this[g];if(d.style){e=d.style.display;if(e===""||e==="none")d.style.display=f._data(d,"olddisplay")||""}}return this},hide:function(a,b,c){if(a||a===0)return this.animate(ct("hide",3),a,b,c);var d,e,g=0,h=this.length;for(;g<h;g++)d=this[g],d.style&&(e=f.css(d,"display"),e!=="none"&&!f._data(d,"olddisplay")&&f._data(d,"olddisplay",e));for(g=0;g<h;g++)this[g].style&&(this[g].style.display="none");return this},_toggle:f.fn.toggle,toggle:function(a,b,c){var d=typeof a=="boolean";f.isFunction(a)&&f.isFunction(b)?this._toggle.apply(this,arguments):a==null||d?this.each(function(){var b=d?a:f(this).is(":hidden");f(this)[b?"show":"hide"]()}):this.animate(ct("toggle",3),a,b,c);return this},fadeTo:function(a,b,c,d){return this.filter(":hidden").css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){function g(){e.queue===!1&&f._mark(this);var b=f.extend({},e),c=this.nodeType===1,d=c&&f(this).is(":hidden"),g,h,i,j,k,l,m,n,o,p,q;b.animatedProperties={};for(i in a){g=f.camelCase(i),i!==g&&(a[g]=a[i],delete a[i]);if((k=f.cssHooks[g])&&"expand"in k){l=k.expand(a[g]),delete a[g];for(i in l)i in a||(a[i]=l[i])}}for(g in a){h=a[g],f.isArray(h)?(b.animatedProperties[g]=h[1],h=a[g]=h[0]):b.animatedProperties[g]=b.specialEasing&&b.specialEasing[g]||b.easing||"swing";if(h==="hide"&&d||h==="show"&&!d)return b.complete.call(this);c&&(g==="height"||g==="width")&&(b.overflow=[this.style.overflow,this.style.overflowX,this.style.overflowY],f.css(this,"display")==="inline"&&f.css(this,"float")==="none"&&(!f.support.inlineBlockNeedsLayout||cu(this.nodeName)==="inline"?this.style.display="inline-block":this.style.zoom=1))}b.overflow!=null&&(this.style.overflow="hidden");for(i in a)j=new f.fx(this,b,i),h=a[i],cm.test(h)?(q=f._data(this,"toggle"+i)||(h==="toggle"?d?"show":"hide":0),q?(f._data(this,"toggle"+i,q==="show"?"hide":"show"),j[q]()):j[h]()):(m=cn.exec(h),n=j.cur(),m?(o=parseFloat(m[2]),p=m[3]||(f.cssNumber[i]?"":"px"),p!=="px"&&(f.style(this,i,(o||1)+p),n=(o||1)/j.cur()*n,f.style(this,i,n+p)),m[1]&&(o=(m[1]==="-="?-1:1)*o+n),j.custom(n,o,p)):j.custom(n,h,""));return!0}var e=f.speed(b,c,d);if(f.isEmptyObject(a))return this.each(e.complete,[!1]);a=f.extend({},a);return e.queue===!1?this.each(g):this.queue(e.queue,g)},stop:function(a,c,d){typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]);return this.each(function(){function h(a,b,c){var e=b[c];f.removeData(a,c,!0),e.stop(d)}var b,c=!1,e=f.timers,g=f._data(this);d||f._unmark(!0,this);if(a==null)for(b in g)g[b]&&g[b].stop&&b.indexOf(".run")===b.length-4&&h(this,g,b);else g[b=a+".run"]&&g[b].stop&&h(this,g,b);for(b=e.length;b--;)e[b].elem===this&&(a==null||e[b].queue===a)&&(d?e[b](!0):e[b].saveState(),c=!0,e.splice(b,1));(!d||!c)&&f.dequeue(this,a)})}}),f.each({slideDown:ct("show",1),slideUp:ct("hide",1),slideToggle:ct("toggle",1),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){f.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),f.extend({speed:function(a,b,c){var d=a&&typeof a=="object"?f.extend({},a):{complete:c||!c&&b||f.isFunction(a)&&a,duration:a,easing:c&&b||b&&!f.isFunction(b)&&b};d.duration=f.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in f.fx.speeds?f.fx.speeds[d.duration]:f.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";d.old=d.complete,d.complete=function(a){f.isFunction(d.old)&&d.old.call(this),d.queue?f.dequeue(this,d.queue):a!==!1&&f._unmark(this)};return d},easing:{linear:function(a){return a},swing:function(a){return-Math.cos(a*Math.PI)/2+.5}},timers:[],fx:function(a,b,c){this.options=b,this.elem=a,this.prop=c,b.orig=b.orig||{}}}),f.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this),(f.fx.step[this.prop]||f.fx.step._default)(this)},cur:function(){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];var a,b=f.css(this.elem,this.prop);return isNaN(a=parseFloat(b))?!b||b==="auto"?0:b:a},custom:function(a,c,d){function h(a){return e.step(a)}var e=this,g=f.fx;this.startTime=cq||cr(),this.end=c,this.now=this.start=a,this.pos=this.state=0,this.unit=d||this.unit||(f.cssNumber[this.prop]?"":"px"),h.queue=this.options.queue,h.elem=this.elem,h.saveState=function(){f._data(e.elem,"fxshow"+e.prop)===b&&(e.options.hide?f._data(e.elem,"fxshow"+e.prop,e.start):e.options.show&&f._data(e.elem,"fxshow"+e.prop,e.end))},h()&&f.timers.push(h)&&!co&&(co=setInterval(g.tick,g.interval))},show:function(){var a=f._data(this.elem,"fxshow"+this.prop);this.options.orig[this.prop]=a||f.style(this.elem,this.prop),this.options.show=!0,a!==b?this.custom(this.cur(),a):this.custom(this.prop==="width"||this.prop==="height"?1:0,this.cur()),f(this.elem).show()},hide:function(){this.options.orig[this.prop]=f._data(this.elem,"fxshow"+this.prop)||f.style(this.elem,this.prop),this.options.hide=!0,this.custom(this.cur(),0)},step:function(a){var b,c,d,e=cq||cr(),g=!0,h=this.elem,i=this.options;if(a||e>=i.duration+this.startTime){this.now=this.end,this.pos=this.state=1,this.update(),i.animatedProperties[this.prop]=!0;for(b in i.animatedProperties)i.animatedProperties[b]!==!0&&(g=!1);if(g){i.overflow!=null&&!f.support.shrinkWrapBlocks&&f.each(["","X","Y"],function(a,b){h.style["overflow"+b]=i.overflow[a]}),i.hide&&f(h).hide();if(i.hide||i.show)for(b in i.animatedProperties)f.style(h,b,i.orig[b]),f.removeData(h,"fxshow"+b,!0),f.removeData(h,"toggle"+b,!0);d=i.complete,d&&(i.complete=!1,d.call(h))}return!1}i.duration==Infinity?this.now=e:(c=e-this.startTime,this.state=c/i.duration,this.pos=f.easing[i.animatedProperties[this.prop]](this.state,c,0,1,i.duration),this.now=this.start+(this.end-this.start)*this.pos),this.update();return!0}},f.extend(f.fx,{tick:function(){var a,b=f.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||f.fx.stop()},interval:13,stop:function(){clearInterval(co),co=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){f.style(a.elem,"opacity",a.now)},_default:function(a){a.elem.style&&a.elem.style[a.prop]!=null?a.elem.style[a.prop]=a.now+a.unit:a.elem[a.prop]=a.now}}}),f.each(cp.concat.apply([],cp),function(a,b){b.indexOf("margin")&&(f.fx.step[b]=function(a){f.style(a.elem,b,Math.max(0,a.now)+a.unit)})}),f.expr&&f.expr.filters&&(f.expr.filters.animated=function(a){return f.grep(f.timers,function(b){return a===b.elem}).length});var cv,cw=/^t(?:able|d|h)$/i,cx=/^(?:body|html)$/i;"getBoundingClientRect"in c.documentElement?cv=function(a,b,c,d){try{d=a.getBoundingClientRect()}catch(e){}if(!d||!f.contains(c,a))return d?{top:d.top,left:d.left}:{top:0,left:0};var g=b.body,h=cy(b),i=c.clientTop||g.clientTop||0,j=c.clientLeft||g.clientLeft||0,k=h.pageYOffset||f.support.boxModel&&c.scrollTop||g.scrollTop,l=h.pageXOffset||f.support.boxModel&&c.scrollLeft||g.scrollLeft,m=d.top+k-i,n=d.left+l-j;return{top:m,left:n}}:cv=function(a,b,c){var d,e=a.offsetParent,g=a,h=b.body,i=b.defaultView,j=i?i.getComputedStyle(a,null):a.currentStyle,k=a.offsetTop,l=a.offsetLeft;while((a=a.parentNode)&&a!==h&&a!==c){if(f.support.fixedPosition&&j.position==="fixed")break;d=i?i.getComputedStyle(a,null):a.currentStyle,k-=a.scrollTop,l-=a.scrollLeft,a===e&&(k+=a.offsetTop,l+=a.offsetLeft,f.support.doesNotAddBorder&&(!f.support.doesAddBorderForTableAndCells||!cw.test(a.nodeName))&&(k+=parseFloat(d.borderTopWidth)||0,l+=parseFloat(d.borderLeftWidth)||0),g=e,e=a.offsetParent),f.support.subtractsBorderForOverflowNotVisible&&d.overflow!=="visible"&&(k+=parseFloat(d.borderTopWidth)||0,l+=parseFloat(d.borderLeftWidth)||0),j=d}if(j.position==="relative"||j.position==="static")k+=h.offsetTop,l+=h.offsetLeft;f.support.fixedPosition&&j.position==="fixed"&&(k+=Math.max(c.scrollTop,h.scrollTop),l+=Math.max(c.scrollLeft,h.scrollLeft));return{top:k,left:l}},f.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){f.offset.setOffset(this,a,b)});var c=this[0],d=c&&c.ownerDocument;if(!d)return null;if(c===d.body)return f.offset.bodyOffset(c);return cv(c,d,d.documentElement)},f.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;f.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(f.css(a,"marginTop"))||0,c+=parseFloat(f.css(a,"marginLeft"))||0);return{top:b,left:c}},setOffset:function(a,b,c){var d=f.css(a,"position");d==="static"&&(a.style.position="relative");var e=f(a),g=e.offset(),h=f.css(a,"top"),i=f.css(a,"left"),j=(d==="absolute"||d==="fixed")&&f.inArray("auto",[h,i])>-1,k={},l={},m,n;j?(l=e.position(),m=l.top,n=l.left):(m=parseFloat(h)||0,n=parseFloat(i)||0),f.isFunction(b)&&(b=b.call(a,c,g)),b.top!=null&&(k.top=b.top-g.top+m),b.left!=null&&(k.left=b.left-g.left+n),"using"in b?b.using.call(a,k):e.css(k)}},f.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),c=this.offset(),d=cx.test(b[0].nodeName)?{top:0,left:0}:b.offset();c.top-=parseFloat(f.css(a,"marginTop"))||0,c.left-=parseFloat(f.css(a,"marginLeft"))||0,d.top+=parseFloat(f.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(f.css(b[0],"borderLeftWidth"))||0;return{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||c.body;while(a&&!cx.test(a.nodeName)&&f.css(a,"position")==="static")a=a.offsetParent;return a})}}),f.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);f.fn[a]=function(e){return f.access(this,function(a,e,g){var h=cy(a);if(g===b)return h?c in h?h[c]:f.support.boxModel&&h.document.documentElement[e]||h.document.body[e]:a[e];h?h.scrollTo(d?f(h).scrollLeft():g,d?g:f(h).scrollTop()):a[e]=g},a,e,arguments.length,null)}}),f.each({Height:"height",Width:"width"},function(a,c){var d="client"+a,e="scroll"+a,g="offset"+a;f.fn["inner"+a]=function(){var a=this[0];return a?a.style?parseFloat(f.css(a,c,"padding")):this[c]():null},f.fn["outer"+a]=function(a){var b=this[0];return b?b.style?parseFloat(f.css(b,c,a?"margin":"border")):this[c]():null},f.fn[c]=function(a){return f.access(this,function(a,c,h){var i,j,k,l;if(f.isWindow(a)){i=a.document,j=i.documentElement[d];return f.support.boxModel&&j||i.body&&i.body[d]||j}if(a.nodeType===9){i=a.documentElement;if(i[d]>=i[e])return i[d];return Math.max(a.body[e],i[e],a.body[g],i[g])}if(h===b){k=f.css(a,c),l=parseFloat(k);return f.isNumeric(l)?l:k}f(a).css(c,h)},c,a,arguments.length,null)}}),a.jQuery=a.$=f,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return f})})(window);
/*! jQuery UI - v1.9.0 - 2012-10-05
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.position.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.effect.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js, jquery.ui.menu.js, jquery.ui.progressbar.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.slider.js, jquery.ui.sortable.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js
* Copyright (c) 2012 jQuery Foundation and other contributors Licensed MIT */

(function(e,t){function i(t,n){var r,i,o,u=t.nodeName.toLowerCase();return"area"===u?(r=t.parentNode,i=r.name,!t.href||!i||r.nodeName.toLowerCase()!=="map"?!1:(o=e("img[usemap=#"+i+"]")[0],!!o&&s(o))):(/input|select|textarea|button|object/.test(u)?!t.disabled:"a"===u?t.href||n:n)&&s(t)}function s(t){return!e(t).parents().andSelf().filter(function(){return e.css(this,"visibility")==="hidden"||e.expr.filters.hidden(this)}).length}var n=0,r=/^ui-id-\d+$/;e.ui=e.ui||{};if(e.ui.version)return;e.extend(e.ui,{version:"1.9.0",keyCode:{BACKSPACE:8,COMMA:188,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,LEFT:37,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SPACE:32,TAB:9,UP:38}}),e.fn.extend({_focus:e.fn.focus,focus:function(t,n){return typeof t=="number"?this.each(function(){var r=this;setTimeout(function(){e(r).focus(),n&&n.call(r)},t)}):this._focus.apply(this,arguments)},scrollParent:function(){var t;return e.browser.msie&&/(static|relative)/.test(this.css("position"))||/absolute/.test(this.css("position"))?t=this.parents().filter(function(){return/(relative|absolute|fixed)/.test(e.css(this,"position"))&&/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0):t=this.parents().filter(function(){return/(auto|scroll)/.test(e.css(this,"overflow")+e.css(this,"overflow-y")+e.css(this,"overflow-x"))}).eq(0),/fixed/.test(this.css("position"))||!t.length?e(document):t},zIndex:function(n){if(n!==t)return this.css("zIndex",n);if(this.length){var r=e(this[0]),i,s;while(r.length&&r[0]!==document){i=r.css("position");if(i==="absolute"||i==="relative"||i==="fixed"){s=parseInt(r.css("zIndex"),10);if(!isNaN(s)&&s!==0)return s}r=r.parent()}}return 0},uniqueId:function(){return this.each(function(){this.id||(this.id="ui-id-"+ ++n)})},removeUniqueId:function(){return this.each(function(){r.test(this.id)&&e(this).removeAttr("id")})}}),e("<a>").outerWidth(1).jquery||e.each(["Width","Height"],function(n,r){function u(t,n,r,s){return e.each(i,function(){n-=parseFloat(e.css(t,"padding"+this))||0,r&&(n-=parseFloat(e.css(t,"border"+this+"Width"))||0),s&&(n-=parseFloat(e.css(t,"margin"+this))||0)}),n}var i=r==="Width"?["Left","Right"]:["Top","Bottom"],s=r.toLowerCase(),o={innerWidth:e.fn.innerWidth,innerHeight:e.fn.innerHeight,outerWidth:e.fn.outerWidth,outerHeight:e.fn.outerHeight};e.fn["inner"+r]=function(n){return n===t?o["inner"+r].call(this):this.each(function(){e(this).css(s,u(this,n)+"px")})},e.fn["outer"+r]=function(t,n){return typeof t!="number"?o["outer"+r].call(this,t):this.each(function(){e(this).css(s,u(this,t,!0,n)+"px")})}}),e.extend(e.expr[":"],{data:e.expr.createPseudo?e.expr.createPseudo(function(t){return function(n){return!!e.data(n,t)}}):function(t,n,r){return!!e.data(t,r[3])},focusable:function(t){return i(t,!isNaN(e.attr(t,"tabindex")))},tabbable:function(t){var n=e.attr(t,"tabindex"),r=isNaN(n);return(r||n>=0)&&i(t,!r)}}),e(function(){var t=document.body,n=t.appendChild(n=document.createElement("div"));n.offsetHeight,e.extend(n.style,{minHeight:"100px",height:"auto",padding:0,borderWidth:0}),e.support.minHeight=n.offsetHeight===100,e.support.selectstart="onselectstart"in n,t.removeChild(n).style.display="none"}),e.fn.extend({disableSelection:function(){return this.bind((e.support.selectstart?"selectstart":"mousedown")+".ui-disableSelection",function(e){e.preventDefault()})},enableSelection:function(){return this.unbind(".ui-disableSelection")}}),e.extend(e.ui,{plugin:{add:function(t,n,r){var i,s=e.ui[t].prototype;for(i in r)s.plugins[i]=s.plugins[i]||[],s.plugins[i].push([n,r[i]])},call:function(e,t,n){var r,i=e.plugins[t];if(!i||!e.element[0].parentNode||e.element[0].parentNode.nodeType===11)return;for(r=0;r<i.length;r++)e.options[i[r][0]]&&i[r][1].apply(e.element,n)}},contains:e.contains,hasScroll:function(t,n){if(e(t).css("overflow")==="hidden")return!1;var r=n&&n==="left"?"scrollLeft":"scrollTop",i=!1;return t[r]>0?!0:(t[r]=1,i=t[r]>0,t[r]=0,i)},isOverAxis:function(e,t,n){return e>t&&e<t+n},isOver:function(t,n,r,i,s,o){return e.ui.isOverAxis(t,r,s)&&e.ui.isOverAxis(n,i,o)}})})(jQuery);(function(e,t){var n=0,r=Array.prototype.slice,i=e.cleanData;e.cleanData=function(t){for(var n=0,r;(r=t[n])!=null;n++)try{e(r).triggerHandler("remove")}catch(s){}i(t)},e.widget=function(t,n,r){var i,s,o,u,a=t.split(".")[0];t=t.split(".")[1],i=a+"-"+t,r||(r=n,n=e.Widget),e.expr[":"][i.toLowerCase()]=function(t){return!!e.data(t,i)},e[a]=e[a]||{},s=e[a][t],o=e[a][t]=function(e,t){if(!this._createWidget)return new o(e,t);arguments.length&&this._createWidget(e,t)},e.extend(o,s,{version:r.version,_proto:e.extend({},r),_childConstructors:[]}),u=new n,u.options=e.widget.extend({},u.options),e.each(r,function(t,i){e.isFunction(i)&&(r[t]=function(){var e=function(){return n.prototype[t].apply(this,arguments)},r=function(e){return n.prototype[t].apply(this,e)};return function(){var t=this._super,n=this._superApply,s;return this._super=e,this._superApply=r,s=i.apply(this,arguments),this._super=t,this._superApply=n,s}}())}),o.prototype=e.widget.extend(u,{widgetEventPrefix:t},r,{constructor:o,namespace:a,widgetName:t,widgetBaseClass:i,widgetFullName:i}),s?(e.each(s._childConstructors,function(t,n){var r=n.prototype;e.widget(r.namespace+"."+r.widgetName,o,n._proto)}),delete s._childConstructors):n._childConstructors.push(o),e.widget.bridge(t,o)},e.widget.extend=function(n){var i=r.call(arguments,1),s=0,o=i.length,u,a;for(;s<o;s++)for(u in i[s])a=i[s][u],i[s].hasOwnProperty(u)&&a!==t&&(n[u]=e.isPlainObject(a)?e.widget.extend({},n[u],a):a);return n},e.widget.bridge=function(n,i){var s=i.prototype.widgetFullName;e.fn[n]=function(o){var u=typeof o=="string",a=r.call(arguments,1),f=this;return o=!u&&a.length?e.widget.extend.apply(null,[o].concat(a)):o,u?this.each(function(){var r,i=e.data(this,s);if(!i)return e.error("cannot call methods on "+n+" prior to initialization; "+"attempted to call method '"+o+"'");if(!e.isFunction(i[o])||o.charAt(0)==="_")return e.error("no such method '"+o+"' for "+n+" widget instance");r=i[o].apply(i,a);if(r!==i&&r!==t)return f=r&&r.jquery?f.pushStack(r.get()):r,!1}):this.each(function(){var t=e.data(this,s);t?t.option(o||{})._init():new i(o,this)}),f}},e.Widget=function(e,t){},e.Widget._childConstructors=[],e.Widget.prototype={widgetName:"widget",widgetEventPrefix:"",defaultElement:"<div>",options:{disabled:!1,create:null},_createWidget:function(t,r){r=e(r||this.defaultElement||this)[0],this.element=e(r),this.uuid=n++,this.eventNamespace="."+this.widgetName+this.uuid,this.options=e.widget.extend({},this.options,this._getCreateOptions(),t),this.bindings=e(),this.hoverable=e(),this.focusable=e(),r!==this&&(e.data(r,this.widgetName,this),e.data(r,this.widgetFullName,this),this._on({remove:"destroy"}),this.document=e(r.style?r.ownerDocument:r.document||r),this.window=e(this.document[0].defaultView||this.document[0].parentWindow)),this._create(),this._trigger("create",null,this._getCreateEventData()),this._init()},_getCreateOptions:e.noop,_getCreateEventData:e.noop,_create:e.noop,_init:e.noop,destroy:function(){this._destroy(),this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData(e.camelCase(this.widgetFullName)),this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName+"-disabled "+"ui-state-disabled"),this.bindings.unbind(this.eventNamespace),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")},_destroy:e.noop,widget:function(){return this.element},option:function(n,r){var i=n,s,o,u;if(arguments.length===0)return e.widget.extend({},this.options);if(typeof n=="string"){i={},s=n.split("."),n=s.shift();if(s.length){o=i[n]=e.widget.extend({},this.options[n]);for(u=0;u<s.length-1;u++)o[s[u]]=o[s[u]]||{},o=o[s[u]];n=s.pop();if(r===t)return o[n]===t?null:o[n];o[n]=r}else{if(r===t)return this.options[n]===t?null:this.options[n];i[n]=r}}return this._setOptions(i),this},_setOptions:function(e){var t;for(t in e)this._setOption(t,e[t]);return this},_setOption:function(e,t){return this.options[e]=t,e==="disabled"&&(this.widget().toggleClass(this.widgetFullName+"-disabled ui-state-disabled",!!t).attr("aria-disabled",t),this.hoverable.removeClass("ui-state-hover"),this.focusable.removeClass("ui-state-focus")),this},enable:function(){return this._setOption("disabled",!1)},disable:function(){return this._setOption("disabled",!0)},_on:function(t,n){n?(t=e(t),this.bindings=this.bindings.add(t)):(n=t,t=this.element);var r=this;e.each(n,function(n,i){function s(){if(r.options.disabled===!0||e(this).hasClass("ui-state-disabled"))return;return(typeof i=="string"?r[i]:i).apply(r,arguments)}typeof i!="string"&&(s.guid=i.guid=i.guid||s.guid||e.guid++);var o=n.match(/^(\w+)\s*(.*)$/),u=o[1]+r.eventNamespace,a=o[2];a?r.widget().delegate(a,u,s):t.bind(u,s)})},_off:function(e,t){t=(t||"").split(" ").join(this.eventNamespace+" ")+this.eventNamespace,e.unbind(t).undelegate(t)},_delay:function(e,t){function n(){return(typeof e=="string"?r[e]:e).apply(r,arguments)}var r=this;return setTimeout(n,t||0)},_hoverable:function(t){this.hoverable=this.hoverable.add(t),this._on(t,{mouseenter:function(t){e(t.currentTarget).addClass("ui-state-hover")},mouseleave:function(t){e(t.currentTarget).removeClass("ui-state-hover")}})},_focusable:function(t){this.focusable=this.focusable.add(t),this._on(t,{focusin:function(t){e(t.currentTarget).addClass("ui-state-focus")},focusout:function(t){e(t.currentTarget).removeClass("ui-state-focus")}})},_trigger:function(t,n,r){var i,s,o=this.options[t];r=r||{},n=e.Event(n),n.type=(t===this.widgetEventPrefix?t:this.widgetEventPrefix+t).toLowerCase(),n.target=this.element[0],s=n.originalEvent;if(s)for(i in s)i in n||(n[i]=s[i]);return this.element.trigger(n,r),!(e.isFunction(o)&&o.apply(this.element[0],[n].concat(r))===!1||n.isDefaultPrevented())}},e.each({show:"fadeIn",hide:"fadeOut"},function(t,n){e.Widget.prototype["_"+t]=function(r,i,s){typeof i=="string"&&(i={effect:i});var o,u=i?i===!0||typeof i=="number"?n:i.effect||n:t;i=i||{},typeof i=="number"&&(i={duration:i}),o=!e.isEmptyObject(i),i.complete=s,i.delay&&r.delay(i.delay),o&&e.effects&&(e.effects.effect[u]||e.uiBackCompat!==!1&&e.effects[u])?r[t](i):u!==t&&r[u]?r[u](i.duration,i.easing,s):r.queue(function(n){e(this)[t](),s&&s.call(r[0]),n()})}}),e.uiBackCompat!==!1&&(e.Widget.prototype._getCreateOptions=function(){return e.metadata&&e.metadata.get(this.element[0])[this.widgetName]})})(jQuery);(function(e,t){var n=!1;e(document).mouseup(function(e){n=!1}),e.widget("ui.mouse",{version:"1.9.0",options:{cancel:"input,textarea,button,select,option",distance:1,delay:0},_mouseInit:function(){var t=this;this.element.bind("mousedown."+this.widgetName,function(e){return t._mouseDown(e)}).bind("click."+this.widgetName,function(n){if(!0===e.data(n.target,t.widgetName+".preventClickEvent"))return e.removeData(n.target,t.widgetName+".preventClickEvent"),n.stopImmediatePropagation(),!1}),this.started=!1},_mouseDestroy:function(){this.element.unbind("."+this.widgetName),this._mouseMoveDelegate&&e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate)},_mouseDown:function(t){if(n)return;this._mouseStarted&&this._mouseUp(t),this._mouseDownEvent=t;var r=this,i=t.which===1,s=typeof this.options.cancel=="string"&&t.target.nodeName?e(t.target).closest(this.options.cancel).length:!1;if(!i||s||!this._mouseCapture(t))return!0;this.mouseDelayMet=!this.options.delay,this.mouseDelayMet||(this._mouseDelayTimer=setTimeout(function(){r.mouseDelayMet=!0},this.options.delay));if(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)){this._mouseStarted=this._mouseStart(t)!==!1;if(!this._mouseStarted)return t.preventDefault(),!0}return!0===e.data(t.target,this.widgetName+".preventClickEvent")&&e.removeData(t.target,this.widgetName+".preventClickEvent"),this._mouseMoveDelegate=function(e){return r._mouseMove(e)},this._mouseUpDelegate=function(e){return r._mouseUp(e)},e(document).bind("mousemove."+this.widgetName,this._mouseMoveDelegate).bind("mouseup."+this.widgetName,this._mouseUpDelegate),t.preventDefault(),n=!0,!0},_mouseMove:function(t){return!e.browser.msie||document.documentMode>=9||!!t.button?this._mouseStarted?(this._mouseDrag(t),t.preventDefault()):(this._mouseDistanceMet(t)&&this._mouseDelayMet(t)&&(this._mouseStarted=this._mouseStart(this._mouseDownEvent,t)!==!1,this._mouseStarted?this._mouseDrag(t):this._mouseUp(t)),!this._mouseStarted):this._mouseUp(t)},_mouseUp:function(t){return e(document).unbind("mousemove."+this.widgetName,this._mouseMoveDelegate).unbind("mouseup."+this.widgetName,this._mouseUpDelegate),this._mouseStarted&&(this._mouseStarted=!1,t.target===this._mouseDownEvent.target&&e.data(t.target,this.widgetName+".preventClickEvent",!0),this._mouseStop(t)),!1},_mouseDistanceMet:function(e){return Math.max(Math.abs(this._mouseDownEvent.pageX-e.pageX),Math.abs(this._mouseDownEvent.pageY-e.pageY))>=this.options.distance},_mouseDelayMet:function(e){return this.mouseDelayMet},_mouseStart:function(e){},_mouseDrag:function(e){},_mouseStop:function(e){},_mouseCapture:function(e){return!0}})})(jQuery);(function(e,t){function h(e,t,n){return[parseInt(e[0],10)*(l.test(e[0])?t/100:1),parseInt(e[1],10)*(l.test(e[1])?n/100:1)]}function p(t,n){return parseInt(e.css(t,n),10)||0}e.ui=e.ui||{};var n,r=Math.max,i=Math.abs,s=Math.round,o=/left|center|right/,u=/top|center|bottom/,a=/[\+\-]\d+%?/,f=/^\w+/,l=/%$/,c=e.fn.position;e.position={scrollbarWidth:function(){if(n!==t)return n;var r,i,s=e("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"),o=s.children()[0];return e("body").append(s),r=o.offsetWidth,s.css("overflow","scroll"),i=o.offsetWidth,r===i&&(i=s[0].clientWidth),s.remove(),n=r-i},getScrollInfo:function(t){var n=t.isWindow?"":t.element.css("overflow-x"),r=t.isWindow?"":t.element.css("overflow-y"),i=n==="scroll"||n==="auto"&&t.width<t.element[0].scrollWidth,s=r==="scroll"||r==="auto"&&t.height<t.element[0].scrollHeight;return{width:i?e.position.scrollbarWidth():0,height:s?e.position.scrollbarWidth():0}},getWithinInfo:function(t){var n=e(t||window),r=e.isWindow(n[0]);return{element:n,isWindow:r,offset:n.offset()||{left:0,top:0},scrollLeft:n.scrollLeft(),scrollTop:n.scrollTop(),width:r?n.width():n.outerWidth(),height:r?n.height():n.outerHeight()}}},e.fn.position=function(t){if(!t||!t.of)return c.apply(this,arguments);t=e.extend({},t);var n,l,d,v,m,g=e(t.of),y=e.position.getWithinInfo(t.within),b=e.position.getScrollInfo(y),w=g[0],E=(t.collision||"flip").split(" "),S={};return w.nodeType===9?(l=g.width(),d=g.height(),v={top:0,left:0}):e.isWindow(w)?(l=g.width(),d=g.height(),v={top:g.scrollTop(),left:g.scrollLeft()}):w.preventDefault?(t.at="left top",l=d=0,v={top:w.pageY,left:w.pageX}):(l=g.outerWidth(),d=g.outerHeight(),v=g.offset()),m=e.extend({},v),e.each(["my","at"],function(){var e=(t[this]||"").split(" "),n,r;e.length===1&&(e=o.test(e[0])?e.concat(["center"]):u.test(e[0])?["center"].concat(e):["center","center"]),e[0]=o.test(e[0])?e[0]:"center",e[1]=u.test(e[1])?e[1]:"center",n=a.exec(e[0]),r=a.exec(e[1]),S[this]=[n?n[0]:0,r?r[0]:0],t[this]=[f.exec(e[0])[0],f.exec(e[1])[0]]}),E.length===1&&(E[1]=E[0]),t.at[0]==="right"?m.left+=l:t.at[0]==="center"&&(m.left+=l/2),t.at[1]==="bottom"?m.top+=d:t.at[1]==="center"&&(m.top+=d/2),n=h(S.at,l,d),m.left+=n[0],m.top+=n[1],this.each(function(){var o,u,a=e(this),f=a.outerWidth(),c=a.outerHeight(),w=p(this,"marginLeft"),x=p(this,"marginTop"),T=f+w+p(this,"marginRight")+b.width,N=c+x+p(this,"marginBottom")+b.height,C=e.extend({},m),k=h(S.my,a.outerWidth(),a.outerHeight());t.my[0]==="right"?C.left-=f:t.my[0]==="center"&&(C.left-=f/2),t.my[1]==="bottom"?C.top-=c:t.my[1]==="center"&&(C.top-=c/2),C.left+=k[0],C.top+=k[1],e.support.offsetFractions||(C.left=s(C.left),C.top=s(C.top)),o={marginLeft:w,marginTop:x},e.each(["left","top"],function(r,i){e.ui.position[E[r]]&&e.ui.position[E[r]][i](C,{targetWidth:l,targetHeight:d,elemWidth:f,elemHeight:c,collisionPosition:o,collisionWidth:T,collisionHeight:N,offset:[n[0]+k[0],n[1]+k[1]],my:t.my,at:t.at,within:y,elem:a})}),e.fn.bgiframe&&a.bgiframe(),t.using&&(u=function(e){var n=v.left-C.left,s=n+l-f,o=v.top-C.top,u=o+d-c,h={target:{element:g,left:v.left,top:v.top,width:l,height:d},element:{element:a,left:C.left,top:C.top,width:f,height:c},horizontal:s<0?"left":n>0?"right":"center",vertical:u<0?"top":o>0?"bottom":"middle"};l<f&&i(n+s)<l&&(h.horizontal="center"),d<c&&i(o+u)<d&&(h.vertical="middle"),r(i(n),i(s))>r(i(o),i(u))?h.important="horizontal":h.important="vertical",t.using.call(this,e,h)}),a.offset(e.extend(C,{using:u}))})},e.ui.position={fit:{left:function(e,t){var n=t.within,i=n.isWindow?n.scrollLeft:n.offset.left,s=n.width,o=e.left-t.collisionPosition.marginLeft,u=i-o,a=o+t.collisionWidth-s-i,f;t.collisionWidth>s?u>0&&a<=0?(f=e.left+u+t.collisionWidth-s-i,e.left+=u-f):a>0&&u<=0?e.left=i:u>a?e.left=i+s-t.collisionWidth:e.left=i:u>0?e.left+=u:a>0?e.left-=a:e.left=r(e.left-o,e.left)},top:function(e,t){var n=t.within,i=n.isWindow?n.scrollTop:n.offset.top,s=t.within.height,o=e.top-t.collisionPosition.marginTop,u=i-o,a=o+t.collisionHeight-s-i,f;t.collisionHeight>s?u>0&&a<=0?(f=e.top+u+t.collisionHeight-s-i,e.top+=u-f):a>0&&u<=0?e.top=i:u>a?e.top=i+s-t.collisionHeight:e.top=i:u>0?e.top+=u:a>0?e.top-=a:e.top=r(e.top-o,e.top)}},flip:{left:function(e,t){var n=t.within,r=n.offset.left+n.scrollLeft,s=n.width,o=n.isWindow?n.scrollLeft:n.offset.left,u=e.left-t.collisionPosition.marginLeft,a=u-o,f=u+t.collisionWidth-s-o,l=t.my[0]==="left"?-t.elemWidth:t.my[0]==="right"?t.elemWidth:0,c=t.at[0]==="left"?t.targetWidth:t.at[0]==="right"?-t.targetWidth:0,h=-2*t.offset[0],p,d;if(a<0){p=e.left+l+c+h+t.collisionWidth-s-r;if(p<0||p<i(a))e.left+=l+c+h}else if(f>0){d=e.left-t.collisionPosition.marginLeft+l+c+h-o;if(d>0||i(d)<f)e.left+=l+c+h}},top:function(e,t){var n=t.within,r=n.offset.top+n.scrollTop,s=n.height,o=n.isWindow?n.scrollTop:n.offset.top,u=e.top-t.collisionPosition.marginTop,a=u-o,f=u+t.collisionHeight-s-o,l=t.my[1]==="top",c=l?-t.elemHeight:t.my[1]==="bottom"?t.elemHeight:0,h=t.at[1]==="top"?t.targetHeight:t.at[1]==="bottom"?-t.targetHeight:0,p=-2*t.offset[1],d,v;a<0?(v=e.top+c+h+p+t.collisionHeight-s-r,e.top+c+h+p>a&&(v<0||v<i(a))&&(e.top+=c+h+p)):f>0&&(d=e.top-t.collisionPosition.marginTop+c+h+p-o,e.top+c+h+p>f&&(d>0||i(d)<f)&&(e.top+=c+h+p))}},flipfit:{left:function(){e.ui.position.flip.left.apply(this,arguments),e.ui.position.fit.left.apply(this,arguments)},top:function(){e.ui.position.flip.top.apply(this,arguments),e.ui.position.fit.top.apply(this,arguments)}}},function(){var t,n,r,i,s,o=document.getElementsByTagName("body")[0],u=document.createElement("div");t=document.createElement(o?"div":"body"),r={visibility:"hidden",width:0,height:0,border:0,margin:0,background:"none"},o&&e.extend(r,{position:"absolute",left:"-1000px",top:"-1000px"});for(s in r)t.style[s]=r[s];t.appendChild(u),n=o||document.documentElement,n.insertBefore(t,n.firstChild),u.style.cssText="position: absolute; left: 10.7432222px;",i=e(u).offset().left,e.support.offsetFractions=i>10&&i<11,t.innerHTML="",n.removeChild(t)}(),e.uiBackCompat!==!1&&function(e){var n=e.fn.position;e.fn.position=function(r){if(!r||!r.offset)return n.call(this,r);var i=r.offset.split(" "),s=r.at.split(" ");return i.length===1&&(i[1]=i[0]),/^\d/.test(i[0])&&(i[0]="+"+i[0]),/^\d/.test(i[1])&&(i[1]="+"+i[1]),s.length===1&&(/left|center|right/.test(s[0])?s[1]="center":(s[1]=s[0],s[0]="center")),n.call(this,e.extend(r,{at:s[0]+i[0]+" "+s[1]+i[1],offset:t}))}}(jQuery)})(jQuery);(function(e,t){var n=0,r={},i={};r.height=r.paddingTop=r.paddingBottom=r.borderTopWidth=r.borderBottomWidth="hide",i.height=i.paddingTop=i.paddingBottom=i.borderTopWidth=i.borderBottomWidth="show",e.widget("ui.accordion",{version:"1.9.0",options:{active:0,animate:{},collapsible:!1,event:"click",header:"> li > :first-child,> :not(li):even",heightStyle:"auto",icons:{activeHeader:"ui-icon-triangle-1-s",header:"ui-icon-triangle-1-e"},activate:null,beforeActivate:null},_create:function(){var t=this.accordionId="ui-accordion-"+(this.element.attr("id")||++n),r=this.options;this.prevShow=this.prevHide=e(),this.element.addClass("ui-accordion ui-widget ui-helper-reset"),this.headers=this.element.find(r.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"),this._hoverable(this.headers),this._focusable(this.headers),this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").hide(),!r.collapsible&&r.active===!1&&(r.active=0),r.active<0&&(r.active+=this.headers.length),this.active=this._findActive(r.active).addClass("ui-accordion-header-active ui-state-active").toggleClass("ui-corner-all ui-corner-top"),this.active.next().addClass("ui-accordion-content-active").show(),this._createIcons(),this.originalHeight=this.element[0].style.height,this.refresh(),this.element.attr("role","tablist"),this.headers.attr("role","tab").each(function(n){var r=e(this),i=r.attr("id"),s=r.next(),o=s.attr("id");i||(i=t+"-header-"+n,r.attr("id",i)),o||(o=t+"-panel-"+n,s.attr("id",o)),r.attr("aria-controls",o),s.attr("aria-labelledby",i)}).next().attr("role","tabpanel"),this.headers.not(this.active).attr({"aria-selected":"false",tabIndex:-1}).next().attr({"aria-expanded":"false","aria-hidden":"true"}).hide(),this.active.length?this.active.attr({"aria-selected":"true",tabIndex:0}).next().attr({"aria-expanded":"true","aria-hidden":"false"}):this.headers.eq(0).attr("tabIndex",0),this._on(this.headers,{keydown:"_keydown"}),this._on(this.headers.next(),{keydown:"_panelKeyDown"}),this._setupEvents(r.event)},_getCreateEventData:function(){return{header:this.active,content:this.active.length?this.active.next():e()}},_createIcons:function(){var t=this.options.icons;t&&(e("<span>").addClass("ui-accordion-header-icon ui-icon "+t.header).prependTo(this.headers),this.active.children(".ui-accordion-header-icon").removeClass(t.header).addClass(t.activeHeader),this.headers.addClass("ui-accordion-icons"))},_destroyIcons:function(){this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()},_destroy:function(){var e;this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role"),this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),this._destroyIcons(),e=this.headers.next().css("display","").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function(){/^ui-accordion/.test(this.id)&&this.removeAttribute("id")}),this.options.heightStyle!=="content"&&(this.element.css("height",this.originalHeight),e.css("height",""))},_setOption:function(e,t){if(e==="active"){this._activate(t);return}e==="event"&&(this.options.event&&this._off(this.headers,this.options.event),this._setupEvents(t)),this._super(e,t),e==="collapsible"&&!t&&this.options.active===!1&&this._activate(0),e==="icons"&&(this._destroyIcons(),t&&this._createIcons()),e==="disabled"&&this.headers.add(this.headers.next()).toggleClass("ui-state-disabled",!!t)},_keydown:function(t){if(t.altKey||t.ctrlKey)return;var n=e.ui.keyCode,r=this.headers.length,i=this.headers.index(t.target),s=!1;switch(t.keyCode){case n.RIGHT:case n.DOWN:s=this.headers[(i+1)%r];break;case n.LEFT:case n.UP:s=this.headers[(i-1+r)%r];break;case n.SPACE:case n.ENTER:this._eventHandler(t);break;case n.HOME:s=this.headers[0];break;case n.END:s=this.headers[r-1]}s&&(e(t.target).attr("tabIndex",-1),e(s).attr("tabIndex",0),s.focus(),t.preventDefault())},_panelKeyDown:function(t){t.keyCode===e.ui.keyCode.UP&&t.ctrlKey&&e(t.currentTarget).prev().focus()},refresh:function(){var t,n,r=this.options.heightStyle,i=this.element.parent();this.element.css("height",this.originalHeight),r==="fill"?(e.support.minHeight||(n=i.css("overflow"),i.css("overflow","hidden")),t=i.height(),this.element.siblings(":visible").each(function(){var n=e(this),r=n.css("position");if(r==="absolute"||r==="fixed")return;t-=n.outerHeight(!0)}),n&&i.css("overflow",n),this.headers.each(function(){t-=e(this).outerHeight(!0)}),this.headers.next().each(function(){e(this).height(Math.max(0,t-e(this).innerHeight()+e(this).height()))}).css("overflow","auto")):r==="auto"&&(t=0,this.headers.next().each(function(){t=Math.max(t,e(this).height("").height())}).height(t)),r!=="content"&&this.element.height(this.element.height())},_activate:function(t){var n=this._findActive(t)[0];if(n===this.active[0])return;n=n||this.active[0],this._eventHandler({target:n,currentTarget:n,preventDefault:e.noop})},_findActive:function(t){return typeof t=="number"?this.headers.eq(t):e()},_setupEvents:function(t){var n={};if(!t)return;e.each(t.split(" "),function(e,t){n[t]="_eventHandler"}),this._on(this.headers,n)},_eventHandler:function(t){var n=this.options,r=this.active,i=e(t.currentTarget),s=i[0]===r[0],o=s&&n.collapsible,u=o?e():i.next(),a=r.next(),f={oldHeader:r,oldPanel:a,newHeader:o?e():i,newPanel:u};t.preventDefault();if(s&&!n.collapsible||this._trigger("beforeActivate",t,f)===!1)return;n.active=o?!1:this.headers.index(i),this.active=s?e():i,this._toggle(f),r.removeClass("ui-accordion-header-active ui-state-active"),n.icons&&r.children(".ui-accordion-header-icon").removeClass(n.icons.activeHeader).addClass(n.icons.header),s||(i.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"),n.icons&&i.children(".ui-accordion-header-icon").removeClass(n.icons.header).addClass(n.icons.activeHeader),i.next().addClass("ui-accordion-content-active"))},_toggle:function(t){var n=t.newPanel,r=this.prevShow.length?this.prevShow:t.oldPanel;this.prevShow.add(this.prevHide).stop(!0,!0),this.prevShow=n,this.prevHide=r,this.options.animate?this._animate(n,r,t):(r.hide(),n.show(),this._toggleComplete(t)),r.attr({"aria-expanded":"false","aria-hidden":"true"}),r.prev().attr("aria-selected","false"),n.length&&r.length?r.prev().attr("tabIndex",-1):n.length&&this.headers.filter(function(){return e(this).attr("tabIndex")===0}).attr("tabIndex",-1),n.attr({"aria-expanded":"true","aria-hidden":"false"}).prev().attr({"aria-selected":"true",tabIndex:0})},_animate:function(e,t,n){var s,o,u,a=this,f=0,l=e.length&&(!t.length||e.index()<t.index()),c=this.options.animate||{},h=l&&c.down||c,p=function(){a._toggleComplete(n)};typeof h=="number"&&(u=h),typeof h=="string"&&(o=h),o=o||h.easing||c.easing,u=u||h.duration||c.duration;if(!t.length)return e.animate(i,u,o,p);if(!e.length)return t.animate(r,u,o,p);s=e.show().outerHeight(),t.animate(r,{duration:u,easing:o,step:function(e,t){t.now=Math.round(e)}}),e.hide().animate(i,{duration:u,easing:o,complete:p,step:function(e,n){n.now=Math.round(e),n.prop!=="height"?f+=n.now:a.options.heightStyle!=="content"&&(n.now=Math.round(s-t.outerHeight()-f),f=0)}})},_toggleComplete:function(e){var t=e.oldPanel;t.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all"),t.length&&(t.parent()[0].className=t.parent()[0].className),this._trigger("activate",null,e)}}),e.uiBackCompat!==!1&&(function(e,t){e.extend(t.options,{navigation:!1,navigationFilter:function(){return this.href.toLowerCase()===location.href.toLowerCase()}});var n=t._create;t._create=function(){if(this.options.navigation){var t=this,r=this.element.find(this.options.header),i=r.next(),s=r.add(i).find("a").filter(this.options.navigationFilter)[0];s&&r.add(i).each(function(n){if(e.contains(this,s))return t.options.active=Math.floor(n/2),!1})}n.call(this)}}(jQuery,jQuery.ui.accordion.prototype),function(e,t){e.extend(t.options,{heightStyle:null,autoHeight:!0,clearStyle:!1,fillSpace:!1});var n=t._create,r=t._setOption;e.extend(t,{_create:function(){this.options.heightStyle=this.options.heightStyle||this._mergeHeightStyle(),n.call(this)},_setOption:function(e,t){if(e==="autoHeight"||e==="clearStyle"||e==="fillSpace")this.options.heightStyle=this._mergeHeightStyle();r.apply(this,arguments)},_mergeHeightStyle:function(){var e=this.options;if(e.fillSpace)return"fill";if(e.clearStyle)return"content";if(e.autoHeight)return"auto"}})}(jQuery,jQuery.ui.accordion.prototype),function(e,t){e.extend(t.options.icons,{activeHeader:null,headerSelected:"ui-icon-triangle-1-s"});var n=t._createIcons;t._createIcons=function(){this.options.icons&&(this.options.icons.activeHeader=this.options.icons.activeHeader||this.options.icons.headerSelected),n.call(this)}}(jQuery,jQuery.ui.accordion.prototype),function(e,t){t.activate=t._activate;var n=t._findActive;t._findActive=function(e){return e===-1&&(e=!1),e&&typeof e!="number"&&(e=this.headers.index(this.headers.filter(e)),e===-1&&(e=!1)),n.call(this,e)}}(jQuery,jQuery.ui.accordion.prototype),jQuery.ui.accordion.prototype.resize=jQuery.ui.accordion.prototype.refresh,function(e,t){e.extend(t.options,{change:null,changestart:null});var n=t._trigger;t._trigger=function(e,t,r){var i=n.apply(this,arguments);return i?(e==="beforeActivate"?i=n.call(this,"changestart",t,{oldHeader:r.oldHeader,oldContent:r.oldPanel,newHeader:r.newHeader,newContent:r.newPanel}):e==="activate"&&(i=n.call(this,"change",t,{oldHeader:r.oldHeader,oldContent:r.oldPanel,newHeader:r.newHeader,newContent:r.newPanel})),i):!1}}(jQuery,jQuery.ui.accordion.prototype),function(e,t){e.extend(t.options,{animate:null,animated:"slide"});var n=t._create;t._create=function(){var e=this.options;e.animate===null&&(e.animated?e.animated==="slide"?e.animate=300:e.animated==="bounceslide"?e.animate={duration:200,down:{easing:"easeOutBounce",duration:1e3}}:e.animate=e.animated:e.animate=!1),n.call(this)}}(jQuery,jQuery.ui.accordion.prototype))})(jQuery);(function(e,t){var n=0;e.widget("ui.autocomplete",{version:"1.9.0",defaultElement:"<input>",options:{appendTo:"body",autoFocus:!1,delay:300,minLength:1,position:{my:"left top",at:"left bottom",collision:"none"},source:null,change:null,close:null,focus:null,open:null,response:null,search:null,select:null},pending:0,_create:function(){var t,n,r;this.isMultiLine=this._isMultiLine(),this.valueMethod=this.element[this.element.is("input,textarea")?"val":"text"],this.isNewMenu=!0,this.element.addClass("ui-autocomplete-input").attr("autocomplete","off"),this._on({keydown:function(i){if(this.element.prop("readOnly")){t=!0,r=!0,n=!0;return}t=!1,r=!1,n=!1;var s=e.ui.keyCode;switch(i.keyCode){case s.PAGE_UP:t=!0,this._move("previousPage",i);break;case s.PAGE_DOWN:t=!0,this._move("nextPage",i);break;case s.UP:t=!0,this._keyEvent("previous",i);break;case s.DOWN:t=!0,this._keyEvent("next",i);break;case s.ENTER:case s.NUMPAD_ENTER:this.menu.active&&(t=!0,i.preventDefault(),this.menu.select(i));break;case s.TAB:this.menu.active&&this.menu.select(i);break;case s.ESCAPE:this.menu.element.is(":visible")&&(this._value(this.term),this.close(i),i.preventDefault());break;default:n=!0,this._searchTimeout(i)}},keypress:function(r){if(t){t=!1,r.preventDefault();return}if(n)return;var i=e.ui.keyCode;switch(r.keyCode){case i.PAGE_UP:this._move("previousPage",r);break;case i.PAGE_DOWN:this._move("nextPage",r);break;case i.UP:this._keyEvent("previous",r);break;case i.DOWN:this._keyEvent("next",r)}},input:function(e){if(r){r=!1,e.preventDefault();return}this._searchTimeout(e)},focus:function(){this.selectedItem=null,this.previous=this._value()},blur:function(e){if(this.cancelBlur){delete this.cancelBlur;return}clearTimeout(this.searching),this.close(e),this._change(e)}}),this._initSource(),this.menu=e("<ul>").addClass("ui-autocomplete").appendTo(this.document.find(this.options.appendTo||"body")[0]).menu({input:e(),role:null}).zIndex(this.element.zIndex()+1).hide().data("menu"),this._on(this.menu.element,{mousedown:function(t){t.preventDefault(),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur});var n=this.menu.element[0];e(t.target).closest(".ui-menu-item").length||this._delay(function(){var t=this;this.document.one("mousedown",function(r){r.target!==t.element[0]&&r.target!==n&&!e.contains(n,r.target)&&t.close()})})},menufocus:function(t,n){if(this.isNewMenu){this.isNewMenu=!1;if(t.originalEvent&&/^mouse/.test(t.originalEvent.type)){this.menu.blur(),this.document.one("mousemove",function(){e(t.target).trigger(t.originalEvent)});return}}var r=n.item.data("ui-autocomplete-item")||n.item.data("item.autocomplete");!1!==this._trigger("focus",t,{item:r})?t.originalEvent&&/^key/.test(t.originalEvent.type)&&this._value(r.value):this.liveRegion.text(r.value)},menuselect:function(e,t){var n=t.item.data("ui-autocomplete-item")||t.item.data("item.autocomplete"),r=this.previous;this.element[0]!==this.document[0].activeElement&&(this.element.focus(),this.previous=r,this._delay(function(){this.previous=r,this.selectedItem=n})),!1!==this._trigger("select",e,{item:n})&&this._value(n.value),this.term=this._value(),this.close(e),this.selectedItem=n}}),this.liveRegion=e("<span>",{role:"status","aria-live":"polite"}).addClass("ui-helper-hidden-accessible").insertAfter(this.element),e.fn.bgiframe&&this.menu.element.bgiframe(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_destroy:function(){clearTimeout(this.searching),this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete"),this.menu.element.remove(),this.liveRegion.remove()},_setOption:function(e,t){this._super(e,t),e==="source"&&this._initSource(),e==="appendTo"&&this.menu.element.appendTo(this.document.find(t||"body")[0]),e==="disabled"&&t&&this.xhr&&this.xhr.abort()},_isMultiLine:function(){return this.element.is("textarea")?!0:this.element.is("input")?!1:this.element.prop("isContentEditable")},_initSource:function(){var t,n,r=this;e.isArray(this.options.source)?(t=this.options.source,this.source=function(n,r){r(e.ui.autocomplete.filter(t,n.term))}):typeof this.options.source=="string"?(n=this.options.source,this.source=function(t,i){r.xhr&&r.xhr.abort(),r.xhr=e.ajax({url:n,data:t,dataType:"json",success:function(e,t){i(e)},error:function(){i([])}})}):this.source=this.options.source},_searchTimeout:function(e){clearTimeout(this.searching),this.searching=this._delay(function(){this.term!==this._value()&&(this.selectedItem=null,this.search(null,e))},this.options.delay)},search:function(e,t){e=e!=null?e:this._value(),this.term=this._value();if(e.length<this.options.minLength)return this.close(t);if(this._trigger("search",t)===!1)return;return this._search(e)},_search:function(e){this.pending++,this.element.addClass("ui-autocomplete-loading"),this.cancelSearch=!1,this.source({term:e},this._response())},_response:function(){var e=this,t=++n;return function(r){t===n&&e.__response(r),e.pending--,e.pending||e.element.removeClass("ui-autocomplete-loading")}},__response:function(e){e&&(e=this._normalize(e)),this._trigger("response",null,{content:e}),!this.options.disabled&&e&&e.length&&!this.cancelSearch?(this._suggest(e),this._trigger("open")):this._close()},close:function(e){this.cancelSearch=!0,this._close(e)},_close:function(e){this.menu.element.is(":visible")&&(this.menu.element.hide(),this.menu.blur(),this.isNewMenu=!0,this._trigger("close",e))},_change:function(e){this.previous!==this._value()&&this._trigger("change",e,{item:this.selectedItem})},_normalize:function(t){return t.length&&t[0].label&&t[0].value?t:e.map(t,function(t){return typeof t=="string"?{label:t,value:t}:e.extend({label:t.label||t.value,value:t.value||t.label},t)})},_suggest:function(t){var n=this.menu.element.empty().zIndex(this.element.zIndex()+1);this._renderMenu(n,t),this.menu.refresh(),n.show(),this._resizeMenu(),n.position(e.extend({of:this.element},this.options.position)),this.options.autoFocus&&this.menu.next()},_resizeMenu:function(){var e=this.menu.element;e.outerWidth(Math.max(e.width("").outerWidth()+1,this.element.outerWidth()))},_renderMenu:function(t,n){var r=this;e.each(n,function(e,n){r._renderItemData(t,n)})},_renderItemData:function(e,t){return this._renderItem(e,t).data("ui-autocomplete-item",t)},_renderItem:function(t,n){return e("<li>").append(e("<a>").text(n.label)).appendTo(t)},_move:function(e,t){if(!this.menu.element.is(":visible")){this.search(null,t);return}if(this.menu.isFirstItem()&&/^previous/.test(e)||this.menu.isLastItem()&&/^next/.test(e)){this._value(this.term),this.menu.blur();return}this.menu[e](t)},widget:function(){return this.menu.element},_value:function(e){return this.valueMethod.apply(this.element,arguments)},_keyEvent:function(e,t){if(!this.isMultiLine||this.menu.element.is(":visible"))this._move(e,t),t.preventDefault()}}),e.extend(e.ui.autocomplete,{escapeRegex:function(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")},filter:function(t,n){var r=new RegExp(e.ui.autocomplete.escapeRegex(n),"i");return e.grep(t,function(e){return r.test(e.label||e.value||e)})}}),e.widget("ui.autocomplete",e.ui.autocomplete,{options:{messages:{noResults:"No search results.",results:function(e){return e+(e>1?" results are":" result is")+" available, use up and down arrow keys to navigate."}}},__response:function(e){var t;this._superApply(arguments);if(this.options.disabled||this.cancelSearch)return;e&&e.length?t=this.options.messages.results(e.length):t=this.options.messages.noResults,this.liveRegion.text(t)}})})(jQuery);(function(e,t){var n,r,i,s,o="ui-button ui-widget ui-state-default ui-corner-all",u="ui-state-hover ui-state-active ",a="ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only",f=function(){var t=e(this).find(":ui-button");setTimeout(function(){t.button("refresh")},1)},l=function(t){var n=t.name,r=t.form,i=e([]);return n&&(r?i=e(r).find("[name='"+n+"']"):i=e("[name='"+n+"']",t.ownerDocument).filter(function(){return!this.form})),i};e.widget("ui.button",{version:"1.9.0",defaultElement:"<button>",options:{disabled:null,text:!0,label:null,icons:{primary:null,secondary:null}},_create:function(){this.element.closest("form").unbind("reset"+this.eventNamespace).bind("reset"+this.eventNamespace,f),typeof this.options.disabled!="boolean"?this.options.disabled=!!this.element.prop("disabled"):this.element.prop("disabled",this.options.disabled),this._determineButtonType(),this.hasTitle=!!this.buttonElement.attr("title");var t=this,u=this.options,a=this.type==="checkbox"||this.type==="radio",c="ui-state-hover"+(a?"":" ui-state-active"),h="ui-state-focus";u.label===null&&(u.label=this.type==="input"?this.buttonElement.val():this.buttonElement.html()),this.buttonElement.addClass(o).attr("role","button").bind("mouseenter"+this.eventNamespace,function(){if(u.disabled)return;e(this).addClass("ui-state-hover"),this===n&&e(this).addClass("ui-state-active")}).bind("mouseleave"+this.eventNamespace,function(){if(u.disabled)return;e(this).removeClass(c)}).bind("click"+this.eventNamespace,function(e){u.disabled&&(e.preventDefault(),e.stopImmediatePropagation())}),this.element.bind("focus"+this.eventNamespace,function(){t.buttonElement.addClass(h)}).bind("blur"+this.eventNamespace,function(){t.buttonElement.removeClass(h)}),a&&(this.element.bind("change"+this.eventNamespace,function(){if(s)return;t.refresh()}),this.buttonElement.bind("mousedown"+this.eventNamespace,function(e){if(u.disabled)return;s=!1,r=e.pageX,i=e.pageY}).bind("mouseup"+this.eventNamespace,function(e){if(u.disabled)return;if(r!==e.pageX||i!==e.pageY)s=!0})),this.type==="checkbox"?this.buttonElement.bind("click"+this.eventNamespace,function(){if(u.disabled||s)return!1;e(this).toggleClass("ui-state-active"),t.buttonElement.attr("aria-pressed",t.element[0].checked)}):this.type==="radio"?this.buttonElement.bind("click"+this.eventNamespace,function(){if(u.disabled||s)return!1;e(this).addClass("ui-state-active"),t.buttonElement.attr("aria-pressed","true");var n=t.element[0];l(n).not(n).map(function(){return e(this).button("widget")[0]}).removeClass("ui-state-active").attr("aria-pressed","false")}):(this.buttonElement.bind("mousedown"+this.eventNamespace,function(){if(u.disabled)return!1;e(this).addClass("ui-state-active"),n=this,t.document.one("mouseup",function(){n=null})}).bind("mouseup"+this.eventNamespace,function(){if(u.disabled)return!1;e(this).removeClass("ui-state-active")}).bind("keydown"+this.eventNamespace,function(t){if(u.disabled)return!1;(t.keyCode===e.ui.keyCode.SPACE||t.keyCode===e.ui.keyCode.ENTER)&&e(this).addClass("ui-state-active")}).bind("keyup"+this.eventNamespace,function(){e(this).removeClass("ui-state-active")}),this.buttonElement.is("a")&&this.buttonElement.keyup(function(t){t.keyCode===e.ui.keyCode.SPACE&&e(this).click()})),this._setOption("disabled",u.disabled),this._resetButton()},_determineButtonType:function(){var e,t,n;this.element.is("[type=checkbox]")?this.type="checkbox":this.element.is("[type=radio]")?this.type="radio":this.element.is("input")?this.type="input":this.type="button",this.type==="checkbox"||this.type==="radio"?(e=this.element.parents().last(),t="label[for='"+this.element.attr("id")+"']",this.buttonElement=e.find(t),this.buttonElement.length||(e=e.length?e.siblings():this.element.siblings(),this.buttonElement=e.filter(t),this.buttonElement.length||(this.buttonElement=e.find(t))),this.element.addClass("ui-helper-hidden-accessible"),n=this.element.is(":checked"),n&&this.buttonElement.addClass("ui-state-active"),this.buttonElement.prop("aria-pressed",n)):this.buttonElement=this.element},widget:function(){return this.buttonElement},_destroy:function(){this.element.removeClass("ui-helper-hidden-accessible"),this.buttonElement.removeClass(o+" "+u+" "+a).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html()),this.hasTitle||this.buttonElement.removeAttr("title")},_setOption:function(e,t){this._super(e,t);if(e==="disabled"){t?this.element.prop("disabled",!0):this.element.prop("disabled",!1);return}this._resetButton()},refresh:function(){var t=this.element.is(":disabled");t!==this.options.disabled&&this._setOption("disabled",t),this.type==="radio"?l(this.element[0]).each(function(){e(this).is(":checked")?e(this).button("widget").addClass("ui-state-active").attr("aria-pressed","true"):e(this).button("widget").removeClass("ui-state-active").attr("aria-pressed","false")}):this.type==="checkbox"&&(this.element.is(":checked")?this.buttonElement.addClass("ui-state-active").attr("aria-pressed","true"):this.buttonElement.removeClass("ui-state-active").attr("aria-pressed","false"))},_resetButton:function(){if(this.type==="input"){this.options.label&&this.element.val(this.options.label);return}var t=this.buttonElement.removeClass(a),n=e("<span></span>",this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(t.empty()).text(),r=this.options.icons,i=r.primary&&r.secondary,s=[];r.primary||r.secondary?(this.options.text&&s.push("ui-button-text-icon"+(i?"s":r.primary?"-primary":"-secondary")),r.primary&&t.prepend("<span class='ui-button-icon-primary ui-icon "+r.primary+"'></span>"),r.secondary&&t.append("<span class='ui-button-icon-secondary ui-icon "+r.secondary+"'></span>"),this.options.text||(s.push(i?"ui-button-icons-only":"ui-button-icon-only"),this.hasTitle||t.attr("title",e.trim(n)))):s.push("ui-button-text-only"),t.addClass(s.join(" "))}}),e.widget("ui.buttonset",{version:"1.9.0",options:{items:"button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(button)"},_create:function(){this.element.addClass("ui-buttonset")},_init:function(){this.refresh()},_setOption:function(e,t){e==="disabled"&&this.buttons.button("option",e,t),this._super(e,t)},refresh:function(){var t=this.element.css("direction")==="rtl";this.buttons=this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(t?"ui-corner-right":"ui-corner-left").end().filter(":last").addClass(t?"ui-corner-left":"ui-corner-right").end().end()},_destroy:function(){this.element.removeClass("ui-buttonset"),this.buttons.map(function(){return e(this).button("widget")[0]}).removeClass("ui-corner-left ui-corner-right").end().button("destroy")}})})(jQuery);(function($,undefined){function Datepicker(){this.debug=!1,this._curInst=null,this._keyEvent=!1,this._disabledInputs=[],this._datepickerShowing=!1,this._inDialog=!1,this._mainDivId="ui-datepicker-div",this._inlineClass="ui-datepicker-inline",this._appendClass="ui-datepicker-append",this._triggerClass="ui-datepicker-trigger",this._dialogClass="ui-datepicker-dialog",this._disableClass="ui-datepicker-disabled",this._unselectableClass="ui-datepicker-unselectable",this._currentClass="ui-datepicker-current-day",this._dayOverClass="ui-datepicker-days-cell-over",this.regional=[],this.regional[""]={closeText:"Done",prevText:"Prev",nextText:"Next",currentText:"Today",monthNames:["January","February","March","April","May","June","July","August","September","October","November","December"],monthNamesShort:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],dayNamesShort:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],dayNamesMin:["Su","Mo","Tu","We","Th","Fr","Sa"],weekHeader:"Wk",dateFormat:"mm/dd/yy",firstDay:0,isRTL:!1,showMonthAfterYear:!1,yearSuffix:""},this._defaults={showOn:"focus",showAnim:"fadeIn",showOptions:{},defaultDate:null,appendText:"",buttonText:"...",buttonImage:"",buttonImageOnly:!1,hideIfNoPrevNext:!1,navigationAsDateFormat:!1,gotoCurrent:!1,changeMonth:!1,changeYear:!1,yearRange:"c-10:c+10",showOtherMonths:!1,selectOtherMonths:!1,showWeek:!1,calculateWeek:this.iso8601Week,shortYearCutoff:"+10",minDate:null,maxDate:null,duration:"fast",beforeShowDay:null,beforeShow:null,onSelect:null,onChangeMonthYear:null,onClose:null,numberOfMonths:1,showCurrentAtPos:0,stepMonths:1,stepBigMonths:12,altField:"",altFormat:"",constrainInput:!0,showButtonPanel:!1,autoSize:!1,disabled:!1},$.extend(this._defaults,this.regional[""]),this.dpDiv=bindHover($('<div id="'+this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>'))}function bindHover(e){var t="button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";return e.delegate(t,"mouseout",function(){$(this).removeClass("ui-state-hover"),this.className.indexOf("ui-datepicker-prev")!=-1&&$(this).removeClass("ui-datepicker-prev-hover"),this.className.indexOf("ui-datepicker-next")!=-1&&$(this).removeClass("ui-datepicker-next-hover")}).delegate(t,"mouseover",function(){$.datepicker._isDisabledDatepicker(instActive.inline?e.parent()[0]:instActive.input[0])||($(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"),$(this).addClass("ui-state-hover"),this.className.indexOf("ui-datepicker-prev")!=-1&&$(this).addClass("ui-datepicker-prev-hover"),this.className.indexOf("ui-datepicker-next")!=-1&&$(this).addClass("ui-datepicker-next-hover"))})}function extendRemove(e,t){$.extend(e,t);for(var n in t)if(t[n]==null||t[n]==undefined)e[n]=t[n];return e}$.extend($.ui,{datepicker:{version:"1.9.0"}});var PROP_NAME="datepicker",dpuuid=(new Date).getTime(),instActive;$.extend(Datepicker.prototype,{markerClassName:"hasDatepicker",maxRows:4,log:function(){this.debug&&console.log.apply("",arguments)},_widgetDatepicker:function(){return this.dpDiv},setDefaults:function(e){return extendRemove(this._defaults,e||{}),this},_attachDatepicker:function(target,settings){var inlineSettings=null;for(var attrName in this._defaults){var attrValue=target.getAttribute("date:"+attrName);if(attrValue){inlineSettings=inlineSettings||{};try{inlineSettings[attrName]=eval(attrValue)}catch(err){inlineSettings[attrName]=attrValue}}}var nodeName=target.nodeName.toLowerCase(),inline=nodeName=="div"||nodeName=="span";target.id||(this.uuid+=1,target.id="dp"+this.uuid);var inst=this._newInst($(target),inline);inst.settings=$.extend({},settings||{},inlineSettings||{}),nodeName=="input"?this._connectDatepicker(target,inst):inline&&this._inlineDatepicker(target,inst)},_newInst:function(e,t){var n=e[0].id.replace(/([^A-Za-z0-9_-])/g,"\\\\$1");return{id:n,input:e,selectedDay:0,selectedMonth:0,selectedYear:0,drawMonth:0,drawYear:0,inline:t,dpDiv:t?bindHover($('<div class="'+this._inlineClass+' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')):this.dpDiv}},_connectDatepicker:function(e,t){var n=$(e);t.append=$([]),t.trigger=$([]);if(n.hasClass(this.markerClassName))return;this._attachments(n,t),n.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp).bind("setData.datepicker",function(e,n,r){t.settings[n]=r}).bind("getData.datepicker",function(e,n){return this._get(t,n)}),this._autoSize(t),$.data(e,PROP_NAME,t),t.settings.disabled&&this._disableDatepicker(e)},_attachments:function(e,t){var n=this._get(t,"appendText"),r=this._get(t,"isRTL");t.append&&t.append.remove(),n&&(t.append=$('<span class="'+this._appendClass+'">'+n+"</span>"),e[r?"before":"after"](t.append)),e.unbind("focus",this._showDatepicker),t.trigger&&t.trigger.remove();var i=this._get(t,"showOn");(i=="focus"||i=="both")&&e.focus(this._showDatepicker);if(i=="button"||i=="both"){var s=this._get(t,"buttonText"),o=this._get(t,"buttonImage");t.trigger=$(this._get(t,"buttonImageOnly")?$("<img/>").addClass(this._triggerClass).attr({src:o,alt:s,title:s}):$('<button type="button"></button>').addClass(this._triggerClass).html(o==""?s:$("<img/>").attr({src:o,alt:s,title:s}))),e[r?"before":"after"](t.trigger),t.trigger.click(function(){return $.datepicker._datepickerShowing&&$.datepicker._lastInput==e[0]?$.datepicker._hideDatepicker():$.datepicker._datepickerShowing&&$.datepicker._lastInput!=e[0]?($.datepicker._hideDatepicker(),$.datepicker._showDatepicker(e[0])):$.datepicker._showDatepicker(e[0]),!1})}},_autoSize:function(e){if(this._get(e,"autoSize")&&!e.inline){var t=new Date(2009,11,20),n=this._get(e,"dateFormat");if(n.match(/[DM]/)){var r=function(e){var t=0,n=0;for(var r=0;r<e.length;r++)e[r].length>t&&(t=e[r].length,n=r);return n};t.setMonth(r(this._get(e,n.match(/MM/)?"monthNames":"monthNamesShort"))),t.setDate(r(this._get(e,n.match(/DD/)?"dayNames":"dayNamesShort"))+20-t.getDay())}e.input.attr("size",this._formatDate(e,t).length)}},_inlineDatepicker:function(e,t){var n=$(e);if(n.hasClass(this.markerClassName))return;n.addClass(this.markerClassName).append(t.dpDiv).bind("setData.datepicker",function(e,n,r){t.settings[n]=r}).bind("getData.datepicker",function(e,n){return this._get(t,n)}),$.data(e,PROP_NAME,t),this._setDate(t,this._getDefaultDate(t),!0),this._updateDatepicker(t),this._updateAlternate(t),t.settings.disabled&&this._disableDatepicker(e),t.dpDiv.css("display","block")},_dialogDatepicker:function(e,t,n,r,i){var s=this._dialogInst;if(!s){this.uuid+=1;var o="dp"+this.uuid;this._dialogInput=$('<input type="text" id="'+o+'" style="position: absolute; top: -100px; width: 0px;"/>'),this._dialogInput.keydown(this._doKeyDown),$("body").append(this._dialogInput),s=this._dialogInst=this._newInst(this._dialogInput,!1),s.settings={},$.data(this._dialogInput[0],PROP_NAME,s)}extendRemove(s.settings,r||{}),t=t&&t.constructor==Date?this._formatDate(s,t):t,this._dialogInput.val(t),this._pos=i?i.length?i:[i.pageX,i.pageY]:null;if(!this._pos){var u=document.documentElement.clientWidth,a=document.documentElement.clientHeight,f=document.documentElement.scrollLeft||document.body.scrollLeft,l=document.documentElement.scrollTop||document.body.scrollTop;this._pos=[u/2-100+f,a/2-150+l]}return this._dialogInput.css("left",this._pos[0]+20+"px").css("top",this._pos[1]+"px"),s.settings.onSelect=n,this._inDialog=!0,this.dpDiv.addClass(this._dialogClass),this._showDatepicker(this._dialogInput[0]),$.blockUI&&$.blockUI(this.dpDiv),$.data(this._dialogInput[0],PROP_NAME,s),this},_destroyDatepicker:function(e){var t=$(e),n=$.data(e,PROP_NAME);if(!t.hasClass(this.markerClassName))return;var r=e.nodeName.toLowerCase();$.removeData(e,PROP_NAME),r=="input"?(n.append.remove(),n.trigger.remove(),t.removeClass(this.markerClassName).unbind("focus",this._showDatepicker).unbind("keydown",this._doKeyDown).unbind("keypress",this._doKeyPress).unbind("keyup",this._doKeyUp)):(r=="div"||r=="span")&&t.removeClass(this.markerClassName).empty()},_enableDatepicker:function(e){var t=$(e),n=$.data(e,PROP_NAME);if(!t.hasClass(this.markerClassName))return;var r=e.nodeName.toLowerCase();if(r=="input")e.disabled=!1,n.trigger.filter("button").each(function(){this.disabled=!1}).end().filter("img").css({opacity:"1.0",cursor:""});else if(r=="div"||r=="span"){var i=t.children("."+this._inlineClass);i.children().removeClass("ui-state-disabled"),i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!1)}this._disabledInputs=$.map(this._disabledInputs,function(t){return t==e?null:t})},_disableDatepicker:function(e){var t=$(e),n=$.data(e,PROP_NAME);if(!t.hasClass(this.markerClassName))return;var r=e.nodeName.toLowerCase();if(r=="input")e.disabled=!0,n.trigger.filter("button").each(function(){this.disabled=!0}).end().filter("img").css({opacity:"0.5",cursor:"default"});else if(r=="div"||r=="span"){var i=t.children("."+this._inlineClass);i.children().addClass("ui-state-disabled"),i.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled",!0)}this._disabledInputs=$.map(this._disabledInputs,function(t){return t==e?null:t}),this._disabledInputs[this._disabledInputs.length]=e},_isDisabledDatepicker:function(e){if(!e)return!1;for(var t=0;t<this._disabledInputs.length;t++)if(this._disabledInputs[t]==e)return!0;return!1},_getInst:function(e){try{return $.data(e,PROP_NAME)}catch(t){throw"Missing instance data for this datepicker"}},_optionDatepicker:function(e,t,n){var r=this._getInst(e);if(arguments.length==2&&typeof t=="string")return t=="defaults"?$.extend({},$.datepicker._defaults):r?t=="all"?$.extend({},r.settings):this._get(r,t):null;var i=t||{};typeof t=="string"&&(i={},i[t]=n);if(r){this._curInst==r&&this._hideDatepicker();var s=this._getDateDatepicker(e,!0),o=this._getMinMaxDate(r,"min"),u=this._getMinMaxDate(r,"max");extendRemove(r.settings,i),o!==null&&i.dateFormat!==undefined&&i.minDate===undefined&&(r.settings.minDate=this._formatDate(r,o)),u!==null&&i.dateFormat!==undefined&&i.maxDate===undefined&&(r.settings.maxDate=this._formatDate(r,u)),this._attachments($(e),r),this._autoSize(r),this._setDate(r,s),this._updateAlternate(r),this._updateDatepicker(r)}},_changeDatepicker:function(e,t,n){this._optionDatepicker(e,t,n)},_refreshDatepicker:function(e){var t=this._getInst(e);t&&this._updateDatepicker(t)},_setDateDatepicker:function(e,t){var n=this._getInst(e);n&&(this._setDate(n,t),this._updateDatepicker(n),this._updateAlternate(n))},_getDateDatepicker:function(e,t){var n=this._getInst(e);return n&&!n.inline&&this._setDateFromField(n,t),n?this._getDate(n):null},_doKeyDown:function(e){var t=$.datepicker._getInst(e.target),n=!0,r=t.dpDiv.is(".ui-datepicker-rtl");t._keyEvent=!0;if($.datepicker._datepickerShowing)switch(e.keyCode){case 9:$.datepicker._hideDatepicker(),n=!1;break;case 13:var i=$("td."+$.datepicker._dayOverClass+":not(."+$.datepicker._currentClass+")",t.dpDiv);i[0]&&$.datepicker._selectDay(e.target,t.selectedMonth,t.selectedYear,i[0]);var s=$.datepicker._get(t,"onSelect");if(s){var o=$.datepicker._formatDate(t);s.apply(t.input?t.input[0]:null,[o,t])}else $.datepicker._hideDatepicker();return!1;case 27:$.datepicker._hideDatepicker();break;case 33:$.datepicker._adjustDate(e.target,e.ctrlKey?-$.datepicker._get(t,"stepBigMonths"):-$.datepicker._get(t,"stepMonths"),"M");break;case 34:$.datepicker._adjustDate(e.target,e.ctrlKey?+$.datepicker._get(t,"stepBigMonths"):+$.datepicker._get(t,"stepMonths"),"M");break;case 35:(e.ctrlKey||e.metaKey)&&$.datepicker._clearDate(e.target),n=e.ctrlKey||e.metaKey;break;case 36:(e.ctrlKey||e.metaKey)&&$.datepicker._gotoToday(e.target),n=e.ctrlKey||e.metaKey;break;case 37:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,r?1:-1,"D"),n=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&$.datepicker._adjustDate(e.target,e.ctrlKey?-$.datepicker._get(t,"stepBigMonths"):-$.datepicker._get(t,"stepMonths"),"M");break;case 38:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,-7,"D"),n=e.ctrlKey||e.metaKey;break;case 39:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,r?-1:1,"D"),n=e.ctrlKey||e.metaKey,e.originalEvent.altKey&&$.datepicker._adjustDate(e.target,e.ctrlKey?+$.datepicker._get(t,"stepBigMonths"):+$.datepicker._get(t,"stepMonths"),"M");break;case 40:(e.ctrlKey||e.metaKey)&&$.datepicker._adjustDate(e.target,7,"D"),n=e.ctrlKey||e.metaKey;break;default:n=!1}else e.keyCode==36&&e.ctrlKey?$.datepicker._showDatepicker(this):n=!1;n&&(e.preventDefault(),e.stopPropagation())},_doKeyPress:function(e){var t=$.datepicker._getInst(e.target);if($.datepicker._get(t,"constrainInput")){var n=$.datepicker._possibleChars($.datepicker._get(t,"dateFormat")),r=String.fromCharCode(e.charCode==undefined?e.keyCode:e.charCode);return e.ctrlKey||e.metaKey||r<" "||!n||n.indexOf(r)>-1}},_doKeyUp:function(e){var t=$.datepicker._getInst(e.target);if(t.input.val()!=t.lastVal)try{var n=$.datepicker.parseDate($.datepicker._get(t,"dateFormat"),t.input?t.input.val():null,$.datepicker._getFormatConfig(t));n&&($.datepicker._setDateFromField(t),$.datepicker._updateAlternate(t),$.datepicker._updateDatepicker(t))}catch(r){$.datepicker.log(r)}return!0},_showDatepicker:function(e){e=e.target||e,e.nodeName.toLowerCase()!="input"&&(e=$("input",e.parentNode)[0]);if($.datepicker._isDisabledDatepicker(e)||$.datepicker._lastInput==e)return;var t=$.datepicker._getInst(e);$.datepicker._curInst&&$.datepicker._curInst!=t&&($.datepicker._curInst.dpDiv.stop(!0,!0),t&&$.datepicker._datepickerShowing&&$.datepicker._hideDatepicker($.datepicker._curInst.input[0]));var n=$.datepicker._get(t,"beforeShow"),r=n?n.apply(e,[e,t]):{};if(r===!1)return;extendRemove(t.settings,r),t.lastVal=null,$.datepicker._lastInput=e,$.datepicker._setDateFromField(t),$.datepicker._inDialog&&(e.value=""),$.datepicker._pos||($.datepicker._pos=$.datepicker._findPos(e),$.datepicker._pos[1]+=e.offsetHeight);var i=!1;$(e).parents().each(function(){return i|=$(this).css("position")=="fixed",!i});var s={left:$.datepicker._pos[0],top:$.datepicker._pos[1]};$.datepicker._pos=null,t.dpDiv.empty(),t.dpDiv.css({position:"absolute",display:"block",top:"-1000px"}),$.datepicker._updateDatepicker(t),s=$.datepicker._checkOffset(t,s,i),t.dpDiv.css({position:$.datepicker._inDialog&&$.blockUI?"static":i?"fixed":"absolute",display:"none",left:s.left+"px",top:s.top+"px"});if(!t.inline){var o=$.datepicker._get(t,"showAnim"),u=$.datepicker._get(t,"duration"),a=function(){var e=t.dpDiv.find("iframe.ui-datepicker-cover");if(!!e.length){var n=$.datepicker._getBorders(t.dpDiv);e.css({left:-n[0],top:-n[1],width:t.dpDiv.outerWidth(),height:t.dpDiv.outerHeight()})}};t.dpDiv.zIndex($(e).zIndex()+1),$.datepicker._datepickerShowing=!0,$.effects&&($.effects.effect[o]||$.effects[o])?t.dpDiv.show(o,$.datepicker._get(t,"showOptions"),u,a):t.dpDiv[o||"show"](o?u:null,a),(!o||!u)&&a(),t.input.is(":visible")&&!t.input.is(":disabled")&&t.input.focus(),$.datepicker._curInst=t}},_updateDatepicker:function(e){this.maxRows=4;var t=$.datepicker._getBorders(e.dpDiv);instActive=e,e.dpDiv.empty().append(this._generateHTML(e)),this._attachHandlers(e);var n=e.dpDiv.find("iframe.ui-datepicker-cover");!n.length||n.css({left:-t[0],top:-t[1],width:e.dpDiv.outerWidth(),height:e.dpDiv.outerHeight()}),e.dpDiv.find("."+this._dayOverClass+" a").mouseover();var r=this._getNumberOfMonths(e),i=r[1],s=17;e.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""),i>1&&e.dpDiv.addClass("ui-datepicker-multi-"+i).css("width",s*i+"em"),e.dpDiv[(r[0]!=1||r[1]!=1?"add":"remove")+"Class"]("ui-datepicker-multi"),e.dpDiv[(this._get(e,"isRTL")?"add":"remove")+"Class"]("ui-datepicker-rtl"),e==$.datepicker._curInst&&$.datepicker._datepickerShowing&&e.input&&e.input.is(":visible")&&!e.input.is(":disabled")&&e.input[0]!=document.activeElement&&e.input.focus();if(e.yearshtml){var o=e.yearshtml;setTimeout(function(){o===e.yearshtml&&e.yearshtml&&e.dpDiv.find("select.ui-datepicker-year:first").replaceWith(e.yearshtml),o=e.yearshtml=null},0)}},_getBorders:function(e){var t=function(e){return{thin:1,medium:2,thick:3}[e]||e};return[parseFloat(t(e.css("border-left-width"))),parseFloat(t(e.css("border-top-width")))]},_checkOffset:function(e,t,n){var r=e.dpDiv.outerWidth(),i=e.dpDiv.outerHeight(),s=e.input?e.input.outerWidth():0,o=e.input?e.input.outerHeight():0,u=document.documentElement.clientWidth+(n?0:$(document).scrollLeft()),a=document.documentElement.clientHeight+(n?0:$(document).scrollTop());return t.left-=this._get(e,"isRTL")?r-s:0,t.left-=n&&t.left==e.input.offset().left?$(document).scrollLeft():0,t.top-=n&&t.top==e.input.offset().top+o?$(document).scrollTop():0,t.left-=Math.min(t.left,t.left+r>u&&u>r?Math.abs(t.left+r-u):0),t.top-=Math.min(t.top,t.top+i>a&&a>i?Math.abs(i+o):0),t},_findPos:function(e){var t=this._getInst(e),n=this._get(t,"isRTL");while(e&&(e.type=="hidden"||e.nodeType!=1||$.expr.filters.hidden(e)))e=e[n?"previousSibling":"nextSibling"];var r=$(e).offset();return[r.left,r.top]},_hideDatepicker:function(e){var t=this._curInst;if(!t||e&&t!=$.data(e,PROP_NAME))return;if(this._datepickerShowing){var n=this._get(t,"showAnim"),r=this._get(t,"duration"),i=function(){$.datepicker._tidyDialog(t)};$.effects&&($.effects.effect[n]||$.effects[n])?t.dpDiv.hide(n,$.datepicker._get(t,"showOptions"),r,i):t.dpDiv[n=="slideDown"?"slideUp":n=="fadeIn"?"fadeOut":"hide"](n?r:null,i),n||i(),this._datepickerShowing=!1;var s=this._get(t,"onClose");s&&s.apply(t.input?t.input[0]:null,[t.input?t.input.val():"",t]),this._lastInput=null,this._inDialog&&(this._dialogInput.css({position:"absolute",left:"0",top:"-100px"}),$.blockUI&&($.unblockUI(),$("body").append(this.dpDiv))),this._inDialog=!1}},_tidyDialog:function(e){e.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")},_checkExternalClick:function(e){if(!$.datepicker._curInst)return;var t=$(e.target),n=$.datepicker._getInst(t[0]);(t[0].id!=$.datepicker._mainDivId&&t.parents("#"+$.datepicker._mainDivId).length==0&&!t.hasClass($.datepicker.markerClassName)&&!t.closest("."+$.datepicker._triggerClass).length&&$.datepicker._datepickerShowing&&(!$.datepicker._inDialog||!$.blockUI)||t.hasClass($.datepicker.markerClassName)&&$.datepicker._curInst!=n)&&$.datepicker._hideDatepicker()},_adjustDate:function(e,t,n){var r=$(e),i=this._getInst(r[0]);if(this._isDisabledDatepicker(r[0]))return;this._adjustInstDate(i,t+(n=="M"?this._get(i,"showCurrentAtPos"):0),n),this._updateDatepicker(i)},_gotoToday:function(e){var t=$(e),n=this._getInst(t[0]);if(this._get(n,"gotoCurrent")&&n.currentDay)n.selectedDay=n.currentDay,n.drawMonth=n.selectedMonth=n.currentMonth,n.drawYear=n.selectedYear=n.currentYear;else{var r=new Date;n.selectedDay=r.getDate(),n.drawMonth=n.selectedMonth=r.getMonth(),n.drawYear=n.selectedYear=r.getFullYear()}this._notifyChange(n),this._adjustDate(t)},_selectMonthYear:function(e,t,n){var r=$(e),i=this._getInst(r[0]);i["selected"+(n=="M"?"Month":"Year")]=i["draw"+(n=="M"?"Month":"Year")]=parseInt(t.options[t.selectedIndex].value,10),this._notifyChange(i),this._adjustDate(r)},_selectDay:function(e,t,n,r){var i=$(e);if($(r).hasClass(this._unselectableClass)||this._isDisabledDatepicker(i[0]))return;var s=this._getInst(i[0]);s.selectedDay=s.currentDay=$("a",r).html(),s.selectedMonth=s.currentMonth=t,s.selectedYear=s.currentYear=n,this._selectDate(e,this._formatDate(s,s.currentDay,s.currentMonth,s.currentYear))},_clearDate:function(e){var t=$(e),n=this._getInst(t[0]);this._selectDate(t,"")},_selectDate:function(e,t){var n=$(e),r=this._getInst(n[0]);t=t!=null?t:this._formatDate(r),r.input&&r.input.val(t),this._updateAlternate(r);var i=this._get(r,"onSelect");i?i.apply(r.input?r.input[0]:null,[t,r]):r.input&&r.input.trigger("change"),r.inline?this._updateDatepicker(r):(this._hideDatepicker(),this._lastInput=r.input[0],typeof r.input[0]!="object"&&r.input.focus(),this._lastInput=null)},_updateAlternate:function(e){var t=this._get(e,"altField");if(t){var n=this._get(e,"altFormat")||this._get(e,"dateFormat"),r=this._getDate(e),i=this.formatDate(n,r,this._getFormatConfig(e));$(t).each(function(){$(this).val(i)})}},noWeekends:function(e){var t=e.getDay();return[t>0&&t<6,""]},iso8601Week:function(e){var t=new Date(e.getTime());t.setDate(t.getDate()+4-(t.getDay()||7));var n=t.getTime();return t.setMonth(0),t.setDate(1),Math.floor(Math.round((n-t)/864e5)/7)+1},parseDate:function(e,t,n){if(e==null||t==null)throw"Invalid arguments";t=typeof t=="object"?t.toString():t+"";if(t=="")return null;var r=(n?n.shortYearCutoff:null)||this._defaults.shortYearCutoff;r=typeof r!="string"?r:(new Date).getFullYear()%100+parseInt(r,10);var i=(n?n.dayNamesShort:null)||this._defaults.dayNamesShort,s=(n?n.dayNames:null)||this._defaults.dayNames,o=(n?n.monthNamesShort:null)||this._defaults.monthNamesShort,u=(n?n.monthNames:null)||this._defaults.monthNames,a=-1,f=-1,l=-1,c=-1,h=!1,p=function(t){var n=y+1<e.length&&e.charAt(y+1)==t;return n&&y++,n},d=function(e){var n=p(e),r=e=="@"?14:e=="!"?20:e=="y"&&n?4:e=="o"?3:2,i=new RegExp("^\\d{1,"+r+"}"),s=t.substring(g).match(i);if(!s)throw"Missing number at position "+g;return g+=s[0].length,parseInt(s[0],10)},v=function(e,n,r){var i=$.map(p(e)?r:n,function(e,t){return[[t,e]]}).sort(function(e,t){return-(e[1].length-t[1].length)}),s=-1;$.each(i,function(e,n){var r=n[1];if(t.substr(g,r.length).toLowerCase()==r.toLowerCase())return s=n[0],g+=r.length,!1});if(s!=-1)return s+1;throw"Unknown name at position "+g},m=function(){if(t.charAt(g)!=e.charAt(y))throw"Unexpected literal at position "+g;g++},g=0;for(var y=0;y<e.length;y++)if(h)e.charAt(y)=="'"&&!p("'")?h=!1:m();else switch(e.charAt(y)){case"d":l=d("d");break;case"D":v("D",i,s);break;case"o":c=d("o");break;case"m":f=d("m");break;case"M":f=v("M",o,u);break;case"y":a=d("y");break;case"@":var b=new Date(d("@"));a=b.getFullYear(),f=b.getMonth()+1,l=b.getDate();break;case"!":var b=new Date((d("!")-this._ticksTo1970)/1e4);a=b.getFullYear(),f=b.getMonth()+1,l=b.getDate();break;case"'":p("'")?m():h=!0;break;default:m()}if(g<t.length){var w=t.substr(g);if(!/^\s+/.test(w))throw"Extra/unparsed characters found in date: "+w}a==-1?a=(new Date).getFullYear():a<100&&(a+=(new Date).getFullYear()-(new Date).getFullYear()%100+(a<=r?0:-100));if(c>-1){f=1,l=c;do{var E=this._getDaysInMonth(a,f-1);if(l<=E)break;f++,l-=E}while(!0)}var b=this._daylightSavingAdjust(new Date(a,f-1,l));if(b.getFullYear()!=a||b.getMonth()+1!=f||b.getDate()!=l)throw"Invalid date";return b},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy",ISO_8601:"yy-mm-dd",RFC_822:"D, d M y",RFC_850:"DD, dd-M-y",RFC_1036:"D, d M y",RFC_1123:"D, d M yy",RFC_2822:"D, d M yy",RSS:"D, d M y",TICKS:"!",TIMESTAMP:"@",W3C:"yy-mm-dd",_ticksTo1970:(718685+Math.floor(492.5)-Math.floor(19.7)+Math.floor(4.925))*24*60*60*1e7,formatDate:function(e,t,n){if(!t)return"";var r=(n?n.dayNamesShort:null)||this._defaults.dayNamesShort,i=(n?n.dayNames:null)||this._defaults.dayNames,s=(n?n.monthNamesShort:null)||this._defaults.monthNamesShort,o=(n?n.monthNames:null)||this._defaults.monthNames,u=function(t){var n=h+1<e.length&&e.charAt(h+1)==t;return n&&h++,n},a=function(e,t,n){var r=""+t;if(u(e))while(r.length<n)r="0"+r;return r},f=function(e,t,n,r){return u(e)?r[t]:n[t]},l="",c=!1;if(t)for(var h=0;h<e.length;h++)if(c)e.charAt(h)=="'"&&!u("'")?c=!1:l+=e.charAt(h);else switch(e.charAt(h)){case"d":l+=a("d",t.getDate(),2);break;case"D":l+=f("D",t.getDay(),r,i);break;case"o":l+=a("o",Math.round(((new Date(t.getFullYear(),t.getMonth(),t.getDate())).getTime()-(new Date(t.getFullYear(),0,0)).getTime())/864e5),3);break;case"m":l+=a("m",t.getMonth()+1,2);break;case"M":l+=f("M",t.getMonth(),s,o);break;case"y":l+=u("y")?t.getFullYear():(t.getYear()%100<10?"0":"")+t.getYear()%100;break;case"@":l+=t.getTime();break;case"!":l+=t.getTime()*1e4+this._ticksTo1970;break;case"'":u("'")?l+="'":c=!0;break;default:l+=e.charAt(h)}return l},_possibleChars:function(e){var t="",n=!1,r=function(t){var n=i+1<e.length&&e.charAt(i+1)==t;return n&&i++,n};for(var i=0;i<e.length;i++)if(n)e.charAt(i)=="'"&&!r("'")?n=!1:t+=e.charAt(i);else switch(e.charAt(i)){case"d":case"m":case"y":case"@":t+="0123456789";break;case"D":case"M":return null;case"'":r("'")?t+="'":n=!0;break;default:t+=e.charAt(i)}return t},_get:function(e,t){return e.settings[t]!==undefined?e.settings[t]:this._defaults[t]},_setDateFromField:function(e,t){if(e.input.val()==e.lastVal)return;var n=this._get(e,"dateFormat"),r=e.lastVal=e.input?e.input.val():null,i,s;i=s=this._getDefaultDate(e);var o=this._getFormatConfig(e);try{i=this.parseDate(n,r,o)||s}catch(u){this.log(u),r=t?"":r}e.selectedDay=i.getDate(),e.drawMonth=e.selectedMonth=i.getMonth(),e.drawYear=e.selectedYear=i.getFullYear(),e.currentDay=r?i.getDate():0,e.currentMonth=r?i.getMonth():0,e.currentYear=r?i.getFullYear():0,this._adjustInstDate(e)},_getDefaultDate:function(e){return this._restrictMinMax(e,this._determineDate(e,this._get(e,"defaultDate"),new Date))},_determineDate:function(e,t,n){var r=function(e){var t=new Date;return t.setDate(t.getDate()+e),t},i=function(t){try{return $.datepicker.parseDate($.datepicker._get(e,"dateFormat"),t,$.datepicker._getFormatConfig(e))}catch(n){}var r=(t.toLowerCase().match(/^c/)?$.datepicker._getDate(e):null)||new Date,i=r.getFullYear(),s=r.getMonth(),o=r.getDate(),u=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,a=u.exec(t);while(a){switch(a[2]||"d"){case"d":case"D":o+=parseInt(a[1],10);break;case"w":case"W":o+=parseInt(a[1],10)*7;break;case"m":case"M":s+=parseInt(a[1],10),o=Math.min(o,$.datepicker._getDaysInMonth(i,s));break;case"y":case"Y":i+=parseInt(a[1],10),o=Math.min(o,$.datepicker._getDaysInMonth(i,s))}a=u.exec(t)}return new Date(i,s,o)},s=t==null||t===""?n:typeof t=="string"?i(t):typeof t=="number"?isNaN(t)?n:r(t):new Date(t.getTime());return s=s&&s.toString()=="Invalid Date"?n:s,s&&(s.setHours(0),s.setMinutes(0),s.setSeconds(0),s.setMilliseconds(0)),this._daylightSavingAdjust(s)},_daylightSavingAdjust:function(e){return e?(e.setHours(e.getHours()>12?e.getHours()+2:0),e):null},_setDate:function(e,t,n){var r=!t,i=e.selectedMonth,s=e.selectedYear,o=this._restrictMinMax(e,this._determineDate(e,t,new Date));e.selectedDay=e.currentDay=o.getDate(),e.drawMonth=e.selectedMonth=e.currentMonth=o.getMonth(),e.drawYear=e.selectedYear=e.currentYear=o.getFullYear(),(i!=e.selectedMonth||s!=e.selectedYear)&&!n&&this._notifyChange(e),this._adjustInstDate(e),e.input&&e.input.val(r?"":this._formatDate(e))},_getDate:function(e){var t=!e.currentYear||e.input&&e.input.val()==""?null:this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return t},_attachHandlers:function(e){var t=this._get(e,"stepMonths"),n="#"+e.id.replace(/\\\\/g,"\\");e.dpDiv.find("[data-handler]").map(function(){var e={prev:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(n,-t,"M")},next:function(){window["DP_jQuery_"+dpuuid].datepicker._adjustDate(n,+t,"M")},hide:function(){window["DP_jQuery_"+dpuuid].datepicker._hideDatepicker()},today:function(){window["DP_jQuery_"+dpuuid].datepicker._gotoToday(n)},selectDay:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectDay(n,+this.getAttribute("data-month"),+this.getAttribute("data-year"),this),!1},selectMonth:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(n,this,"M"),!1},selectYear:function(){return window["DP_jQuery_"+dpuuid].datepicker._selectMonthYear(n,this,"Y"),!1}};$(this).bind(this.getAttribute("data-event"),e[this.getAttribute("data-handler")])})},_generateHTML:function(e){var t=new Date;t=this._daylightSavingAdjust(new Date(t.getFullYear(),t.getMonth(),t.getDate()));var n=this._get(e,"isRTL"),r=this._get(e,"showButtonPanel"),i=this._get(e,"hideIfNoPrevNext"),s=this._get(e,"navigationAsDateFormat"),o=this._getNumberOfMonths(e),u=this._get(e,"showCurrentAtPos"),a=this._get(e,"stepMonths"),f=o[0]!=1||o[1]!=1,l=this._daylightSavingAdjust(e.currentDay?new Date(e.currentYear,e.currentMonth,e.currentDay):new Date(9999,9,9)),c=this._getMinMaxDate(e,"min"),h=this._getMinMaxDate(e,"max"),p=e.drawMonth-u,d=e.drawYear;p<0&&(p+=12,d--);if(h){var v=this._daylightSavingAdjust(new Date(h.getFullYear(),h.getMonth()-o[0]*o[1]+1,h.getDate()));v=c&&v<c?c:v;while(this._daylightSavingAdjust(new Date(d,p,1))>v)p--,p<0&&(p=11,d--)}e.drawMonth=p,e.drawYear=d;var m=this._get(e,"prevText");m=s?this.formatDate(m,this._daylightSavingAdjust(new Date(d,p-a,1)),this._getFormatConfig(e)):m;var g=this._canAdjustMonth(e,-1,d,p)?'<a class="ui-datepicker-prev ui-corner-all" data-handler="prev" data-event="click" title="'+m+'"><span class="ui-icon ui-icon-circle-triangle-'+(n?"e":"w")+'">'+m+"</span></a>":i?"":'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+m+'"><span class="ui-icon ui-icon-circle-triangle-'+(n?"e":"w")+'">'+m+"</span></a>",y=this._get(e,"nextText");y=s?this.formatDate(y,this._daylightSavingAdjust(new Date(d,p+a,1)),this._getFormatConfig(e)):y;var b=this._canAdjustMonth(e,1,d,p)?'<a class="ui-datepicker-next ui-corner-all" data-handler="next" data-event="click" title="'+y+'"><span class="ui-icon ui-icon-circle-triangle-'+(n?"w":"e")+'">'+y+"</span></a>":i?"":'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+y+'"><span class="ui-icon ui-icon-circle-triangle-'+(n?"w":"e")+'">'+y+"</span></a>",w=this._get(e,"currentText"),E=this._get(e,"gotoCurrent")&&e.currentDay?l:t;w=s?this.formatDate(w,E,this._getFormatConfig(e)):w;var S=e.inline?"":'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" data-handler="hide" data-event="click">'+this._get(e,"closeText")+"</button>",x=r?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(n?S:"")+(this._isInRange(e,E)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" data-handler="today" data-event="click">'+w+"</button>":"")+(n?"":S)+"</div>":"",T=parseInt(this._get(e,"firstDay"),10);T=isNaN(T)?0:T;var N=this._get(e,"showWeek"),C=this._get(e,"dayNames"),k=this._get(e,"dayNamesShort"),L=this._get(e,"dayNamesMin"),A=this._get(e,"monthNames"),O=this._get(e,"monthNamesShort"),M=this._get(e,"beforeShowDay"),_=this._get(e,"showOtherMonths"),D=this._get(e,"selectOtherMonths"),P=this._get(e,"calculateWeek")||this.iso8601Week,H=this._getDefaultDate(e),B="";for(var j=0;j<o[0];j++){var F="";this.maxRows=4;for(var I=0;I<o[1];I++){var q=this._daylightSavingAdjust(new Date(d,p,e.selectedDay)),R=" ui-corner-all",U="";if(f){U+='<div class="ui-datepicker-group';if(o[1]>1)switch(I){case 0:U+=" ui-datepicker-group-first",R=" ui-corner-"+(n?"right":"left");break;case o[1]-1:U+=" ui-datepicker-group-last",R=" ui-corner-"+(n?"left":"right");break;default:U+=" ui-datepicker-group-middle",R=""}U+='">'}U+='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+R+'">'+(/all|left/.test(R)&&j==0?n?b:g:"")+(/all|right/.test(R)&&j==0?n?g:b:"")+this._generateMonthYearHeader(e,p,d,c,h,j>0||I>0,A,O)+'</div><table class="ui-datepicker-calendar"><thead>'+"<tr>";var z=N?'<th class="ui-datepicker-week-col">'+this._get(e,"weekHeader")+"</th>":"";for(var W=0;W<7;W++){var X=(W+T)%7;z+="<th"+((W+T+6)%7>=5?' class="ui-datepicker-week-end"':"")+">"+'<span title="'+C[X]+'">'+L[X]+"</span></th>"}U+=z+"</tr></thead><tbody>";var V=this._getDaysInMonth(d,p);d==e.selectedYear&&p==e.selectedMonth&&(e.selectedDay=Math.min(e.selectedDay,V));var J=(this._getFirstDayOfMonth(d,p)-T+7)%7,K=Math.ceil((J+V)/7),Q=f?this.maxRows>K?this.maxRows:K:K;this.maxRows=Q;var G=this._daylightSavingAdjust(new Date(d,p,1-J));for(var Y=0;Y<Q;Y++){U+="<tr>";var Z=N?'<td class="ui-datepicker-week-col">'+this._get(e,"calculateWeek")(G)+"</td>":"";for(var W=0;W<7;W++){var et=M?M.apply(e.input?e.input[0]:null,[G]):[!0,""],tt=G.getMonth()!=p,nt=tt&&!D||!et[0]||c&&G<c||h&&G>h;Z+='<td class="'+((W+T+6)%7>=5?" ui-datepicker-week-end":"")+(tt?" ui-datepicker-other-month":"")+(G.getTime()==q.getTime()&&p==e.selectedMonth&&e._keyEvent||H.getTime()==G.getTime()&&H.getTime()==q.getTime()?" "+this._dayOverClass:"")+(nt?" "+this._unselectableClass+" ui-state-disabled":"")+(tt&&!_?"":" "+et[1]+(G.getTime()==l.getTime()?" "+this._currentClass:"")+(G.getTime()==t.getTime()?" ui-datepicker-today":""))+'"'+((!tt||_)&&et[2]?' title="'+et[2]+'"':"")+(nt?"":' data-handler="selectDay" data-event="click" data-month="'+G.getMonth()+'" data-year="'+G.getFullYear()+'"')+">"+(tt&&!_?"&#xa0;":nt?'<span class="ui-state-default">'+G.getDate()+"</span>":'<a class="ui-state-default'+(G.getTime()==t.getTime()?" ui-state-highlight":"")+(G.getTime()==l.getTime()?" ui-state-active":"")+(tt?" ui-priority-secondary":"")+'" href="#">'+G.getDate()+"</a>")+"</td>",G.setDate(G.getDate()+1),G=this._daylightSavingAdjust(G)}U+=Z+"</tr>"}p++,p>11&&(p=0,d++),U+="</tbody></table>"+(f?"</div>"+(o[0]>0&&I==o[1]-1?'<div class="ui-datepicker-row-break"></div>':""):""),F+=U}B+=F}return B+=x+($.browser.msie&&parseInt($.browser.version,10)<7&&!e.inline?'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>':""),e._keyEvent=!1,B},_generateMonthYearHeader:function(e,t,n,r,i,s,o,u){var a=this._get(e,"changeMonth"),f=this._get(e,"changeYear"),l=this._get(e,"showMonthAfterYear"),c='<div class="ui-datepicker-title">',h="";if(s||!a)h+='<span class="ui-datepicker-month">'+o[t]+"</span>";else{var p=r&&r.getFullYear()==n,d=i&&i.getFullYear()==n;h+='<select class="ui-datepicker-month" data-handler="selectMonth" data-event="change">';for(var v=0;v<12;v++)(!p||v>=r.getMonth())&&(!d||v<=i.getMonth())&&(h+='<option value="'+v+'"'+(v==t?' selected="selected"':"")+">"+u[v]+"</option>");h+="</select>"}l||(c+=h+(s||!a||!f?"&#xa0;":""));if(!e.yearshtml){e.yearshtml="";if(s||!f)c+='<span class="ui-datepicker-year">'+n+"</span>";else{var m=this._get(e,"yearRange").split(":"),g=(new Date).getFullYear(),y=function(e){var t=e.match(/c[+-].*/)?n+parseInt(e.substring(1),10):e.match(/[+-].*/)?g+parseInt(e,10):parseInt(e,10);return isNaN(t)?g:t},b=y(m[0]),w=Math.max(b,y(m[1]||""));b=r?Math.max(b,r.getFullYear()):b,w=i?Math.min(w,i.getFullYear()):w,e.yearshtml+='<select class="ui-datepicker-year" data-handler="selectYear" data-event="change">';for(;b<=w;b++)e.yearshtml+='<option value="'+b+'"'+(b==n?' selected="selected"':"")+">"+b+"</option>";e.yearshtml+="</select>",c+=e.yearshtml,e.yearshtml=null}}return c+=this._get(e,"yearSuffix"),l&&(c+=(s||!a||!f?"&#xa0;":"")+h),c+="</div>",c},_adjustInstDate:function(e,t,n){var r=e.drawYear+(n=="Y"?t:0),i=e.drawMonth+(n=="M"?t:0),s=Math.min(e.selectedDay,this._getDaysInMonth(r,i))+(n=="D"?t:0),o=this._restrictMinMax(e,this._daylightSavingAdjust(new Date(r,i,s)));e.selectedDay=o.getDate(),e.drawMonth=e.selectedMonth=o.getMonth(),e.drawYear=e.selectedYear=o.getFullYear(),(n=="M"||n=="Y")&&this._notifyChange(e)},_restrictMinMax:function(e,t){var n=this._getMinMaxDate(e,"min"),r=this._getMinMaxDate(e,"max"),i=n&&t<n?n:t;return i=r&&i>r?r:i,i},_notifyChange:function(e){var t=this._get(e,"onChangeMonthYear");t&&t.apply(e.input?e.input[0]:null,[e.selectedYear,e.selectedMonth+1,e])},_getNumberOfMonths:function(e){var t=this._get(e,"numberOfMonths");return t==null?[1,1]:typeof t=="number"?[1,t]:t},_getMinMaxDate:function(e,t){return this._determineDate(e,this._get(e,t+"Date"),null)},_getDaysInMonth:function(e,t){return 32-this._daylightSavingAdjust(new Date(e,t,32)).getDate()},_getFirstDayOfMonth:function(e,t){return(new Date(e,t,1)).getDay()},_canAdjustMonth:function(e,t,n,r){var i=this._getNumberOfMonths(e),s=this._daylightSavingAdjust(new Date(n,r+(t<0?t:i[0]*i[1]),1));return t<0&&s.setDate(this._getDaysInMonth(s.getFullYear(),s.getMonth())),this._isInRange(e,s)},_isInRange:function(e,t){var n=this._getMinMaxDate(e,"min"),r=this._getMinMaxDate(e,"max");return(!n||t.getTime()>=n.getTime())&&(!r||t.getTime()<=r.getTime())},_getFormatConfig:function(e){var t=this._get(e,"shortYearCutoff");return t=typeof t!="string"?t:(new Date).getFullYear()%100+parseInt(t,10),{shortYearCutoff:t,dayNamesShort:this._get(e,"dayNamesShort"),dayNames:this._get(e,"dayNames"),monthNamesShort:this._get(e,"monthNamesShort"),monthNames:this._get(e,"monthNames")}},_formatDate:function(e,t,n,r){t||(e.currentDay=e.selectedDay,e.currentMonth=e.selectedMonth,e.currentYear=e.selectedYear);var i=t?typeof t=="object"?t:this._daylightSavingAdjust(new Date(r,n,t)):this._daylightSavingAdjust(new Date(e.currentYear,e.currentMonth,e.currentDay));return this.formatDate(this._get(e,"dateFormat"),i,this._getFormatConfig(e))}}),$.fn.datepicker=function(e){if(!this.length)return this;$.datepicker.initialized||($(document).mousedown($.datepicker._checkExternalClick).find(document.body).append($.datepicker.dpDiv),$.datepicker.initialized=!0);var t=Array.prototype.slice.call(arguments,1);return typeof e!="string"||e!="isDisabled"&&e!="getDate"&&e!="widget"?e=="option"&&arguments.length==2&&typeof arguments[1]=="string"?$.datepicker["_"+e+"Datepicker"].apply($.datepicker,[this[0]].concat(t)):this.each(function(){typeof e=="string"?$.datepicker["_"+e+"Datepicker"].apply($.datepicker,[this].concat(t)):$.datepicker._attachDatepicker(this,e)}):$.datepicker["_"+e+"Datepicker"].apply($.datepicker,[this[0]].concat(t))},$.datepicker=new Datepicker,$.datepicker.initialized=!1,$.datepicker.uuid=(new Date).getTime(),$.datepicker.version="1.9.0",window["DP_jQuery_"+dpuuid]=$})(jQuery);(function(e,t){var n="ui-dialog ui-widget ui-widget-content ui-corner-all ",r={buttons:!0,height:!0,maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0,width:!0},i={maxHeight:!0,maxWidth:!0,minHeight:!0,minWidth:!0};e.widget("ui.dialog",{version:"1.9.0",options:{autoOpen:!0,buttons:{},closeOnEscape:!0,closeText:"close",dialogClass:"",draggable:!0,hide:null,height:"auto",maxHeight:!1,maxWidth:!1,minHeight:150,minWidth:150,modal:!1,position:{my:"center",at:"center",of:window,collision:"fit",using:function(t){var n=e(this).css(t).offset().top;n<0&&e(this).css("top",t.top-n)}},resizable:!0,show:null,stack:!0,title:"",width:300,zIndex:1e3},_create:function(){this.originalTitle=this.element.attr("title"),typeof this.originalTitle!="string"&&(this.originalTitle=""),this.oldPosition={parent:this.element.parent(),index:this.element.parent().children().index(this.element)},this.options.title=this.options.title||this.originalTitle;var t=this,r=this.options,i=r.title||"&#160;",s=(this.uiDialog=e("<div>")).addClass(n+r.dialogClass).css({display:"none",outline:0,zIndex:r.zIndex}).attr("tabIndex",-1).keydown(function(n){r.closeOnEscape&&!n.isDefaultPrevented()&&n.keyCode&&n.keyCode===e.ui.keyCode.ESCAPE&&(t.close(n),n.preventDefault())}).mousedown(function(e){t.moveToTop(!1,e)}).appendTo("body"),o=this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(s),u=(this.uiDialogTitlebar=e("<div>")).addClass("ui-dialog-titlebar  ui-widget-header  ui-corner-all  ui-helper-clearfix").prependTo(s),a=e("<a href='#'></a>").addClass("ui-dialog-titlebar-close  ui-corner-all").attr("role","button").click(function(e){e.preventDefault(),t.close(e)}).appendTo(u),f=(this.uiDialogTitlebarCloseText=e("<span>")).addClass("ui-icon ui-icon-closethick").text(r.closeText).appendTo(a),l=e("<span>").uniqueId().addClass("ui-dialog-title").html(i).prependTo(u),c=(this.uiDialogButtonPane=e("<div>")).addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),h=(this.uiButtonSet=e("<div>")).addClass("ui-dialog-buttonset").appendTo(c);s.attr({role:"dialog","aria-labelledby":l.attr("id")}),u.find("*").add(u).disableSelection(),this._hoverable(a),this._focusable(a),r.draggable&&e.fn.draggable&&this._makeDraggable(),r.resizable&&e.fn.resizable&&this._makeResizable(),this._createButtons(r.buttons),this._isOpen=!1,e.fn.bgiframe&&s.bgiframe(),this._on(s,{keydown:function(t){if(!r.modal||t.keyCode!==e.ui.keyCode.TAB)return;var n=e(":tabbable",s),i=n.filter(":first"),o=n.filter(":last");if(t.target===o[0]&&!t.shiftKey)return i.focus(1),!1;if(t.target===i[0]&&t.shiftKey)return o.focus(1),!1}})},_init:function(){this.options.autoOpen&&this.open()},_destroy:function(){var e,t=this.oldPosition;this.overlay&&this.overlay.destroy(),this.uiDialog.hide(),this.element.removeClass("ui-dialog-content ui-widget-content").hide().appendTo("body"),this.uiDialog.remove(),this.originalTitle&&this.element.attr("title",this.originalTitle),e=t.parent.children().eq(t.index),e.length&&e[0]!==this.element[0]?e.before(this.element):t.parent.append(this.element)},widget:function(){return this.uiDialog},close:function(t){var n=this,r,i;if(!this._isOpen)return;if(!1===this._trigger("beforeClose",t))return;return this._isOpen=!1,this.overlay&&this.overlay.destroy(),this.options.hide?this.uiDialog.hide(this.options.hide,function(){n._trigger("close",t)}):(this.uiDialog.hide(),this._trigger("close",t)),e.ui.dialog.overlay.resize(),this.options.modal&&(r=0,e(".ui-dialog").each(function(){this!==n.uiDialog[0]&&(i=e(this).css("z-index"),isNaN(i)||(r=Math.max(r,i)))}),e.ui.dialog.maxZ=r),this},isOpen:function(){return this._isOpen},moveToTop:function(t,n){var r=this.options,i;return r.modal&&!t||!r.stack&&!r.modal?this._trigger("focus",n):(r.zIndex>e.ui.dialog.maxZ&&(e.ui.dialog.maxZ=r.zIndex),this.overlay&&(e.ui.dialog.maxZ+=1,e.ui.dialog.overlay.maxZ=e.ui.dialog.maxZ,this.overlay.$el.css("z-index",e.ui.dialog.overlay.maxZ)),i={scrollTop:this.element.scrollTop(),scrollLeft:this.element.scrollLeft()},e.ui.dialog.maxZ+=1,this.uiDialog.css("z-index",e.ui.dialog.maxZ),this.element.attr(i),this._trigger("focus",n),this)},open:function(){if(this._isOpen)return;var t,n=this.options,r=this.uiDialog;return this._size(),this._position(n.position),r.show(n.show),this.overlay=n.modal?new e.ui.dialog.overlay(this):null,this.moveToTop(!0),t=this.element.find(":tabbable"),t.length||(t=this.uiDialogButtonPane.find(":tabbable"),t.length||(t=r)),t.eq(0).focus(),this._isOpen=!0,this._trigger("open"),this},_createButtons:function(t){var n,r,i=this,s=!1;this.uiDialogButtonPane.remove(),this.uiButtonSet.empty(),typeof t=="object"&&t!==null&&e.each(t,function(){return!(s=!0)}),s?(e.each(t,function(t,n){n=e.isFunction(n)?{click:n,text:t}:n;var r=e("<button type='button'>").attr(n,!0).unbind("click").click(function(){n.click.apply(i.element[0],arguments)}).appendTo(i.uiButtonSet);e.fn.button&&r.button()}),this.uiDialog.addClass("ui-dialog-buttons"),this.uiDialogButtonPane.appendTo(this.uiDialog)):this.uiDialog.removeClass("ui-dialog-buttons")},_makeDraggable:function(){function r(e){return{position:e.position,offset:e.offset}}var t=this,n=this.options;this.uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",handle:".ui-dialog-titlebar",containment:"document",start:function(n,i){e(this).addClass("ui-dialog-dragging"),t._trigger("dragStart",n,r(i))},drag:function(e,n){t._trigger("drag",e,r(n))},stop:function(i,s){n.position=[s.position.left-t.document.scrollLeft(),s.position.top-t.document.scrollTop()],e(this).removeClass("ui-dialog-dragging"),t._trigger("dragStop",i,r(s)),e.ui.dialog.overlay.resize()}})},_makeResizable:function(n){function u(e){return{originalPosition:e.originalPosition,originalSize:e.originalSize,position:e.position,size:e.size}}n=n===t?this.options.resizable:n;var r=this,i=this.options,s=this.uiDialog.css("position"),o=typeof n=="string"?n:"n,e,s,w,se,sw,ne,nw";this.uiDialog.resizable({cancel:".ui-dialog-content",containment:"document",alsoResize:this.element,maxWidth:i.maxWidth,maxHeight:i.maxHeight,minWidth:i.minWidth,minHeight:this._minHeight(),handles:o,start:function(t,n){e(this).addClass("ui-dialog-resizing"),r._trigger("resizeStart",t,u(n))},resize:function(e,t){r._trigger("resize",e,u(t))},stop:function(t,n){e(this).removeClass("ui-dialog-resizing"),i.height=e(this).height(),i.width=e(this).width(),r._trigger("resizeStop",t,u(n)),e.ui.dialog.overlay.resize()}}).css("position",s).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se")},_minHeight:function(){var e=this.options;return e.height==="auto"?e.minHeight:Math.min(e.minHeight,e.height)},_position:function(t){var n=[],r=[0,0],i;if(t){if(typeof t=="string"||typeof t=="object"&&"0"in t)n=t.split?t.split(" "):[t[0],t[1]],n.length===1&&(n[1]=n[0]),e.each(["left","top"],function(e,t){+n[e]===n[e]&&(r[e]=n[e],n[e]=t)}),t={my:n.join(" "),at:n.join(" "),offset:r.join(" ")};t=e.extend({},e.ui.dialog.prototype.options.position,t)}else t=e.ui.dialog.prototype.options.position;i=this.uiDialog.is(":visible"),i||this.uiDialog.show(),this.uiDialog.position(t),i||this.uiDialog.hide()},_setOptions:function(t){var n=this,s={},o=!1;e.each(t,function(e,t){n._setOption(e,t),e in r&&(o=!0),e in i&&(s[e]=t)}),o&&this._size(),this.uiDialog.is(":data(resizable)")&&this.uiDialog.resizable("option",s)},_setOption:function(t,r){var i,s,o=this.uiDialog;switch(t){case"buttons":this._createButtons(r);break;case"closeText":this.uiDialogTitlebarCloseText.text(""+r);break;case"dialogClass":o.removeClass(this.options.dialogClass).addClass(n+r);break;case"disabled":r?o.addClass("ui-dialog-disabled"):o.removeClass("ui-dialog-disabled");break;case"draggable":i=o.is(":data(draggable)"),i&&!r&&o.draggable("destroy"),!i&&r&&this._makeDraggable();break;case"position":this._position(r);break;case"resizable":s=o.is(":data(resizable)"),s&&!r&&o.resizable("destroy"),s&&typeof r=="string"&&o.resizable("option","handles",r),!s&&r!==!1&&this._makeResizable(r);break;case"title":e(".ui-dialog-title",this.uiDialogTitlebar).html(""+(r||"&#160;"))}this._super(t,r)},_size:function(){var t,n,r,i=this.options,s=this.uiDialog.is(":visible");this.element.show().css({width:"auto",minHeight:0,height:0}),i.minWidth>i.width&&(i.width=i.minWidth),t=this.uiDialog.css({height:"auto",width:i.width}).outerHeight(),n=Math.max(0,i.minHeight-t),i.height==="auto"?e.support.minHeight?this.element.css({minHeight:n,height:"auto"}):(this.uiDialog.show(),r=this.element.css("height","auto").height(),s||this.uiDialog.hide(),this.element.height(Math.max(r,n))):this.element.height(Math.max(i.height-t,0)),this.uiDialog.is(":data(resizable)")&&this.uiDialog.resizable("option","minHeight",this._minHeight())}}),e.extend(e.ui.dialog,{uuid:0,maxZ:0,getTitleId:function(e){var t=e.attr("id");return t||(this.uuid+=1,t=this.uuid),"ui-dialog-title-"+t},overlay:function(t){this.$el=e.ui.dialog.overlay.create(t)}}),e.extend(e.ui.dialog.overlay,{instances:[],oldInstances:[],maxZ:0,events:e.map("focus,mousedown,mouseup,keydown,keypress,click".split(","),function(e){return e+".dialog-overlay"}).join(" "),create:function(t){this.instances.length===0&&(setTimeout(function(){e.ui.dialog.overlay.instances.length&&e(document).bind(e.ui.dialog.overlay.events,function(t){if(e(t.target).zIndex()<e.ui.dialog.overlay.maxZ)return!1})},1),e(window).bind("resize.dialog-overlay",e.ui.dialog.overlay.resize));var n=this.oldInstances.pop()||e("<div>").addClass("ui-widget-overlay");return e(document).bind("keydown.dialog-overlay",function(r){var i=e.ui.dialog.overlay.instances;i.length!==0&&i[i.length-1]===n&&t.options.closeOnEscape&&!r.isDefaultPrevented()&&r.keyCode&&r.keyCode===e.ui.keyCode.ESCAPE&&(t.close(r),r.preventDefault())}),n.appendTo(document.body).css({width:this.width(),height:this.height()}),e.fn.bgiframe&&n.bgiframe(),this.instances.push(n),n},destroy:function(t){var n=e.inArray(t,this.instances),r=0;n!==-1&&this.oldInstances.push(this.instances.splice(n,1)[0]),this.instances.length===0&&e([document,window]).unbind(".dialog-overlay"),t.height(0).width(0).remove(),e.each(this.instances,function(){r=Math.max(r,this.css("z-index"))}),this.maxZ=r},height:function(){var t,n;return e.browser.msie?(t=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),n=Math.max(document.documentElement.offsetHeight,document.body.offsetHeight),t<n?e(window).height()+"px":t+"px"):e(document).height()+"px"},width:function(){var t,n;return e.browser.msie?(t=Math.max(document.documentElement.scrollWidth,document.body.scrollWidth),n=Math.max(document.documentElement.offsetWidth,document.body.offsetWidth),t<n?e(window).width()+"px":t+"px"):e(document).width()+"px"},resize:function(){var t=e([]);e.each(e.ui.dialog.overlay.instances,function(){t=t.add(this)}),t.css({width:0,height:0}).css({width:e.ui.dialog.overlay.width(),height:e.ui.dialog.overlay.height()})}}),e.extend(e.ui.dialog.overlay.prototype,{destroy:function(){e.ui.dialog.overlay.destroy(this.$el)}})})(jQuery);(function(e,t){e.widget("ui.draggable",e.ui.mouse,{version:"1.9.0",widgetEventPrefix:"drag",options:{addClasses:!0,appendTo:"parent",axis:!1,connectToSortable:!1,containment:!1,cursor:"auto",cursorAt:!1,grid:!1,handle:!1,helper:"original",iframeFix:!1,opacity:!1,refreshPositions:!1,revert:!1,revertDuration:500,scope:"default",scroll:!0,scrollSensitivity:20,scrollSpeed:20,snap:!1,snapMode:"both",snapTolerance:20,stack:!1,zIndex:!1},_create:function(){this.options.helper=="original"&&!/^(?:r|a|f)/.test(this.element.css("position"))&&(this.element[0].style.position="relative"),this.options.addClasses&&this.element.addClass("ui-draggable"),this.options.disabled&&this.element.addClass("ui-draggable-disabled"),this._mouseInit()},_destroy:function(){this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"),this._mouseDestroy()},_mouseCapture:function(t){var n=this.options;return this.helper||n.disabled||e(t.target).is(".ui-resizable-handle")?!1:(this.handle=this._getHandle(t),this.handle?(e(n.iframeFix===!0?"iframe":n.iframeFix).each(function(){e('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width:this.offsetWidth+"px",height:this.offsetHeight+"px",position:"absolute",opacity:"0.001",zIndex:1e3}).css(e(this).offset()).appendTo("body")}),!0):!1)},_mouseStart:function(t){var n=this.options;return this.helper=this._createHelper(t),this.helper.addClass("ui-draggable-dragging"),this._cacheHelperProportions(),e.ui.ddmanager&&(e.ui.ddmanager.current=this),this._cacheMargins(),this.cssPosition=this.helper.css("position"),this.scrollParent=this.helper.scrollParent(),this.offset=this.positionAbs=this.element.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.originalPosition=this.position=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,n.cursorAt&&this._adjustOffsetFromHelper(n.cursorAt),n.containment&&this._setContainment(),this._trigger("start",t)===!1?(this._clear(),!1):(this._cacheHelperProportions(),e.ui.ddmanager&&!n.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this._mouseDrag(t,!0),e.ui.ddmanager&&e.ui.ddmanager.dragStart(this,t),!0)},_mouseDrag:function(t,n){this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute");if(!n){var r=this._uiHash();if(this._trigger("drag",t,r)===!1)return this._mouseUp({}),!1;this.position=r.position}if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";return e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),!1},_mouseStop:function(t){var n=!1;e.ui.ddmanager&&!this.options.dropBehaviour&&(n=e.ui.ddmanager.drop(this,t)),this.dropped&&(n=this.dropped,this.dropped=!1);var r=this.element[0],i=!1;while(r&&(r=r.parentNode))r==document&&(i=!0);if(!i&&this.options.helper==="original")return!1;if(this.options.revert=="invalid"&&!n||this.options.revert=="valid"&&n||this.options.revert===!0||e.isFunction(this.options.revert)&&this.options.revert.call(this.element,n)){var s=this;e(this.helper).animate(this.originalPosition,parseInt(this.options.revertDuration,10),function(){s._trigger("stop",t)!==!1&&s._clear()})}else this._trigger("stop",t)!==!1&&this._clear();return!1},_mouseUp:function(t){return e("div.ui-draggable-iframeFix").each(function(){this.parentNode.removeChild(this)}),e.ui.ddmanager&&e.ui.ddmanager.dragStop(this,t),e.ui.mouse.prototype._mouseUp.call(this,t)},cancel:function(){return this.helper.is(".ui-draggable-dragging")?this._mouseUp({}):this._clear(),this},_getHandle:function(t){var n=!this.options.handle||!e(this.options.handle,this.element).length?!0:!1;return e(this.options.handle,this.element).find("*").andSelf().each(function(){this==t.target&&(n=!0)}),n},_createHelper:function(t){var n=this.options,r=e.isFunction(n.helper)?e(n.helper.apply(this.element[0],[t])):n.helper=="clone"?this.element.clone().removeAttr("id"):this.element;return r.parents("body").length||r.appendTo(n.appendTo=="parent"?this.element[0].parentNode:n.appendTo),r[0]!=this.element[0]&&!/(fixed|absolute)/.test(r.css("position"))&&r.css("position","absolute"),r},_adjustOffsetFromHelper:function(t){typeof t=="string"&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();this.cssPosition=="absolute"&&this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop());if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=="html"&&e.browser.msie)t={top:0,left:0};return{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var e=this.element.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.element.css("marginLeft"),10)||0,top:parseInt(this.element.css("marginTop"),10)||0,right:parseInt(this.element.css("marginRight"),10)||0,bottom:parseInt(this.element.css("marginBottom"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t=this.options;t.containment=="parent"&&(t.containment=this.helper[0].parentNode);if(t.containment=="document"||t.containment=="window")this.containment=[t.containment=="document"?0:e(window).scrollLeft()-this.offset.relative.left-this.offset.parent.left,t.containment=="document"?0:e(window).scrollTop()-this.offset.relative.top-this.offset.parent.top,(t.containment=="document"?0:e(window).scrollLeft())+e(t.containment=="document"?document:window).width()-this.helperProportions.width-this.margins.left,(t.containment=="document"?0:e(window).scrollTop())+(e(t.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(t.containment)&&t.containment.constructor!=Array){var n=e(t.containment),r=n[0];if(!r)return;var i=n.offset(),s=e(r).css("overflow")!="hidden";this.containment=[(parseInt(e(r).css("borderLeftWidth"),10)||0)+(parseInt(e(r).css("paddingLeft"),10)||0),(parseInt(e(r).css("borderTopWidth"),10)||0)+(parseInt(e(r).css("paddingTop"),10)||0),(s?Math.max(r.scrollWidth,r.offsetWidth):r.offsetWidth)-(parseInt(e(r).css("borderLeftWidth"),10)||0)-(parseInt(e(r).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left-this.margins.right,(s?Math.max(r.scrollHeight,r.offsetHeight):r.offsetHeight)-(parseInt(e(r).css("borderTopWidth"),10)||0)-(parseInt(e(r).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top-this.margins.bottom],this.relative_container=n}else t.containment.constructor==Array&&(this.containment=t.containment)},_convertPositionTo:function(t,n){n||(n=this.position);var r=t=="absolute"?1:-1,i=this.options,s=this.cssPosition!="absolute"||this.scrollParent[0]!=document&&!!e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(s[0].tagName);return{top:n.top+this.offset.relative.top*r+this.offset.parent.top*r-(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():o?0:s.scrollTop())*r,left:n.left+this.offset.relative.left*r+this.offset.parent.left*r-(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():o?0:s.scrollLeft())*r}},_generatePosition:function(t){var n=this.options,r=this.cssPosition!="absolute"||this.scrollParent[0]!=document&&!!e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,i=/(html|body)/i.test(r[0].tagName),s=t.pageX,o=t.pageY;if(this.originalPosition){var u;if(this.containment){if(this.relative_container){var a=this.relative_container.offset();u=[this.containment[0]+a.left,this.containment[1]+a.top,this.containment[2]+a.left,this.containment[3]+a.top]}else u=this.containment;t.pageX-this.offset.click.left<u[0]&&(s=u[0]+this.offset.click.left),t.pageY-this.offset.click.top<u[1]&&(o=u[1]+this.offset.click.top),t.pageX-this.offset.click.left>u[2]&&(s=u[2]+this.offset.click.left),t.pageY-this.offset.click.top>u[3]&&(o=u[3]+this.offset.click.top)}if(n.grid){var f=n.grid[1]?this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1]:this.originalPageY;o=u?f-this.offset.click.top<u[1]||f-this.offset.click.top>u[3]?f-this.offset.click.top<u[1]?f+n.grid[1]:f-n.grid[1]:f:f;var l=n.grid[0]?this.originalPageX+Math.round((s-this.originalPageX)/n.grid[0])*n.grid[0]:this.originalPageX;s=u?l-this.offset.click.left<u[0]||l-this.offset.click.left>u[2]?l-this.offset.click.left<u[0]?l+n.grid[0]:l-n.grid[0]:l:l}}return{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():i?0:r.scrollTop()),left:s-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():i?0:r.scrollLeft())}},_clear:function(){this.helper.removeClass("ui-draggable-dragging"),this.helper[0]!=this.element[0]&&!this.cancelHelperRemoval&&this.helper.remove(),this.helper=null,this.cancelHelperRemoval=!1},_trigger:function(t,n,r){return r=r||this._uiHash(),e.ui.plugin.call(this,t,[n,r]),t=="drag"&&(this.positionAbs=this._convertPositionTo("absolute")),e.Widget.prototype._trigger.call(this,t,n,r)},plugins:{},_uiHash:function(e){return{helper:this.helper,position:this.position,originalPosition:this.originalPosition,offset:this.positionAbs}}}),e.ui.plugin.add("draggable","connectToSortable",{start:function(t,n){var r=e(this).data("draggable"),i=r.options,s=e.extend({},n,{item:r.element});r.sortables=[],e(i.connectToSortable).each(function(){var n=e.data(this,"sortable");n&&!n.options.disabled&&(r.sortables.push({instance:n,shouldRevert:n.options.revert}),n.refreshPositions(),n._trigger("activate",t,s))})},stop:function(t,n){var r=e(this).data("draggable"),i=e.extend({},n,{item:r.element});e.each(r.sortables,function(){this.instance.isOver?(this.instance.isOver=0,r.cancelHelperRemoval=!0,this.instance.cancelHelperRemoval=!1,this.shouldRevert&&(this.instance.options.revert=!0),this.instance._mouseStop(t),this.instance.options.helper=this.instance.options._helper,r.options.helper=="original"&&this.instance.currentItem.css({top:"auto",left:"auto"})):(this.instance.cancelHelperRemoval=!1,this.instance._trigger("deactivate",t,i))})},drag:function(t,n){var r=e(this).data("draggable"),i=this,s=function(t){var n=this.offset.click.top,r=this.offset.click.left,i=this.positionAbs.top,s=this.positionAbs.left,o=t.height,u=t.width,a=t.top,f=t.left;return e.ui.isOver(i+n,s+r,a,f,o,u)};e.each(r.sortables,function(s){this.instance.positionAbs=r.positionAbs,this.instance.helperProportions=r.helperProportions,this.instance.offset.click=r.offset.click,this.instance._intersectsWith(this.instance.containerCache)?(this.instance.isOver||(this.instance.isOver=1,this.instance.currentItem=e(i).clone().removeAttr("id").appendTo(this.instance.element).data("sortable-item",!0),this.instance.options._helper=this.instance.options.helper,this.instance.options.helper=function(){return n.helper[0]},t.target=this.instance.currentItem[0],this.instance._mouseCapture(t,!0),this.instance._mouseStart(t,!0,!0),this.instance.offset.click.top=r.offset.click.top,this.instance.offset.click.left=r.offset.click.left,this.instance.offset.parent.left-=r.offset.parent.left-this.instance.offset.parent.left,this.instance.offset.parent.top-=r.offset.parent.top-this.instance.offset.parent.top,r._trigger("toSortable",t),r.dropped=this.instance.element,r.currentItem=r.element,this.instance.fromOutside=r),this.instance.currentItem&&this.instance._mouseDrag(t)):this.instance.isOver&&(this.instance.isOver=0,this.instance.cancelHelperRemoval=!0,this.instance.options.revert=!1,this.instance._trigger("out",t,this.instance._uiHash(this.instance)),this.instance._mouseStop(t,!0),this.instance.options.helper=this.instance.options._helper,this.instance.currentItem.remove(),this.instance.placeholder&&this.instance.placeholder.remove(),r._trigger("fromSortable",t),r.dropped=!1)})}}),e.ui.plugin.add("draggable","cursor",{start:function(t,n){var r=e("body"),i=e(this).data("draggable").options;r.css("cursor")&&(i._cursor=r.css("cursor")),r.css("cursor",i.cursor)},stop:function(t,n){var r=e(this).data("draggable").options;r._cursor&&e("body").css("cursor",r._cursor)}}),e.ui.plugin.add("draggable","opacity",{start:function(t,n){var r=e(n.helper),i=e(this).data("draggable").options;r.css("opacity")&&(i._opacity=r.css("opacity")),r.css("opacity",i.opacity)},stop:function(t,n){var r=e(this).data("draggable").options;r._opacity&&e(n.helper).css("opacity",r._opacity)}}),e.ui.plugin.add("draggable","scroll",{start:function(t,n){var r=e(this).data("draggable");r.scrollParent[0]!=document&&r.scrollParent[0].tagName!="HTML"&&(r.overflowOffset=r.scrollParent.offset())},drag:function(t,n){var r=e(this).data("draggable"),i=r.options,s=!1;if(r.scrollParent[0]!=document&&r.scrollParent[0].tagName!="HTML"){if(!i.axis||i.axis!="x")r.overflowOffset.top+r.scrollParent[0].offsetHeight-t.pageY<i.scrollSensitivity?r.scrollParent[0].scrollTop=s=r.scrollParent[0].scrollTop+i.scrollSpeed:t.pageY-r.overflowOffset.top<i.scrollSensitivity&&(r.scrollParent[0].scrollTop=s=r.scrollParent[0].scrollTop-i.scrollSpeed);if(!i.axis||i.axis!="y")r.overflowOffset.left+r.scrollParent[0].offsetWidth-t.pageX<i.scrollSensitivity?r.scrollParent[0].scrollLeft=s=r.scrollParent[0].scrollLeft+i.scrollSpeed:t.pageX-r.overflowOffset.left<i.scrollSensitivity&&(r.scrollParent[0].scrollLeft=s=r.scrollParent[0].scrollLeft-i.scrollSpeed)}else{if(!i.axis||i.axis!="x")t.pageY-e(document).scrollTop()<i.scrollSensitivity?s=e(document).scrollTop(e(document).scrollTop()-i.scrollSpeed):e(window).height()-(t.pageY-e(document).scrollTop())<i.scrollSensitivity&&(s=e(document).scrollTop(e(document).scrollTop()+i.scrollSpeed));if(!i.axis||i.axis!="y")t.pageX-e(document).scrollLeft()<i.scrollSensitivity?s=e(document).scrollLeft(e(document).scrollLeft()-i.scrollSpeed):e(window).width()-(t.pageX-e(document).scrollLeft())<i.scrollSensitivity&&(s=e(document).scrollLeft(e(document).scrollLeft()+i.scrollSpeed))}s!==!1&&e.ui.ddmanager&&!i.dropBehaviour&&e.ui.ddmanager.prepareOffsets(r,t)}}),e.ui.plugin.add("draggable","snap",{start:function(t,n){var r=e(this).data("draggable"),i=r.options;r.snapElements=[],e(i.snap.constructor!=String?i.snap.items||":data(draggable)":i.snap).each(function(){var t=e(this),n=t.offset();this!=r.element[0]&&r.snapElements.push({item:this,width:t.outerWidth(),height:t.outerHeight(),top:n.top,left:n.left})})},drag:function(t,n){var r=e(this).data("draggable"),i=r.options,s=i.snapTolerance,o=n.offset.left,u=o+r.helperProportions.width,a=n.offset.top,f=a+r.helperProportions.height;for(var l=r.snapElements.length-1;l>=0;l--){var c=r.snapElements[l].left,h=c+r.snapElements[l].width,p=r.snapElements[l].top,d=p+r.snapElements[l].height;if(!(c-s<o&&o<h+s&&p-s<a&&a<d+s||c-s<o&&o<h+s&&p-s<f&&f<d+s||c-s<u&&u<h+s&&p-s<a&&a<d+s||c-s<u&&u<h+s&&p-s<f&&f<d+s)){r.snapElements[l].snapping&&r.options.snap.release&&r.options.snap.release.call(r.element,t,e.extend(r._uiHash(),{snapItem:r.snapElements[l].item})),r.snapElements[l].snapping=!1;continue}if(i.snapMode!="inner"){var v=Math.abs(p-f)<=s,m=Math.abs(d-a)<=s,g=Math.abs(c-u)<=s,y=Math.abs(h-o)<=s;v&&(n.position.top=r._convertPositionTo("relative",{top:p-r.helperProportions.height,left:0}).top-r.margins.top),m&&(n.position.top=r._convertPositionTo("relative",{top:d,left:0}).top-r.margins.top),g&&(n.position.left=r._convertPositionTo("relative",{top:0,left:c-r.helperProportions.width}).left-r.margins.left),y&&(n.position.left=r._convertPositionTo("relative",{top:0,left:h}).left-r.margins.left)}var b=v||m||g||y;if(i.snapMode!="outer"){var v=Math.abs(p-a)<=s,m=Math.abs(d-f)<=s,g=Math.abs(c-o)<=s,y=Math.abs(h-u)<=s;v&&(n.position.top=r._convertPositionTo("relative",{top:p,left:0}).top-r.margins.top),m&&(n.position.top=r._convertPositionTo("relative",{top:d-r.helperProportions.height,left:0}).top-r.margins.top),g&&(n.position.left=r._convertPositionTo("relative",{top:0,left:c}).left-r.margins.left),y&&(n.position.left=r._convertPositionTo("relative",{top:0,left:h-r.helperProportions.width}).left-r.margins.left)}!r.snapElements[l].snapping&&(v||m||g||y||b)&&r.options.snap.snap&&r.options.snap.snap.call(r.element,t,e.extend(r._uiHash(),{snapItem:r.snapElements[l].item})),r.snapElements[l].snapping=v||m||g||y||b}}}),e.ui.plugin.add("draggable","stack",{start:function(t,n){var r=e(this).data("draggable").options,i=e.makeArray(e(r.stack)).sort(function(t,n){return(parseInt(e(t).css("zIndex"),10)||0)-(parseInt(e(n).css("zIndex"),10)||0)});if(!i.length)return;var s=parseInt(i[0].style.zIndex)||0;e(i).each(function(e){this.style.zIndex=s+e}),this[0].style.zIndex=s+i.length}}),e.ui.plugin.add("draggable","zIndex",{start:function(t,n){var r=e(n.helper),i=e(this).data("draggable").options;r.css("zIndex")&&(i._zIndex=r.css("zIndex")),r.css("zIndex",i.zIndex)},stop:function(t,n){var r=e(this).data("draggable").options;r._zIndex&&e(n.helper).css("zIndex",r._zIndex)}})})(jQuery);(function(e,t){e.widget("ui.droppable",{version:"1.9.0",widgetEventPrefix:"drop",options:{accept:"*",activeClass:!1,addClasses:!0,greedy:!1,hoverClass:!1,scope:"default",tolerance:"intersect"},_create:function(){var t=this.options,n=t.accept;this.isover=0,this.isout=1,this.accept=e.isFunction(n)?n:function(e){return e.is(n)},this.proportions={width:this.element[0].offsetWidth,height:this.element[0].offsetHeight},e.ui.ddmanager.droppables[t.scope]=e.ui.ddmanager.droppables[t.scope]||[],e.ui.ddmanager.droppables[t.scope].push(this),t.addClasses&&this.element.addClass("ui-droppable")},_destroy:function(){var t=e.ui.ddmanager.droppables[this.options.scope];for(var n=0;n<t.length;n++)t[n]==this&&t.splice(n,1);this.element.removeClass("ui-droppable ui-droppable-disabled")},_setOption:function(t,n){t=="accept"&&(this.accept=e.isFunction(n)?n:function(e){return e.is(n)}),e.Widget.prototype._setOption.apply(this,arguments)},_activate:function(t){var n=e.ui.ddmanager.current;this.options.activeClass&&this.element.addClass(this.options.activeClass),n&&this._trigger("activate",t,this.ui(n))},_deactivate:function(t){var n=e.ui.ddmanager.current;this.options.activeClass&&this.element.removeClass(this.options.activeClass),n&&this._trigger("deactivate",t,this.ui(n))},_over:function(t){var n=e.ui.ddmanager.current;if(!n||(n.currentItem||n.element)[0]==this.element[0])return;this.accept.call(this.element[0],n.currentItem||n.element)&&(this.options.hoverClass&&this.element.addClass(this.options.hoverClass),this._trigger("over",t,this.ui(n)))},_out:function(t){var n=e.ui.ddmanager.current;if(!n||(n.currentItem||n.element)[0]==this.element[0])return;this.accept.call(this.element[0],n.currentItem||n.element)&&(this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("out",t,this.ui(n)))},_drop:function(t,n){var r=n||e.ui.ddmanager.current;if(!r||(r.currentItem||r.element)[0]==this.element[0])return!1;var i=!1;return this.element.find(":data(droppable)").not(".ui-draggable-dragging").each(function(){var t=e.data(this,"droppable");if(t.options.greedy&&!t.options.disabled&&t.options.scope==r.options.scope&&t.accept.call(t.element[0],r.currentItem||r.element)&&e.ui.intersect(r,e.extend(t,{offset:t.element.offset()}),t.options.tolerance))return i=!0,!1}),i?!1:this.accept.call(this.element[0],r.currentItem||r.element)?(this.options.activeClass&&this.element.removeClass(this.options.activeClass),this.options.hoverClass&&this.element.removeClass(this.options.hoverClass),this._trigger("drop",t,this.ui(r)),this.element):!1},ui:function(e){return{draggable:e.currentItem||e.element,helper:e.helper,position:e.position,offset:e.positionAbs}}}),e.ui.intersect=function(t,n,r){if(!n.offset)return!1;var i=(t.positionAbs||t.position.absolute).left,s=i+t.helperProportions.width,o=(t.positionAbs||t.position.absolute).top,u=o+t.helperProportions.height,a=n.offset.left,f=a+n.proportions.width,l=n.offset.top,c=l+n.proportions.height;switch(r){case"fit":return a<=i&&s<=f&&l<=o&&u<=c;case"intersect":return a<i+t.helperProportions.width/2&&s-t.helperProportions.width/2<f&&l<o+t.helperProportions.height/2&&u-t.helperProportions.height/2<c;case"pointer":var h=(t.positionAbs||t.position.absolute).left+(t.clickOffset||t.offset.click).left,p=(t.positionAbs||t.position.absolute).top+(t.clickOffset||t.offset.click).top,d=e.ui.isOver(p,h,l,a,n.proportions.height,n.proportions.width);return d;case"touch":return(o>=l&&o<=c||u>=l&&u<=c||o<l&&u>c)&&(i>=a&&i<=f||s>=a&&s<=f||i<a&&s>f);default:return!1}},e.ui.ddmanager={current:null,droppables:{"default":[]},prepareOffsets:function(t,n){var r=e.ui.ddmanager.droppables[t.options.scope]||[],i=n?n.type:null,s=(t.currentItem||t.element).find(":data(droppable)").andSelf();e:for(var o=0;o<r.length;o++){if(r[o].options.disabled||t&&!r[o].accept.call(r[o].element[0],t.currentItem||t.element))continue;for(var u=0;u<s.length;u++)if(s[u]==r[o].element[0]){r[o].proportions.height=0;continue e}r[o].visible=r[o].element.css("display")!="none";if(!r[o].visible)continue;i=="mousedown"&&r[o]._activate.call(r[o],n),r[o].offset=r[o].element.offset(),r[o].proportions={width:r[o].element[0].offsetWidth,height:r[o].element[0].offsetHeight}}},drop:function(t,n){var r=!1;return e.each(e.ui.ddmanager.droppables[t.options.scope]||[],function(){if(!this.options)return;!this.options.disabled&&this.visible&&e.ui.intersect(t,this,this.options.tolerance)&&(r=this._drop.call(this,n)||r),!this.options.disabled&&this.visible&&this.accept.call(this.element[0],t.currentItem||t.element)&&(this.isout=1,this.isover=0,this._deactivate.call(this,n))}),r},dragStart:function(t,n){t.element.parentsUntil("body").bind("scroll.droppable",function(){t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,n)})},drag:function(t,n){t.options.refreshPositions&&e.ui.ddmanager.prepareOffsets(t,n),e.each(e.ui.ddmanager.droppables[t.options.scope]||[],function(){if(this.options.disabled||this.greedyChild||!this.visible)return;var r=e.ui.intersect(t,this,this.options.tolerance),i=!r&&this.isover==1?"isout":r&&this.isover==0?"isover":null;if(!i)return;var s;if(this.options.greedy){var o=this.options.scope,u=this.element.parents(":data(droppable)").filter(function(){return e.data(this,"droppable").options.scope===o});u.length&&(s=e.data(u[0],"droppable"),s.greedyChild=i=="isover"?1:0)}s&&i=="isover"&&(s.isover=0,s.isout=1,s._out.call(s,n)),this[i]=1,this[i=="isout"?"isover":"isout"]=0,this[i=="isover"?"_over":"_out"].call(this,n),s&&i=="isout"&&(s.isout=0,s.isover=1,s._over.call(s,n))})},dragStop:function(t,n){t.element.parentsUntil("body").unbind("scroll.droppable"),t.options.refreshPositions||e.ui.ddmanager.prepareOffsets(t,n)}}})(jQuery);jQuery.effects||function(e,t){var n=e.uiBackCompat!==!1,r="ui-effects-";e.effects={effect:{}},function(t,n){function p(e,t,n){var r=a[t.type]||{};return e==null?n||!t.def?null:t.def:(e=r.floor?~~e:parseFloat(e),isNaN(e)?t.def:r.mod?(e+r.mod)%r.mod:0>e?0:r.max<e?r.max:e)}function d(e){var n=o(),r=n._rgba=[];return e=e.toLowerCase(),h(s,function(t,i){var s,o=i.re.exec(e),a=o&&i.parse(o),f=i.space||"rgba";if(a)return s=n[f](a),n[u[f].cache]=s[u[f].cache],r=n._rgba=s._rgba,!1}),r.length?(r.join()==="0,0,0,0"&&t.extend(r,c.transparent),n):c[e]}function v(e,t,n){return n=(n+1)%1,n*6<1?e+(t-e)*n*6:n*2<1?t:n*3<2?e+(t-e)*(2/3-n)*6:e}var r="backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor".split(" "),i=/^([\-+])=\s*(\d+\.?\d*)/,s=[{re:/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1],e[2],e[3],e[4]]}},{re:/rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,parse:function(e){return[e[1]*2.55,e[2]*2.55,e[3]*2.55,e[4]]}},{re:/#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,parse:function(e){return[parseInt(e[1],16),parseInt(e[2],16),parseInt(e[3],16)]}},{re:/#([a-f0-9])([a-f0-9])([a-f0-9])/,parse:function(e){return[parseInt(e[1]+e[1],16),parseInt(e[2]+e[2],16),parseInt(e[3]+e[3],16)]}},{re:/hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d+(?:\.\d+)?)\s*)?\)/,space:"hsla",parse:function(e){return[e[1],e[2]/100,e[3]/100,e[4]]}}],o=t.Color=function(e,n,r,i){return new t.Color.fn.parse(e,n,r,i)},u={rgba:{props:{red:{idx:0,type:"byte"},green:{idx:1,type:"byte"},blue:{idx:2,type:"byte"}}},hsla:{props:{hue:{idx:0,type:"degrees"},saturation:{idx:1,type:"percent"},lightness:{idx:2,type:"percent"}}}},a={"byte":{floor:!0,max:255},percent:{max:1},degrees:{mod:360,floor:!0}},f=o.support={},l=t("<p>")[0],c,h=t.each;l.style.cssText="background-color:rgba(1,1,1,.5)",f.rgba=l.style.backgroundColor.indexOf("rgba")>-1,h(u,function(e,t){t.cache="_"+e,t.props.alpha={idx:3,type:"percent",def:1}}),o.fn=t.extend(o.prototype,{parse:function(r,i,s,a){if(r===n)return this._rgba=[null,null,null,null],this;if(r.jquery||r.nodeType)r=t(r).css(i),i=n;var f=this,l=t.type(r),v=this._rgba=[],m;i!==n&&(r=[r,i,s,a],l="array");if(l==="string")return this.parse(d(r)||c._default);if(l==="array")return h(u.rgba.props,function(e,t){v[t.idx]=p(r[t.idx],t)}),this;if(l==="object")return r instanceof o?h(u,function(e,t){r[t.cache]&&(f[t.cache]=r[t.cache].slice())}):h(u,function(t,n){var i=n.cache;h(n.props,function(e,t){if(!f[i]&&n.to){if(e==="alpha"||r[e]==null)return;f[i]=n.to(f._rgba)}f[i][t.idx]=p(r[e],t,!0)}),f[i]&&e.inArray(null,f[i].slice(0,3))<0&&(f[i][3]=1,n.from&&(f._rgba=n.from(f[i])))}),this},is:function(e){var t=o(e),n=!0,r=this;return h(u,function(e,i){var s,o=t[i.cache];return o&&(s=r[i.cache]||i.to&&i.to(r._rgba)||[],h(i.props,function(e,t){if(o[t.idx]!=null)return n=o[t.idx]===s[t.idx],n})),n}),n},_space:function(){var e=[],t=this;return h(u,function(n,r){t[r.cache]&&e.push(n)}),e.pop()},transition:function(e,t){var n=o(e),r=n._space(),i=u[r],s=this.alpha()===0?o("transparent"):this,f=s[i.cache]||i.to(s._rgba),l=f.slice();return n=n[i.cache],h(i.props,function(e,r){var i=r.idx,s=f[i],o=n[i],u=a[r.type]||{};if(o===null)return;s===null?l[i]=o:(u.mod&&(o-s>u.mod/2?s+=u.mod:s-o>u.mod/2&&(s-=u.mod)),l[i]=p((o-s)*t+s,r))}),this[r](l)},blend:function(e){if(this._rgba[3]===1)return this;var n=this._rgba.slice(),r=n.pop(),i=o(e)._rgba;return o(t.map(n,function(e,t){return(1-r)*i[t]+r*e}))},toRgbaString:function(){var e="rgba(",n=t.map(this._rgba,function(e,t){return e==null?t>2?1:0:e});return n[3]===1&&(n.pop(),e="rgb("),e+n.join()+")"},toHslaString:function(){var e="hsla(",n=t.map(this.hsla(),function(e,t){return e==null&&(e=t>2?1:0),t&&t<3&&(e=Math.round(e*100)+"%"),e});return n[3]===1&&(n.pop(),e="hsl("),e+n.join()+")"},toHexString:function(e){var n=this._rgba.slice(),r=n.pop();return e&&n.push(~~(r*255)),"#"+t.map(n,function(e,t){return e=(e||0).toString(16),e.length===1?"0"+e:e}).join("")},toString:function(){return this._rgba[3]===0?"transparent":this.toRgbaString()}}),o.fn.parse.prototype=o.fn,u.hsla.to=function(e){if(e[0]==null||e[1]==null||e[2]==null)return[null,null,null,e[3]];var t=e[0]/255,n=e[1]/255,r=e[2]/255,i=e[3],s=Math.max(t,n,r),o=Math.min(t,n,r),u=s-o,a=s+o,f=a*.5,l,c;return o===s?l=0:t===s?l=60*(n-r)/u+360:n===s?l=60*(r-t)/u+120:l=60*(t-n)/u+240,f===0||f===1?c=f:f<=.5?c=u/a:c=u/(2-a),[Math.round(l)%360,c,f,i==null?1:i]},u.hsla.from=function(e){if(e[0]==null||e[1]==null||e[2]==null)return[null,null,null,e[3]];var t=e[0]/360,n=e[1],r=e[2],i=e[3],s=r<=.5?r*(1+n):r+n-r*n,o=2*r-s,u,a,f;return[Math.round(v(o,s,t+1/3)*255),Math.round(v(o,s,t)*255),Math.round(v(o,s,t-1/3)*255),i]},h(u,function(e,r){var s=r.props,u=r.cache,a=r.to,f=r.from;o.fn[e]=function(e){a&&!this[u]&&(this[u]=a(this._rgba));if(e===n)return this[u].slice();var r,i=t.type(e),l=i==="array"||i==="object"?e:arguments,c=this[u].slice();return h(s,function(e,t){var n=l[i==="object"?e:t.idx];n==null&&(n=c[t.idx]),c[t.idx]=p(n,t)}),f?(r=o(f(c)),r[u]=c,r):o(c)},h(s,function(n,r){if(o.fn[n])return;o.fn[n]=function(s){var o=t.type(s),u=n==="alpha"?this._hsla?"hsla":"rgba":e,a=this[u](),f=a[r.idx],l;return o==="undefined"?f:(o==="function"&&(s=s.call(this,f),o=t.type(s)),s==null&&r.empty?this:(o==="string"&&(l=i.exec(s),l&&(s=f+parseFloat(l[2])*(l[1]==="+"?1:-1))),a[r.idx]=s,this[u](a)))}})}),h(r,function(e,n){t.cssHooks[n]={set:function(e,r){var i,s,u="";if(t.type(r)!=="string"||(i=d(r))){r=o(i||r);if(!f.rgba&&r._rgba[3]!==1){s=n==="backgroundColor"?e.parentNode:e;while((u===""||u==="transparent")&&s&&s.style)try{u=t.css(s,"backgroundColor"),s=s.parentNode}catch(a){}r=r.blend(u&&u!=="transparent"?u:"_default")}r=r.toRgbaString()}try{e.style[n]=r}catch(r){}}},t.fx.step[n]=function(e){e.colorInit||(e.start=o(e.elem,n),e.end=o(e.end),e.colorInit=!0),t.cssHooks[n].set(e.elem,e.start.transition(e.end,e.pos))}}),t.cssHooks.borderColor={expand:function(e){var t={};return h(["Top","Right","Bottom","Left"],function(n,r){t["border"+r+"Color"]=e}),t}},c=t.Color.names={aqua:"#00ffff",black:"#000000",blue:"#0000ff",fuchsia:"#ff00ff",gray:"#808080",green:"#008000",lime:"#00ff00",maroon:"#800000",navy:"#000080",olive:"#808000",purple:"#800080",red:"#ff0000",silver:"#c0c0c0",teal:"#008080",white:"#ffffff",yellow:"#ffff00",transparent:[null,null,null,0],_default:"#ffffff"}}(jQuery),function(){function i(){var t=this.ownerDocument.defaultView?this.ownerDocument.defaultView.getComputedStyle(this,null):this.currentStyle,n={},r,i,s;if(t&&t.length&&t[0]&&t[t[0]]){s=t.length;while(s--)r=t[s],typeof t[r]=="string"&&(n[e.camelCase(r)]=t[r])}else for(r in t)typeof t[r]=="string"&&(n[r]=t[r]);return n}function s(t,n){var i={},s,o;for(s in n)o=n[s],t[s]!==o&&!r[s]&&(e.fx.step[s]||!isNaN(parseFloat(o)))&&(i[s]=o);return i}var n=["add","remove","toggle"],r={border:1,borderBottom:1,borderColor:1,borderLeft:1,borderRight:1,borderTop:1,borderWidth:1,margin:1,padding:1};e.each(["borderLeftStyle","borderRightStyle","borderBottomStyle","borderTopStyle"],function(t,n){e.fx.step[n]=function(e){if(e.end!=="none"&&!e.setAttr||e.pos===1&&!e.setAttr)jQuery.style(e.elem,n,e.end),e.setAttr=!0}}),e.effects.animateClass=function(t,r,o,u){var a=e.speed(r,o,u);return this.queue(function(){var r=e(this),o=r.attr("class")||"",u,f=a.children?r.find("*").andSelf():r;f=f.map(function(){var t=e(this);return{el:t,start:i.call(this)}}),u=function(){e.each(n,function(e,n){t[n]&&r[n+"Class"](t[n])})},u(),f=f.map(function(){return this.end=i.call(this.el[0]),this.diff=s(this.start,this.end),this}),r.attr("class",o),f=f.map(function(){var t=this,n=e.Deferred(),r=jQuery.extend({},a,{queue:!1,complete:function(){n.resolve(t)}});return this.el.animate(this.diff,r),n.promise()}),e.when.apply(e,f.get()).done(function(){u(),e.each(arguments,function(){var t=this.el;e.each(this.diff,function(e){t.css(e,"")})}),a.complete.call(r[0])})})},e.fn.extend({_addClass:e.fn.addClass,addClass:function(t,n,r,i){return n?e.effects.animateClass.call(this,{add:t},n,r,i):this._addClass(t)},_removeClass:e.fn.removeClass,removeClass:function(t,n,r,i){return n?e.effects.animateClass.call(this,{remove:t},n,r,i):this._removeClass(t)},_toggleClass:e.fn.toggleClass,toggleClass:function(n,r,i,s,o){return typeof r=="boolean"||r===t?i?e.effects.animateClass.call(this,r?{add:n}:{remove:n},i,s,o):this._toggleClass(n,r):e.effects.animateClass.call(this,{toggle:n},r,i,s)},switchClass:function(t,n,r,i,s){return e.effects.animateClass.call(this,{add:n,remove:t},r,i,s)}})}(),function(){function i(n,r,i,s){e.isPlainObject(n)&&(r=n,n=n.effect),n={effect:n},r===t&&(r={}),e.isFunction(r)&&(s=r,i=null,r={});if(typeof r=="number"||e.fx.speeds[r])s=i,i=r,r={};return e.isFunction(i)&&(s=i,i=null),r&&e.extend(n,r),i=i||r.duration,n.duration=e.fx.off?0:typeof i=="number"?i:i in e.fx.speeds?e.fx.speeds[i]:e.fx.speeds._default,n.complete=s||r.complete,n}function s(t){return!t||typeof t=="number"||e.fx.speeds[t]?!0:typeof t=="string"&&!e.effects.effect[t]?n&&e.effects[t]?!1:!0:!1}e.extend(e.effects,{version:"1.9.0",save:function(e,t){for(var n=0;n<t.length;n++)t[n]!==null&&e.data(r+t[n],e[0].style[t[n]])},restore:function(e,n){var i,s;for(s=0;s<n.length;s++)n[s]!==null&&(i=e.data(r+n[s]),i===t&&(i=""),e.css(n[s],i))},setMode:function(e,t){return t==="toggle"&&(t=e.is(":hidden")?"show":"hide"),t},getBaseline:function(e,t){var n,r;switch(e[0]){case"top":n=0;break;case"middle":n=.5;break;case"bottom":n=1;break;default:n=e[0]/t.height}switch(e[1]){case"left":r=0;break;case"center":r=.5;break;case"right":r=1;break;default:r=e[1]/t.width}return{x:r,y:n}},createWrapper:function(t){if(t.parent().is(".ui-effects-wrapper"))return t.parent();var n={width:t.outerWidth(!0),height:t.outerHeight(!0),"float":t.css("float")},r=e("<div></div>").addClass("ui-effects-wrapper").css({fontSize:"100%",background:"transparent",border:"none",margin:0,padding:0}),i={width:t.width(),height:t.height()},s=document.activeElement;try{s.id}catch(o){s=document.body}return t.wrap(r),(t[0]===s||e.contains(t[0],s))&&e(s).focus(),r=t.parent(),t.css("position")==="static"?(r.css({position:"relative"}),t.css({position:"relative"})):(e.extend(n,{position:t.css("position"),zIndex:t.css("z-index")}),e.each(["top","left","bottom","right"],function(e,r){n[r]=t.css(r),isNaN(parseInt(n[r],10))&&(n[r]="auto")}),t.css({position:"relative",top:0,left:0,right:"auto",bottom:"auto"})),t.css(i),r.css(n).show()},removeWrapper:function(t){var n=document.activeElement;return t.parent().is(".ui-effects-wrapper")&&(t.parent().replaceWith(t),(t[0]===n||e.contains(t[0],n))&&e(n).focus()),t},setTransition:function(t,n,r,i){return i=i||{},e.each(n,function(e,n){var s=t.cssUnit(n);s[0]>0&&(i[n]=s[0]*r+s[1])}),i}}),e.fn.extend({effect:function(t,r,s,o){function h(t){function s(){e.isFunction(r)&&r.call(n[0]),e.isFunction(t)&&t()}var n=e(this),r=u.complete,i=u.mode;(n.is(":hidden")?i==="hide":i==="show")?s():l.call(n[0],u,s)}var u=i.apply(this,arguments),a=u.mode,f=u.queue,l=e.effects.effect[u.effect],c=!l&&n&&e.effects[u.effect];return e.fx.off||!l&&!c?a?this[a](u.duration,u.complete):this.each(function(){u.complete&&u.complete.call(this)}):l?f===!1?this.each(h):this.queue(f||"fx",h):c.call(this,{options:u,duration:u.duration,callback:u.complete,mode:u.mode})},_show:e.fn.show,show:function(e){if(s(e))return this._show.apply(this,arguments);var t=i.apply(this,arguments);return t.mode="show",this.effect.call(this,t)},_hide:e.fn.hide,hide:function(e){if(s(e))return this._hide.apply(this,arguments);var t=i.apply(this,arguments);return t.mode="hide",this.effect.call(this,t)},__toggle:e.fn.toggle,toggle:function(t){if(s(t)||typeof t=="boolean"||e.isFunction(t))return this.__toggle.apply(this,arguments);var n=i.apply(this,arguments);return n.mode="toggle",this.effect.call(this,n)},cssUnit:function(t){var n=this.css(t),r=[];return e.each(["em","px","%","pt"],function(e,t){n.indexOf(t)>0&&(r=[parseFloat(n),t])}),r}})}(),function(){var t={};e.each(["Quad","Cubic","Quart","Quint","Expo"],function(e,n){t[n]=function(t){return Math.pow(t,e+2)}}),e.extend(t,{Sine:function(e){return 1-Math.cos(e*Math.PI/2)},Circ:function(e){return 1-Math.sqrt(1-e*e)},Elastic:function(e){return e===0||e===1?e:-Math.pow(2,8*(e-1))*Math.sin(((e-1)*80-7.5)*Math.PI/15)},Back:function(e){return e*e*(3*e-2)},Bounce:function(e){var t,n=4;while(e<((t=Math.pow(2,--n))-1)/11);return 1/Math.pow(4,3-n)-7.5625*Math.pow((t*3-2)/22-e,2)}}),e.each(t,function(t,n){e.easing["easeIn"+t]=n,e.easing["easeOut"+t]=function(e){return 1-n(1-e)},e.easing["easeInOut"+t]=function(e){return e<.5?n(e*2)/2:1-n(e*-2+2)/2}})}()}(jQuery);(function(e,t){var n=/up|down|vertical/,r=/up|left|vertical|horizontal/;e.effects.effect.blind=function(t,i){var s=e(this),o=["position","top","bottom","left","right","height","width"],u=e.effects.setMode(s,t.mode||"hide"),a=t.direction||"up",f=n.test(a),l=f?"height":"width",c=f?"top":"left",h=r.test(a),p={},d=u==="show",v,m,g;s.parent().is(".ui-effects-wrapper")?e.effects.save(s.parent(),o):e.effects.save(s,o),s.show(),v=e.effects.createWrapper(s).css({overflow:"hidden"}),m=v[l](),g=parseFloat(v.css(c))||0,p[l]=d?m:0,h||(s.css(f?"bottom":"right",0).css(f?"top":"left","auto").css({position:"absolute"}),p[c]=d?g:m+g),d&&(v.css(l,0),h||v.css(c,g+m)),v.animate(p,{duration:t.duration,easing:t.easing,queue:!1,complete:function(){u==="hide"&&s.hide(),e.effects.restore(s,o),e.effects.removeWrapper(s),i()}})}})(jQuery);(function(e,t){e.effects.effect.bounce=function(t,n){var r=e(this),i=["position","top","bottom","left","right","height","width"],s=e.effects.setMode(r,t.mode||"effect"),o=s==="hide",u=s==="show",a=t.direction||"up",f=t.distance,l=t.times||5,c=l*2+(u||o?1:0),h=t.duration/c,p=t.easing,d=a==="up"||a==="down"?"top":"left",v=a==="up"||a==="left",m,g,y,b=r.queue(),w=b.length;(u||o)&&i.push("opacity"),e.effects.save(r,i),r.show(),e.effects.createWrapper(r),f||(f=r[d==="top"?"outerHeight":"outerWidth"]()/3),u&&(y={opacity:1},y[d]=0,r.css("opacity",0).css(d,v?-f*2:f*2).animate(y,h,p)),o&&(f/=Math.pow(2,l-1)),y={},y[d]=0;for(m=0;m<l;m++)g={},g[d]=(v?"-=":"+=")+f,r.animate(g,h,p).animate(y,h,p),f=o?f*2:f/2;o&&(g={opacity:0},g[d]=(v?"-=":"+=")+f,r.animate(g,h,p)),r.queue(function(){o&&r.hide(),e.effects.restore(r,i),e.effects.removeWrapper(r),n()}),w>1&&b.splice.apply(b,[1,0].concat(b.splice(w,c+1))),r.dequeue()}})(jQuery);(function(e,t){e.effects.effect.clip=function(t,n){var r=e(this),i=["position","top","bottom","left","right","height","width"],s=e.effects.setMode(r,t.mode||"hide"),o=s==="show",u=t.direction||"vertical",a=u==="vertical",f=a?"height":"width",l=a?"top":"left",c={},h,p,d;e.effects.save(r,i),r.show(),h=e.effects.createWrapper(r).css({overflow:"hidden"}),p=r[0].tagName==="IMG"?h:r,d=p[f](),o&&(p.css(f,0),p.css(l,d/2)),c[f]=o?d:0,c[l]=o?0:d/2,p.animate(c,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){o||r.hide(),e.effects.restore(r,i),e.effects.removeWrapper(r),n()}})}})(jQuery);(function(e,t){e.effects.effect.drop=function(t,n){var r=e(this),i=["position","top","bottom","left","right","opacity","height","width"],s=e.effects.setMode(r,t.mode||"hide"),o=s==="show",u=t.direction||"left",a=u==="up"||u==="down"?"top":"left",f=u==="up"||u==="left"?"pos":"neg",l={opacity:o?1:0},c;e.effects.save(r,i),r.show(),e.effects.createWrapper(r),c=t.distance||r[a==="top"?"outerHeight":"outerWidth"](!0)/2,o&&r.css("opacity",0).css(a,f==="pos"?-c:c),l[a]=(o?f==="pos"?"+=":"-=":f==="pos"?"-=":"+=")+c,r.animate(l,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){s==="hide"&&r.hide(),e.effects.restore(r,i),e.effects.removeWrapper(r),n()}})}})(jQuery);(function(e,t){e.effects.effect.explode=function(t,n){function y(){c.push(this),c.length===r*i&&b()}function b(){s.css({visibility:"visible"}),e(c).remove(),u||s.hide(),n()}var r=t.pieces?Math.round(Math.sqrt(t.pieces)):3,i=r,s=e(this),o=e.effects.setMode(s,t.mode||"hide"),u=o==="show",a=s.show().css("visibility","hidden").offset(),f=Math.ceil(s.outerWidth()/i),l=Math.ceil(s.outerHeight()/r),c=[],h,p,d,v,m,g;for(h=0;h<r;h++){v=a.top+h*l,g=h-(r-1)/2;for(p=0;p<i;p++)d=a.left+p*f,m=p-(i-1)/2,s.clone().appendTo("body").wrap("<div></div>").css({position:"absolute",visibility:"visible",left:-p*f,top:-h*l}).parent().addClass("ui-effects-explode").css({position:"absolute",overflow:"hidden",width:f,height:l,left:d+(u?m*f:0),top:v+(u?g*l:0),opacity:u?0:1}).animate({left:d+(u?0:m*f),top:v+(u?0:g*l),opacity:u?1:0},t.duration||500,t.easing,y)}}})(jQuery);(function(e,t){e.effects.effect.fade=function(t,n){var r=e(this),i=e.effects.setMode(r,t.mode||"toggle");r.animate({opacity:i},{queue:!1,duration:t.duration,easing:t.easing,complete:n})}})(jQuery);(function(e,t){e.effects.effect.fold=function(t,n){var r=e(this),i=["position","top","bottom","left","right","height","width"],s=e.effects.setMode(r,t.mode||"hide"),o=s==="show",u=s==="hide",a=t.size||15,f=/([0-9]+)%/.exec(a),l=!!t.horizFirst,c=o!==l,h=c?["width","height"]:["height","width"],p=t.duration/2,d,v,m={},g={};e.effects.save(r,i),r.show(),d=e.effects.createWrapper(r).css({overflow:"hidden"}),v=c?[d.width(),d.height()]:[d.height(),d.width()],f&&(a=parseInt(f[1],10)/100*v[u?0:1]),o&&d.css(l?{height:0,width:a}:{height:a,width:0}),m[h[0]]=o?v[0]:a,g[h[1]]=o?v[1]:0,d.animate(m,p,t.easing).animate(g,p,t.easing,function(){u&&r.hide(),e.effects.restore(r,i),e.effects.removeWrapper(r),n()})}})(jQuery);(function(e,t){e.effects.effect.highlight=function(t,n){var r=e(this),i=["backgroundImage","backgroundColor","opacity"],s=e.effects.setMode(r,t.mode||"show"),o={backgroundColor:r.css("backgroundColor")};s==="hide"&&(o.opacity=0),e.effects.save(r,i),r.show().css({backgroundImage:"none",backgroundColor:t.color||"#ffff99"}).animate(o,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){s==="hide"&&r.hide(),e.effects.restore(r,i),n()}})}})(jQuery);(function(e,t){e.effects.effect.pulsate=function(t,n){var r=e(this),i=e.effects.setMode(r,t.mode||"show"),s=i==="show",o=i==="hide",u=s||i==="hide",a=(t.times||5)*2+(u?1:0),f=t.duration/a,l=0,c=r.queue(),h=c.length,p;if(s||!r.is(":visible"))r.css("opacity",0).show(),l=1;for(p=1;p<a;p++)r.animate({opacity:l},f,t.easing),l=1-l;r.animate({opacity:l},f,t.easing),r.queue(function(){o&&r.hide(),n()}),h>1&&c.splice.apply(c,[1,0].concat(c.splice(h,a+1))),r.dequeue()}})(jQuery);(function(e,t){e.effects.effect.puff=function(t,n){var r=e(this),i=e.effects.setMode(r,t.mode||"hide"),s=i==="hide",o=parseInt(t.percent,10)||150,u=o/100,a={height:r.height(),width:r.width()};e.extend(t,{effect:"scale",queue:!1,fade:!0,mode:i,complete:n,percent:s?o:100,from:s?a:{height:a.height*u,width:a.width*u}}),r.effect(t)},e.effects.effect.scale=function(t,n){var r=e(this),i=e.extend(!0,{},t),s=e.effects.setMode(r,t.mode||"effect"),o=parseInt(t.percent,10)||(parseInt(t.percent,10)===0?0:s==="hide"?0:100),u=t.direction||"both",a=t.origin,f={height:r.height(),width:r.width(),outerHeight:r.outerHeight(),outerWidth:r.outerWidth()},l={y:u!=="horizontal"?o/100:1,x:u!=="vertical"?o/100:1};i.effect="size",i.queue=!1,i.complete=n,s!=="effect"&&(i.origin=a||["middle","center"],i.restore=!0),i.from=t.from||(s==="show"?{height:0,width:0}:f),i.to={height:f.height*l.y,width:f.width*l.x,outerHeight:f.outerHeight*l.y,outerWidth:f.outerWidth*l.x},i.fade&&(s==="show"&&(i.from.opacity=0,i.to.opacity=1),s==="hide"&&(i.from.opacity=1,i.to.opacity=0)),r.effect(i)},e.effects.effect.size=function(t,n){var r=e(this),i=["position","top","bottom","left","right","width","height","overflow","opacity"],s=["position","top","bottom","left","right","overflow","opacity"],o=["width","height","overflow"],u=["fontSize"],a=["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"],f=["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"],l=e.effects.setMode(r,t.mode||"effect"),c=t.restore||l!=="effect",h=t.scale||"both",p=t.origin||["middle","center"],d,v,m,g=r.css("position");l==="show"&&r.show(),d={height:r.height(),width:r.width(),outerHeight:r.outerHeight(),outerWidth:r.outerWidth()},r.from=t.from||d,r.to=t.to||d,m={from:{y:r.from.height/d.height,x:r.from.width/d.width},to:{y:r.to.height/d.height,x:r.to.width/d.width}};if(h==="box"||h==="both")m.from.y!==m.to.y&&(i=i.concat(a),r.from=e.effects.setTransition(r,a,m.from.y,r.from),r.to=e.effects.setTransition(r,a,m.to.y,r.to)),m.from.x!==m.to.x&&(i=i.concat(f),r.from=e.effects.setTransition(r,f,m.from.x,r.from),r.to=e.effects.setTransition(r,f,m.to.x,r.to));(h==="content"||h==="both")&&m.from.y!==m.to.y&&(i=i.concat(u),r.from=e.effects.setTransition(r,u,m.from.y,r.from),r.to=e.effects.setTransition(r,u,m.to.y,r.to)),e.effects.save(r,c?i:s),r.show(),e.effects.createWrapper(r),r.css("overflow","hidden").css(r.from),p&&(v=e.effects.getBaseline(p,d),r.from.top=(d.outerHeight-r.outerHeight())*v.y,r.from.left=(d.outerWidth-r.outerWidth())*v.x,r.to.top=(d.outerHeight-r.to.outerHeight)*v.y,r.to.left=(d.outerWidth-r.to.outerWidth)*v.x),r.css(r.from);if(h==="content"||h==="both")a=a.concat(["marginTop","marginBottom"]).concat(u),f=f.concat(["marginLeft","marginRight"]),o=i.concat(a).concat(f),r.find("*[width]").each(function(){var n=e(this),r={height:n.height(),width:n.width()};c&&e.effects.save(n,o),n.from={height:r.height*m.from.y,width:r.width*m.from.x},n.to={height:r.height*m.to.y,width:r.width*m.to.x},m.from.y!==m.to.y&&(n.from=e.effects.setTransition(n,a,m.from.y,n.from),n.to=e.effects.setTransition(n,a,m.to.y,n.to)),m.from.x!==m.to.x&&(n.from=e.effects.setTransition(n,f,m.from.x,n.from),n.to=e.effects.setTransition(n,f,m.to.x,n.to)),n.css(n.from),n.animate(n.to,t.duration,t.easing,function(){c&&e.effects.restore(n,o)})});r.animate(r.to,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){r.to.opacity===0&&r.css("opacity",r.from.opacity),l==="hide"&&r.hide(),e.effects.restore(r,c?i:s),c||(g==="static"?r.css({position:"relative",top:r.to.top,left:r.to.left}):e.each(["top","left"],function(e,t){r.css(t,function(t,n){var i=parseInt(n,10),s=e?r.to.left:r.to.top;return n==="auto"?s+"px":i+s+"px"})})),e.effects.removeWrapper(r),n()}})}})(jQuery);(function(e,t){e.effects.effect.shake=function(t,n){var r=e(this),i=["position","top","bottom","left","right","height","width"],s=e.effects.setMode(r,t.mode||"effect"),o=t.direction||"left",u=t.distance||20,a=t.times||3,f=a*2+1,l=Math.round(t.duration/f),c=o==="up"||o==="down"?"top":"left",h=o==="up"||o==="left",p={},d={},v={},m,g=r.queue(),y=g.length;e.effects.save(r,i),r.show(),e.effects.createWrapper(r),p[c]=(h?"-=":"+=")+u,d[c]=(h?"+=":"-=")+u*2,v[c]=(h?"-=":"+=")+u*2,r.animate(p,l,t.easing);for(m=1;m<a;m++)r.animate(d,l,t.easing).animate(v,l,t.easing);r.animate(d,l,t.easing).animate(p,l/2,t.easing).queue(function(){s==="hide"&&r.hide(),e.effects.restore(r,i),e.effects.removeWrapper(r),n()}),y>1&&g.splice.apply(g,[1,0].concat(g.splice(y,f+1))),r.dequeue()}})(jQuery);(function(e,t){e.effects.effect.slide=function(t,n){var r=e(this),i=["position","top","bottom","left","right","width","height"],s=e.effects.setMode(r,t.mode||"show"),o=s==="show",u=t.direction||"left",a=u==="up"||u==="down"?"top":"left",f=u==="up"||u==="left",l,c={};e.effects.save(r,i),r.show(),l=t.distance||r[a==="top"?"outerHeight":"outerWidth"](!0),e.effects.createWrapper(r).css({overflow:"hidden"}),o&&r.css(a,f?isNaN(l)?"-"+l:-l:l),c[a]=(o?f?"+=":"-=":f?"-=":"+=")+l,r.animate(c,{queue:!1,duration:t.duration,easing:t.easing,complete:function(){s==="hide"&&r.hide(),e.effects.restore(r,i),e.effects.removeWrapper(r),n()}})}})(jQuery);(function(e,t){e.effects.effect.transfer=function(t,n){var r=e(this),i=e(t.to),s=i.css("position")==="fixed",o=e("body"),u=s?o.scrollTop():0,a=s?o.scrollLeft():0,f=i.offset(),l={top:f.top-u,left:f.left-a,height:i.innerHeight(),width:i.innerWidth()},c=r.offset(),h=e('<div class="ui-effects-transfer"></div>').appendTo(document.body).addClass(t.className).css({top:c.top-u,left:c.left-a,height:r.innerHeight(),width:r.innerWidth(),position:s?"fixed":"absolute"}).animate(l,t.duration,t.easing,function(){h.remove(),n()})}})(jQuery);(function(e,t){var n=!1;e.widget("ui.menu",{version:"1.9.0",defaultElement:"<ul>",delay:300,options:{icons:{submenu:"ui-icon-carat-1-e"},menus:"ul",position:{my:"left top",at:"right top"},role:"menu",blur:null,focus:null,select:null},_create:function(){this.activeMenu=this.element,this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons",!!this.element.find(".ui-icon").length).attr({role:this.options.role,tabIndex:0}).bind("click"+this.eventNamespace,e.proxy(function(e){this.options.disabled&&e.preventDefault()},this)),this.options.disabled&&this.element.addClass("ui-state-disabled").attr("aria-disabled","true"),this._on({"mousedown .ui-menu-item > a":function(e){e.preventDefault()},"click .ui-state-disabled > a":function(e){e.preventDefault()},"click .ui-menu-item:has(a)":function(t){var r=e(t.target).closest(".ui-menu-item");!n&&r.not(".ui-state-disabled").length&&(n=!0,this.select(t),r.has(".ui-menu").length?this.expand(t):this.element.is(":focus")||(this.element.trigger("focus",[!0]),this.active&&this.active.parents(".ui-menu").length===1&&clearTimeout(this.timer)))},"mouseenter .ui-menu-item":function(t){var n=e(t.currentTarget);n.siblings().children(".ui-state-active").removeClass("ui-state-active"),this.focus(t,n)},mouseleave:"collapseAll","mouseleave .ui-menu":"collapseAll",focus:function(e,t){var n=this.active||this.element.children(".ui-menu-item").eq(0);t||this.focus(e,n)},blur:function(t){this._delay(function(){e.contains(this.element[0],this.document[0].activeElement)||this.collapseAll(t)})},keydown:"_keydown"}),this.refresh(),this._on(this.document,{click:function(t){e(t.target).closest(".ui-menu").length||this.collapseAll(t),n=!1}})},_destroy:function(){this.element.removeAttr("aria-activedescendant").find(".ui-menu").andSelf().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show(),this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function(){var t=e(this);t.data("ui-menu-submenu-carat")&&t.remove()}),this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")},_keydown:function(t){function a(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}var n,r,i,s,o,u=!0;switch(t.keyCode){case e.ui.keyCode.PAGE_UP:this.previousPage(t);break;case e.ui.keyCode.PAGE_DOWN:this.nextPage(t);break;case e.ui.keyCode.HOME:this._move("first","first",t);break;case e.ui.keyCode.END:this._move("last","last",t);break;case e.ui.keyCode.UP:this.previous(t);break;case e.ui.keyCode.DOWN:this.next(t);break;case e.ui.keyCode.LEFT:this.collapse(t);break;case e.ui.keyCode.RIGHT:this.active&&!this.active.is(".ui-state-disabled")&&this.expand(t);break;case e.ui.keyCode.ENTER:case e.ui.keyCode.SPACE:this._activate(t);break;case e.ui.keyCode.ESCAPE:this.collapse(t);break;default:u=!1,r=this.previousFilter||"",i=String.fromCharCode(t.keyCode),s=!1,clearTimeout(this.filterTimer),i===r?s=!0:i=r+i,o=new RegExp("^"+a(i),"i"),n=this.activeMenu.children(".ui-menu-item").filter(function(){return o.test(e(this).children("a").text())}),n=s&&n.index(this.active.next())!==-1?this.active.nextAll(".ui-menu-item"):n,n.length||(i=String.fromCharCode(t.keyCode),o=new RegExp("^"+a(i),"i"),n=this.activeMenu.children(".ui-menu-item").filter(function(){return o.test(e(this).children("a").text())})),n.length?(this.focus(t,n),n.length>1?(this.previousFilter=i,this.filterTimer=this._delay(function(){delete this.previousFilter},1e3)):delete this.previousFilter):delete this.previousFilter}u&&t.preventDefault()},_activate:function(e){this.active.is(".ui-state-disabled")||(this.active.children("a[aria-haspopup='true']").length?this.expand(e):this.select(e))},refresh:function(){var t,n=this.options.icons.submenu,r=this.element.find(this.options.menus+":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({role:this.options.role,"aria-hidden":"true","aria-expanded":"false"});t=r.add(this.element),t.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role","presentation").children("a").uniqueId().addClass("ui-corner-all").attr({tabIndex:-1,role:this._itemRole()}),t.children(":not(.ui-menu-item)").each(function(){var t=e(this);/[^\-—–\s]/.test(t.text())||t.addClass("ui-widget-content ui-menu-divider")}),t.children(".ui-state-disabled").attr("aria-disabled","true"),r.each(function(){var t=e(this),r=t.prev("a"),i=e("<span>").addClass("ui-menu-icon ui-icon "+n).data("ui-menu-submenu-carat",!0);r.attr("aria-haspopup","true").prepend(i),t.attr("aria-labelledby",r.attr("id"))}),this.active&&!e.contains(this.element[0],this.active[0])&&this.blur()},_itemRole:function(){return{menu:"menuitem",listbox:"option"}[this.options.role]},focus:function(e,t){var n,r;this.blur(e,e&&e.type==="focus"),this._scrollIntoView(t),this.active=t.first(),r=this.active.children("a").addClass("ui-state-focus"),this.options.role&&this.element.attr("aria-activedescendant",r.attr("id")),this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active"),e&&e.type==="keydown"?this._close():this.timer=this._delay(function(){this._close()},this.delay),n=t.children(".ui-menu"),n.length&&/^mouse/.test(e.type)&&this._startOpening(n),this.activeMenu=t.parent(),this._trigger("focus",e,{item:t})},_scrollIntoView:function(t){var n,r,i,s,o,u;this._hasScroll()&&(n=parseFloat(e.css(this.activeMenu[0],"borderTopWidth"))||0,r=parseFloat(e.css(this.activeMenu[0],"paddingTop"))||0,i=t.offset().top-this.activeMenu.offset().top-n-r,s=this.activeMenu.scrollTop(),o=this.activeMenu.height(),u=t.height(),i<0?this.activeMenu.scrollTop(s+i):i+u>o&&this.activeMenu.scrollTop(s+i-o+u))},blur:function(e,t){t||clearTimeout(this.timer);if(!this.active)return;this.active.children("a").removeClass("ui-state-focus"),this.active=null,this._trigger("blur",e,{item:this.active})},_startOpening:function(e){clearTimeout(this.timer);if(e.attr("aria-hidden")!=="true")return;this.timer=this._delay(function(){this._close(),this._open(e)},this.delay)},_open:function(t){var n=e.extend({of:this.active},this.options.position);clearTimeout(this.timer),this.element.find(".ui-menu").not(t.parents(".ui-menu")).hide().attr("aria-hidden","true"),t.show().removeAttr("aria-hidden").attr("aria-expanded","true").position(n)},collapseAll:function(t,n){clearTimeout(this.timer),this.timer=this._delay(function(){var r=n?this.element:e(t&&t.target).closest(this.element.find(".ui-menu"));r.length||(r=this.element),this._close(r),this.blur(t),this.activeMenu=r},this.delay)},_close:function(e){e||(e=this.active?this.active.parent():this.element),e.find(".ui-menu").hide().attr("aria-hidden","true").attr("aria-expanded","false").end().find("a.ui-state-active").removeClass("ui-state-active")},collapse:function(e){var t=this.active&&this.active.parent().closest(".ui-menu-item",this.element);t&&t.length&&(this._close(),this.focus(e,t))},expand:function(e){var t=this.active&&this.active.children(".ui-menu ").children(".ui-menu-item").first();t&&t.length&&(this._open(t.parent()),this._delay(function(){this.focus(e,t)}))},next:function(e){this._move("next","first",e)},previous:function(e){this._move("prev","last",e)},isFirstItem:function(){return this.active&&!this.active.prevAll(".ui-menu-item").length},isLastItem:function(){return this.active&&!this.active.nextAll(".ui-menu-item").length},_move:function(e,t,n){var r;this.active&&(e==="first"||e==="last"?r=this.active[e==="first"?"prevAll":"nextAll"](".ui-menu-item").eq(-1):r=this.active[e+"All"](".ui-menu-item").eq(0));if(!r||!r.length||!this.active)r=this.activeMenu.children(".ui-menu-item")[t]();this.focus(n,r)},nextPage:function(t){var n,r,i;if(!this.active){this.next(t);return}if(this.isLastItem())return;this._hasScroll()?(r=this.active.offset().top,i=this.element.height(),this.active.nextAll(".ui-menu-item").each(function(){return n=e(this),n.offset().top-r-i<0}),this.focus(t,n)):this.focus(t,this.activeMenu.children(".ui-menu-item")[this.active?"last":"first"]())},previousPage:function(t){var n,r,i;if(!this.active){this.next(t);return}if(this.isFirstItem())return;this._hasScroll()?(r=this.active.offset().top,i=this.element.height(),this.active.prevAll(".ui-menu-item").each(function(){return n=e(this),n.offset().top-r+i>0}),this.focus(t,n)):this.focus(t,this.activeMenu.children(".ui-menu-item").first())},_hasScroll:function(){return this.element.outerHeight()<this.element.prop("scrollHeight")},select:function(t){this.active=this.active||e(t.target).closest(".ui-menu-item");var n={item:this.active};this.active.has(".ui-menu").length||this.collapseAll(t,!0),this._trigger("select",t,n)}})})(jQuery);(function(e,t){e.widget("ui.progressbar",{version:"1.9.0",options:{value:0,max:100},min:0,_create:function(){this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({role:"progressbar","aria-valuemin":this.min,"aria-valuemax":this.options.max,"aria-valuenow":this._value()}),this.valueDiv=e("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element),this.oldValue=this._value(),this._refreshValue()},_destroy:function(){this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.valueDiv.remove()},value:function(e){return e===t?this._value():(this._setOption("value",e),this)},_setOption:function(e,t){e==="value"&&(this.options.value=t,this._refreshValue(),this._value()===this.options.max&&this._trigger("complete")),this._super(e,t)},_value:function(){var e=this.options.value;return typeof e!="number"&&(e=0),Math.min(this.options.max,Math.max(this.min,e))},_percentage:function(){return 100*this._value()/this.options.max},_refreshValue:function(){var e=this.value(),t=this._percentage();this.oldValue!==e&&(this.oldValue=e,this._trigger("change")),this.valueDiv.toggle(e>this.min).toggleClass("ui-corner-right",e===this.options.max).width(t.toFixed(0)+"%"),this.element.attr("aria-valuenow",e)}})})(jQuery);(function(e,t){e.widget("ui.resizable",e.ui.mouse,{version:"1.9.0",widgetEventPrefix:"resize",options:{alsoResize:!1,animate:!1,animateDuration:"slow",animateEasing:"swing",aspectRatio:!1,autoHide:!1,containment:!1,ghost:!1,grid:!1,handles:"e,s,se",helper:!1,maxHeight:null,maxWidth:null,minHeight:10,minWidth:10,zIndex:1e3},_create:function(){var t=this,n=this.options;this.element.addClass("ui-resizable"),e.extend(this,{_aspectRatio:!!n.aspectRatio,aspectRatio:n.aspectRatio,originalElement:this.element,_proportionallyResizeElements:[],_helper:n.helper||n.ghost||n.animate?n.helper||"ui-resizable-helper":null}),this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)&&(this.element.wrap(e('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({position:this.element.css("position"),width:this.element.outerWidth(),height:this.element.outerHeight(),top:this.element.css("top"),left:this.element.css("left")})),this.element=this.element.parent().data("resizable",this.element.data("resizable")),this.elementIsWrapper=!0,this.element.css({marginLeft:this.originalElement.css("marginLeft"),marginTop:this.originalElement.css("marginTop"),marginRight:this.originalElement.css("marginRight"),marginBottom:this.originalElement.css("marginBottom")}),this.originalElement.css({marginLeft:0,marginTop:0,marginRight:0,marginBottom:0}),this.originalResizeStyle=this.originalElement.css("resize"),this.originalElement.css("resize","none"),this._proportionallyResizeElements.push(this.originalElement.css({position:"static",zoom:1,display:"block"})),this.originalElement.css({margin:this.originalElement.css("margin")}),this._proportionallyResize()),this.handles=n.handles||(e(".ui-resizable-handle",this.element).length?{n:".ui-resizable-n",e:".ui-resizable-e",s:".ui-resizable-s",w:".ui-resizable-w",se:".ui-resizable-se",sw:".ui-resizable-sw",ne:".ui-resizable-ne",nw:".ui-resizable-nw"}:"e,s,se");if(this.handles.constructor==String){this.handles=="all"&&(this.handles="n,e,s,w,se,sw,ne,nw");var r=this.handles.split(",");this.handles={};for(var i=0;i<r.length;i++){var s=e.trim(r[i]),o="ui-resizable-"+s,u=e('<div class="ui-resizable-handle '+o+'"></div>');u.css({zIndex:n.zIndex}),"se"==s&&u.addClass("ui-icon ui-icon-gripsmall-diagonal-se"),this.handles[s]=".ui-resizable-"+s,this.element.append(u)}}this._renderAxis=function(t){t=t||this.element;for(var n in this.handles){this.handles[n].constructor==String&&(this.handles[n]=e(this.handles[n],this.element).show());if(this.elementIsWrapper&&this.originalElement[0].nodeName.match(/textarea|input|select|button/i)){var r=e(this.handles[n],this.element),i=0;i=/sw|ne|nw|se|n|s/.test(n)?r.outerHeight():r.outerWidth();var s=["padding",/ne|nw|n/.test(n)?"Top":/se|sw|s/.test(n)?"Bottom":/^e$/.test(n)?"Right":"Left"].join("");t.css(s,i),this._proportionallyResize()}if(!e(this.handles[n]).length)continue}},this._renderAxis(this.element),this._handles=e(".ui-resizable-handle",this.element).disableSelection(),this._handles.mouseover(function(){if(!t.resizing){if(this.className)var e=this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);t.axis=e&&e[1]?e[1]:"se"}}),n.autoHide&&(this._handles.hide(),e(this.element).addClass("ui-resizable-autohide").mouseenter(function(){if(n.disabled)return;e(this).removeClass("ui-resizable-autohide"),t._handles.show()}).mouseleave(function(){if(n.disabled)return;t.resizing||(e(this).addClass("ui-resizable-autohide"),t._handles.hide())})),this._mouseInit()},_destroy:function(){this._mouseDestroy();var t=function(t){e(t).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()};if(this.elementIsWrapper){t(this.element);var n=this.element;n.after(this.originalElement.css({position:n.css("position"),width:n.outerWidth(),height:n.outerHeight(),top:n.css("top"),left:n.css("left")})).remove()}return this.originalElement.css("resize",this.originalResizeStyle),t(this.originalElement),this},_mouseCapture:function(t){var n=!1;for(var r in this.handles)e(this.handles[r])[0]==t.target&&(n=!0);return!this.options.disabled&&n},_mouseStart:function(t){var r=this.options,i=this.element.position(),s=this.element;this.resizing=!0,this.documentScroll={top:e(document).scrollTop(),left:e(document).scrollLeft()},(s.is(".ui-draggable")||/absolute/.test(s.css("position")))&&s.css({position:"absolute",top:i.top,left:i.left}),this._renderProxy();var o=n(this.helper.css("left")),u=n(this.helper.css("top"));r.containment&&(o+=e(r.containment).scrollLeft()||0,u+=e(r.containment).scrollTop()||0),this.offset=this.helper.offset(),this.position={left:o,top:u},this.size=this._helper?{width:s.outerWidth(),height:s.outerHeight()}:{width:s.width(),height:s.height()},this.originalSize=this._helper?{width:s.outerWidth(),height:s.outerHeight()}:{width:s.width(),height:s.height()},this.originalPosition={left:o,top:u},this.sizeDiff={width:s.outerWidth()-s.width(),height:s.outerHeight()-s.height()},this.originalMousePosition={left:t.pageX,top:t.pageY},this.aspectRatio=typeof r.aspectRatio=="number"?r.aspectRatio:this.originalSize.width/this.originalSize.height||1;var a=e(".ui-resizable-"+this.axis).css("cursor");return e("body").css("cursor",a=="auto"?this.axis+"-resize":a),s.addClass("ui-resizable-resizing"),this._propagate("start",t),!0},_mouseDrag:function(e){var t=this.helper,n=this.options,r={},i=this,s=this.originalMousePosition,o=this.axis,u=e.pageX-s.left||0,a=e.pageY-s.top||0,f=this._change[o];if(!f)return!1;var l=f.apply(this,[e,u,a]);this._updateVirtualBoundaries(e.shiftKey);if(this._aspectRatio||e.shiftKey)l=this._updateRatio(l,e);return l=this._respectSize(l,e),this._propagate("resize",e),t.css({top:this.position.top+"px",left:this.position.left+"px",width:this.size.width+"px",height:this.size.height+"px"}),!this._helper&&this._proportionallyResizeElements.length&&this._proportionallyResize(),this._updateCache(l),this._trigger("resize",e,this.ui()),!1},_mouseStop:function(t){this.resizing=!1;var n=this.options,r=this;if(this._helper){var i=this._proportionallyResizeElements,s=i.length&&/textarea/i.test(i[0].nodeName),o=s&&e.ui.hasScroll(i[0],"left")?0:r.sizeDiff.height,u=s?0:r.sizeDiff.width,a={width:r.helper.width()-u,height:r.helper.height()-o},f=parseInt(r.element.css("left"),10)+(r.position.left-r.originalPosition.left)||null,l=parseInt(r.element.css("top"),10)+(r.position.top-r.originalPosition.top)||null;n.animate||this.element.css(e.extend(a,{top:l,left:f})),r.helper.height(r.size.height),r.helper.width(r.size.width),this._helper&&!n.animate&&this._proportionallyResize()}return e("body").css("cursor","auto"),this.element.removeClass("ui-resizable-resizing"),this._propagate("stop",t),this._helper&&this.helper.remove(),!1},_updateVirtualBoundaries:function(e){var t=this.options,n,i,s,o,u;u={minWidth:r(t.minWidth)?t.minWidth:0,maxWidth:r(t.maxWidth)?t.maxWidth:Infinity,minHeight:r(t.minHeight)?t.minHeight:0,maxHeight:r(t.maxHeight)?t.maxHeight:Infinity};if(this._aspectRatio||e)n=u.minHeight*this.aspectRatio,s=u.minWidth/this.aspectRatio,i=u.maxHeight*this.aspectRatio,o=u.maxWidth/this.aspectRatio,n>u.minWidth&&(u.minWidth=n),s>u.minHeight&&(u.minHeight=s),i<u.maxWidth&&(u.maxWidth=i),o<u.maxHeight&&(u.maxHeight=o);this._vBoundaries=u},_updateCache:function(e){var t=this.options;this.offset=this.helper.offset(),r(e.left)&&(this.position.left=e.left),r(e.top)&&(this.position.top=e.top),r(e.height)&&(this.size.height=e.height),r(e.width)&&(this.size.width=e.width)},_updateRatio:function(e,t){var n=this.options,i=this.position,s=this.size,o=this.axis;return r(e.height)?e.width=e.height*this.aspectRatio:r(e.width)&&(e.height=e.width/this.aspectRatio),o=="sw"&&(e.left=i.left+(s.width-e.width),e.top=null),o=="nw"&&(e.top=i.top+(s.height-e.height),e.left=i.left+(s.width-e.width)),e},_respectSize:function(e,t){var n=this.helper,i=this._vBoundaries,s=this._aspectRatio||t.shiftKey,o=this.axis,u=r(e.width)&&i.maxWidth&&i.maxWidth<e.width,a=r(e.height)&&i.maxHeight&&i.maxHeight<e.height,f=r(e.width)&&i.minWidth&&i.minWidth>e.width,l=r(e.height)&&i.minHeight&&i.minHeight>e.height;f&&(e.width=i.minWidth),l&&(e.height=i.minHeight),u&&(e.width=i.maxWidth),a&&(e.height=i.maxHeight);var c=this.originalPosition.left+this.originalSize.width,h=this.position.top+this.size.height,p=/sw|nw|w/.test(o),d=/nw|ne|n/.test(o);f&&p&&(e.left=c-i.minWidth),u&&p&&(e.left=c-i.maxWidth),l&&d&&(e.top=h-i.minHeight),a&&d&&(e.top=h-i.maxHeight);var v=!e.width&&!e.height;return v&&!e.left&&e.top?e.top=null:v&&!e.top&&e.left&&(e.left=null),e},_proportionallyResize:function(){var t=this.options;if(!this._proportionallyResizeElements.length)return;var n=this.helper||this.element;for(var r=0;r<this._proportionallyResizeElements.length;r++){var i=this._proportionallyResizeElements[r];if(!this.borderDif){var s=[i.css("borderTopWidth"),i.css("borderRightWidth"),i.css("borderBottomWidth"),i.css("borderLeftWidth")],o=[i.css("paddingTop"),i.css("paddingRight"),i.css("paddingBottom"),i.css("paddingLeft")];this.borderDif=e.map(s,function(e,t){var n=parseInt(e,10)||0,r=parseInt(o[t],10)||0;return n+r})}i.css({height:n.height()-this.borderDif[0]-this.borderDif[2]||0,width:n.width()-this.borderDif[1]-this.borderDif[3]||0})}},_renderProxy:function(){var t=this.element,n=this.options;this.elementOffset=t.offset();if(this._helper){this.helper=this.helper||e('<div style="overflow:hidden;"></div>');var r=e.browser.msie&&e.browser.version<7,i=r?1:0,s=r?2:-1;this.helper.addClass(this._helper).css({width:this.element.outerWidth()+s,height:this.element.outerHeight()+s,position:"absolute",left:this.elementOffset.left-i+"px",top:this.elementOffset.top-i+"px",zIndex:++n.zIndex}),this.helper.appendTo("body").disableSelection()}else this.helper=this.element},_change:{e:function(e,t,n){return{width:this.originalSize.width+t}},w:function(e,t,n){var r=this.options,i=this.originalSize,s=this.originalPosition;return{left:s.left+t,width:i.width-t}},n:function(e,t,n){var r=this.options,i=this.originalSize,s=this.originalPosition;return{top:s.top+n,height:i.height-n}},s:function(e,t,n){return{height:this.originalSize.height+n}},se:function(t,n,r){return e.extend(this._change.s.apply(this,arguments),this._change.e.apply(this,[t,n,r]))},sw:function(t,n,r){return e.extend(this._change.s.apply(this,arguments),this._change.w.apply(this,[t,n,r]))},ne:function(t,n,r){return e.extend(this._change.n.apply(this,arguments),this._change.e.apply(this,[t,n,r]))},nw:function(t,n,r){return e.extend(this._change.n.apply(this,arguments),this._change.w.apply(this,[t,n,r]))}},_propagate:function(t,n){e.ui.plugin.call(this,t,[n,this.ui()]),t!="resize"&&this._trigger(t,n,this.ui())},plugins:{},ui:function(){return{originalElement:this.originalElement,element:this.element,helper:this.helper,position:this.position,size:this.size,originalSize:this.originalSize,originalPosition:this.originalPosition}}}),e.ui.plugin.add("resizable","alsoResize",{start:function(t,n){var r=e(this).data("resizable"),i=r.options,s=function(t){e(t).each(function(){var t=e(this);t.data("resizable-alsoresize",{width:parseInt(t.width(),10),height:parseInt(t.height(),10),left:parseInt(t.css("left"),10),top:parseInt(t.css("top"),10)})})};typeof i.alsoResize=="object"&&!i.alsoResize.parentNode?i.alsoResize.length?(i.alsoResize=i.alsoResize[0],s(i.alsoResize)):e.each(i.alsoResize,function(e){s(e)}):s(i.alsoResize)},resize:function(t,n){var r=e(this).data("resizable"),i=r.options,s=r.originalSize,o=r.originalPosition,u={height:r.size.height-s.height||0,width:r.size.width-s.width||0,top:r.position.top-o.top||0,left:r.position.left-o.left||0},a=function(t,r){e(t).each(function(){var t=e(this),i=e(this).data("resizable-alsoresize"),s={},o=r&&r.length?r:t.parents(n.originalElement[0]).length?["width","height"]:["width","height","top","left"];e.each(o,function(e,t){var n=(i[t]||0)+(u[t]||0);n&&n>=0&&(s[t]=n||null)}),t.css(s)})};typeof i.alsoResize=="object"&&!i.alsoResize.nodeType?e.each(i.alsoResize,function(e,t){a(e,t)}):a(i.alsoResize)},stop:function(t,n){e(this).removeData("resizable-alsoresize")}}),e.ui.plugin.add("resizable","animate",{stop:function(t,n){var r=e(this).data("resizable"),i=r.options,s=r._proportionallyResizeElements,o=s.length&&/textarea/i.test(s[0].nodeName),u=o&&e.ui.hasScroll(s[0],"left")?0:r.sizeDiff.height,a=o?0:r.sizeDiff.width,f={width:r.size.width-a,height:r.size.height-u},l=parseInt(r.element.css("left"),10)+(r.position.left-r.originalPosition.left)||null,c=parseInt(r.element.css("top"),10)+(r.position.top-r.originalPosition.top)||null;r.element.animate(e.extend(f,c&&l?{top:c,left:l}:{}),{duration:i.animateDuration,easing:i.animateEasing,step:function(){var n={width:parseInt(r.element.css("width"),10),height:parseInt(r.element.css("height"),10),top:parseInt(r.element.css("top"),10),left:parseInt(r.element.css("left"),10)};s&&s.length&&e(s[0]).css({width:n.width,height:n.height}),r._updateCache(n),r._propagate("resize",t)}})}}),e.ui.plugin.add("resizable","containment",{start:function(t,r){var i=e(this).data("resizable"),s=i.options,o=i.element,u=s.containment,a=u instanceof e?u.get(0):/parent/.test(u)?o.parent().get(0):u;if(!a)return;i.containerElement=e(a);if(/document/.test(u)||u==document)i.containerOffset={left:0,top:0},i.containerPosition={left:0,top:0},i.parentData={element:e(document),left:0,top:0,width:e(document).width(),height:e(document).height()||document.body.parentNode.scrollHeight};else{var f=e(a),l=[];e(["Top","Right","Left","Bottom"]).each(function(e,t){l[e]=n(f.css("padding"+t))}),i.containerOffset=f.offset(),i.containerPosition=f.position(),i.containerSize={height:f.innerHeight()-l[3],width:f.innerWidth()-l[1]};var c=i.containerOffset,h=i.containerSize.height,p=i.containerSize.width,d=e.ui.hasScroll(a,"left")?a.scrollWidth:p,v=e.ui.hasScroll(a)?a.scrollHeight:h;i.parentData={element:a,left:c.left,top:c.top,width:d,height:v}}},resize:function(t,n){var r=e(this).data("resizable"),i=r.options,s=r.containerSize,o=r.containerOffset,u=r.size,a=r.position,f=r._aspectRatio||t.shiftKey,l={top:0,left:0},c=r.containerElement;c[0]!=document&&/static/.test(c.css("position"))&&(l=o),a.left<(r._helper?o.left:0)&&(r.size.width=r.size.width+(r._helper?r.position.left-o.left:r.position.left-l.left),f&&(r.size.height=r.size.width/r.aspectRatio),r.position.left=i.helper?o.left:0),a.top<(r._helper?o.top:0)&&(r.size.height=r.size.height+(r._helper?r.position.top-o.top:r.position.top),f&&(r.size.width=r.size.height*r.aspectRatio),r.position.top=r._helper?o.top:0),r.offset.left=r.parentData.left+r.position.left,r.offset.top=r.parentData.top+r.position.top;var h=Math.abs((r._helper?r.offset.left-l.left:r.offset.left-l.left)+r.sizeDiff.width),p=Math.abs((r._helper?r.offset.top-l.top:r.offset.top-o.top)+r.sizeDiff.height),d=r.containerElement.get(0)==r.element.parent().get(0),v=/relative|absolute/.test(r.containerElement.css("position"));d&&v&&(h-=r.parentData.left),h+r.size.width>=r.parentData.width&&(r.size.width=r.parentData.width-h,f&&(r.size.height=r.size.width/r.aspectRatio)),p+r.size.height>=r.parentData.height&&(r.size.height=r.parentData.height-p,f&&(r.size.width=r.size.height*r.aspectRatio))},stop:function(t,n){var r=e(this).data("resizable"),i=r.options,s=r.position,o=r.containerOffset,u=r.containerPosition,a=r.containerElement,f=e(r.helper),l=f.offset(),c=f.outerWidth()-r.sizeDiff.width,h=f.outerHeight()-r.sizeDiff.height;r._helper&&!i.animate&&/relative/.test(a.css("position"))&&e(this).css({left:l.left-u.left-o.left,width:c,height:h}),r._helper&&!i.animate&&/static/.test(a.css("position"))&&e(this).css({left:l.left-u.left-o.left,width:c,height:h})}}),e.ui.plugin.add("resizable","ghost",{start:function(t,n){var r=e(this).data("resizable"),i=r.options,s=r.size;r.ghost=r.originalElement.clone(),r.ghost.css({opacity:.25,display:"block",position:"relative",height:s.height,width:s.width,margin:0,left:0,top:0}).addClass("ui-resizable-ghost").addClass(typeof i.ghost=="string"?i.ghost:""),r.ghost.appendTo(r.helper)},resize:function(t,n){var r=e(this).data("resizable"),i=r.options;r.ghost&&r.ghost.css({position:"relative",height:r.size.height,width:r.size.width})},stop:function(t,n){var r=e(this).data("resizable"),i=r.options;r.ghost&&r.helper&&r.helper.get(0).removeChild(r.ghost.get(0))}}),e.ui.plugin.add("resizable","grid",{resize:function(t,n){var r=e(this).data("resizable"),i=r.options,s=r.size,o=r.originalSize,u=r.originalPosition,a=r.axis,f=i._aspectRatio||t.shiftKey;i.grid=typeof i.grid=="number"?[i.grid,i.grid]:i.grid;var l=Math.round((s.width-o.width)/(i.grid[0]||1))*(i.grid[0]||1),c=Math.round((s.height-o.height)/(i.grid[1]||1))*(i.grid[1]||1);/^(se|s|e)$/.test(a)?(r.size.width=o.width+l,r.size.height=o.height+c):/^(ne)$/.test(a)?(r.size.width=o.width+l,r.size.height=o.height+c,r.position.top=u.top-c):/^(sw)$/.test(a)?(r.size.width=o.width+l,r.size.height=o.height+c,r.position.left=u.left-l):(r.size.width=o.width+l,r.size.height=o.height+c,r.position.top=u.top-c,r.position.left=u.left-l)}});var n=function(e){return parseInt(e,10)||0},r=function(e){return!isNaN(parseInt(e,10))}})(jQuery);(function(e,t){e.widget("ui.selectable",e.ui.mouse,{version:"1.9.0",options:{appendTo:"body",autoRefresh:!0,distance:0,filter:"*",tolerance:"touch"},_create:function(){var t=this;this.element.addClass("ui-selectable"),this.dragged=!1;var n;this.refresh=function(){n=e(t.options.filter,t.element[0]),n.addClass("ui-selectee"),n.each(function(){var t=e(this),n=t.offset();e.data(this,"selectable-item",{element:this,$element:t,left:n.left,top:n.top,right:n.left+t.outerWidth(),bottom:n.top+t.outerHeight(),startselected:!1,selected:t.hasClass("ui-selected"),selecting:t.hasClass("ui-selecting"),unselecting:t.hasClass("ui-unselecting")})})},this.refresh(),this.selectees=n.addClass("ui-selectee"),this._mouseInit(),this.helper=e("<div class='ui-selectable-helper'></div>")},_destroy:function(){this.selectees.removeClass("ui-selectee").removeData("selectable-item"),this.element.removeClass("ui-selectable ui-selectable-disabled"),this._mouseDestroy()},_mouseStart:function(t){var n=this;this.opos=[t.pageX,t.pageY];if(this.options.disabled)return;var r=this.options;this.selectees=e(r.filter,this.element[0]),this._trigger("start",t),e(r.appendTo).append(this.helper),this.helper.css({left:t.clientX,top:t.clientY,width:0,height:0}),r.autoRefresh&&this.refresh(),this.selectees.filter(".ui-selected").each(function(){var r=e.data(this,"selectable-item");r.startselected=!0,!t.metaKey&&!t.ctrlKey&&(r.$element.removeClass("ui-selected"),r.selected=!1,r.$element.addClass("ui-unselecting"),r.unselecting=!0,n._trigger("unselecting",t,{unselecting:r.element}))}),e(t.target).parents().andSelf().each(function(){var r=e.data(this,"selectable-item");if(r){var i=!t.metaKey&&!t.ctrlKey||!r.$element.hasClass("ui-selected");return r.$element.removeClass(i?"ui-unselecting":"ui-selected").addClass(i?"ui-selecting":"ui-unselecting"),r.unselecting=!i,r.selecting=i,r.selected=i,i?n._trigger("selecting",t,{selecting:r.element}):n._trigger("unselecting",t,{unselecting:r.element}),!1}})},_mouseDrag:function(t){var n=this;this.dragged=!0;if(this.options.disabled)return;var r=this.options,i=this.opos[0],s=this.opos[1],o=t.pageX,u=t.pageY;if(i>o){var a=o;o=i,i=a}if(s>u){var a=u;u=s,s=a}return this.helper.css({left:i,top:s,width:o-i,height:u-s}),this.selectees.each(function(){var a=e.data(this,"selectable-item");if(!a||a.element==n.element[0])return;var f=!1;r.tolerance=="touch"?f=!(a.left>o||a.right<i||a.top>u||a.bottom<s):r.tolerance=="fit"&&(f=a.left>i&&a.right<o&&a.top>s&&a.bottom<u),f?(a.selected&&(a.$element.removeClass("ui-selected"),a.selected=!1),a.unselecting&&(a.$element.removeClass("ui-unselecting"),a.unselecting=!1),a.selecting||(a.$element.addClass("ui-selecting"),a.selecting=!0,n._trigger("selecting",t,{selecting:a.element}))):(a.selecting&&((t.metaKey||t.ctrlKey)&&a.startselected?(a.$element.removeClass("ui-selecting"),a.selecting=!1,a.$element.addClass("ui-selected"),a.selected=!0):(a.$element.removeClass("ui-selecting"),a.selecting=!1,a.startselected&&(a.$element.addClass("ui-unselecting"),a.unselecting=!0),n._trigger("unselecting",t,{unselecting:a.element}))),a.selected&&!t.metaKey&&!t.ctrlKey&&!a.startselected&&(a.$element.removeClass("ui-selected"),a.selected=!1,a.$element.addClass("ui-unselecting"),a.unselecting=!0,n._trigger("unselecting",t,{unselecting:a.element})))}),!1},_mouseStop:function(t){var n=this;this.dragged=!1;var r=this.options;return e(".ui-unselecting",this.element[0]).each(function(){var r=e.data(this,"selectable-item");r.$element.removeClass("ui-unselecting"),r.unselecting=!1,r.startselected=!1,n._trigger("unselected",t,{unselected:r.element})}),e(".ui-selecting",this.element[0]).each(function(){var r=e.data(this,"selectable-item");r.$element.removeClass("ui-selecting").addClass("ui-selected"),r.selecting=!1,r.selected=!0,r.startselected=!0,n._trigger("selected",t,{selected:r.element})}),this._trigger("stop",t),this.helper.remove(),!1}})})(jQuery);(function(e,t){var n=5;e.widget("ui.slider",e.ui.mouse,{version:"1.9.0",widgetEventPrefix:"slide",options:{animate:!1,distance:0,max:100,min:0,orientation:"horizontal",range:!1,step:1,value:0,values:null},_create:function(){var t,r=this.options,i=this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),s="<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>",o=r.values&&r.values.length||1,u=[];this._keySliding=!1,this._mouseSliding=!1,this._animateOff=!0,this._handleIndex=null,this._detectOrientation(),this._mouseInit(),this.element.addClass("ui-slider ui-slider-"+this.orientation+" ui-widget"+" ui-widget-content"+" ui-corner-all"+(r.disabled?" ui-slider-disabled ui-disabled":"")),this.range=e([]),r.range&&(r.range===!0&&(r.values||(r.values=[this._valueMin(),this._valueMin()]),r.values.length&&r.values.length!==2&&(r.values=[r.values[0],r.values[0]])),this.range=e("<div></div>").appendTo(this.element).addClass("ui-slider-range ui-widget-header"+(r.range==="min"||r.range==="max"?" ui-slider-range-"+r.range:"")));for(t=i.length;t<o;t++)u.push(s);this.handles=i.add(e(u.join("")).appendTo(this.element)),this.handle=this.handles.eq(0),this.handles.add(this.range).filter("a").click(function(e){e.preventDefault()}).mouseenter(function(){r.disabled||e(this).addClass("ui-state-hover")}).mouseleave(function(){e(this).removeClass("ui-state-hover")}).focus(function(){r.disabled?e(this).blur():(e(".ui-slider .ui-state-focus").removeClass("ui-state-focus"),e(this).addClass("ui-state-focus"))}).blur(function(){e(this).removeClass("ui-state-focus")}),this.handles.each(function(t){e(this).data("ui-slider-handle-index",t)}),this._on(this.handles,{keydown:function(t){var r,i,s,o,u=e(t.target).data("ui-slider-handle-index");switch(t.keyCode){case e.ui.keyCode.HOME:case e.ui.keyCode.END:case e.ui.keyCode.PAGE_UP:case e.ui.keyCode.PAGE_DOWN:case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:t.preventDefault();if(!this._keySliding){this._keySliding=!0,e(t.target).addClass("ui-state-active"),r=this._start(t,u);if(r===!1)return}}o=this.options.step,this.options.values&&this.options.values.length?i=s=this.values(u):i=s=this.value();switch(t.keyCode){case e.ui.keyCode.HOME:s=this._valueMin();break;case e.ui.keyCode.END:s=this._valueMax();break;case e.ui.keyCode.PAGE_UP:s=this._trimAlignValue(i+(this._valueMax()-this._valueMin())/n);break;case e.ui.keyCode.PAGE_DOWN:s=this._trimAlignValue(i-(this._valueMax()-this._valueMin())/n);break;case e.ui.keyCode.UP:case e.ui.keyCode.RIGHT:if(i===this._valueMax())return;s=this._trimAlignValue(i+o);break;case e.ui.keyCode.DOWN:case e.ui.keyCode.LEFT:if(i===this._valueMin())return;s=this._trimAlignValue(i-o)}this._slide(t,u,s)},keyup:function(t){var n=e(t.target).data("ui-slider-handle-index");this._keySliding&&(this._keySliding=!1,this._stop(t,n),this._change(t,n),e(t.target).removeClass("ui-state-active"))}}),this._refreshValue(),this._animateOff=!1},_destroy:function(){this.handles.remove(),this.range.remove(),this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-slider-disabled ui-widget ui-widget-content ui-corner-all"),this._mouseDestroy()},_mouseCapture:function(t){var n,r,i,s,o,u,a,f,l=this,c=this.options;return c.disabled?!1:(this.elementSize={width:this.element.outerWidth(),height:this.element.outerHeight()},this.elementOffset=this.element.offset(),n={x:t.pageX,y:t.pageY},r=this._normValueFromMouse(n),i=this._valueMax()-this._valueMin()+1,this.handles.each(function(t){var n=Math.abs(r-l.values(t));i>n&&(i=n,s=e(this),o=t)}),c.range===!0&&this.values(1)===c.min&&(o+=1,s=e(this.handles[o])),u=this._start(t,o),u===!1?!1:(this._mouseSliding=!0,this._handleIndex=o,s.addClass("ui-state-active").focus(),a=s.offset(),f=!e(t.target).parents().andSelf().is(".ui-slider-handle"),this._clickOffset=f?{left:0,top:0}:{left:t.pageX-a.left-s.width()/2,top:t.pageY-a.top-s.height()/2-(parseInt(s.css("borderTopWidth"),10)||0)-(parseInt(s.css("borderBottomWidth"),10)||0)+(parseInt(s.css("marginTop"),10)||0)},this.handles.hasClass("ui-state-hover")||this._slide(t,o,r),this._animateOff=!0,!0))},_mouseStart:function(e){return!0},_mouseDrag:function(e){var t={x:e.pageX,y:e.pageY},n=this._normValueFromMouse(t);return this._slide(e,this._handleIndex,n),!1},_mouseStop:function(e){return this.handles.removeClass("ui-state-active"),this._mouseSliding=!1,this._stop(e,this._handleIndex),this._change(e,this._handleIndex),this._handleIndex=null,this._clickOffset=null,this._animateOff=!1,!1},_detectOrientation:function(){this.orientation=this.options.orientation==="vertical"?"vertical":"horizontal"},_normValueFromMouse:function(e){var t,n,r,i,s;return this.orientation==="horizontal"?(t=this.elementSize.width,n=e.x-this.elementOffset.left-(this._clickOffset?this._clickOffset.left:0)):(t=this.elementSize.height,n=e.y-this.elementOffset.top-(this._clickOffset?this._clickOffset.top:0)),r=n/t,r>1&&(r=1),r<0&&(r=0),this.orientation==="vertical"&&(r=1-r),i=this._valueMax()-this._valueMin(),s=this._valueMin()+r*i,this._trimAlignValue(s)},_start:function(e,t){var n={handle:this.handles[t],value:this.value()};return this.options.values&&this.options.values.length&&(n.value=this.values(t),n.values=this.values()),this._trigger("start",e,n)},_slide:function(e,t,n){var r,i,s;this.options.values&&this.options.values.length?(r=this.values(t?0:1),this.options.values.length===2&&this.options.range===!0&&(t===0&&n>r||t===1&&n<r)&&(n=r),n!==this.values(t)&&(i=this.values(),i[t]=n,s=this._trigger("slide",e,{handle:this.handles[t],value:n,values:i}),r=this.values(t?0:1),s!==!1&&this.values(t,n,!0))):n!==this.value()&&(s=this._trigger("slide",e,{handle:this.handles[t],value:n}),s!==!1&&this.value(n))},_stop:function(e,t){var n={handle:this.handles[t],value:this.value()};this.options.values&&this.options.values.length&&(n.value=this.values(t),n.values=this.values()),this._trigger("stop",e,n)},_change:function(e,t){if(!this._keySliding&&!this._mouseSliding){var n={handle:this.handles[t],value:this.value()};this.options.values&&this.options.values.length&&(n.value=this.values(t),n.values=this.values()),this._trigger("change",e,n)}},value:function(e){if(arguments.length){this.options.value=this._trimAlignValue(e),this._refreshValue(),this._change(null,0);return}return this._value()},values:function(t,n){var r,i,s;if(arguments.length>1){this.options.values[t]=this._trimAlignValue(n),this._refreshValue(),this._change(null,t);return}if(!arguments.length)return this._values();if(!e.isArray(arguments[0]))return this.options.values&&this.options.values.length?this._values(t):this.value();r=this.options.values,i=arguments[0];for(s=0;s<r.length;s+=1)r[s]=this._trimAlignValue(i[s]),this._change(null,s);this._refreshValue()},_setOption:function(t,n){var r,i=0;e.isArray(this.options.values)&&(i=this.options.values.length),e.Widget.prototype._setOption.apply(this,arguments);switch(t){case"disabled":n?(this.handles.filter(".ui-state-focus").blur(),this.handles.removeClass("ui-state-hover"),this.handles.prop("disabled",!0),this.element.addClass("ui-disabled")):(this.handles.prop("disabled",!1),this.element.removeClass("ui-disabled"));break;case"orientation":this._detectOrientation(),this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-"+this.orientation),this._refreshValue();break;case"value":this._animateOff=!0,this._refreshValue(),this._change(null,0),this._animateOff=!1;break;case"values":this._animateOff=!0,this._refreshValue();for(r=0;r<i;r+=1)this._change(null,r);this._animateOff=!1}},_value:function(){var e=this.options.value;return e=this._trimAlignValue(e),e},_values:function(e){var t,n,r;if(arguments.length)return t=this.options.values[e],t=this._trimAlignValue(t),t;n=this.options.values.slice();for(r=0;r<n.length;r+=1)n[r]=this._trimAlignValue(n[r]);return n},_trimAlignValue:function(e){if(e<=this._valueMin())return this._valueMin();if(e>=this._valueMax())return this._valueMax();var t=this.options.step>0?this.options.step:1,n=(e-this._valueMin())%t,r=e-n;return Math.abs(n)*2>=t&&(r+=n>0?t:-t),parseFloat(r.toFixed(5))},_valueMin:function(){return this.options.min},_valueMax:function(){return this.options.max},_refreshValue:function(){var t,n,r,i,s,o=this.options.range,u=this.options,a=this,f=this._animateOff?!1:u.animate,l={};this.options.values&&this.options.values.length?this.handles.each(function(r,i){n=(a.values(r)-a._valueMin())/(a._valueMax()-a._valueMin())*100,l[a.orientation==="horizontal"?"left":"bottom"]=n+"%",e(this).stop(1,1)[f?"animate":"css"](l,u.animate),a.options.range===!0&&(a.orientation==="horizontal"?(r===0&&a.range.stop(1,1)[f?"animate":"css"]({left:n+"%"},u.animate),r===1&&a.range[f?"animate":"css"]({width:n-t+"%"},{queue:!1,duration:u.animate})):(r===0&&a.range.stop(1,1)[f?"animate":"css"]({bottom:n+"%"},u.animate),r===1&&a.range[f?"animate":"css"]({height:n-t+"%"},{queue:!1,duration:u.animate}))),t=n}):(r=this.value(),i=this._valueMin(),s=this._valueMax(),n=s!==i?(r-i)/(s-i)*100:0,l[this.orientation==="horizontal"?"left":"bottom"]=n+"%",this.handle.stop(1,1)[f?"animate":"css"](l,u.animate),o==="min"&&this.orientation==="horizontal"&&this.range.stop(1,1)[f?"animate":"css"]({width:n+"%"},u.animate),o==="max"&&this.orientation==="horizontal"&&this.range[f?"animate":"css"]({width:100-n+"%"},{queue:!1,duration:u.animate}),o==="min"&&this.orientation==="vertical"&&this.range.stop(1,1)[f?"animate":"css"]({height:n+"%"},u.animate),o==="max"&&this.orientation==="vertical"&&this.range[f?"animate":"css"]({height:100-n+"%"},{queue:!1,duration:u.animate}))}})})(jQuery);(function(e,t){e.widget("ui.sortable",e.ui.mouse,{version:"1.9.0",widgetEventPrefix:"sort",ready:!1,options:{appendTo:"parent",axis:!1,connectWith:!1,containment:!1,cursor:"auto",cursorAt:!1,dropOnEmpty:!0,forcePlaceholderSize:!1,forceHelperSize:!1,grid:!1,handle:!1,helper:"original",items:"> *",opacity:!1,placeholder:!1,revert:!1,scroll:!0,scrollSensitivity:20,scrollSpeed:20,scope:"default",tolerance:"intersect",zIndex:1e3},_create:function(){var e=this.options;this.containerCache={},this.element.addClass("ui-sortable"),this.refresh(),this.floating=this.items.length?e.axis==="x"||/left|right/.test(this.items[0].item.css("float"))||/inline|table-cell/.test(this.items[0].item.css("display")):!1,this.offset=this.element.offset(),this._mouseInit(),this.ready=!0},_destroy:function(){this.element.removeClass("ui-sortable ui-sortable-disabled"),this._mouseDestroy();for(var e=this.items.length-1;e>=0;e--)this.items[e].item.removeData(this.widgetName+"-item");return this},_setOption:function(t,n){t==="disabled"?(this.options[t]=n,this.widget().toggleClass("ui-sortable-disabled",!!n)):e.Widget.prototype._setOption.apply(this,arguments)},_mouseCapture:function(t,n){var r=this;if(this.reverting)return!1;if(this.options.disabled||this.options.type=="static")return!1;this._refreshItems(t);var i=null,s=e(t.target).parents().each(function(){if(e.data(this,r.widgetName+"-item")==r)return i=e(this),!1});e.data(t.target,r.widgetName+"-item")==r&&(i=e(t.target));if(!i)return!1;if(this.options.handle&&!n){var o=!1;e(this.options.handle,i).find("*").andSelf().each(function(){this==t.target&&(o=!0)});if(!o)return!1}return this.currentItem=i,this._removeCurrentsFromItems(),!0},_mouseStart:function(t,n,r){var i=this.options;this.currentContainer=this,this.refreshPositions(),this.helper=this._createHelper(t),this._cacheHelperProportions(),this._cacheMargins(),this.scrollParent=this.helper.scrollParent(),this.offset=this.currentItem.offset(),this.offset={top:this.offset.top-this.margins.top,left:this.offset.left-this.margins.left},e.extend(this.offset,{click:{left:t.pageX-this.offset.left,top:t.pageY-this.offset.top},parent:this._getParentOffset(),relative:this._getRelativeOffset()}),this.helper.css("position","absolute"),this.cssPosition=this.helper.css("position"),this.originalPosition=this._generatePosition(t),this.originalPageX=t.pageX,this.originalPageY=t.pageY,i.cursorAt&&this._adjustOffsetFromHelper(i.cursorAt),this.domPosition={prev:this.currentItem.prev()[0],parent:this.currentItem.parent()[0]},this.helper[0]!=this.currentItem[0]&&this.currentItem.hide(),this._createPlaceholder(),i.containment&&this._setContainment(),i.cursor&&(e("body").css("cursor")&&(this._storedCursor=e("body").css("cursor")),e("body").css("cursor",i.cursor)),i.opacity&&(this.helper.css("opacity")&&(this._storedOpacity=this.helper.css("opacity")),this.helper.css("opacity",i.opacity)),i.zIndex&&(this.helper.css("zIndex")&&(this._storedZIndex=this.helper.css("zIndex")),this.helper.css("zIndex",i.zIndex)),this.scrollParent[0]!=document&&this.scrollParent[0].tagName!="HTML"&&(this.overflowOffset=this.scrollParent.offset()),this._trigger("start",t,this._uiHash()),this._preserveHelperProportions||this._cacheHelperProportions();if(!r)for(var s=this.containers.length-1;s>=0;s--)this.containers[s]._trigger("activate",t,this._uiHash(this));return e.ui.ddmanager&&(e.ui.ddmanager.current=this),e.ui.ddmanager&&!i.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t),this.dragging=!0,this.helper.addClass("ui-sortable-helper"),this._mouseDrag(t),!0},_mouseDrag:function(t){this.position=this._generatePosition(t),this.positionAbs=this._convertPositionTo("absolute"),this.lastPositionAbs||(this.lastPositionAbs=this.positionAbs);if(this.options.scroll){var n=this.options,r=!1;this.scrollParent[0]!=document&&this.scrollParent[0].tagName!="HTML"?(this.overflowOffset.top+this.scrollParent[0].offsetHeight-t.pageY<n.scrollSensitivity?this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop+n.scrollSpeed:t.pageY-this.overflowOffset.top<n.scrollSensitivity&&(this.scrollParent[0].scrollTop=r=this.scrollParent[0].scrollTop-n.scrollSpeed),this.overflowOffset.left+this.scrollParent[0].offsetWidth-t.pageX<n.scrollSensitivity?this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft+n.scrollSpeed:t.pageX-this.overflowOffset.left<n.scrollSensitivity&&(this.scrollParent[0].scrollLeft=r=this.scrollParent[0].scrollLeft-n.scrollSpeed)):(t.pageY-e(document).scrollTop()<n.scrollSensitivity?r=e(document).scrollTop(e(document).scrollTop()-n.scrollSpeed):e(window).height()-(t.pageY-e(document).scrollTop())<n.scrollSensitivity&&(r=e(document).scrollTop(e(document).scrollTop()+n.scrollSpeed)),t.pageX-e(document).scrollLeft()<n.scrollSensitivity?r=e(document).scrollLeft(e(document).scrollLeft()-n.scrollSpeed):e(window).width()-(t.pageX-e(document).scrollLeft())<n.scrollSensitivity&&(r=e(document).scrollLeft(e(document).scrollLeft()+n.scrollSpeed))),r!==!1&&e.ui.ddmanager&&!n.dropBehaviour&&e.ui.ddmanager.prepareOffsets(this,t)}this.positionAbs=this._convertPositionTo("absolute");if(!this.options.axis||this.options.axis!="y")this.helper[0].style.left=this.position.left+"px";if(!this.options.axis||this.options.axis!="x")this.helper[0].style.top=this.position.top+"px";for(var i=this.items.length-1;i>=0;i--){var s=this.items[i],o=s.item[0],u=this._intersectsWithPointer(s);if(!u)continue;if(s.instance!==this.currentContainer)continue;if(o!=this.currentItem[0]&&this.placeholder[u==1?"next":"prev"]()[0]!=o&&!e.contains(this.placeholder[0],o)&&(this.options.type=="semi-dynamic"?!e.contains(this.element[0],o):!0)){this.direction=u==1?"down":"up";if(this.options.tolerance!="pointer"&&!this._intersectsWithSides(s))break;this._rearrange(t,s),this._trigger("change",t,this._uiHash());break}}return this._contactContainers(t),e.ui.ddmanager&&e.ui.ddmanager.drag(this,t),this._trigger("sort",t,this._uiHash()),this.lastPositionAbs=this.positionAbs,!1},_mouseStop:function(t,n){if(!t)return;e.ui.ddmanager&&!this.options.dropBehaviour&&e.ui.ddmanager.drop(this,t);if(this.options.revert){var r=this,i=this.placeholder.offset();this.reverting=!0,e(this.helper).animate({left:i.left-this.offset.parent.left-this.margins.left+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollLeft),top:i.top-this.offset.parent.top-this.margins.top+(this.offsetParent[0]==document.body?0:this.offsetParent[0].scrollTop)},parseInt(this.options.revert,10)||500,function(){r._clear(t)})}else this._clear(t,n);return!1},cancel:function(){if(this.dragging){this._mouseUp({target:null}),this.options.helper=="original"?this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper"):this.currentItem.show();for(var t=this.containers.length-1;t>=0;t--)this.containers[t]._trigger("deactivate",null,this._uiHash(this)),this.containers[t].containerCache.over&&(this.containers[t]._trigger("out",null,this._uiHash(this)),this.containers[t].containerCache.over=0)}return this.placeholder&&(this.placeholder[0].parentNode&&this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.options.helper!="original"&&this.helper&&this.helper[0].parentNode&&this.helper.remove(),e.extend(this,{helper:null,dragging:!1,reverting:!1,_noFinalSort:null}),this.domPosition.prev?e(this.domPosition.prev).after(this.currentItem):e(this.domPosition.parent).prepend(this.currentItem)),this},serialize:function(t){var n=this._getItemsAsjQuery(t&&t.connected),r=[];return t=t||{},e(n).each(function(){var n=(e(t.item||this).attr(t.attribute||"id")||"").match(t.expression||/(.+)[-=_](.+)/);n&&r.push((t.key||n[1]+"[]")+"="+(t.key&&t.expression?n[1]:n[2]))}),!r.length&&t.key&&r.push(t.key+"="),r.join("&")},toArray:function(t){var n=this._getItemsAsjQuery(t&&t.connected),r=[];return t=t||{},n.each(function(){r.push(e(t.item||this).attr(t.attribute||"id")||"")}),r},_intersectsWith:function(e){var t=this.positionAbs.left,n=t+this.helperProportions.width,r=this.positionAbs.top,i=r+this.helperProportions.height,s=e.left,o=s+e.width,u=e.top,a=u+e.height,f=this.offset.click.top,l=this.offset.click.left,c=r+f>u&&r+f<a&&t+l>s&&t+l<o;return this.options.tolerance=="pointer"||this.options.forcePointerForContainers||this.options.tolerance!="pointer"&&this.helperProportions[this.floating?"width":"height"]>e[this.floating?"width":"height"]?c:s<t+this.helperProportions.width/2&&n-this.helperProportions.width/2<o&&u<r+this.helperProportions.height/2&&i-this.helperProportions.height/2<a},_intersectsWithPointer:function(t){var n=this.options.axis==="x"||e.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,t.top,t.height),r=this.options.axis==="y"||e.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,t.left,t.width),i=n&&r,s=this._getDragVerticalDirection(),o=this._getDragHorizontalDirection();return i?this.floating?o&&o=="right"||s=="down"?2:1:s&&(s=="down"?2:1):!1},_intersectsWithSides:function(t){var n=e.ui.isOverAxis(this.positionAbs.top+this.offset.click.top,t.top+t.height/2,t.height),r=e.ui.isOverAxis(this.positionAbs.left+this.offset.click.left,t.left+t.width/2,t.width),i=this._getDragVerticalDirection(),s=this._getDragHorizontalDirection();return this.floating&&s?s=="right"&&r||s=="left"&&!r:i&&(i=="down"&&n||i=="up"&&!n)},_getDragVerticalDirection:function(){var e=this.positionAbs.top-this.lastPositionAbs.top;return e!=0&&(e>0?"down":"up")},_getDragHorizontalDirection:function(){var e=this.positionAbs.left-this.lastPositionAbs.left;return e!=0&&(e>0?"right":"left")},refresh:function(e){return this._refreshItems(e),this.refreshPositions(),this},_connectWith:function(){var e=this.options;return e.connectWith.constructor==String?[e.connectWith]:e.connectWith},_getItemsAsjQuery:function(t){var n=[],r=[],i=this._connectWith();if(i&&t)for(var s=i.length-1;s>=0;s--){var o=e(i[s]);for(var u=o.length-1;u>=0;u--){var a=e.data(o[u],this.widgetName);a&&a!=this&&!a.options.disabled&&r.push([e.isFunction(a.options.items)?a.options.items.call(a.element):e(a.options.items,a.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),a])}}r.push([e.isFunction(this.options.items)?this.options.items.call(this.element,null,{options:this.options,item:this.currentItem}):e(this.options.items,this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"),this]);for(var s=r.length-1;s>=0;s--)r[s][0].each(function(){n.push(this)});return e(n)},_removeCurrentsFromItems:function(){var e=this.currentItem.find(":data("+this.widgetName+"-item)");for(var t=0;t<this.items.length;t++)for(var n=0;n<e.length;n++)e[n]==this.items[t].item[0]&&this.items.splice(t,1)},_refreshItems:function(t){this.items=[],this.containers=[this];var n=this.items,r=[[e.isFunction(this.options.items)?this.options.items.call(this.element[0],t,{item:this.currentItem}):e(this.options.items,this.element),this]],i=this._connectWith();if(i&&this.ready)for(var s=i.length-1;s>=0;s--){var o=e(i[s]);for(var u=o.length-1;u>=0;u--){var a=e.data(o[u],this.widgetName);a&&a!=this&&!a.options.disabled&&(r.push([e.isFunction(a.options.items)?a.options.items.call(a.element[0],t,{item:this.currentItem}):e(a.options.items,a.element),a]),this.containers.push(a))}}for(var s=r.length-1;s>=0;s--){var f=r[s][1],l=r[s][0];for(var u=0,c=l.length;u<c;u++){var h=e(l[u]);h.data(this.widgetName+"-item",f),n.push({item:h,instance:f,width:0,height:0,left:0,top:0})}}},refreshPositions:function(t){this.offsetParent&&this.helper&&(this.offset.parent=this._getParentOffset());for(var n=this.items.length-1;n>=0;n--){var r=this.items[n];if(r.instance!=this.currentContainer&&this.currentContainer&&r.item[0]!=this.currentItem[0])continue;var i=this.options.toleranceElement?e(this.options.toleranceElement,r.item):r.item;t||(r.width=i.outerWidth(),r.height=i.outerHeight());var s=i.offset();r.left=s.left,r.top=s.top}if(this.options.custom&&this.options.custom.refreshContainers)this.options.custom.refreshContainers.call(this);else for(var n=this.containers.length-1;n>=0;n--){var s=this.containers[n].element.offset();this.containers[n].containerCache.left=s.left,this.containers[n].containerCache.top=s.top,this.containers[n].containerCache.width=this.containers[n].element.outerWidth(),this.containers[n].containerCache.height=this.containers[n].element.outerHeight()}return this},_createPlaceholder:function(t){t=t||this;var n=t.options;if(!n.placeholder||n.placeholder.constructor==String){var r=n.placeholder;n.placeholder={element:function(){var n=e(document.createElement(t.currentItem[0].nodeName)).addClass(r||t.currentItem[0].className+" ui-sortable-placeholder").removeClass("ui-sortable-helper")[0];return r||(n.style.visibility="hidden"),n},update:function(e,i){if(r&&!n.forcePlaceholderSize)return;i.height()||i.height(t.currentItem.innerHeight()-parseInt(t.currentItem.css("paddingTop")||0,10)-parseInt(t.currentItem.css("paddingBottom")||0,10)),i.width()||i.width(t.currentItem.innerWidth()-parseInt(t.currentItem.css("paddingLeft")||0,10)-parseInt(t.currentItem.css("paddingRight")||0,10))}}}t.placeholder=e(n.placeholder.element.call(t.element,t.currentItem)),t.currentItem.after(t.placeholder),n.placeholder.update(t,t.placeholder)},_contactContainers:function(t){var n=null,r=null;for(var i=this.containers.length-1;i>=0;i--){if(e.contains(this.currentItem[0],this.containers[i].element[0]))continue;if(this._intersectsWith(this.containers[i].containerCache)){if(n&&e.contains(this.containers[i].element[0],n.element[0]))continue;n=this.containers[i],r=i}else this.containers[i].containerCache.over&&(this.containers[i]._trigger("out",t,this._uiHash(this)),this.containers[i].containerCache.over=0)}if(!n)return;if(this.containers.length===1)this.containers[r]._trigger("over",t,this._uiHash(this)),this.containers[r].containerCache.over=1;else if(this.currentContainer!=this.containers[r]){var s=1e4,o=null,u=this.positionAbs[this.containers[r].floating?"left":"top"];for(var a=this.items.length-1;a>=0;a--){if(!e.contains(this.containers[r].element[0],this.items[a].item[0]))continue;var f=this.containers[r].floating?this.items[a].item.offset().left:this.items[a].item.offset().top;Math.abs(f-u)<s&&(s=Math.abs(f-u),o=this.items[a],this.direction=f-u>0?"down":"up")}if(!o&&!this.options.dropOnEmpty)return;this.currentContainer=this.containers[r],o?this._rearrange(t,o,null,!0):this._rearrange(t,null,this.containers[r].element,!0),this._trigger("change",t,this._uiHash()),this.containers[r]._trigger("change",t,this._uiHash(this)),this.options.placeholder.update(this.currentContainer,this.placeholder),this.containers[r]._trigger("over",t,this._uiHash(this)),this.containers[r].containerCache.over=1}},_createHelper:function(t){var n=this.options,r=e.isFunction(n.helper)?e(n.helper.apply(this.element[0],[t,this.currentItem])):n.helper=="clone"?this.currentItem.clone():this.currentItem;return r.parents("body").length||e(n.appendTo!="parent"?n.appendTo:this.currentItem[0].parentNode)[0].appendChild(r[0]),r[0]==this.currentItem[0]&&(this._storedCSS={width:this.currentItem[0].style.width,height:this.currentItem[0].style.height,position:this.currentItem.css("position"),top:this.currentItem.css("top"),left:this.currentItem.css("left")}),(r[0].style.width==""||n.forceHelperSize)&&r.width(this.currentItem.width()),(r[0].style.height==""||n.forceHelperSize)&&r.height(this.currentItem.height()),r},_adjustOffsetFromHelper:function(t){typeof t=="string"&&(t=t.split(" ")),e.isArray(t)&&(t={left:+t[0],top:+t[1]||0}),"left"in t&&(this.offset.click.left=t.left+this.margins.left),"right"in t&&(this.offset.click.left=this.helperProportions.width-t.right+this.margins.left),"top"in t&&(this.offset.click.top=t.top+this.margins.top),"bottom"in t&&(this.offset.click.top=this.helperProportions.height-t.bottom+this.margins.top)},_getParentOffset:function(){this.offsetParent=this.helper.offsetParent();var t=this.offsetParent.offset();this.cssPosition=="absolute"&&this.scrollParent[0]!=document&&e.contains(this.scrollParent[0],this.offsetParent[0])&&(t.left+=this.scrollParent.scrollLeft(),t.top+=this.scrollParent.scrollTop());if(this.offsetParent[0]==document.body||this.offsetParent[0].tagName&&this.offsetParent[0].tagName.toLowerCase()=="html"&&e.browser.msie)t={top:0,left:0};return{top:t.top+(parseInt(this.offsetParent.css("borderTopWidth"),10)||0),left:t.left+(parseInt(this.offsetParent.css("borderLeftWidth"),10)||0)}},_getRelativeOffset:function(){if(this.cssPosition=="relative"){var e=this.currentItem.position();return{top:e.top-(parseInt(this.helper.css("top"),10)||0)+this.scrollParent.scrollTop(),left:e.left-(parseInt(this.helper.css("left"),10)||0)+this.scrollParent.scrollLeft()}}return{top:0,left:0}},_cacheMargins:function(){this.margins={left:parseInt(this.currentItem.css("marginLeft"),10)||0,top:parseInt(this.currentItem.css("marginTop"),10)||0}},_cacheHelperProportions:function(){this.helperProportions={width:this.helper.outerWidth(),height:this.helper.outerHeight()}},_setContainment:function(){var t=this.options;t.containment=="parent"&&(t.containment=this.helper[0].parentNode);if(t.containment=="document"||t.containment=="window")this.containment=[0-this.offset.relative.left-this.offset.parent.left,0-this.offset.relative.top-this.offset.parent.top,e(t.containment=="document"?document:window).width()-this.helperProportions.width-this.margins.left,(e(t.containment=="document"?document:window).height()||document.body.parentNode.scrollHeight)-this.helperProportions.height-this.margins.top];if(!/^(document|window|parent)$/.test(t.containment)){var n=e(t.containment)[0],r=e(t.containment).offset(),i=e(n).css("overflow")!="hidden";this.containment=[r.left+(parseInt(e(n).css("borderLeftWidth"),10)||0)+(parseInt(e(n).css("paddingLeft"),10)||0)-this.margins.left,r.top+(parseInt(e(n).css("borderTopWidth"),10)||0)+(parseInt(e(n).css("paddingTop"),10)||0)-this.margins.top,r.left+(i?Math.max(n.scrollWidth,n.offsetWidth):n.offsetWidth)-(parseInt(e(n).css("borderLeftWidth"),10)||0)-(parseInt(e(n).css("paddingRight"),10)||0)-this.helperProportions.width-this.margins.left,r.top+(i?Math.max(n.scrollHeight,n.offsetHeight):n.offsetHeight)-(parseInt(e(n).css("borderTopWidth"),10)||0)-(parseInt(e(n).css("paddingBottom"),10)||0)-this.helperProportions.height-this.margins.top]}},_convertPositionTo:function(t,n){n||(n=this.position);var r=t=="absolute"?1:-1,i=this.options,s=this.cssPosition!="absolute"||this.scrollParent[0]!=document&&!!e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,o=/(html|body)/i.test(s[0].tagName);return{top:n.top+this.offset.relative.top*r+this.offset.parent.top*r-(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():o?0:s.scrollTop())*r,left:n.left+this.offset.relative.left*r+this.offset.parent.left*r-(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():o?0:s.scrollLeft())*r}},_generatePosition:function(t){var n=this.options,r=this.cssPosition!="absolute"||this.scrollParent[0]!=document&&!!e.contains(this.scrollParent[0],this.offsetParent[0])?this.scrollParent:this.offsetParent,i=/(html|body)/i.test(r[0].tagName);this.cssPosition=="relative"&&(this.scrollParent[0]==document||this.scrollParent[0]==this.offsetParent[0])&&(this.offset.relative=this._getRelativeOffset());var s=t.pageX,o=t.pageY;if(this.originalPosition){this.containment&&(t.pageX-this.offset.click.left<this.containment[0]&&(s=this.containment[0]+this.offset.click.left),t.pageY-this.offset.click.top<this.containment[1]&&(o=this.containment[1]+this.offset.click.top),t.pageX-this.offset.click.left>this.containment[2]&&(s=this.containment[2]+this.offset.click.left),t.pageY-this.offset.click.top>this.containment[3]&&(o=this.containment[3]+this.offset.click.top));if(n.grid){var u=this.originalPageY+Math.round((o-this.originalPageY)/n.grid[1])*n.grid[1];o=this.containment?u-this.offset.click.top<this.containment[1]||u-this.offset.click.top>this.containment[3]?u-this.offset.click.top<this.containment[1]?u+n.grid[1]:u-n.grid[1]:u:u;var a=this.originalPageX+Math.round((s-this.originalPageX)/n.grid[0])*n.grid[0];s=this.containment?a-this.offset.click.left<this.containment[0]||a-this.offset.click.left>this.containment[2]?a-this.offset.click.left<this.containment[0]?a+n.grid[0]:a-n.grid[0]:a:a}}return{top:o-this.offset.click.top-this.offset.relative.top-this.offset.parent.top+(this.cssPosition=="fixed"?-this.scrollParent.scrollTop():i?0:r.scrollTop()),left:s-this.offset.click.left-this.offset.relative.left-this.offset.parent.left+(this.cssPosition=="fixed"?-this.scrollParent.scrollLeft():i?0:r.scrollLeft())}},_rearrange:function(e,t,n,r){n?n[0].appendChild(this.placeholder[0]):t.item[0].parentNode.insertBefore(this.placeholder[0],this.direction=="down"?t.item[0]:t.item[0].nextSibling),this.counter=this.counter?++this.counter:1;var i=this.counter;this._delay(function(){i==this.counter&&this.refreshPositions(!r)})},_clear:function(t,n){this.reverting=!1;var r=[];!this._noFinalSort&&this.currentItem.parent().length&&this.placeholder.before(this.currentItem),this._noFinalSort=null;if(this.helper[0]==this.currentItem[0]){for(var i in this._storedCSS)if(this._storedCSS[i]=="auto"||this._storedCSS[i]=="static")this._storedCSS[i]="";this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")}else this.currentItem.show();this.fromOutside&&!n&&r.push(function(e){this._trigger("receive",e,this._uiHash(this.fromOutside))}),(this.fromOutside||this.domPosition.prev!=this.currentItem.prev().not(".ui-sortable-helper")[0]||this.domPosition.parent!=this.currentItem.parent()[0])&&!n&&r.push(function(e){this._trigger("update",e,this._uiHash())}),this!==this.currentContainer&&(n||(r.push(function(e){this._trigger("remove",e,this._uiHash())}),r.push(function(e){return function(t){e._trigger("receive",t,this._uiHash(this))}}.call(this,this.currentContainer)),r.push(function(e){return function(t){e._trigger("update",t,this._uiHash(this))}}.call(this,this.currentContainer))));for(var i=this.containers.length-1;i>=0;i--)n||r.push(function(e){return function(t){e._trigger("deactivate",t,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over&&(r.push(function(e){return function(t){e._trigger("out",t,this._uiHash(this))}}.call(this,this.containers[i])),this.containers[i].containerCache.over=0);this._storedCursor&&e("body").css("cursor",this._storedCursor),this._storedOpacity&&this.helper.css("opacity",this._storedOpacity),this._storedZIndex&&this.helper.css("zIndex",this._storedZIndex=="auto"?"":this._storedZIndex),this.dragging=!1;if(this.cancelHelperRemoval){if(!n){this._trigger("beforeStop",t,this._uiHash());for(var i=0;i<r.length;i++)r[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!1}n||this._trigger("beforeStop",t,this._uiHash()),this.placeholder[0].parentNode.removeChild(this.placeholder[0]),this.helper[0]!=this.currentItem[0]&&this.helper.remove(),this.helper=null;if(!n){for(var i=0;i<r.length;i++)r[i].call(this,t);this._trigger("stop",t,this._uiHash())}return this.fromOutside=!1,!0},_trigger:function(){e.Widget.prototype._trigger.apply(this,arguments)===!1&&this.cancel()},_uiHash:function(t){var n=t||this;return{helper:n.helper,placeholder:n.placeholder||e([]),position:n.position,originalPosition:n.originalPosition,offset:n.positionAbs,item:n.currentItem,sender:t?t.element:null}}})})(jQuery);(function(e){function t(e){return function(){var t=this.element.val();e.apply(this,arguments),this._refresh(),t!==this.element.val()&&this._trigger("change")}}e.widget("ui.spinner",{version:"1.9.0",defaultElement:"<input>",widgetEventPrefix:"spin",options:{culture:null,icons:{down:"ui-icon-triangle-1-s",up:"ui-icon-triangle-1-n"},incremental:!0,max:null,min:null,numberFormat:null,page:10,step:1,change:null,spin:null,start:null,stop:null},_create:function(){this._setOption("max",this.options.max),this._setOption("min",this.options.min),this._setOption("step",this.options.step),this._value(this.element.val(),!0),this._draw(),this._on(this._events),this._refresh(),this._on(this.window,{beforeunload:function(){this.element.removeAttr("autocomplete")}})},_getCreateOptions:function(){var t={},n=this.element;return e.each(["min","max","step"],function(e,r){var i=n.attr(r);i!==undefined&&i.length&&(t[r]=i)}),t},_events:{keydown:function(e){this._start(e)&&this._keydown(e)&&e.preventDefault()},keyup:"_stop",focus:function(){this.uiSpinner.addClass("ui-state-active"),this.previous=this.element.val()},blur:function(e){if(this.cancelBlur){delete this.cancelBlur;return}this._refresh(),this.uiSpinner.removeClass("ui-state-active"),this.previous!==this.element.val()&&this._trigger("change",e)},mousewheel:function(e,t){if(!t)return;if(!this.spinning&&!this._start(e))return!1;this._spin((t>0?1:-1)*this.options.step,e),clearTimeout(this.mousewheelTimer),this.mousewheelTimer=this._delay(function(){this.spinning&&this._stop(e)},100),e.preventDefault()},"mousedown .ui-spinner-button":function(t){function r(){var e=this.element[0]===this.document[0].activeElement;e||(this.element.focus(),this.previous=n,this._delay(function(){this.previous=n}))}var n;n=this.element[0]===this.document[0].activeElement?this.previous:this.element.val(),t.preventDefault(),r.call(this),this.cancelBlur=!0,this._delay(function(){delete this.cancelBlur,r.call(this)});if(this._start(t)===!1)return;this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t)},"mouseup .ui-spinner-button":"_stop","mouseenter .ui-spinner-button":function(t){if(!e(t.currentTarget).hasClass("ui-state-active"))return;if(this._start(t)===!1)return!1;this._repeat(null,e(t.currentTarget).hasClass("ui-spinner-up")?1:-1,t)},"mouseleave .ui-spinner-button":"_stop"},_draw:function(){var e=this.uiSpinner=this.element.addClass("ui-spinner-input").attr("autocomplete","off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());this._hoverable(e),this.element.attr("role","spinbutton"),this.buttons=e.find(".ui-spinner-button").attr("tabIndex",-1).button().removeClass("ui-corner-all"),this.buttons.height()>Math.ceil(e.height()*.5)&&e.height()>0&&e.height(e.height()),this.options.disabled&&this.disable()},_keydown:function(t){var n=this.options,r=e.ui.keyCode;switch(t.keyCode){case r.UP:return this._repeat(null,1,t),!0;case r.DOWN:return this._repeat(null,-1,t),!0;case r.PAGE_UP:return this._repeat(null,n.page,t),!0;case r.PAGE_DOWN:return this._repeat(null,-n.page,t),!0}return!1},_uiSpinnerHtml:function(){return"<span class='ui-spinner ui-state-default ui-widget ui-widget-content ui-corner-all'></span>"},_buttonHtml:function(){return"<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon "+this.options.icons.up+"'>&#9650;</span>"+"</a>"+"<a class='ui-spinner-button ui-spinner-down ui-corner-br'>"+"<span class='ui-icon "+this.options.icons.down+"'>&#9660;</span>"+"</a>"},_start:function(e){return!this.spinning&&this._trigger("start",e)===!1?!1:(this.counter||(this.counter=1),this.spinning=!0,!0)},_repeat:function(e,t,n){e=e||500,clearTimeout(this.timer),this.timer=this._delay(function(){this._repeat(40,t,n)},e),this._spin(t*this.options.step,n)},_spin:function(e,t){var n=this.value()||0;this.counter||(this.counter=1),n=this._adjustValue(n+e*this._increment(this.counter));if(!this.spinning||this._trigger("spin",t,{value:n})!==!1)this._value(n),this.counter++},_increment:function(t){var n=this.options.incremental;return n?e.isFunction(n)?n(t):Math.floor(t*t*t/5e4-t*t/500+17*t/200+1):1},_precision:function(){var e=this._precisionOf(this.options.step);return this.options.min!==null&&(e=Math.max(e,this._precisionOf(this.options.min))),e},_precisionOf:function(e){var t=e.toString(),n=t.indexOf(".");return n===-1?0:t.length-n-1},_adjustValue:function(e){var t,n,r=this.options;return t=r.min!==null?r.min:0,n=e-t,n=Math.round(n/r.step)*r.step,e=t+n,e=parseFloat(e.toFixed(this._precision())),r.max!==null&&e>r.max?r.max:r.min!==null&&e<r.min?r.min:e},_stop:function(e){if(!this.spinning)return;clearTimeout(this.timer),clearTimeout(this.mousewheelTimer),this.counter=0,this.spinning=!1,this._trigger("stop",e)},_setOption:function(e,t){if(e==="culture"||e==="numberFormat"){var n=this._parse(this.element.val());this.options[e]=t,this.element.val(this._format(n));return}(e==="max"||e==="min"||e==="step")&&typeof t=="string"&&(t=this._parse(t)),this._super(e,t),e==="disabled"&&(t?(this.element.prop("disabled",!0),this.buttons.button("disable")):(this.element.prop("disabled",!1),this.buttons.button("enable")))},_setOptions:t(function(e){this._super(e),this._value(this.element.val())}),_parse:function(e){return typeof e=="string"&&e!==""&&(e=window.Globalize&&this.options.numberFormat?Globalize.parseFloat(e,10,this.options.culture):+e),e===""||isNaN(e)?null:e},_format:function(e){return e===""?"":window.Globalize&&this.options.numberFormat?Globalize.format(e,this.options.numberFormat,this.options.culture):e},_refresh:function(){this.element.attr({"aria-valuemin":this.options.min,"aria-valuemax":this.options.max,"aria-valuenow":this._parse(this.element.val())})},_value:function(e,t){var n;e!==""&&(n=this._parse(e),n!==null&&(t||(n=this._adjustValue(n)),e=this._format(n))),this.element.val(e),this._refresh()},_destroy:function(){this.element.removeClass("ui-spinner-input").prop("disabled",!1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow"),this.uiSpinner.replaceWith(this.element)},stepUp:t(function(e){this._stepUp(e)}),_stepUp:function(e){this._spin((e||1)*this.options.step)},stepDown:t(function(e){this._stepDown(e)}),_stepDown:function(e){this._spin((e||1)*-this.options.step)},pageUp:t(function(e){this._stepUp((e||1)*this.options.page)}),pageDown:t(function(e){this._stepDown((e||1)*this.options.page)}),value:function(e){if(!arguments.length)return this._parse(this.element.val());t(this._value).call(this,e)},widget:function(){return this.uiSpinner}})})(jQuery);(function(e,t){function i(){return++n}function s(e){return e=e.cloneNode(!1),e.hash.length>1&&e.href.replace(r,"")===location.href.replace(r,"")}var n=0,r=/#.*$/;e.widget("ui.tabs",{version:"1.9.0",delay:300,options:{active:null,collapsible:!1,event:"click",heightStyle:"content",hide:null,show:null,activate:null,beforeActivate:null,beforeLoad:null,load:null},_create:function(){var t,n=this,r=this.options,i=r.active;this.running=!1,this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible",r.collapsible).delegate(".ui-tabs-nav > li","mousedown"+this.eventNamespace,function(t){e(this).is(".ui-state-disabled")&&t.preventDefault()}).delegate(".ui-tabs-anchor","focus"+this.eventNamespace,function(){e(this).closest("li").is(".ui-state-disabled")&&this.blur()}),this._processTabs();if(i===null){location.hash&&this.anchors.each(function(e,t){if(t.hash===location.hash)return i=e,!1}),i===null&&(i=this.tabs.filter(".ui-tabs-active").index());if(i===null||i===-1)i=this.tabs.length?0:!1}i!==!1&&(i=this.tabs.index(this.tabs.eq(i)),i===-1&&(i=r.collapsible?!1:0)),r.active=i,!r.collapsible&&r.active===!1&&this.anchors.length&&(r.active=0),e.isArray(r.disabled)&&(r.disabled=e.unique(r.disabled.concat(e.map(this.tabs.filter(".ui-state-disabled"),function(e){return n.tabs.index(e)}))).sort()),this.options.active!==!1&&this.anchors.length?this.active=this._findActive(this.options.active):this.active=e(),this._refresh(),this.active.length&&this.load(r.active)},_getCreateEventData:function(){return{tab:this.active,panel:this.active.length?this._getPanelForTab(this.active):e()}},_tabKeydown:function(t){var n=e(this.document[0].activeElement).closest("li"),r=this.tabs.index(n),i=!0;if(this._handlePageNav(t))return;switch(t.keyCode){case e.ui.keyCode.RIGHT:case e.ui.keyCode.DOWN:r++;break;case e.ui.keyCode.UP:case e.ui.keyCode.LEFT:i=!1,r--;break;case e.ui.keyCode.END:r=this.anchors.length-1;break;case e.ui.keyCode.HOME:r=0;break;case e.ui.keyCode.SPACE:t.preventDefault(),clearTimeout(this.activating),this._activate(r);return;case e.ui.keyCode.ENTER:t.preventDefault(),clearTimeout(this.activating),this._activate(r===this.options.active?!1:r);return;default:return}t.preventDefault(),clearTimeout(this.activating),r=this._focusNextTab(r,i),t.ctrlKey||(n.attr("aria-selected","false"),this.tabs.eq(r).attr("aria-selected","true"),this.activating=this._delay(function(){this.option("active",r)},this.delay))},_panelKeydown:function(t){if(this._handlePageNav(t))return;t.ctrlKey&&t.keyCode===e.ui.keyCode.UP&&(t.preventDefault(),this.active.focus())},_handlePageNav:function(t){if(t.altKey&&t.keyCode===e.ui.keyCode.PAGE_UP)return this._activate(this._focusNextTab(this.options.active-1,!1)),!0;if(t.altKey&&t.keyCode===e.ui.keyCode.PAGE_DOWN)return this._activate(this._focusNextTab(this.options.active+1,!0)),!0},_findNextTab:function(t,n){function i(){return t>r&&(t=0),t<0&&(t=r),t}var r=this.tabs.length-1;while(e.inArray(i(),this.options.disabled)!==-1)t=n?t+1:t-1;return t},_focusNextTab:function(e,t){return e=this._findNextTab(e,t),this.tabs.eq(e).focus(),e},_setOption:function(e,t){if(e==="active"){this._activate(t);return}if(e==="disabled"){this._setupDisabled(t);return}this._super(e,t),e==="collapsible"&&(this.element.toggleClass("ui-tabs-collapsible",t),!t&&this.options.active===!1&&this._activate(0)),e==="event"&&this._setupEvents(t),e==="heightStyle"&&this._setupHeightStyle(t)},_tabId:function(e){return e.attr("aria-controls")||"ui-tabs-"+i()},_sanitizeSelector:function(e){return e?e.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g,"\\$&"):""},refresh:function(){var t,n=this.options,r=this.tablist.children(":has(a[href])");n.disabled=e.map(r.filter(".ui-state-disabled"),function(e){return r.index(e)}),this._processTabs(),n.active===!1||!this.anchors.length?(n.active=!1,this.active=e()):this.active.length&&!e.contains(this.tablist[0],this.active[0])?this.tabs.length===n.disabled.length?(n.active=!1,this.active=e()):this._activate(this._findNextTab(Math.max(0,n.active-1),!1)):n.active=this.tabs.index(this.active),this._refresh()},_refresh:function(){this._setupDisabled(this.options.disabled),this._setupEvents(this.options.event),this._setupHeightStyle(this.options.heightStyle),this.tabs.not(this.active).attr({"aria-selected":"false",tabIndex:-1}),this.panels.not(this._getPanelForTab(this.active)).hide().attr({"aria-expanded":"false","aria-hidden":"true"}),this.active.length?(this.active.addClass("ui-tabs-active ui-state-active").attr({"aria-selected":"true",tabIndex:0}),this._getPanelForTab(this.active).show().attr({"aria-expanded":"true","aria-hidden":"false"})):this.tabs.eq(0).attr("tabIndex",0)},_processTabs:function(){var t=this;this.tablist=this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role","tablist"),this.tabs=this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({role:"tab",tabIndex:-1}),this.anchors=this.tabs.map(function(){return e("a",this)[0]}).addClass("ui-tabs-anchor").attr({role:"presentation",tabIndex:-1}),this.panels=e(),this.anchors.each(function(n,r){var i,o,u,a=e(r).uniqueId().attr("id"),f=e(r).closest("li"),l=f.attr("aria-controls");s(r)?(i=r.hash,o=t.element.find(t._sanitizeSelector(i))):(u=t._tabId(f),i="#"+u,o=t.element.find(i),o.length||(o=t._createPanel(u),o.insertAfter(t.panels[n-1]||t.tablist)),o.attr("aria-live","polite")),o.length&&(t.panels=t.panels.add(o)),l&&f.data("ui-tabs-aria-controls",l),f.attr({"aria-controls":i.substring(1),"aria-labelledby":a}),o.attr("aria-labelledby",a)}),this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role","tabpanel")},_getList:function(){return this.element.find("ol,ul").eq(0)},_createPanel:function(t){return e("<div>").attr("id",t).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)},_setupDisabled:function(t){e.isArray(t)&&(t.length?t.length===this.anchors.length&&(t=!0):t=!1);for(var n=0,r;r=this.tabs[n];n++)t===!0||e.inArray(n,t)!==-1?e(r).addClass("ui-state-disabled").attr("aria-disabled","true"):e(r).removeClass("ui-state-disabled").removeAttr("aria-disabled");this.options.disabled=t},_setupEvents:function(t){var n={click:function(e){e.preventDefault()}};t&&e.each(t.split(" "),function(e,t){n[t]="_eventHandler"}),this._off(this.anchors.add(this.tabs).add(this.panels)),this._on(this.anchors,n),this._on(this.tabs,{keydown:"_tabKeydown"}),this._on(this.panels,{keydown:"_panelKeydown"}),this._focusable(this.tabs),this._hoverable(this.tabs)},_setupHeightStyle:function(t){var n,r,i=this.element.parent();t==="fill"?(e.support.minHeight||(r=i.css("overflow"),i.css("overflow","hidden")),n=i.height(),this.element.siblings(":visible").each(function(){var t=e(this),r=t.css("position");if(r==="absolute"||r==="fixed")return;n-=t.outerHeight(!0)}),r&&i.css("overflow",r),this.element.children().not(this.panels).each(function(){n-=e(this).outerHeight(!0)}),this.panels.each(function(){e(this).height(Math.max(0,n-e(this).innerHeight()+e(this).height()))}).css("overflow","auto")):t==="auto"&&(n=0,this.panels.each(function(){n=Math.max(n,e(this).height("").height())}).height(n))},_eventHandler:function(t){var n=this.options,r=this.active,i=e(t.currentTarget),s=i.closest("li"),o=s[0]===r[0],u=o&&n.collapsible,a=u?e():this._getPanelForTab(s),f=r.length?this._getPanelForTab(r):e(),l={oldTab:r,oldPanel:f,newTab:u?e():s,newPanel:a};t.preventDefault();if(s.hasClass("ui-state-disabled")||s.hasClass("ui-tabs-loading")||this.running||o&&!n.collapsible||this._trigger("beforeActivate",t,l)===!1)return;n.active=u?!1:this.tabs.index(s),this.active=o?e():s,this.xhr&&this.xhr.abort(),!f.length&&!a.length&&e.error("jQuery UI Tabs: Mismatching fragment identifier."),a.length&&this.load(this.tabs.index(s),t),this._toggle(t,l)},_toggle:function(t,n){function o(){r.running=!1,r._trigger("activate",t,n)}function u(){n.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),i.length&&r.options.show?r._show(i,r.options.show,o):(i.show(),o())}var r=this,i=n.newPanel,s=n.oldPanel;this.running=!0,s.length&&this.options.hide?this._hide(s,this.options.hide,function(){n.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),u()}):(n.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),s.hide(),u()),s.attr({"aria-expanded":"false","aria-hidden":"true"}),n.oldTab.attr("aria-selected","false"),i.length&&s.length?n.oldTab.attr("tabIndex",-1):i.length&&this.tabs.filter(function(){return e(this).attr("tabIndex")===0}).attr("tabIndex",-1),i.attr({"aria-expanded":"true","aria-hidden":"false"}),n.newTab.attr({"aria-selected":"true",tabIndex:0})},_activate:function(t){var n,r=this._findActive(t);if(r[0]===this.active[0])return;r.length||(r=this.active),n=r.find(".ui-tabs-anchor")[0],this._eventHandler({target:n,currentTarget:n,preventDefault:e.noop})},_findActive:function(t){return t===!1?e():this.tabs.eq(t)},_getIndex:function(e){return typeof e=="string"&&(e=this.anchors.index(this.anchors.filter("[href$='"+e+"']"))),e},_destroy:function(){this.xhr&&this.xhr.abort(),this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible"),this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role"),this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeData("href.tabs").removeData("load.tabs").removeUniqueId(),this.tabs.add(this.panels).each(function(){e.data(this,"ui-tabs-destroy")?e(this).remove():e(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")}),this.tabs.each(function(){var t=e(this),n=t.data("ui-tabs-aria-controls");n?t.attr("aria-controls",n):t.removeAttr("aria-controls")}),this.options.heightStyle!=="content"&&this.panels.css("height","")},enable:function(n){var r=this.options.disabled;if(r===!1)return;n===t?r=!1:(n=this._getIndex(n),e.isArray(r)?r=e.map(r,function(e){return e!==n?e:null}):r=e.map(this.tabs,function(e,t){return t!==n?t:null})),this._setupDisabled(r)},disable:function(n){var r=this.options.disabled;if(r===!0)return;if(n===t)r=!0;else{n=this._getIndex(n);if(e.inArray(n,r)!==-1)return;e.isArray(r)?r=e.merge([n],r).sort():r=[n]}this._setupDisabled(r)},load:function(t,n){t=this._getIndex(t);var r=this,i=this.tabs.eq(t),o=i.find(".ui-tabs-anchor"),u=this._getPanelForTab(i),a={tab:i,panel:u};if(s(o[0]))return;this.xhr=e.ajax(this._ajaxSettings(o,n,a)),this.xhr&&this.xhr.statusText!=="canceled"&&(i.addClass("ui-tabs-loading"),u.attr("aria-busy","true"),this.xhr.success(function(e){setTimeout(function(){u.html(e),r._trigger("load",n,a)},1)}).complete(function(e,t){setTimeout(function(){t==="abort"&&r.panels.stop(!1,!0),i.removeClass("ui-tabs-loading"),u.removeAttr("aria-busy"),e===r.xhr&&delete r.xhr},1)}))},_ajaxSettings:function(t,n,r){var i=this;return{url:t.attr("href"),beforeSend:function(t,s){return i._trigger("beforeLoad",n,e.extend({jqXHR:t,ajaxSettings:s},r))}}},_getPanelForTab:function(t){var n=e(t).attr("aria-controls");return this.element.find(this._sanitizeSelector("#"+n))}}),e.uiBackCompat!==!1&&(e.ui.tabs.prototype._ui=function(e,t){return{tab:e,panel:t,index:this.anchors.index(e)}},e.widget("ui.tabs",e.ui.tabs,{url:function(e,t){this.anchors.eq(e).attr("href",t)}}),e.widget("ui.tabs",e.ui.tabs,{options:{ajaxOptions:null,cache:!1},_create:function(){this._super();var t=this;this._on({tabsbeforeload:function(n,r){if(e.data(r.tab[0],"cache.tabs")){n.preventDefault();return}r.jqXHR.success(function(){t.options.cache&&e.data(r.tab[0],"cache.tabs",!0)})}})},_ajaxSettings:function(t,n,r){var i=this.options.ajaxOptions;return e.extend({},i,{error:function(e,t,n){try{i.error(e,t,r.tab.closest("li").index(),r.tab[0])}catch(n){}}},this._superApply(arguments))},_setOption:function(e,t){e==="cache"&&t===!1&&this.anchors.removeData("cache.tabs"),this._super(e,t)},_destroy:function(){this.anchors.removeData("cache.tabs"),this._super()},url:function(e,t){this.anchors.eq(e).removeData("cache.tabs"),this._superApply(arguments)}}),e.widget("ui.tabs",e.ui.tabs,{abort:function(){this.xhr&&this.xhr.abort()}}),e.widget("ui.tabs",e.ui.tabs,{options:{spinner:"<em>Loading&#8230;</em>"},_create:function(){this._super(),this._on({tabsbeforeload:function(e,t){if(e.target!==this.element[0]||!this.options.spinner)return;var n=t.tab.find("span"),r=n.html();n.html(this.options.spinner),t.jqXHR.complete(function(){n.html(r)})}})}}),e.widget("ui.tabs",e.ui.tabs,{options:{enable:null,disable:null},enable:function(t){var n=this.options,r;if(t&&n.disabled===!0||e.isArray(n.disabled)&&e.inArray(t,n.disabled)!==-1)r=!0;this._superApply(arguments),r&&this._trigger("enable",null,this._ui(this.anchors[t],this.panels[t]))},disable:function(t){var n=this.options,r;if(t&&n.disabled===!1||e.isArray(n.disabled)&&e.inArray(t,n.disabled)===-1)r=!0;this._superApply(arguments),r&&this._trigger("disable",null,this._ui(this.anchors[t],this.panels[t]))}}),e.widget("ui.tabs",e.ui.tabs,{options:{add:null,remove:null,tabTemplate:"<li><a href='#{href}'><span>#{label}</span></a></li>"},add:function(n,r,i){i===t&&(i=this.anchors.length);var s,o,u=this.options,a=e(u.tabTemplate.replace(/#\{href\}/g,n).replace(/#\{label\}/g,r)),f=n.indexOf("#")?this._tabId(a):n.replace("#","");return a.addClass("ui-state-default ui-corner-top").data("ui-tabs-destroy",!0),a.attr("aria-controls",f),s=i>=this.tabs.length,o=this.element.find("#"+f),o.length||(o=this._createPanel(f),s?i>0?o.insertAfter(this.panels.eq(-1)):o.appendTo(this.element):o.insertBefore(this.panels[i])),o.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").hide(),s?a.appendTo(this.tablist):a.insertBefore(this.tabs[i]),u.disabled=e.map(u.disabled,function(e){return e>=i?++e:e}),this.refresh(),this.tabs.length===1&&u.active===!1&&this.option("active",0),this._trigger("add",null,this._ui(this.anchors[i],this.panels[i])),this},remove:function(t){t=this._getIndex(t);var n=this.options,r=this.tabs.eq(t).remove(),i=this._getPanelForTab(r).remove();return r.hasClass("ui-tabs-active")&&this.anchors.length>2&&this._activate(t+(t+1<this.anchors.length?1:-1)),n.disabled=e.map(e.grep(n.disabled,function(e){return e!==t}),function(e){return e>=t?--e:e}),this.refresh(),this._trigger("remove",null,this._ui(r.find("a")[0],i[0])),this}}),e.widget("ui.tabs",e.ui.tabs,{length:function(){return this.anchors.length}}),e.widget("ui.tabs",e.ui.tabs,{options:{idPrefix:"ui-tabs-"},_tabId:function(t){var n=t.is("li")?t.find("a[href]"):t;return n=n[0],e(n).closest("li").attr("aria-controls")||n.title&&n.title.replace(/\s/g,"_").replace(/[^\w\u00c0-\uFFFF\-]/g,"")||this.options.idPrefix+i()}}),e.widget("ui.tabs",e.ui.tabs,{options:{panelTemplate:"<div></div>"},_createPanel:function(t){return e(this.options.panelTemplate).attr("id",t).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy",!0)}}),e.widget("ui.tabs",e.ui.tabs,{_create:function(){var e=this.options;e.active===null&&e.selected!==t&&(e.active=e.selected===-1?!1:e.selected),this._super(),e.selected=e.active,e.selected===!1&&(e.selected=-1)},_setOption:function(e,t){if(e!=="selected")return this._super(e,t);var n=this.options;this._super("active",t===-1?!1:t),n.selected=n.active,n.selected===!1&&(n.selected=-1)},_eventHandler:function(e){this._superApply(arguments),this.options.selected=this.options.active,this.options.selected===!1&&(this.options.selected=-1)}}),e.widget("ui.tabs",e.ui.tabs,{options:{show:null,select:null},_create:function(){this._super(),this.options.active!==!1&&this._trigger("show",null,this._ui(this.active.find(".ui-tabs-anchor")[0],this._getPanelForTab(this.active)[0]))},_trigger:function(e,t,n){var r=this._superApply(arguments);return r?(e==="beforeActivate"&&n.newTab.length?r=this._super("select",t,{tab:n.newTab.find(".ui-tabs-anchor")[0],panel:n.newPanel[0],index:n.newTab.closest("li").index()}):e==="activate"&&n.newTab.length&&(r=this._super("show",t,{tab:n.newTab.find(".ui-tabs-anchor")[0],panel:n.newPanel[0],index:n.newTab.closest("li").index()})),r):!1}}),e.widget("ui.tabs",e.ui.tabs,{select:function(e){e=this._getIndex(e);if(e===-1){if(!this.options.collapsible||this.options.selected===-1)return;e=this.options.selected}this.anchors.eq(e).trigger(this.options.event+this.eventNamespace)}}),function(){var t=0;e.widget("ui.tabs",e.ui.tabs,{options:{cookie:null},_create:function(){var e=this.options,t;e.active==null&&e.cookie&&(t=parseInt(this._cookie(),10),t===-1&&(t=!1),e.active=t),this._super()},_cookie:function(n){var r=[this.cookie||(this.cookie=this.options.cookie.name||"ui-tabs-"+ ++t)];return arguments.length&&(r.push(n===!1?-1:n),r.push(this.options.cookie)),e.cookie.apply(null,r)},_refresh:function(){this._super(),this.options.cookie&&this._cookie(this.options.active,this.options.cookie)},_eventHandler:function(e){this._superApply(arguments),this.options.cookie&&this._cookie(this.options.active,this.options.cookie)},_destroy:function(){this._super(),this.options.cookie&&this._cookie(null,this.options.cookie)}})}(),e.widget("ui.tabs",e.ui.tabs,{_trigger:function(t,n,r){var i=e.extend({},r);return t==="load"&&(i.panel=i.panel[0],i.tab=i.tab.find(".ui-tabs-anchor")[0]),this._super(t,n,i)}}),e.widget("ui.tabs",e.ui.tabs,{options:{fx:null},_getFx:function(){var t,n,r=this.options.fx;return r&&(e.isArray(r)?(t=r[0],n=r[1]):t=n=r),r?{show:n,hide:t}:null},_toggle:function(e,t){function o(){n.running=!1,n._trigger("activate",e,t)}function u(){t.newTab.closest("li").addClass("ui-tabs-active ui-state-active"),r.length&&s.show?r.animate(s.show,s.show.duration,function(){o()}):(r.show(),o())}var n=this,r=t.newPanel,i=t.oldPanel,s=this._getFx();if(!s)return this._super(e,t);n.running=!0,i.length&&s.hide?i.animate(s.hide,s.hide.duration,function(){t.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),u()}):(t.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"),i.hide(),u())}}))})(jQuery);(function(e){function n(t,n){var r=(t.attr("aria-describedby")||"").split(/\s+/);r.push(n),t.data("ui-tooltip-id",n).attr("aria-describedby",e.trim(r.join(" ")))}function r(t){var n=t.data("ui-tooltip-id"),r=(t.attr("aria-describedby")||"").split(/\s+/),i=e.inArray(n,r);i!==-1&&r.splice(i,1),t.removeData("ui-tooltip-id"),r=e.trim(r.join(" ")),r?t.attr("aria-describedby",r):t.removeAttr("aria-describedby")}var t=0;e.widget("ui.tooltip",{version:"1.9.0",options:{content:function(){return e(this).attr("title")},hide:!0,items:"[title]",position:{my:"left+15 center",at:"right center",collision:"flipfit flipfit"},show:!0,tooltipClass:null,track:!1,close:null,open:null},_create:function(){this._on({mouseover:"open",focusin:"open"}),this.tooltips={}},_setOption:function(t,n){var r=this;if(t==="disabled"){this[n?"_disable":"_enable"](),this.options[t]=n;return}this._super(t,n),t==="content"&&e.each(this.tooltips,function(e,t){r._updateContent(t)})},_disable:function(){var t=this;e.each(this.tooltips,function(n,r){var i=e.Event("blur");i.target=i.currentTarget=r[0],t.close(i,!0)}),this.element.find(this.options.items).andSelf().each(function(){var t=e(this);t.is("[title]")&&t.data("ui-tooltip-title",t.attr("title")).attr("title","")})},_enable:function(){this.element.find(this.options.items).andSelf().each(function(){var t=e(this);t.data("ui-tooltip-title")&&t.attr("title",t.data("ui-tooltip-title"))})},open:function(t){var n=e(t?t.target:this.element).closest(this.options.items);if(!n.length)return;if(this.options.track&&n.data("ui-tooltip-id")){this._find(n).position(e.extend({of:n},this.options.position)),this._off(this.document,"mousemove");return}n.attr("title")&&n.data("ui-tooltip-title",n.attr("title")),n.data("tooltip-open",!0),this._updateContent(n,t)},_updateContent:function(e,t){var n,r=this.options.content,i=this;if(typeof r=="string")return this._open(t,e,r);n=r.call(e[0],function(n){if(!e.data("tooltip-open"))return;i._delay(function(){this._open(t,e,n)})}),n&&this._open(t,e,n)},_open:function(t,r,i){function u(e){o.of=e,s.position(o)}var s,o;if(!i)return;s=this._find(r);if(s.length){s.find(".ui-tooltip-content").html(i);return}r.is("[title]")&&(t&&t.type==="mouseover"?r.attr("title",""):r.removeAttr("title")),s=this._tooltip(r),n(r,s.attr("id")),s.find(".ui-tooltip-content").html(i),this.options.track&&t&&/^mouse/.test(t.originalEvent.type)?(o=e.extend({},this.options.position),this._on(this.document,{mousemove:u}),u(t)):s.position(e.extend({of:r},this.options.position)),s.hide(),this._show(s,this.options.show),this._trigger("open",t,{tooltip:s}),this._on(r,{mouseleave:"close",focusout:"close",keyup:function(t){if(t.keyCode===e.ui.keyCode.ESCAPE){var n=e.Event(t);n.currentTarget=r[0],this.close(n,!0)}}})},close:function(t,n){var i=this,s=e(t?t.currentTarget:this.element),o=this._find(s);if(this.closing)return;if(!n&&t&&t.type!=="focusout"&&this.document[0].activeElement===s[0])return;s.data("ui-tooltip-title")&&s.attr("title",s.data("ui-tooltip-title")),r(s),o.stop(!0),this._hide(o,this.options.hide,function(){e(this).remove(),delete i.tooltips[this.id]}),s.removeData("tooltip-open"),this._off(s,"mouseleave focusout keyup"),this._off(this.document,"mousemove"),this.closing=!0,this._trigger("close",t,{tooltip:o}),this.closing=!1},_tooltip:function(n){var r="ui-tooltip-"+t++,i=e("<div>").attr({id:r,role:"tooltip"}).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content "+(this.options.tooltipClass||""));return e("<div>").addClass("ui-tooltip-content").appendTo(i),i.appendTo(this.document[0].body),e.fn.bgiframe&&i.bgiframe(),this.tooltips[r]=n,i},_find:function(t){var n=t.data("ui-tooltip-id");return n?e("#"+n):e()},_destroy:function(){var t=this;e.each(this.tooltips,function(n,r){var i=e.Event("blur");i.target=i.currentTarget=r[0],t.close(i,!0),e("#"+n).remove(),r.data("ui-tooltip-title")&&(r.attr("title",r.data("ui-tooltip-title")),r.removeData("ui-tooltip-title"))})}})})(jQuery);
// ColorBox v1.3.19.3 - jQuery lightbox plugin
// (c) 2011 Jack Moore - jacklmoore.com
// License: http://www.opensource.org/licenses/mit-license.php
(function ($, document, window) {
	var
	// Default settings object.	
	// See http://jacklmoore.com/colorbox for details.
	defaults = {
		transition: "elastic",
		speed: 300,
		width: false,
		initialWidth: "600",
		innerWidth: false,
		maxWidth: false,
		height: false,
		initialHeight: "450",
		innerHeight: false,
		maxHeight: false,
		scalePhotos: true,
		scrolling: true,
		inline: false,
		html: false,
		iframe: false,
		fastIframe: true,
		photo: false,
		href: false,
		title: false,
		rel: false,
		opacity: 0.9,
		preloading: true,

		current: "image {current} of {total}",
		previous: "previous",
		next: "next",
		close: "close",
		xhrError: "This content failed to load.",
		imgError: "This image failed to load.",

		open: false,
		returnFocus: true,
		reposition: true,
		loop: true,
		slideshow: false,
		slideshowAuto: true,
		slideshowSpeed: 2500,
		slideshowStart: "start slideshow",
		slideshowStop: "stop slideshow",
		onOpen: false,
		onLoad: false,
		onComplete: false,
		onCleanup: false,
		onClosed: false,
		overlayClose: true,		
		escKey: true,
		arrowKey: true,
		top: false,
		bottom: false,
		left: false,
		right: false,
		fixed: false,
		data: undefined
	},
	
	// Abstracting the HTML and event identifiers for easy rebranding
	colorbox = 'colorbox',
	prefix = 'cbox',
	boxElement = prefix + 'Element',
	
	// Events	
	event_open = prefix + '_open',
	event_load = prefix + '_load',
	event_complete = prefix + '_complete',
	event_cleanup = prefix + '_cleanup',
	event_closed = prefix + '_closed',
	event_purge = prefix + '_purge',
	
	// Special Handling for IE
	isIE = !$.support.opacity && !$.support.style, // IE7 & IE8
	isIE6 = isIE && !window.XMLHttpRequest, // IE6
	event_ie6 = prefix + '_IE6',

	// Cached jQuery Object Variables
	$overlay,
	$box,
	$wrap,
	$content,
	$topBorder,
	$leftBorder,
	$rightBorder,
	$bottomBorder,
	$related,
	$window,
	$loaded,
	$loadingBay,
	$loadingOverlay,
	$title,
	$current,
	$slideshow,
	$next,
	$prev,
	$close,
	$groupControls,
	
	// Variables for cached values or use across multiple functions
	settings,
	interfaceHeight,
	interfaceWidth,
	loadedHeight,
	loadedWidth,
	element,
	index,
	photo,
	open,
	active,
	closing,
	loadingTimer,
	publicMethod,
	div = "div",
	init;

	// ****************
	// HELPER FUNCTIONS
	// ****************
	
	// Convience function for creating new jQuery objects
	function $tag(tag, id, css) {
		var element = document.createElement(tag);

		if (id) {
			element.id = prefix + id;
		}

		if (css) {
			element.style.cssText = css;
		}

		return $(element);
	}

	// Determine the next and previous members in a group.
	function getIndex(increment) {
		var 
		max = $related.length, 
		newIndex = (index + increment) % max;
		
		return (newIndex < 0) ? max + newIndex : newIndex;
	}

	// Convert '%' and 'px' values to integers
	function setSize(size, dimension) {
		return Math.round((/%/.test(size) ? ((dimension === 'x' ? $window.width() : $window.height()) / 100) : 1) * parseInt(size, 10));
	}
	
	// Checks an href to see if it is a photo.
	// There is a force photo option (photo: true) for hrefs that cannot be matched by this regex.
	function isImage(url) {
		return settings.photo || /\.(gif|png|jpe?g|bmp|ico)((#|\?).*)?$/i.test(url);
	}
	
	// Assigns function results to their respective properties
	function makeSettings() {
		var i,
			data = $.data(element, colorbox);
		
		if (data == null) {
			settings = $.extend({}, defaults);
			if (console && console.log) {
				console.log('Error: cboxElement missing settings object')
			}
		} else {
			settings = $.extend({}, data);    		
		}
		
		for (i in settings) {
			if ($.isFunction(settings[i]) && i.slice(0, 2) !== 'on') { // checks to make sure the function isn't one of the callbacks, they will be handled at the appropriate time.
				settings[i] = settings[i].call(element);
			}
		}
		
		settings.rel = settings.rel || element.rel || 'nofollow';
		settings.href = settings.href || $(element).attr('href');
		settings.title = settings.title || element.title;
		
		if (typeof settings.href === "string") {
			settings.href = $.trim(settings.href);
		}
	}

	function trigger(event, callback) {
		$.event.trigger(event);
		if (callback) {
			callback.call(element);
		}
	}

	// Slideshow functionality
	function slideshow() {
		var
		timeOut,
		className = prefix + "Slideshow_",
		click = "click." + prefix,
		start,
		stop,
		clear;
		
		if (settings.slideshow && $related[1]) {
			start = function () {
				$slideshow
					.text(settings.slideshowStop)
					.unbind(click)
					.bind(event_complete, function () {
						if (settings.loop || $related[index + 1]) {
							timeOut = setTimeout(publicMethod.next, settings.slideshowSpeed);
						}
					})
					.bind(event_load, function () {
						clearTimeout(timeOut);
					})
					.one(click + ' ' + event_cleanup, stop);
				$box.removeClass(className + "off").addClass(className + "on");
				timeOut = setTimeout(publicMethod.next, settings.slideshowSpeed);
			};
			
			stop = function () {
				clearTimeout(timeOut);
				$slideshow
					.text(settings.slideshowStart)
					.unbind([event_complete, event_load, event_cleanup, click].join(' '))
					.one(click, function () {
						publicMethod.next();
						start();
					});
				$box.removeClass(className + "on").addClass(className + "off");
			};
			
			if (settings.slideshowAuto) {
				start();
			} else {
				stop();
			}
		} else {
			$box.removeClass(className + "off " + className + "on");
		}
	}

	function launch(target) {
		if (!closing) {
			
			element = target;
			
			makeSettings();
			
			$related = $(element);
			
			index = 0;
			
			if (settings.rel !== 'nofollow') {
				$related = $('.' + boxElement).filter(function () {
					var data = $.data(this, colorbox), 
						relRelated;

					if (data) {
						relRelated =  data.rel || this.rel;
					}
					
					return (relRelated === settings.rel);
				});
				index = $related.index(element);
				
				// Check direct calls to ColorBox.
				if (index === -1) {
					$related = $related.add(element);
					index = $related.length - 1;
				}
			}
			
			if (!open) {
				open = active = true; // Prevents the page-change action from queuing up if the visitor holds down the left or right keys.
				
				$box.show();
				
				if (settings.returnFocus) {
					$(element).blur().one(event_closed, function () {
						$(this).focus();
					});
				}
				
				// +settings.opacity avoids a problem in IE when using non-zero-prefixed-string-values, like '.5'
				$overlay.css({"opacity": +settings.opacity, "cursor": settings.overlayClose ? "pointer" : "auto"}).show();
				
				// Opens inital empty ColorBox prior to content being loaded.
				settings.w = setSize(settings.initialWidth, 'x');
				settings.h = setSize(settings.initialHeight, 'y');
				publicMethod.position();
				
				if (isIE6) {
					$window.bind('resize.' + event_ie6 + ' scroll.' + event_ie6, function () {
						$overlay.css({width: $window.width(), height: $window.height(), top: $window.scrollTop(), left: $window.scrollLeft()});
					}).trigger('resize.' + event_ie6);
				}
				
				trigger(event_open, settings.onOpen);
				
				$groupControls.add($title).hide();
				
				$close.html(settings.close).show();
			}
			
			publicMethod.load(true);
		}
	}

	// ColorBox's markup needs to be added to the DOM prior to being called
	// so that the browser will go ahead and load the CSS background images.
	function appendHTML() {
		if (!$box && document.body) {
			init = false;

			$window = $(window);
			$box = $tag(div).attr({id: colorbox, 'class': isIE ? prefix + (isIE6 ? 'IE6' : 'IE') : ''}).hide();
			$overlay = $tag(div, "Overlay", isIE6 ? 'position:absolute' : '').hide();
			$wrap = $tag(div, "Wrapper");
			$content = $tag(div, "Content").append(
				$loaded = $tag(div, "LoadedContent", 'width:0; height:0; overflow:hidden'),
				$loadingOverlay = $tag(div, "LoadingOverlay").add($tag(div, "LoadingGraphic")),
				$title = $tag(div, "Title"),
				$current = $tag(div, "Current"),
				$next = $tag(div, "Next"),
				$prev = $tag(div, "Previous"),
				$slideshow = $tag(div, "Slideshow").bind(event_open, slideshow),
				$close = $tag(div, "Close")
			);
			
			$wrap.append( // The 3x3 Grid that makes up ColorBox
				$tag(div).append(
					$tag(div, "TopLeft"),
					$topBorder = $tag(div, "TopCenter"),
					$tag(div, "TopRight")
				),
				$tag(div, false, 'clear:left').append(
					$leftBorder = $tag(div, "MiddleLeft"),
					$content,
					$rightBorder = $tag(div, "MiddleRight")
				),
				$tag(div, false, 'clear:left').append(
					$tag(div, "BottomLeft"),
					$bottomBorder = $tag(div, "BottomCenter"),
					$tag(div, "BottomRight")
				)
			).find('div div').css({'float': 'left'});
			
			$loadingBay = $tag(div, false, 'position:absolute; width:9999px; visibility:hidden; display:none');
			
			$groupControls = $next.add($prev).add($current).add($slideshow);

			$(document.body).append($overlay, $box.append($wrap, $loadingBay));
		}
	}

	// Add ColorBox's event bindings
	function addBindings() {
		if ($box) {
			if (!init) {
				init = true;

				// Cache values needed for size calculations
				interfaceHeight = $topBorder.height() + $bottomBorder.height() + $content.outerHeight(true) - $content.height();//Subtraction needed for IE6
				interfaceWidth = $leftBorder.width() + $rightBorder.width() + $content.outerWidth(true) - $content.width();
				loadedHeight = $loaded.outerHeight(true);
				loadedWidth = $loaded.outerWidth(true);
				
				// Setting padding to remove the need to do size conversions during the animation step.
				$box.css({"padding-bottom": interfaceHeight, "padding-right": interfaceWidth});

				// Anonymous functions here keep the public method from being cached, thereby allowing them to be redefined on the fly.
				$next.click(function () {
					publicMethod.next();
				});
				$prev.click(function () {
					publicMethod.prev();
				});
				$close.click(function () {
					publicMethod.close();
				});
				$overlay.click(function () {
					if (settings.overlayClose) {
						publicMethod.close();
					}
				});
				
				// Key Bindings
				$(document).bind('keydown.' + prefix, function (e) {
					var key = e.keyCode;
					if (open && settings.escKey && key === 27) {
						e.preventDefault();
						publicMethod.close();
					}
					if (open && settings.arrowKey && $related[1]) {
						if (key === 37) {
							e.preventDefault();
							$prev.click();
						} else if (key === 39) {
							e.preventDefault();
							$next.click();
						}
					}
				});

				$('.' + boxElement, document).live('click', function (e) {
					// ignore non-left-mouse-clicks and clicks modified with ctrl / command, shift, or alt.
					// See: http://jacklmoore.com/notes/click-events/
					if (!(e.which > 1 || e.shiftKey || e.altKey || e.metaKey)) {
						e.preventDefault();
						launch(this);
					}
				});
			}
			return true;
		}
		return false;
	}

	// Don't do anything if ColorBox already exists.
	if ($.colorbox) {
		return;
	}

	// Append the HTML when the DOM loads
	$(appendHTML);


	// ****************
	// PUBLIC FUNCTIONS
	// Usage format: $.fn.colorbox.close();
	// Usage from within an iframe: parent.$.fn.colorbox.close();
	// ****************
	
	publicMethod = $.fn[colorbox] = $[colorbox] = function (options, callback) {
		var $this = this;
		
		options = options || {};
		
		appendHTML();

		if (addBindings()) {
			if (!$this[0]) {
				if ($this.selector) { // if a selector was given and it didn't match any elements, go ahead and exit.
					return $this;
				}
				// if no selector was given (ie. $.colorbox()), create a temporary element to work with
				$this = $('<a/>');
				options.open = true; // assume an immediate open
			}
			
			if (callback) {
				options.onComplete = callback;
			}
			
			$this.each(function () {
				$.data(this, colorbox, $.extend({}, $.data(this, colorbox) || defaults, options));
			}).addClass(boxElement);
			
			if (($.isFunction(options.open) && options.open.call($this)) || options.open) {
				launch($this[0]);
			}
		}
		
		return $this;
	};

	publicMethod.position = function (speed, loadedCallback) {
		var 
		top = 0, 
		left = 0, 
		offset = $box.offset(),
		scrollTop, 
		scrollLeft;
		
		$window.unbind('resize.' + prefix);

		// remove the modal so that it doesn't influence the document width/height        
		$box.css({top: -9e4, left: -9e4});

		scrollTop = $window.scrollTop();
		scrollLeft = $window.scrollLeft();

		if (settings.fixed && !isIE6) {
			offset.top -= scrollTop;
			offset.left -= scrollLeft;
			$box.css({position: 'fixed'});
		} else {
			top = scrollTop;
			left = scrollLeft;
			$box.css({position: 'absolute'});
		}

		// keeps the top and left positions within the browser's viewport.
		if (settings.right !== false) {
			left += Math.max($window.width() - settings.w - loadedWidth - interfaceWidth - setSize(settings.right, 'x'), 0);
		} else if (settings.left !== false) {
			left += setSize(settings.left, 'x');
		} else {
			left += Math.round(Math.max($window.width() - settings.w - loadedWidth - interfaceWidth, 0) / 2);
		}
		
		if (settings.bottom !== false) {
			top += Math.max($window.height() - settings.h - loadedHeight - interfaceHeight - setSize(settings.bottom, 'y'), 0);
		} else if (settings.top !== false) {
			top += setSize(settings.top, 'y');
		} else {
			top += Math.round(Math.max($window.height() - settings.h - loadedHeight - interfaceHeight, 0) / 2);
		}

		$box.css({top: offset.top, left: offset.left});

		// setting the speed to 0 to reduce the delay between same-sized content.
		speed = ($box.width() === settings.w + loadedWidth && $box.height() === settings.h + loadedHeight) ? 0 : speed || 0;
		
		// this gives the wrapper plenty of breathing room so it's floated contents can move around smoothly,
		// but it has to be shrank down around the size of div#colorbox when it's done.  If not,
		// it can invoke an obscure IE bug when using iframes.
		$wrap[0].style.width = $wrap[0].style.height = "9999px";
		
		function modalDimensions(that) {
			$topBorder[0].style.width = $bottomBorder[0].style.width = $content[0].style.width = that.style.width;
			$content[0].style.height = $leftBorder[0].style.height = $rightBorder[0].style.height = that.style.height;
		}
		
		$box.dequeue().animate({width: settings.w + loadedWidth, height: settings.h + loadedHeight, top: top, left: left}, {
			duration: speed,
			complete: function () {
				modalDimensions(this);
				
				active = false;
				
				// shrink the wrapper down to exactly the size of colorbox to avoid a bug in IE's iframe implementation.
				$wrap[0].style.width = (settings.w + loadedWidth + interfaceWidth) + "px";
				$wrap[0].style.height = (settings.h + loadedHeight + interfaceHeight) + "px";
				
				if (settings.reposition) {
					setTimeout(function () {  // small delay before binding onresize due to an IE8 bug.
						$window.bind('resize.' + prefix, publicMethod.position);
					}, 1);
				}

				if (loadedCallback) {
					loadedCallback();
				}
			},
			step: function () {
				modalDimensions(this);
			}
		});
	};

	publicMethod.resize = function (options) {
		if (open) {
			options = options || {};
			
			if (options.width) {
				settings.w = setSize(options.width, 'x') - loadedWidth - interfaceWidth;
			}
			if (options.innerWidth) {
				settings.w = setSize(options.innerWidth, 'x');
			}
			$loaded.css({width: settings.w});
			
			if (options.height) {
				settings.h = setSize(options.height, 'y') - loadedHeight - interfaceHeight;
			}
			if (options.innerHeight) {
				settings.h = setSize(options.innerHeight, 'y');
			}
			if (!options.innerHeight && !options.height) {
				$loaded.css({height: "auto"});
				settings.h = $loaded.height();
			}
			$loaded.css({height: settings.h});
			
			publicMethod.position(settings.transition === "none" ? 0 : settings.speed);
		}
	};

	publicMethod.prep = function (object) {
		if (!open) {
			return;
		}
		
		var callback, speed = settings.transition === "none" ? 0 : settings.speed;
		
		$loaded.remove();
		$loaded = $tag(div, 'LoadedContent').append(object);
		
		function getWidth() {
			settings.w = settings.w || $loaded.width();
			settings.w = settings.mw && settings.mw < settings.w ? settings.mw : settings.w;
			return settings.w;
		}
		function getHeight() {
			settings.h = settings.h || $loaded.height();
			settings.h = settings.mh && settings.mh < settings.h ? settings.mh : settings.h;
			return settings.h;
		}
		
		$loaded.hide()
		.appendTo($loadingBay.show())// content has to be appended to the DOM for accurate size calculations.
		.css({width: getWidth(), overflow: settings.scrolling ? 'auto' : 'hidden'})
		.css({height: getHeight()})// sets the height independently from the width in case the new width influences the value of height.
		.prependTo($content);
		
		$loadingBay.hide();
		
		// floating the IMG removes the bottom line-height and fixed a problem where IE miscalculates the width of the parent element as 100% of the document width.
		//$(photo).css({'float': 'none', marginLeft: 'auto', marginRight: 'auto'});
		
		$(photo).css({'float': 'none'});
		
		// Hides SELECT elements in IE6 because they would otherwise sit on top of the overlay.
		if (isIE6) {
			$('select').not($box.find('select')).filter(function () {
				return this.style.visibility !== 'hidden';
			}).css({'visibility': 'hidden'}).one(event_cleanup, function () {
				this.style.visibility = 'inherit';
			});
		}
		
		callback = function () {
			var preload, 
				i, 
				total = $related.length, 
				iframe, 
				frameBorder = 'frameBorder', 
				allowTransparency = 'allowTransparency', 
				complete, 
				src, 
				img, 
				data;
			
			if (!open) {
				return;
			}
			
			function removeFilter() {
				if (isIE) {
					$box[0].style.removeAttribute('filter');
				}
			}
			
			complete = function () {
				clearTimeout(loadingTimer);
				$loadingOverlay.hide();
				trigger(event_complete, settings.onComplete);
			};
			
			if (isIE) {
				//This fadeIn helps the bicubic resampling to kick-in.
				if (photo) {
					$loaded.fadeIn(100);
				}
			}
			
			$title.html(settings.title).add($loaded).show();
			
			if (total > 1) { // handle grouping
				if (typeof settings.current === "string") {
					$current.html(settings.current.replace('{current}', index + 1).replace('{total}', total)).show();
				}
				
				$next[(settings.loop || index < total - 1) ? "show" : "hide"]().html(settings.next);
				$prev[(settings.loop || index) ? "show" : "hide"]().html(settings.previous);
				
				if (settings.slideshow) {
					$slideshow.show();
				}
				
				// Preloads images within a rel group
				if (settings.preloading) {
					preload = [
						getIndex(-1),
						getIndex(1)
					];
					while (i = $related[preload.pop()]) {
						data = $.data(i, colorbox);
						
						if (data && data.href) {
							src = data.href;
							if ($.isFunction(src)) {
								src = src.call(i);
							}
						} else {
							src = i.href;
						}

						if (isImage(src)) {
							img = new Image();
							img.src = src;
						}
					}
				}
			} else {
				$groupControls.hide();
			}
			
			if (settings.iframe) {
				iframe = $tag('iframe')[0];
				
				if (frameBorder in iframe) {
					iframe[frameBorder] = 0;
				}
				if (allowTransparency in iframe) {
					iframe[allowTransparency] = "true";
				}
				// give the iframe a unique name to prevent caching
				iframe.name = prefix + (+new Date());
				if (settings.fastIframe) {
					complete();
				} else {
					$(iframe).one('load', complete);
				}
				iframe.src = settings.href;
				if (!settings.scrolling) {
					iframe.scrolling = "no";
				}
				$(iframe).addClass(prefix + 'Iframe').appendTo($loaded).one(event_purge, function () {
					iframe.src = "//about:blank";
				});
			} else {
				complete();
			}
			
			if (settings.transition === 'fade') {
				$box.fadeTo(speed, 1, removeFilter);
			} else {
				removeFilter();
			}
		};
		
		if (settings.transition === 'fade') {
			$box.fadeTo(speed, 0, function () {
				publicMethod.position(0, callback);
			});
		} else {
			publicMethod.position(speed, callback);
		}
	};

	publicMethod.load = function (launched) {
		var href, setResize, prep = publicMethod.prep;
		
		active = true;
		
		photo = false;
		
		element = $related[index];
		
		if (!launched) {
			makeSettings();
		}
		
		trigger(event_purge);
		
		trigger(event_load, settings.onLoad);
		
		settings.h = settings.height ?
				setSize(settings.height, 'y') - loadedHeight - interfaceHeight :
				settings.innerHeight && setSize(settings.innerHeight, 'y');
		
		settings.w = settings.width ?
				setSize(settings.width, 'x') - loadedWidth - interfaceWidth :
				settings.innerWidth && setSize(settings.innerWidth, 'x');
		
		// Sets the minimum dimensions for use in image scaling
		settings.mw = settings.w;
		settings.mh = settings.h;
		
		// Re-evaluate the minimum width and height based on maxWidth and maxHeight values.
		// If the width or height exceed the maxWidth or maxHeight, use the maximum values instead.
		if (settings.maxWidth) {
			settings.mw = setSize(settings.maxWidth, 'x') - loadedWidth - interfaceWidth;
			settings.mw = settings.w && settings.w < settings.mw ? settings.w : settings.mw;
		}
		if (settings.maxHeight) {
			settings.mh = setSize(settings.maxHeight, 'y') - loadedHeight - interfaceHeight;
			settings.mh = settings.h && settings.h < settings.mh ? settings.h : settings.mh;
		}
		
		href = settings.href;
		
		loadingTimer = setTimeout(function () {
			$loadingOverlay.show();
		}, 100);
		
		if (settings.inline) {
			// Inserts an empty placeholder where inline content is being pulled from.
			// An event is bound to put inline content back when ColorBox closes or loads new content.
			$tag(div).hide().insertBefore($(href)[0]).one(event_purge, function () {
				$(this).replaceWith($loaded.children());
			});
			prep($(href));
		} else if (settings.iframe) {
			// IFrame element won't be added to the DOM until it is ready to be displayed,
			// to avoid problems with DOM-ready JS that might be trying to run in that iframe.
			prep(" ");
		} else if (settings.html) {
			prep(settings.html);
		} else if (isImage(href)) {
			$(photo = new Image())
			.addClass(prefix + 'Photo')
			.error(function () {
				settings.title = false;
				prep($tag(div, 'Error').html(settings.imgError));
			})
			.load(function () {
				var percent;
				photo.onload = null; //stops animated gifs from firing the onload repeatedly.
				
				if (settings.scalePhotos) {
					setResize = function () {
						photo.height -= photo.height * percent;
						photo.width -= photo.width * percent;	
					};
					if (settings.mw && photo.width > settings.mw) {
						percent = (photo.width - settings.mw) / photo.width;
						setResize();
					}
					if (settings.mh && photo.height > settings.mh) {
						percent = (photo.height - settings.mh) / photo.height;
						setResize();
					}
				}
				
				if (settings.h) {
					photo.style.marginTop = Math.max(settings.h - photo.height, 0) / 2 + 'px';
				}
				
				if ($related[1] && (settings.loop || $related[index + 1])) {
					photo.style.cursor = 'pointer';
					photo.onclick = function () {
						publicMethod.next();
					};
				}
				
				if (isIE) {
					photo.style.msInterpolationMode = 'bicubic';
				}
				
				setTimeout(function () { // A pause because Chrome will sometimes report a 0 by 0 size otherwise.
					prep(photo);
				}, 1);
			});
			
			setTimeout(function () { // A pause because Opera 10.6+ will sometimes not run the onload function otherwise.
				photo.src = href;
			}, 1);
		} else if (href) {
			$loadingBay.load(href, settings.data, function (data, status, xhr) {
				prep(status === 'error' ? $tag(div, 'Error').html(settings.xhrError) : $(this).contents());
			});
		}
	};
		
	// Navigates to the next page/image in a set.
	publicMethod.next = function () {
		if (!active && $related[1] && (settings.loop || $related[index + 1])) {
			index = getIndex(1);
			publicMethod.load();
		}
	};
	
	publicMethod.prev = function () {
		if (!active && $related[1] && (settings.loop || index)) {
			index = getIndex(-1);
			publicMethod.load();
		}
	};

	// Note: to use this within an iframe use the following format: parent.$.fn.colorbox.close();
	publicMethod.close = function () {
		if (open && !closing) {
			
			closing = true;
			
			open = false;
			
			trigger(event_cleanup, settings.onCleanup);
			
			$window.unbind('.' + prefix + ' .' + event_ie6);
			
			$overlay.fadeTo(200, 0);
			
			$box.stop().fadeTo(300, 0, function () {
				 
				$box.add($overlay).css({'opacity': 1, cursor: 'auto'}).hide();
				
				trigger(event_purge);
				
				$loaded.remove();
				
				setTimeout(function () {
					closing = false;
					trigger(event_closed, settings.onClosed);
				}, 1);
			});
		}
	};

	// Removes changes ColorBox made to the document, but does not remove the plugin
	// from jQuery.
	publicMethod.remove = function () {
		$([]).add($box).add($overlay).remove();
		$box = null;
		$('.' + boxElement)
			.removeData(colorbox)
			.removeClass(boxElement)
			.die();
	};

	// A method for fetching the current element ColorBox is referencing.
	// returns a jQuery object.
	publicMethod.element = function () {
		return $(element);
	};

	publicMethod.settings = defaults;

}(jQuery, document, this));
function isNull( obj ) {
    return (obj == undefined || obj == "undefined" || obj == null || obj == "null");
}

function getAspectRatioResize( width, height, max ) {
    width = parseInt( ''+width );
    height = parseInt( ''+height );
    max = parseInt( ''+max );
    if( height > max || width > max ) {
        if( height > width ) {
            width = width / (height / max);
            height = max;

        } else {
            height = height / (width / max);
            width = max;
        }
    }
    return {'height': height, 'width': width};
}



function addAlbum() {
    var albumName = $( '#albumName' ).val();
    if( albumName.length < 3 ) {
        alert( 'Your album name is too short!' );
        return;
    }
    $.ajax( {
                type: 'POST',
                url: url_prefix + 'albums/addAlbum.php',
                context: this,
                dataType: "json",
                data: {name: albumName},
                success: function( data ) {
                    var albumName = $( '#albumName' ).val();
                    if( data.error == 0 ) {
                        $( '#albumForm' ).append( newAlbumString( data.albumId, '/images/unfiledPicturesAlbum.png', albumName ) );
                        addAlbumListener();
                    }
                }
            } );
}

function getPicsByAlbum( albumid ) {
    if( albumid == 'default' ) {
        showFreePhoto( userId );
        return;
    }

    $.ajax( {
                type: 'POST',
                url: url_prefix + 'albums/getPictures.php',
                context: this,
                data: {albumId: albumid},
                dataType: "json",
                success: function( data ) {
                    $( '#freePhotoList' ).html( '' );
                    $.each( data.picList, function( k, photo ) {
                        $( '#freePhotoList' ).append( newPhotoString( photo.photoid, photo.userid, photo.filename ) );
                    } );
                    addDragDrop();
                }
            } );
}

function addOnePhotoToAlbum( picid, albumid ) {
    var picids = [];
    picids[0] = picid;
    addPhotosToAlbum( picids, albumid );
}

function addPhotosToAlbum( picids, albumid ) {
    $.ajax( {
                type: 'POST',
                url: url_prefix + 'albums/addPics.php',
                data: {picList: picids, albumId: albumid},
                dataType: "json",
                success: function( data ) {
                }
            } );
}

function deletePictureFromAlbum( closeBtn ) {
    var picids = [], albumid = getCurrentAlbumid();
    if( isNull( albumid ) || albumid == 'default' ) {
        albumid = 0;
    }
    picids[0] = $( closeBtn ).attr( 'photoid' );
    $.ajax( {
                type: 'POST',
                url: url_prefix + 'albums/deletePics.php',
                data: {picList: picids, albumId: albumid},
                dataType: "json",
                success: function( data ) {
                    $( closeBtn ).parent().parent().remove();
                }
            } );
}

function deleteAlbumFromAlbums( closeBtn ) {
    var albumids = [], $album;
    albumids[0] = $( closeBtn ).attr( 'albumid' );
    $album = $( '#album_' + albumids[0] );
    if( window.confirm( 'Are you sure you want to delete "' + $album.find( '.album-name span' ).html() + '"?' ) ) {
        $.ajax( {
                    type: 'POST',
                    url: url_prefix + 'albums/deleteAlbums.php',
                    data: {albumList: albumids},
                    dataType: "json",
                    success: function( data ) {
                        $album.remove();
                    }
                } );
    }
}

function showFreePhoto( userId ) {
    if( !isNull( userId ) ) {
        $.ajax( {
                    type: 'POST',
                    url: url_prefix + 'albums/freePhoto.php',
                    data: {},
                    dataType: "json",
                    success: function( data ) {
                        if( data.error == 0 ) {
                            $( '#freePhotoList' ).html( '' );
                            $.each( data.freePhotoList, function( i, photo ) {
                                if( i == 0 ) {
                                    $( '#album_default img' ).attr( 'src', url_prefix + 'userpics/' + photo.userid + '/' + photo.filename );
                                }
                                $( '#freePhotoList' ).append( newPhotoString( photo.photoid, photo.userid, photo.filename ) );
                            } );
                            addDragDrop();
                        }
                    }
                } );
    }
}

var selected = $( [] ), offset = {top: 0, left: 0};
function addDragDrop() {
    makeImagesFit( $( '.photo_div' ) );
    $( '#freePhotoList' ).selectable( { filter: '.photo_div' } );
    $( '#freePhotoList .photo_div' ).css( 'z-index', '99' ).draggable( {
                                                                           containment: '#albums',
                                                                           helper: 'original',
                                                                           opacity: 0.5,
                                                                           revert: true,
                                                                           stack: '.photo_div',
                                                                           cursor: 'move',
                                                                           stop: function( e, ui ) {
                                                                           }
                                                                       } );
}

function makeImagesFit( $imageHolders ) {
    $imageHolders.each( function() {
        var $this = $( this ), $img = $this.find( 'img' );
        $img.load( function() {
            var $newSize = getAspectRatioResize( $img.width(), $img.height(), $this.width() );
            $img.width( $newSize.width ).height( $newSize.height );
            $img.css( 'margin-top', ($this.height() - $newSize.height) / 2 );
        } );
    } );
}

function getCurrentAlbumid() {
    return $( '.select-album' ).first().attr( 'albumid' );
}

function addAlbumListener() {
    makeImagesFit( $( '.album-img-area' ) );
    $( '#albums .each-album' ).click(function() {
        if( $( this ).hasClass( 'select-album' ) ) {
            return;
        }
        $( '.select-album' ).removeClass( 'select-album' );
        $( this ).addClass( 'select-album' );
        getPicsByAlbum( $( this ).attr( 'albumid' ) );
    } ).droppable( {
                       accept: ".photo_div",
                       activeClass: "drop-active",
                       hoverClass: "drop-hover",
                       drop: function( event, ui ) {
                           $( 'body' ).css( 'cursor', 'auto' );
                           var targetAlbumid = $( event.target ).attr( 'albumid' );
                           //trying to drop a photo into the album it's already in, or the default album
                           if( targetAlbumid == getCurrentAlbumid() || targetAlbumid == 'default' ) {
                               return;
                           }
                           var photoids = [];
                           photoids[0] = ui.draggable.attr( 'photoid' );
                           $( ".ui-selected" ).each( function() {
                               photoids.push( $( this ).attr( 'photoid' ) );
                               $(this ).remove();
                           } );
                           addPhotosToAlbum(photoids , targetAlbumid );
                           $( ui.draggable ).remove();
                       }
                   } );
}

function newAlbumString( albumId, filename, albumName ) {
    var albumString = '<div class="each-album" id="album_' + albumId + '" albumid="' + albumId + '"><div class="delete-button-album">';
    albumString = albumString + '<a class="remove" title="' + albumId + '" >&times;</a></div><div>';
    albumString = albumString + '<img class="album-img" alt="' + albumId + '" src="' + url_prefix + filename + '"/></div><div class="album-name" ><span>' + albumName + '</span></div>';
    return albumString;
}

function newPhotoString( photoId, userId, filename ) {
    var photoString = '<div class="photo_div " id="photo_' + photoId + '" photoid="' + photoId + '"> <div class="delete-button-photo">';
    photoString = photoString + '<a class="remove " ' + '" photoid="' + photoId + '">&times;</a></div>';
    photoString = photoString + '<img class="photo" src="' + url_prefix + 'userpics/' + userId + '/' + filename + '" photoid="' + photoId + '"  title=""/></div>';
    return photoString;
}

function openImportFromFlickr( url ) {
    // alert( ' Flickr Importer Event Fired ' );
    document.location = url;
    // alert( 'flickr - ' + url );
}

function openImportFromFacebook( url ) {
    var xheight = $( window ).height() * 80 / 100;
    var xwidth = $( window ).width() * 80 / 100;
    xwidth = ( xwidth >= 880 ? xwidth : 880 );

    var ceditor = '<div><iframe id="popupImportFacebook" width="' + xwidth + '" height="' + xheight + '" src="' + url + '"  scrolling="yes" frameborder="0" ></iframe></div>';

    $.colorbox( {
                    //href:       url,
                    html: ceditor,
                    onLoad: function() {
                    },
                    onComplete: function() {
                        var scrollx = $( document ).scrollTop();
                        $( document ).scrollTop( scrollx + xheight / 50 );
                    }
                } );

    $( document ).bind( 'cbox_closed', function() {
        document.location.reload();
        location.reload();

    } );
}


/* build: `node build.js modules=ALL` */
/*! Fabric.js Copyright 2008-2012, Printio (Juriy Zaytsev, Maxim Chernyak) */

var fabric = fabric || { version: "0.9.21" };

if (typeof exports != 'undefined') {
    exports.fabric = fabric;
}

if (typeof document != 'undefined' && typeof window != 'undefined') {
    fabric.document = document;
    fabric.window = window;
}
else {
    // assume we're running under node.js when document/window are not present
    fabric.document = require("jsdom").jsdom("<!DOCTYPE html><html><head></head><body></body></html>");
    fabric.window = fabric.document.createWindow();
}

/**
 * True when in environment that supports touch events
 * @property isTouchSupported
 * @type boolean
 */
fabric.isTouchSupported = "ontouchstart" in fabric.document.documentElement;

/**
 * True when in environment that's probably Node.js
 * @property isLikelyNode
 * @type boolean
 */
fabric.isLikelyNode = typeof Buffer !== 'undefined' && typeof window === 'undefined';
/*!
 * Copyright (c) 2009 Simo Kinnunen.
 * Licensed under the MIT license.
 */

var Cufon = (function() {

    var api = function() {
        return api.replace.apply(null, arguments);
    };

    var DOM = api.DOM = {

        ready: (function() {

            var complete = false, readyStatus = { loaded: 1, complete: 1 };

            var queue = [], perform = function() {
                if (complete) return;
                complete = true;
                for (var fn; fn = queue.shift(); fn());
            };

            // Gecko, Opera, WebKit r26101+

            if (fabric.document.addEventListener) {
                fabric.document.addEventListener('DOMContentLoaded', perform, false);
                fabric.window.addEventListener('pageshow', perform, false); // For cached Gecko pages
            }

            // Old WebKit, Internet Explorer

            if (!fabric.window.opera && fabric.document.readyState) (function() {
                readyStatus[fabric.document.readyState] ? perform() : setTimeout(arguments.callee, 10);
            })();

            // Internet Explorer

            if (fabric.document.readyState && fabric.document.createStyleSheet) (function() {
                try {
                    fabric.document.body.doScroll('left');
                    perform();
                }
                catch (e) {
                    setTimeout(arguments.callee, 1);
                }
            })();

            addEvent(fabric.window, 'load', perform); // Fallback

            return function(listener) {
                if (!arguments.length) perform();
                else complete ? listener() : queue.push(listener);
            };

        })()

    };

    var CSS = api.CSS = {

        Size: function(value, base) {

            this.value = parseFloat(value);
            this.unit = String(value).match(/[a-z%]*$/)[0] || 'px';

            this.convert = function(value) {
                return value / base * this.value;
            };

            this.convertFrom = function(value) {
                return value / this.value * base;
            };

            this.toString = function() {
                return this.value + this.unit;
            };

        },

        getStyle: function(el) {
            return new Style(el.style);
            /*
             var view = document.defaultView;
             if (view && view.getComputedStyle) return new Style(view.getComputedStyle(el, null));
             if (el.currentStyle) return new Style(el.currentStyle);
             return new Style(el.style);
             */
        },

        quotedList: cached(function(value) {
            // doesn't work properly with empty quoted strings (""), but
            // it's not worth the extra code.
            var list = [], re = /\s*((["'])([\s\S]*?[^\\])\2|[^,]+)\s*/g, match;
            while (match = re.exec(value)) list.push(match[3] || match[1]);
            return list;
        }),

        ready: (function() {

            var complete = false;

            var queue = [], perform = function() {
                complete = true;
                for (var fn; fn = queue.shift(); fn());
            };

            // Safari 2 does not include <style> elements in document.styleSheets.
            // Safari 2 also does not support Object.prototype.propertyIsEnumerable.

            var styleElements = Object.prototype.propertyIsEnumerable ? elementsByTagName('style') : { length: 0 };
            var linkElements = elementsByTagName('link');

            DOM.ready(function() {
                // These checks are actually only needed for WebKit-based browsers, but don't really hurt other browsers.
                var linkStyles = 0, link;
                for (var i = 0, l = linkElements.length; link = linkElements[i], i < l; ++i) {
                    // WebKit does not load alternate stylesheets.
                    if (!link.disabled && link.rel.toLowerCase() == 'stylesheet') ++linkStyles;
                }
                if (fabric.document.styleSheets.length >= styleElements.length + linkStyles) perform();
                else setTimeout(arguments.callee, 10);
            });

            return function(listener) {
                if (complete) listener();
                else queue.push(listener);
            };

        })(),

        supports: function(property, value) {
            var checker = fabric.document.createElement('span').style;
            if (checker[property] === undefined) return false;
            checker[property] = value;
            return checker[property] === value;
        },

        textAlign: function(word, style, position, wordCount) {
            if (style.get('textAlign') == 'right') {
                if (position > 0) word = ' ' + word;
            }
            else if (position < wordCount - 1) word += ' ';
            return word;
        },

        textDecoration: function(el, style) {
            if (!style) style = this.getStyle(el);
            var types = {
                underline: null,
                overline: null,
                'line-through': null
            };
            for (var search = el; search.parentNode && search.parentNode.nodeType == 1; ) {
                var foundAll = true;
                for (var type in types) {
                    if (types[type]) continue;
                    if (style.get('textDecoration').indexOf(type) != -1) types[type] = style.get('color');
                    foundAll = false;
                }
                if (foundAll) break; // this is rather unlikely to happen
                style = this.getStyle(search = search.parentNode);
            }
            return types;
        },

        textShadow: cached(function(value) {
            if (value == 'none') return null;
            var shadows = [], currentShadow = {}, result, offCount = 0;
            var re = /(#[a-f0-9]+|[a-z]+\(.*?\)|[a-z]+)|(-?[\d.]+[a-z%]*)|,/ig;
            while (result = re.exec(value)) {
                if (result[0] == ',') {
                    shadows.push(currentShadow);
                    currentShadow = {}, offCount = 0;
                }
                else if (result[1]) {
                    currentShadow.color = result[1];
                }
                else {
                    currentShadow[[ 'offX', 'offY', 'blur' ][offCount++]] = result[2];
                }
            }
            shadows.push(currentShadow);
            return shadows;
        }),

        color: cached(function(value) {
            var parsed = {};
            parsed.color = value.replace(/^rgba\((.*?),\s*([\d.]+)\)/, function($0, $1, $2) {
                parsed.opacity = parseFloat($2);
                return 'rgb(' + $1 + ')';
            });
            return parsed;
        }),

        textTransform: function(text, style) {
            return text[{
                            uppercase: 'toUpperCase',
                            lowercase: 'toLowerCase'
                        }[style.get('textTransform')] || 'toString']();
        }

    };

    function Font(data) {

        var face = this.face = data.face;
        this.glyphs = data.glyphs;
        this.w = data.w;
        this.baseSize = parseInt(face['units-per-em'], 10);

        this.family = face['font-family'].toLowerCase();
        this.weight = face['font-weight'];
        this.style = face['font-style'] || 'normal';

        this.viewBox = (function () {
            var parts = face.bbox.split(/\s+/);
            var box = {
                minX: parseInt(parts[0], 10),
                minY: parseInt(parts[1], 10),
                maxX: parseInt(parts[2], 10),
                maxY: parseInt(parts[3], 10)
            };
            box.width = box.maxX - box.minX,
                box.height = box.maxY - box.minY;
            box.toString = function() {
                return [ this.minX, this.minY, this.width, this.height ].join(' ');
            };
            return box;
        })();

        this.ascent = -parseInt(face.ascent, 10);
        this.descent = -parseInt(face.descent, 10);

        this.height = -this.ascent + this.descent;

    }

    function FontFamily() {

        var styles = {}, mapping = {
            oblique: 'italic',
            italic: 'oblique'
        };

        this.add = function(font) {
            (styles[font.style] || (styles[font.style] = {}))[font.weight] = font;
        };

        this.get = function(style, weight) {
            var weights = styles[style] || styles[mapping[style]]
                              || styles.normal || styles.italic || styles.oblique;
            if (!weights) return null;
            // we don't have to worry about "bolder" and "lighter"
            // because IE's currentStyle returns a numeric value for it,
            // and other browsers use the computed value anyway
            weight = {
                         normal: 400,
                         bold: 700
                     }[weight] || parseInt(weight, 10);
            if (weights[weight]) return weights[weight];
            // http://www.w3.org/TR/CSS21/fonts.html#propdef-font-weight
            // Gecko uses x99/x01 for lighter/bolder
            var up = {
                1: 1,
                99: 0
            }[weight % 100], alts = [], min, max;
            if (up === undefined) up = weight > 400;
            if (weight == 500) weight = 400;
            for (var alt in weights) {
                alt = parseInt(alt, 10);
                if (!min || alt < min) min = alt;
                if (!max || alt > max) max = alt;
                alts.push(alt);
            }
            if (weight < min) weight = min;
            if (weight > max) weight = max;
            alts.sort(function(a, b) {
                return (up
                    ? (a > weight && b > weight) ? a < b : a > b
                    : (a < weight && b < weight) ? a > b : a < b) ? -1 : 1;
            });
            return weights[alts[0]];
        };

    }

    function HoverHandler() {

        function contains(node, anotherNode) {
            if (node.contains) return node.contains(anotherNode);
            return node.compareDocumentPosition(anotherNode) & 16;
        }

        function onOverOut(e) {
            var related = e.relatedTarget;
            if (!related || contains(this, related)) return;
            trigger(this);
        }

        function onEnterLeave(e) {
            trigger(this);
        }

        function trigger(el) {
            // A timeout is needed so that the event can actually "happen"
            // before replace is triggered. This ensures that styles are up
            // to date.
            setTimeout(function() {
                api.replace(el, sharedStorage.get(el).options, true);
            }, 10);
        }

        this.attach = function(el) {
            if (el.onmouseenter === undefined) {
                addEvent(el, 'mouseover', onOverOut);
                addEvent(el, 'mouseout', onOverOut);
            }
            else {
                addEvent(el, 'mouseenter', onEnterLeave);
                addEvent(el, 'mouseleave', onEnterLeave);
            }
        };

    }

    function Storage() {

        var map = {}, at = 0;

        function identify(el) {
            return el.cufid || (el.cufid = ++at);
        }

        this.get = function(el) {
            var id = identify(el);
            return map[id] || (map[id] = {});
        };

    }

    function Style(style) {

        var custom = {}, sizes = {};

        this.get = function(property) {
            return custom[property] != undefined ? custom[property] : style[property];
        };

        this.getSize = function(property, base) {
            return sizes[property] || (sizes[property] = new CSS.Size(this.get(property), base));
        };

        this.extend = function(styles) {
            for (var property in styles) custom[property] = styles[property];
            return this;
        };

    }

    function addEvent(el, type, listener) {
        if (el.addEventListener) {
            el.addEventListener(type, listener, false);
        }
        else if (el.attachEvent) {
            el.attachEvent('on' + type, function() {
                return listener.call(el, fabric.window.event);
            });
        }
    }

    function attach(el, options) {
        var storage = sharedStorage.get(el);
        if (storage.options) return el;
        if (options.hover && options.hoverables[el.nodeName.toLowerCase()]) {
            hoverHandler.attach(el);
        }
        storage.options = options;
        return el;
    }

    function cached(fun) {
        var cache = {};
        return function(key) {
            if (!cache.hasOwnProperty(key)) cache[key] = fun.apply(null, arguments);
            return cache[key];
        };
    }

    function getFont(el, style) {
        if (!style) style = CSS.getStyle(el);
        var families = CSS.quotedList(style.get('fontFamily').toLowerCase()), family;
        for (var i = 0, l = families.length; i < l; ++i) {
            family = families[i];
            if (fonts[family]) return fonts[family].get(style.get('fontStyle'), style.get('fontWeight'));
        }
        return null;
    }

    function elementsByTagName(query) {
        return fabric.document.getElementsByTagName(query);
    }

    function merge() {
        var merged = {}, key;
        for (var i = 0, l = arguments.length; i < l; ++i) {
            for (key in arguments[i]) merged[key] = arguments[i][key];
        }
        return merged;
    }

    function process(font, text, style, options, node, el) {

        var separate = options.separate;
        if (separate == 'none') return engines[options.engine].apply(null, arguments);
        var fragment = fabric.document.createDocumentFragment(), processed;
        var parts = text.split(separators[separate]), needsAligning = (separate == 'words');
        if (needsAligning && HAS_BROKEN_REGEXP) {
            // @todo figure out a better way to do this
            if (/^\s/.test(text)) parts.unshift('');
            if (/\s$/.test(text)) parts.push('');
        }
        for (var i = 0, l = parts.length; i < l; ++i) {
            processed = engines[options.engine](font,
                                                needsAligning ? CSS.textAlign(parts[i], style, i, l) : parts[i],
                                                style, options, node, el, i < l - 1);
            if (processed) fragment.appendChild(processed);
        }
        return fragment;
    }

    function replaceElement(el, options) {
        var font, style, nextNode, redraw;
        for (var node = attach(el, options).firstChild; node; node = nextNode) {
            nextNode = node.nextSibling;
            redraw = false;
            if (node.nodeType == 1) {
                if (!node.firstChild) continue;
                if (!/cufon/.test(node.className)) {
                    arguments.callee(node, options);
                    continue;
                }
                else redraw = true;
            }
            if (!style) style = CSS.getStyle(el).extend(options);
            if (!font) font = getFont(el, style);

            if (!font) continue;
            if (redraw) {
                engines[options.engine](font, null, style, options, node, el);
                continue;
            }
            var text = node.data;
            //for some reason, the carriage return is not stripped by IE but "\n" is, so let's keep \r as a new line marker...
            if (typeof G_vmlCanvasManager != 'undefined') {
                text = text.replace(/\r/g, "\n");
            }
            if (text === '') continue;
            var processed = process(font, text, style, options, node, el);
            if (processed) node.parentNode.replaceChild(processed, node);
            else node.parentNode.removeChild(node);
        }
    }

    var HAS_BROKEN_REGEXP = ' '.split(/\s+/).length == 0;

    var sharedStorage = new Storage();
    var hoverHandler = new HoverHandler();
    var replaceHistory = [];

    var engines = {}, fonts = {}, defaultOptions = {
        engine: null,
        //fontScale: 1,
        //fontScaling: false,
        hover: false,
        hoverables: {
            a: true
        },
        printable: true,
        //rotation: 0,
        //selectable: false,
        selector: (
            fabric.window.Sizzle
                ||  (fabric.window.jQuery && function(query) { return jQuery(query); }) // avoid noConflict issues
                ||  (fabric.window.dojo && dojo.query)
                ||  (fabric.window.$$ && function(query) { return $$(query); })
                ||  (fabric.window.$ && function(query) { return $(query); })
                ||  (fabric.document.querySelectorAll && function(query) { return fabric.document.querySelectorAll(query); })
                ||  elementsByTagName
            ),
        separate: 'words', // 'none' and 'characters' are also accepted
        textShadow: 'none'
    };

    var separators = {
        words: /\s+/,
        characters: ''
    };

    api.now = function() {
        DOM.ready();
        return api;
    };

    api.refresh = function() {
        var currentHistory = replaceHistory.splice(0, replaceHistory.length);
        for (var i = 0, l = currentHistory.length; i < l; ++i) {
            api.replace.apply(null, currentHistory[i]);
        }
        return api;
    };

    api.registerEngine = function(id, engine) {
        if (!engine) return api;
        engines[id] = engine;
        return api.set('engine', id);
    };

    api.registerFont = function(data) {
        var font = new Font(data), family = font.family;
        if (!fonts[family]) fonts[family] = new FontFamily();
        fonts[family].add(font);
        return api.set('fontFamily', '"' + family + '"');
    };

    api.replace = function(elements, options, ignoreHistory) {
        options = merge(defaultOptions, options);
        if (!options.engine) return api; // there's no browser support so we'll just stop here
        if (typeof options.textShadow == 'string' && options.textShadow)
            options.textShadow = CSS.textShadow(options.textShadow);
        if (!ignoreHistory) replaceHistory.push(arguments);
        if (elements.nodeType || typeof elements == 'string') elements = [ elements ];
        CSS.ready(function() {
            for (var i = 0, l = elements.length; i < l; ++i) {
                var el = elements[i];
                if (typeof el == 'string') api.replace(options.selector(el), options, true);
                else replaceElement(el, options);
            }
        });
        return api;
    };

    api.replaceElement = function(el, options) {
        options = merge(defaultOptions, options);
        if (typeof options.textShadow == 'string' && options.textShadow)
            options.textShadow = CSS.textShadow(options.textShadow);
        return replaceElement(el, options);
    };

    // ==>
    api.engines = engines;
    api.fonts = fonts;
    api.getOptions = function() {
        return merge(defaultOptions);
    }
    // <==

    api.set = function(option, value) {
        defaultOptions[option] = value;
        return api;
    };

    return api;

})();

Cufon.registerEngine('canvas', (function() {

    // Safari 2 doesn't support .apply() on native methods
    var HAS_INLINE_BLOCK = Cufon.CSS.supports('display', 'inline-block');

    // Firefox 2 w/ non-strict doctype (almost standards mode)
    var HAS_BROKEN_LINEHEIGHT = !HAS_INLINE_BLOCK && (fabric.document.compatMode == 'BackCompat' || /frameset|transitional/i.test(fabric.document.doctype.publicId));

    var styleSheet = fabric.document.createElement('style');
    styleSheet.type = 'text/css';

    var textNode = fabric.document.createTextNode(
        '.cufon-canvas{text-indent:0}' +
        '@media screen,projection{' +
        '.cufon-canvas{display:inline;display:inline-block;position:relative;vertical-align:middle' +
        (HAS_BROKEN_LINEHEIGHT
            ? ''
            : ';font-size:1px;line-height:1px') +
        '}.cufon-canvas .cufon-alt{display:-moz-inline-box;display:inline-block;width:0;height:0;overflow:hidden}' +
        (HAS_INLINE_BLOCK
            ? '.cufon-canvas canvas{position:relative}'
            : '.cufon-canvas canvas{position:absolute}') +
        '}' +
        '@media print{' +
        '.cufon-canvas{padding:0 !important}' +
        '.cufon-canvas canvas{display:none}' +
        '.cufon-canvas .cufon-alt{display:inline}' +
        '}'
    )

    try {
        styleSheet.appendChild(textNode);
    } catch(e) {
        //IE8- can't do this...
        styleSheet.setAttribute("type", "text/css");
        styleSheet.styleSheet.cssText = textNode.data;
    }
    fabric.document.getElementsByTagName('head')[0].appendChild(styleSheet);

    function generateFromVML(path, context) {
        var atX = 0, atY = 0;
        var code = [], re = /([mrvxe])([^a-z]*)/g, match;
        generate: for (var i = 0; match = re.exec(path); ++i) {
            var c = match[2].split(',');
            switch (match[1]) {
                case 'v':
                    code[i] = { m: 'bezierCurveTo', a: [ atX + ~~c[0], atY + ~~c[1], atX + ~~c[2], atY + ~~c[3], atX += ~~c[4], atY += ~~c[5] ] };
                    break;
                case 'r':
                    code[i] = { m: 'lineTo', a: [ atX += ~~c[0], atY += ~~c[1] ] };
                    break;
                case 'm':
                    code[i] = { m: 'moveTo', a: [ atX = ~~c[0], atY = ~~c[1] ] };
                    break;
                case 'x':
                    code[i] = { m: 'closePath', a: [] };
                    break;
                case 'e':
                    break generate;
            }
            context[code[i].m].apply(context, code[i].a);
        }
        return code;
    }

    function interpret(code, context) {
        for (var i = 0, l = code.length; i < l; ++i) {
            var line = code[i];
            context[line.m].apply(context, line.a);
        }
    }

    return function(font, text, style, options, node, el) {

        var redraw = (text === null);

        var viewBox = font.viewBox;

        var size = style.getSize('fontSize', font.baseSize);

        var letterSpacing = style.get('letterSpacing');
        letterSpacing = (letterSpacing == 'normal') ? 0 : size.convertFrom(parseInt(letterSpacing, 10));

        var expandTop = 0, expandRight = 0, expandBottom = 0, expandLeft = 0;
        var shadows = options.textShadow, shadowOffsets = [];

        Cufon.textOptions.shadowOffsets = [ ];
        Cufon.textOptions.shadows = null;

        if (shadows) {
            Cufon.textOptions.shadows = shadows;
            for (var i = 0, l = shadows.length; i < l; ++i) {
                var shadow = shadows[i];
                var x = size.convertFrom(parseFloat(shadow.offX));
                var y = size.convertFrom(parseFloat(shadow.offY));
                shadowOffsets[i] = [ x, y ];
                //if (y < expandTop) expandTop = y;
                //if (x > expandRight) expandRight = x;
                //if (y > expandBottom) expandBottom = y;
                //if (x < expandLeft) expandLeft = x;
            }
        }

        var chars = Cufon.CSS.textTransform(redraw ? node.alt : text, style).split('');

        var width = 0, lastWidth = null;

        var maxWidth = 0, lines = 1, lineWidths = [ ];
        for (var i = 0, l = chars.length; i < l; ++i) {
            if (chars[i] === '\n') {
                lines++;
                if (width > maxWidth) {
                    maxWidth = width;
                }
                lineWidths.push(width);
                width = 0;
                continue;
            }
            var glyph = font.glyphs[chars[i]] || font.missingGlyph;
            if (!glyph) continue;
            width += lastWidth = Number(glyph.w || font.w) + letterSpacing;
        }
        lineWidths.push(width);

        width = Math.max(maxWidth, width);

        var lineOffsets = [ ];
        for (var i = lineWidths.length; i--; ) {
            lineOffsets[i] = width - lineWidths[i];
        }

        if (lastWidth === null) return null; // there's nothing to render

        expandRight += (viewBox.width - lastWidth);
        expandLeft += viewBox.minX;

        var wrapper, canvas;

        if (redraw) {
            wrapper = node;
            canvas = node.firstChild;
        }
        else {
            wrapper = fabric.document.createElement('span');
            wrapper.className = 'cufon cufon-canvas';
            wrapper.alt = text;

            canvas = fabric.document.createElement('canvas');
            wrapper.appendChild(canvas);

            if (options.printable) {
                var print = fabric.document.createElement('span');
                print.className = 'cufon-alt';
                print.appendChild(fabric.document.createTextNode(text));
                wrapper.appendChild(print);
            }
        }

        var wStyle = wrapper.style;
        var cStyle = canvas.style || { };

        var height = size.convert(viewBox.height - expandTop + expandBottom);
        var roundedHeight = Math.ceil(height);
        var roundingFactor = roundedHeight / height;

        canvas.width = Math.ceil(size.convert(width + expandRight - expandLeft) * roundingFactor);
        canvas.height = roundedHeight;

        expandTop += viewBox.minY;

        cStyle.top = Math.round(size.convert(expandTop - font.ascent)) + 'px';
        cStyle.left = Math.round(size.convert(expandLeft)) + 'px';

        var _width = Math.ceil(size.convert(width * roundingFactor));
        var wrapperWidth = _width + 'px';
        var _height = size.convert(font.height);
        var totalLineHeight = (options.lineHeight - 1) * size.convert(-font.ascent / 5) * (lines - 1);

        Cufon.textOptions.width = _width;
        Cufon.textOptions.height = (_height * lines) + totalLineHeight;
        Cufon.textOptions.lines = lines;
        Cufon.textOptions.totalLineHeight = totalLineHeight;

        if (HAS_INLINE_BLOCK) {
            wStyle.width = wrapperWidth;
            wStyle.height = _height + 'px';
        }
        else {
            wStyle.paddingLeft = wrapperWidth;
            wStyle.paddingBottom = (_height - 1) + 'px';
        }

        var g = Cufon.textOptions.context || canvas.getContext('2d'),
            scale = roundedHeight / viewBox.height;

        Cufon.textOptions.fontAscent = font.ascent * scale;
        Cufon.textOptions.boundaries = null;

        for (var offsets = Cufon.textOptions.shadowOffsets, i = shadowOffsets.length; i--; ) {
            offsets[i] = [ shadowOffsets[i][0] * scale, shadowOffsets[i][1] * scale ];
        }

        g.save();
        g.scale(scale, scale);

        g.translate(
            // we're at the center of an object and need to jump to the top left corner
            // where first character is to be drawn
            -expandLeft - ((1/scale * canvas.width) / 2) + (Cufon.fonts[font.family].offsetLeft || 0),
            -expandTop - ((Cufon.textOptions.height / scale) / 2) + (Cufon.fonts[font.family].offsetTop || 0)
        );

        g.lineWidth = font.face['underline-thickness'];

        g.save();

        function line(y, color) {
            g.strokeStyle = color;

            g.beginPath();

            g.moveTo(0, y);
            g.lineTo(width, y);

            g.stroke();
        }

        var textDecoration = Cufon.getTextDecoration(options),
            isItalic = options.fontStyle === 'italic';

        function renderBackground() {
            g.save();

            g.fillStyle = options.backgroundColor;

            var left = 0, lineNum = 0, boundaries = [{ left: 0 }];

            if (options.textAlign === 'right') {
                g.translate(lineOffsets[lineNum], 0);
                boundaries[0].left = lineOffsets[lineNum] * scale;
            }
            else if (options.textAlign === 'center') {
                g.translate(lineOffsets[lineNum] / 2, 0);
                boundaries[0].left = lineOffsets[lineNum] / 2 * scale;
            }

            for (var i = 0, l = chars.length; i < l; ++i) {
                if (chars[i] === '\n') {

                    lineNum++;

                    var topOffset = -font.ascent - ((font.ascent / 5) * options.lineHeight);
                    var boundary = boundaries[boundaries.length - 1];
                    var nextBoundary = { left: 0 };

                    boundary.width = left * scale;
                    boundary.height = (-font.ascent + font.descent) * scale;

                    if (options.textAlign === 'right') {
                        g.translate(-width, topOffset);
                        g.translate(lineOffsets[lineNum], 0);
                        nextBoundary.left = lineOffsets[lineNum] * scale;
                    }
                    else if (options.textAlign === 'center') {
                        // offset to the start of text in previous line AND half of its offset
                        // (essentially moving caret to the left edge of bounding box)
                        g.translate(-left - (lineOffsets[lineNum - 1] / 2), topOffset);
                        g.translate(lineOffsets[lineNum] / 2, 0);
                        nextBoundary.left = lineOffsets[lineNum] / 2 * scale;
                    }
                    else {
                        g.translate(-left, topOffset);
                    }

                    /* push next boundary (for the next line) */
                    boundaries.push(nextBoundary);

                    left = 0;

                    continue;
                }
                var glyph = font.glyphs[chars[i]] || font.missingGlyph;
                if (!glyph) continue;

                var charWidth = Number(glyph.w || font.w) + letterSpacing;

                // only draw background when there's some kind of value
                if (options.backgroundColor) {
                    g.save();
                    g.translate(0, font.ascent);
                    g.fillRect(0, 0, charWidth + 10, -font.ascent + font.descent);
                    g.restore();
                }

                g.translate(charWidth, 0);
                left += charWidth;

                if (i == l-1) {
                    boundaries[boundaries.length - 1].width = left * scale;
                    boundaries[boundaries.length - 1].height = (-font.ascent + font.descent) * scale;
                }
            }
            g.restore();

            Cufon.textOptions.boundaries = boundaries;
        }

        function renderText(color) {
            g.fillStyle = color || Cufon.textOptions.color || style.get('color');

            var left = 0, lineNum = 0;

            if (options.textAlign === 'right') {
                g.translate(lineOffsets[lineNum], 0);
            }
            else if (options.textAlign === 'center') {
                g.translate(lineOffsets[lineNum] / 2, 0);
            }

            for (var i = 0, l = chars.length; i < l; ++i) {
                if (chars[i] === '\n') {

                    lineNum++;

                    var topOffset = -font.ascent - ((font.ascent / 5) * options.lineHeight);

                    if (options.textAlign === 'right') {
                        g.translate(-width, topOffset);
                        g.translate(lineOffsets[lineNum], 0);
                    }
                    else if (options.textAlign === 'center') {
                        // offset to the start of text in previous line AND half of its offset
                        // (essentially moving caret to the left edge of bounding box)
                        g.translate(-left - (lineOffsets[lineNum - 1] / 2), topOffset);
                        g.translate(lineOffsets[lineNum] / 2, 0);
                    }
                    else {
                        g.translate(-left, topOffset);
                    }

                    left = 0;

                    continue;
                }
                var glyph = font.glyphs[chars[i]] || font.missingGlyph;
                if (!glyph) continue;

                var charWidth = Number(glyph.w || font.w) + letterSpacing;

                if (textDecoration) {
                    g.save();
                    g.strokeStyle = g.fillStyle;

                    // add 2x more thickness — closer to SVG rendering
                    g.lineWidth += g.lineWidth;

                    g.beginPath();
                    if (textDecoration.underline) {
                        g.moveTo(0, -font.face['underline-position'] + 0.5);
                        g.lineTo(charWidth, -font.face['underline-position'] + 0.5);
                    }
                    if (textDecoration.overline) {
                        g.moveTo(0, font.ascent + 0.5);
                        g.lineTo(charWidth, font.ascent + 0.5);
                    }
                    if (textDecoration['line-through']) {
                        g.moveTo(0, -font.descent + 0.5);
                        g.lineTo(charWidth, -font.descent + 0.5);
                    }
                    g.stroke();
                    g.restore();
                }

                if (isItalic) {
                    g.save();
                    g.transform(1, 0, -0.25, 1, 0, 0);
                }

                g.beginPath();
                if (glyph.d) {
                    if (glyph.code) interpret(glyph.code, g);
                    else glyph.code = generateFromVML('m' + glyph.d, g);
                }

                g.fill();

                if (options.strokeStyle) {
                    g.closePath();
                    g.save();
                    g.lineWidth = options.strokeWidth;
                    g.strokeStyle = options.strokeStyle;
                    g.stroke();
                    g.restore();
                }

                if (isItalic) {
                    g.restore();
                }

                g.translate(charWidth, 0);
                left += charWidth;
            }
        }

        g.save();
        renderBackground();
        if (shadows) {
            for (var i = 0, l = shadows.length; i < l; ++i) {
                var shadow = shadows[i];
                g.save();
                g.translate.apply(g, shadowOffsets[i]);
                renderText(shadow.color);
                g.restore();
            }
        }
        renderText();
        g.restore();
        g.restore();
        g.restore();

        return wrapper;

    };

})());

Cufon.registerEngine('vml', (function() {

    if (!fabric.document.namespaces) return;

    var canvasEl = fabric.document.createElement('canvas');
    if (canvasEl && canvasEl.getContext && canvasEl.getContext.apply) return;

    if (fabric.document.namespaces.cvml == null) {
        fabric.document.namespaces.add('cvml', 'urn:schemas-microsoft-com:vml');
    }

    var check = fabric.document.createElement('cvml:shape');
    check.style.behavior = 'url(#default#VML)';
    if (!check.coordsize) return; // VML isn't supported
    check = null;

    fabric.document.write('<style type="text/css">' +
                          '.cufon-vml-canvas{text-indent:0}' +
                          '@media screen{' +
                          'cvml\\:shape,cvml\\:shadow{behavior:url(#default#VML);display:block;antialias:true;position:absolute}' +
                          '.cufon-vml-canvas{position:absolute;text-align:left}' +
                          '.cufon-vml{display:inline-block;position:relative;vertical-align:middle}' +
                          '.cufon-vml .cufon-alt{position:absolute;left:-10000in;font-size:1px}' +
                          'a .cufon-vml{cursor:pointer}' +
                          '}' +
                          '@media print{' +
                          '.cufon-vml *{display:none}' +
                          '.cufon-vml .cufon-alt{display:inline}' +
                          '}' +
                          '</style>');

    function getFontSizeInPixels(el, value) {
        return getSizeInPixels(el, /(?:em|ex|%)$/i.test(value) ? '1em' : value);
    }

    // Original by Dead Edwards.
    // Combined with getFontSizeInPixels it also works with relative units.
    function getSizeInPixels(el, value) {
        if (/px$/i.test(value)) return parseFloat(value);
        var style = el.style.left, runtimeStyle = el.runtimeStyle.left;
        el.runtimeStyle.left = el.currentStyle.left;
        el.style.left = value;
        var result = el.style.pixelLeft;
        el.style.left = style;
        el.runtimeStyle.left = runtimeStyle;
        return result;
    }

    return function(font, text, style, options, node, el, hasNext) {
        var redraw = (text === null);

        if (redraw) text = node.alt;

        // @todo word-spacing, text-decoration

        var viewBox = font.viewBox;

        var size = style.computedFontSize ||
                   (style.computedFontSize = new Cufon.CSS.Size(getFontSizeInPixels(el, style.get('fontSize')) + 'px', font.baseSize));

        var letterSpacing = style.computedLSpacing;

        if (letterSpacing == undefined) {
            letterSpacing = style.get('letterSpacing');
            style.computedLSpacing = letterSpacing =
                                     (letterSpacing == 'normal') ? 0 : ~~size.convertFrom(getSizeInPixels(el, letterSpacing));
        }

        var wrapper, canvas;

        if (redraw) {
            wrapper = node;
            canvas = node.firstChild;
        }
        else {
            wrapper = fabric.document.createElement('span');
            wrapper.className = 'cufon cufon-vml';
            wrapper.alt = text;

            canvas = fabric.document.createElement('span');
            canvas.className = 'cufon-vml-canvas';
            wrapper.appendChild(canvas);

            if (options.printable) {
                var print = fabric.document.createElement('span');
                print.className = 'cufon-alt';
                print.appendChild(fabric.document.createTextNode(text));
                wrapper.appendChild(print);
            }

            // ie6, for some reason, has trouble rendering the last VML element in the document.
            // we can work around this by injecting a dummy element where needed.
            // @todo find a better solution
            if (!hasNext) wrapper.appendChild(fabric.document.createElement('cvml:shape'));
        }

        var wStyle = wrapper.style;
        var cStyle = canvas.style;

        var height = size.convert(viewBox.height), roundedHeight = Math.ceil(height);
        var roundingFactor = roundedHeight / height;
        var minX = viewBox.minX, minY = viewBox.minY;

        cStyle.height = roundedHeight;
        cStyle.top = Math.round(size.convert(minY - font.ascent));
        cStyle.left = Math.round(size.convert(minX));

        wStyle.height = size.convert(font.height) + 'px';

        var textDecoration = Cufon.getTextDecoration(options);

        var color = style.get('color');

        var chars = Cufon.CSS.textTransform(text, style).split('');

        var width = 0, offsetX = 0, advance = null;

        var glyph, shape, shadows = options.textShadow;

        // pre-calculate width
        for (var i = 0, k = 0, l = chars.length; i < l; ++i) {
            glyph = font.glyphs[chars[i]] || font.missingGlyph;
            if (glyph) width += advance = ~~(glyph.w || font.w) + letterSpacing;
        }

        if (advance === null) return null;

        var fullWidth = -minX + width + (viewBox.width - advance);

        var shapeWidth = size.convert(fullWidth * roundingFactor), roundedShapeWidth = Math.round(shapeWidth);

        var coordSize = fullWidth + ',' + viewBox.height, coordOrigin;
        var stretch = 'r' + coordSize + 'nsnf';

        for (i = 0; i < l; ++i) {

            glyph = font.glyphs[chars[i]] || font.missingGlyph;
            if (!glyph) continue;

            if (redraw) {
                // some glyphs may be missing so we can't use i
                shape = canvas.childNodes[k];
                if (shape.firstChild) shape.removeChild(shape.firstChild); // shadow
            }
            else {
                shape = fabric.document.createElement('cvml:shape');
                canvas.appendChild(shape);
            }

            shape.stroked = 'f';
            shape.coordsize = coordSize;
            shape.coordorigin = coordOrigin = (minX - offsetX) + ',' + minY;
            shape.path = (glyph.d ? 'm' + glyph.d + 'xe' : '') + 'm' + coordOrigin + stretch;
            shape.fillcolor = color;

            // it's important to not set top/left or IE8 will grind to a halt
            var sStyle = shape.style;
            sStyle.width = roundedShapeWidth;
            sStyle.height = roundedHeight;

            if (shadows) {
                // due to the limitations of the VML shadow element there
                // can only be two visible shadows. opacity is shared
                // for all shadows.
                var shadow1 = shadows[0], shadow2 = shadows[1];
                var color1 = Cufon.CSS.color(shadow1.color), color2;
                var shadow = fabric.document.createElement('cvml:shadow');
                shadow.on = 't';
                shadow.color = color1.color;
                shadow.offset = shadow1.offX + ',' + shadow1.offY;
                if (shadow2) {
                    color2 = Cufon.CSS.color(shadow2.color);
                    shadow.type = 'double';
                    shadow.color2 = color2.color;
                    shadow.offset2 = shadow2.offX + ',' + shadow2.offY;
                }
                shadow.opacity = color1.opacity || (color2 && color2.opacity) || 1;
                shape.appendChild(shadow);
            }

            offsetX += ~~(glyph.w || font.w) + letterSpacing;

            ++k;

        }

        wStyle.width = Math.max(Math.ceil(size.convert(width * roundingFactor)), 0);

        return wrapper;

    };

})());

Cufon.getTextDecoration = function(options) {
    return {
        underline: options.textDecoration === 'underline',
        overline: options.textDecoration === 'overline',
        'line-through': options.textDecoration === 'line-through'
    };
};

if (typeof exports != 'undefined') {
    exports.Cufon = Cufon;
}

/*
 json2.js
 2011-10-19

 Public Domain.

 NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

 See http://www.JSON.org/js.html


 This code should be minified before deployment.
 See http://javascript.crockford.com/jsmin.html

 USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
 NOT CONTROL.


 This file creates a global JSON object containing two methods: stringify
 and parse.

 JSON.stringify(value, replacer, space)
 value       any JavaScript value, usually an object or array.

 replacer    an optional parameter that determines how object
 values are stringified for objects. It can be a
 function or an array of strings.

 space       an optional parameter that specifies the indentation
 of nested structures. If it is omitted, the text will
 be packed without extra whitespace. If it is a number,
 it will specify the number of spaces to indent at each
 level. If it is a string (such as '\t' or '&nbsp;'),
 it contains the characters used to indent at each level.

 This method produces a JSON text from a JavaScript value.

 When an object value is found, if the object contains a toJSON
 method, its toJSON method will be called and the result will be
 stringified. A toJSON method does not serialize: it returns the
 value represented by the name/value pair that should be serialized,
 or undefined if nothing should be serialized. The toJSON method
 will be passed the key associated with the value, and this will be
 bound to the value

 For example, this would serialize Dates as ISO strings.

 Date.prototype.toJSON = function (key) {
 function f(n) {
 // Format integers to have at least two digits.
 return n < 10 ? '0' + n : n;
 }

 return this.getUTCFullYear()   + '-' +
 f(this.getUTCMonth() + 1) + '-' +
 f(this.getUTCDate())      + 'T' +
 f(this.getUTCHours())     + ':' +
 f(this.getUTCMinutes())   + ':' +
 f(this.getUTCSeconds())   + 'Z';
 };

 You can provide an optional replacer method. It will be passed the
 key and value of each member, with this bound to the containing
 object. The value that is returned from your method will be
 serialized. If your method returns undefined, then the member will
 be excluded from the serialization.

 If the replacer parameter is an array of strings, then it will be
 used to select the members to be serialized. It filters the results
 such that only members with keys listed in the replacer array are
 stringified.

 Values that do not have JSON representations, such as undefined or
 functions, will not be serialized. Such values in objects will be
 dropped; in arrays they will be replaced with null. You can use
 a replacer function to replace those with JSON values.
 JSON.stringify(undefined) returns undefined.

 The optional space parameter produces a stringification of the
 value that is filled with line breaks and indentation to make it
 easier to read.

 If the space parameter is a non-empty string, then that string will
 be used for indentation. If the space parameter is a number, then
 the indentation will be that many spaces.

 Example:

 text = JSON.stringify(['e', {pluribus: 'unum'}]);
 // text is '["e",{"pluribus":"unum"}]'


 text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
 // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

 text = JSON.stringify([new Date()], function (key, value) {
 return this[key] instanceof Date ?
 'Date(' + this[key] + ')' : value;
 });
 // text is '["Date(---current time---)"]'


 JSON.parse(text, reviver)
 This method parses a JSON text to produce an object or array.
 It can throw a SyntaxError exception.

 The optional reviver parameter is a function that can filter and
 transform the results. It receives each of the keys and values,
 and its return value is used instead of the original value.
 If it returns what it received, then the structure is not modified.
 If it returns undefined then the member is deleted.

 Example:

 // Parse the text. Values that look like ISO date strings will
 // be converted to Date objects.

 myData = JSON.parse(text, function (key, value) {
 var a;
 if (typeof value === 'string') {
 a =
 /^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
 if (a) {
 return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
 +a[5], +a[6]));
 }
 }
 return value;
 });

 myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
 var d;
 if (typeof value === 'string' &&
 value.slice(0, 5) === 'Date(' &&
 value.slice(-1) === ')') {
 d = new Date(value.slice(5, -1));
 if (d) {
 return d;
 }
 }
 return value;
 });


 This is a reference implementation. You are free to copy, modify, or
 redistribute.
 */

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
 call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
 getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
 lastIndex, length, parse, prototype, push, replace, slice, stringify,
 test, toJSON, toString, valueOf
 */


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON;
if (!JSON) {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                  f(this.getUTCMonth() + 1) + '-' +
                  f(this.getUTCDate())      + 'T' +
                  f(this.getUTCHours())     + ':' +
                  f(this.getUTCMinutes())   + ':' +
                  f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
        Number.prototype.toJSON  =
        Boolean.prototype.toJSON = function (key) {
            return this.valueOf();
        };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

        // If the string contains no control characters, no quote characters, and no
        // backslash characters, then we can safely slap some quotes around it.
        // Otherwise we must also replace the offending characters with safe escape
        // sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

        // Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

        // If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
            typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

        // If we were called with a replacer function, then call the replacer to
        // obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

        // What happens next depends on the value's type.

        switch (typeof value) {
            case 'string':
                return quote(value);

            case 'number':

                // JSON numbers must be finite. Encode non-finite numbers as null.

                return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':

                // If the value is a boolean or null, convert it to a string. Note:
                // typeof null does not produce 'null'. The case is included here in
                // the remote chance that this gets fixed someday.

                return String(value);

            // If the type is 'object', we might be dealing with an object or an array or
            // null.

            case 'object':

                // Due to a specification blunder in ECMAScript, typeof null is 'object',
                // so watch out for that case.

                if (!value) {
                    return 'null';
                }

                // Make an array to hold the partial results of stringifying this object value.

                gap += indent;
                partial = [];

                // Is the value an array?

                if (Object.prototype.toString.apply(value) === '[object Array]') {

                    // The value is an array. Stringify every element. Use null as a placeholder
                    // for non-JSON values.

                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }

                    // Join all of the elements together, separated with commas, and wrap them in
                    // brackets.

                    v = partial.length === 0
                        ? '[]'
                        : gap
                            ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                            : '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }

                // If the replacer is an array, use it to select the members to be stringified.

                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        if (typeof rep[i] === 'string') {
                            k = rep[i];
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {

                    // Otherwise, iterate through all of the keys in the object.

                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = str(k, value);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }

                // Join all of the member texts together, separated with commas,
                // and wrap them in braces.

                v = partial.length === 0
                    ? '{}'
                    : gap
                        ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                        : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
        }
    }

    // If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

            // The stringify method takes a value and an optional replacer, and an optional
            // space parameter, and returns a JSON text. The replacer can be a function
            // that can replace values, or an array of strings that will select the keys.
            // A default replacer method can be provided. Use of the space parameter can
            // produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

            // If the space parameter is a number, make an indent string containing that
            // many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

                // If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

            // If there is a replacer, it must be a function or an array.
            // Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                (typeof replacer !== 'object' ||
                 typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

            // Make a fake root object containing our value under the key of ''.
            // Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


    // If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

            // The parse method takes a text and an optional reviver function, and returns
            // a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

                // The walk method is used to recursively walk the resulting structure so
                // that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


            // Parsing happens in four stages. In the first stage, we replace certain
            // Unicode characters with escape sequences. JavaScript handles many characters
            // incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                           ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

            // In the second stage, we run the text against regular expressions that look
            // for non-JSON patterns. We are especially concerned with '()' and 'new'
            // because they can cause invocation, and '=' because it can cause mutation.
            // But just to be safe, we want to reject all unexpected forms.

            // We split the second stage into 4 regexp operations in order to work around
            // crippling inefficiencies in IE's and Safari's regexp engines. First we
            // replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
            // replace all simple value tokens with ']' characters. Third, we delete all
            // open brackets that follow a colon or comma or that begin the text. Finally,
            // we look to see that the remaining characters are only whitespace or ']' or
            // ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                          .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                          .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

                // In the third stage we use the eval function to compile the text into a
                // JavaScript structure. The '{' operator is subject to a syntactic ambiguity
                // in JavaScript: it can begin a block or an object literal. We wrap the text
                // in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

                // In the optional fourth stage, we recursively walk the new structure, passing
                // each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

            // If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());
/**
 * Wrapper around `console.log` (when available)
 * @method log
 * @param {Any} Values to log
 */
fabric.log = function() { };

/**
 * Wrapper around `console.warn` (when available)
 * @method warn
 * @param {Any} Values to log as a warning
 */
fabric.warn = function() { };

if (typeof console !== 'undefined') {
    if (typeof console.log !== 'undefined' && console.log.apply) {
        fabric.log = function() {
            return console.log.apply(console, arguments);
        };
    }
    if (typeof console.warn !== 'undefined' && console.warn.apply) {
        fabric.warn = function() {
            return console.warn.apply(console, arguments);
        };
    }
}

/**
 * @namespace
 */
fabric.Observable = {

    /**
     * Observes specified event
     * @method observe
     * @depracated Since 0.8.34. Use `on` instead.
     * @param {String} eventName
     * @param {Function} handler
     */
    observe: function(eventName, handler) {
        if (!this.__eventListeners) {
            this.__eventListeners = { };
        }
        // one object with key/value pairs was passed
        if (arguments.length === 1) {
            for (var prop in eventName) {
                this.on(prop, eventName[prop]);
            }
        }
        else {
            if (!this.__eventListeners[eventName]) {
                this.__eventListeners[eventName] = [ ];
            }
            this.__eventListeners[eventName].push(handler);
        }
    },

    /**
     * Stops event observing for a particular event handler
     * @method stopObserving
     * @depracated Since 0.8.34. Use `off` instead.
     * @param {String} eventName
     * @param {Function} handler
     */
    stopObserving: function(eventName, handler) {
        if (!this.__eventListeners) {
            this.__eventListeners = { };
        }
        if (this.__eventListeners[eventName]) {
            if (handler) {
                fabric.util.removeFromArray(this.__eventListeners[eventName], handler);
            }
            else {
                this.__eventListeners[eventName].length = 0;
            }
        }
    },

    /**
     * Fires event with an optional options object
     * @method fire
     * @param {String} eventName
     * @param {Object} [options]
     */
    fire: function(eventName, options) {
        if (!this.__eventListeners) {
            this.__eventListeners = { };
        }
        var listenersForEvent = this.__eventListeners[eventName];
        if (!listenersForEvent) return;
        for (var i = 0, len = listenersForEvent.length; i < len; i++) {
            // avoiding try/catch for perf. reasons
            listenersForEvent[i](options || { });
        }
    }
};

/**
 * Alias for observe
 * @method observe
 * @memberOf fabric.Observable
 */
fabric.Observable.on = fabric.Observable.observe;

/**
 * Alias for stopObserving
 * @method off
 */
fabric.Observable.off = fabric.Observable.stopObserving;
(function() {

    /**
     * @namespace
     */
    fabric.util = { };

    /**
     * Removes value from an array.
     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
     * @static
     * @memberOf fabric.util
     * @method removeFromArray
     * @param {Array} array
     * @param {Any} value
     * @return {Array} original array
     */
    function removeFromArray(array, value) {
        var idx = array.indexOf(value);
        if (idx !== -1) {
            array.splice(idx, 1);
        }
        return array;
    }

    /**
     * Returns random number between 2 specified ones.
     * @static
     * @method getRandomInt
     * @memberOf fabric.util
     * @param {Number} min lower limit
     * @param {Number} max upper limit
     * @return {Number} random value (between min and max)
     */
    function getRandomInt(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    var PiBy180 = Math.PI / 180;

    /**
     * Transforms degrees to radians.
     * @static
     * @method degreesToRadians
     * @memberOf fabric.util
     * @param {Number} degrees value in degrees
     * @return {Number} value in radians
     */
    function degreesToRadians(degrees) {
        return degrees * PiBy180;
    }

    /**
     * A wrapper around Number#toFixed, which contrary to native method returns number, not string.
     * @static
     * @method toFixed
     * @memberOf fabric.util
     * @param {Number | String} number number to operate on
     * @param {Number} fractionDigits number of fraction digits to "leave"
     * @return {Number}
     */
    function toFixed(number, fractionDigits) {
        return parseFloat(Number(number).toFixed(fractionDigits));
    }

    /**
     * Function which always returns `false`.
     * @static
     * @method falseFunction
     * @memberOf fabric.util
     * @return {Boolean}
     */
    function falseFunction() {
        return false;
    }

    /**
     * Changes value from one to another within certain period of time, invoking callbacks as value is being changed.
     * @method animate
     * @memberOf fabric.util
     * @param {Object} [options] Animation options
     * @param {Function} [options.onChange] Callback; invoked on every value change
     * @param {Function} [options.onComplete] Callback; invoked when value change is completed
     * @param {Number} [options.startValue=0] Starting value
     * @param {Number} [options.endValue=100] Ending value
     * @param {Number} [options.byValue=100] Value to modify the property by
     * @param {Function} [options.easing] Easing function
     * @param {Number} [options.duration=500] Duration of change
     */
    function animate(options) {

        options || (options = { });

        var start = +new Date(),
            duration = options.duration || 500,
            finish = start + duration, time,
            onChange = options.onChange || function() { },
            abort = options.abort || function() { return false; },
            easing = options.easing || function(t, b, c, d) {return -c * Math.cos(t/d * (Math.PI/2)) + c + b;},
            startValue = 'startValue' in options ? options.startValue : 0,
            endValue = 'endValue' in options ? options.endValue : 100,
            byValue = options.byValue || endValue - startValue;

        options.onStart && options.onStart();

        (function tick() {
            time = +new Date();
            var currentTime = time > finish ? duration : (time - start);
            onChange(easing(currentTime, startValue, byValue, duration));
            if (time > finish || abort()) {
                options.onComplete && options.onComplete();
                return;
            }
            requestAnimFrame(tick);
        })();
    }

    var _requestAnimFrame = fabric.window.requestAnimationFrame       ||
                            fabric.window.webkitRequestAnimationFrame ||
                            fabric.window.mozRequestAnimationFrame    ||
                            fabric.window.oRequestAnimationFrame      ||
                            fabric.window.msRequestAnimationFrame     ||
                            function(callback) {
                                fabric.window.setTimeout(callback, 1000 / 60);
                            };
    /**
     * requestAnimationFrame polyfill based on http://paulirish.com/2011/requestanimationframe-for-smart-animating/
     * @method requestAnimFrame
     * @memberOf fabric.util
     * @param {Function} callback Callback to invoke
     * @param {DOMElement} element optional Element to associate with animation
     */
    var requestAnimFrame = function() {
        return _requestAnimFrame.apply(fabric.window, arguments);
    };

    /**
     * Loads image element from given url and passes it to a callback
     * @method loadImage
     * @memberOf fabric.util
     * @param {String} url URL representing an image
     * @param {Function} callback Callback; invoked with loaded image
     * @param {Any} context optional Context to invoke callback in
     */
    function loadImage(url, callback, context) {
        if (url) {
            var img = new Image();
            /** @ignore */
            img.onload = function () {
                callback && callback.call(context, img);
                img = img.onload = null;
            };
            img.src = url;
        }
        else {
            callback && callback.call(context, url);
        }
    }

    function enlivenObjects(objects, callback) {

        function getKlass(type) {
            return fabric[fabric.util.string.camelize(fabric.util.string.capitalize(type))];
        }

        function onLoaded() {
            if (++numLoadedObjects === numTotalObjects) {
                if (callback) {
                    callback(enlivenedObjects);
                }
            }
        }

        var enlivenedObjects = [ ],
            numLoadedObjects = 0,
            numTotalObjects = objects.length;

        objects.forEach(function (o, index) {
            if (!o.type) {
                return;
            }
            var klass = getKlass(o.type);
            if (klass.async) {
                klass.fromObject(o, function (o) {
                    enlivenedObjects[index] = o;
                    onLoaded();
                });
            }
            else {
                enlivenedObjects[index] = klass.fromObject(o);
                onLoaded();
            }
        });
    }

    /**
     * Groups SVG elements (usually those retrieved from SVG document)
     * @static
     * @memberOf fabric.util
     * @method groupSVGElements
     * @param {Array} elements
     * @param {Object} options optional
     * @return {String} path optional
     */
    function groupSVGElements(elements, options, path) {
        var object = elements.length > 1
            ? new fabric.PathGroup(elements, options)
            : elements[0];

        if (typeof path !== 'undefined') {
            object.setSourcePath(path);
        }
        return object;
    }

    fabric.util.removeFromArray = removeFromArray;
    fabric.util.degreesToRadians = degreesToRadians;
    fabric.util.toFixed = toFixed;
    fabric.util.getRandomInt = getRandomInt;
    fabric.util.falseFunction = falseFunction;
    fabric.util.animate = animate;
    fabric.util.requestAnimFrame = requestAnimFrame;
    fabric.util.loadImage = loadImage;
    fabric.util.enlivenObjects = enlivenObjects;
    fabric.util.groupSVGElements = groupSVGElements;
})();
(function() {

    var slice = Array.prototype.slice;

    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (searchElement /*, fromIndex */ ) {
            if (this === void 0 || this === null) {
                throw new TypeError();
            }
            var t = Object(this), len = t.length >>> 0;
            if (len === 0) {
                return -1;
            }
            var n = 0;
            if (arguments.length > 0) {
                n = Number(arguments[1]);
                if (n !== n) { // shortcut for verifying if it's NaN
                    n = 0;
                }
                else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
                    n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
            }
            if (n >= len) {
                return -1;
            }
            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
            for (; k < len; k++) {
                if (k in t && t[k] === searchElement) {
                    return k;
                }
            }
            return -1;
        };
    }

    if (!Array.prototype.forEach) {
        Array.prototype.forEach = function(fn, context) {
            for (var i = 0, len = this.length >>> 0; i < len; i++) {
                if (i in this) {
                    fn.call(context, this[i], i, this);
                }
            }
        };
    }

    if (!Array.prototype.map) {
        Array.prototype.map = function(fn, context) {
            var result = [ ];
            for (var i = 0, len = this.length >>> 0; i < len; i++) {
                if (i in this) {
                    result[i] = fn.call(context, this[i], i, this);
                }
            }
            return result;
        };
    }

    if (!Array.prototype.every) {
        Array.prototype.every = function(fn, context) {
            for (var i = 0, len = this.length >>> 0; i < len; i++) {
                if (i in this && !fn.call(context, this[i], i, this)) {
                    return false;
                }
            }
            return true;
        };
    }

    if (!Array.prototype.some) {
        Array.prototype.some = function(fn, context) {
            for (var i = 0, len = this.length >>> 0; i < len; i++) {
                if (i in this && fn.call(context, this[i], i, this)) {
                    return true;
                }
            }
            return false;
        };
    }

    if (!Array.prototype.filter) {
        Array.prototype.filter = function(fn, context) {
            var result = [ ], val;
            for (var i = 0, len = this.length >>> 0; i < len; i++) {
                if (i in this) {
                    val = this[i]; // in case fn mutates this
                    if (fn.call(context, val, i, this)) {
                        result.push(val);
                    }
                }
            }
            return result;
        };
    }

    if (!Array.prototype.reduce) {
        Array.prototype.reduce = function(fn /*, initial*/) {
            var len = this.length >>> 0,
                i = 0,
                rv;

            if (arguments.length > 1) {
                rv = arguments[1];
            }
            else {
                do {
                    if (i in this) {
                        rv = this[i++];
                        break;
                    }
                    // if array contains no values, no initial value to return
                    if (++i >= len) {
                        throw new TypeError();
                    }
                }
                while (true);
            }
            for (; i < len; i++) {
                if (i in this) {
                    rv = fn.call(null, rv, this[i], i, this);
                }
            }
            return rv;
        };
    }

    /**
     * Invokes method on all items in a given array
     * @method invoke
     * @memberOf fabric.util.array
     * @param {Array} array Array to iterate over
     * @param {String} method Name of a method to invoke
     */
    function invoke(array, method) {
        var args = slice.call(arguments, 2), result = [ ];
        for (var i = 0, len = array.length; i < len; i++) {
            result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);
        }
        return result;
    }

    /**
     * Finds maximum value in array (not necessarily "first" one)
     * @method max
     * @memberOf fabric.util.array
     * @param {Array} array Array to iterate over
     * @param {String} byProperty
     */
    function max(array, byProperty) {
        if (!array || array.length === 0) return undefined;

        var i = array.length - 1,
            result = byProperty ? array[i][byProperty] : array[i];
        if (byProperty) {
            while (i--) {
                if (array[i][byProperty] >= result) {
                    result = array[i][byProperty];
                }
            }
        }
        else {
            while (i--) {
                if (array[i] >= result) {
                    result = array[i];
                }
            }
        }
        return result;
    }

    /**
     * Finds minimum value in array (not necessarily "first" one)
     * @method min
     * @memberOf fabric.util.array
     * @param {Array} array Array to iterate over
     * @param {String} byProperty
     */
    function min(array, byProperty) {
        if (!array || array.length === 0) return undefined;

        var i = array.length - 1,
            result = byProperty ? array[i][byProperty] : array[i];

        if (byProperty) {
            while (i--) {
                if (array[i][byProperty] < result) {
                    result = array[i][byProperty];
                }
            }
        }
        else {
            while (i--) {
                if (array[i] < result) {
                    result = array[i];
                }
            }
        }
        return result;
    }

    /** @namespace */
    fabric.util.array = {
        invoke: invoke,
        min: min,
        max: max
    };

})();
(function(){

    /**
     * Copies all enumerable properties of one object to another
     * @memberOf fabric.util.object
     * @method extend
     * @param {Object} destination Where to copy to
     * @param {Object} source Where to copy from
     */
    function extend(destination, source) {
        // JScript DontEnum bug is not taken care of
        for (var property in source) {
            destination[property] = source[property];
        }
        return destination;
    }

    /**
     * Creates an empty object and copies all enumerable properties of another object to it
     * @method clone
     * @memberOf fabric.util.object
     * @param {Object} object Object to clone
     */
    function clone(object) {
        return extend({ }, object);
    }

    /** @namespace fabric.util.object */
    fabric.util.object = {
        extend: extend,
        clone: clone
    };

})();
(function() {

    if (!String.prototype.trim) {
        /**
         * Trims a string (removing whitespace from the beginning and the end)
         * @method trim
         * @see <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/Trim">String#trim on MDN</a>
         */
        String.prototype.trim = function () {
            // this trim is not fully ES3 or ES5 compliant, but it should cover most cases for now
            return this.replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, '');
        };
    }

    /**
     * Camelizes a string
     * @memberOf fabric.util.string
     * @method camelize
     * @param {String} string String to camelize
     * @return {String} Camelized version of a string
     */
    function camelize(string) {
        return string.replace(/-+(.)?/g, function(match, character) {
            return character ? character.toUpperCase() : '';
        });
    }

    /**
     * Capitalizes a string
     * @memberOf fabric.util.string
     * @method capitalize
     * @param {String} string String to capitalize
     * @return {String} Capitalized version of a string
     */
    function capitalize(string) {
        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
    }

    function escapeXml(string) {
        return string.replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&apos;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }

    /** @namespace */
    fabric.util.string = {
        camelize: camelize,
        capitalize: capitalize,
        escapeXml: escapeXml
    };
}());

(function() {

    var slice = Array.prototype.slice,
        apply = Function.prototype.apply,
        Dummy = function() { };

    if (!Function.prototype.bind) {
        /**
         * Cross-browser approximation of ES5 Function.prototype.bind (not fully spec conforming)
         * @see <a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind">Function#bind on MDN</a>
         * @param {Object} thisArg Object to bind function to
         * @param {Any[]} [...] Values to pass to a bound function
         * @return {Function}
         */
        Function.prototype.bind = function(thisArg) {
            var fn = this, args = slice.call(arguments, 1), bound;
            if (args.length) {
                bound = function() {
                    return apply.call(fn, this instanceof Dummy ? this : thisArg, args.concat(slice.call(arguments)));
                };
            }
            else {
                bound = function() {
                    return apply.call(fn, this instanceof Dummy ? this : thisArg, arguments);
                };
            }
            Dummy.prototype = this.prototype;
            bound.prototype = new Dummy();

            return bound;
        };
    }

})();
(function() {

    var slice = Array.prototype.slice, emptyFunction = function() { };

    var IS_DONTENUM_BUGGY = (function(){
        for (var p in { toString: 1 }) {
            if (p === 'toString') return false;
        }
        return true;
    })();

    /** @ignore */
    var addMethods = function(klass, source, parent) {
        for (var property in source) {

            if (property in klass.prototype && typeof klass.prototype[property] === 'function') {

                klass.prototype[property] = (function(property) {
                    return function() {

                        var superclass = this.constructor.superclass;
                        this.constructor.superclass = parent;
                        var returnValue = source[property].apply(this, arguments);
                        this.constructor.superclass = superclass;

                        if (property !== 'initialize') {
                            return returnValue;
                        }
                    };
                })(property);
            }
            else {
                klass.prototype[property] = source[property];
            }

            if (IS_DONTENUM_BUGGY) {
                if (source.toString !== Object.prototype.toString) {
                    klass.prototype.toString = source.toString;
                }
                if (source.valueOf !== Object.prototype.valueOf) {
                    klass.prototype.valueOf = source.valueOf;
                }
            }
        }
    };

    function Subclass() { }

    /**
     * Helper for creation of "classes"
     * @method createClass
     * @memberOf fabric.util
     */
    function createClass() {
        var parent = null,
            properties = slice.call(arguments, 0);

        if (typeof properties[0] === 'function') {
            parent = properties.shift();
        }
        function klass() {
            this.initialize.apply(this, arguments);
        }

        klass.superclass = parent;
        klass.subclasses = [ ];

        if (parent) {
            Subclass.prototype = parent.prototype;
            klass.prototype = new Subclass();
            parent.subclasses.push(klass);
        }
        for (var i = 0, length = properties.length; i < length; i++) {
            addMethods(klass, properties[i], parent);
        }
        if (!klass.prototype.initialize) {
            klass.prototype.initialize = emptyFunction;
        }
        klass.prototype.constructor = klass;
        return klass;
    }

    fabric.util.createClass = createClass;
})();
(function () {

    /* EVENT HANDLING */

    function areHostMethods(object) {
        var methodNames = Array.prototype.slice.call(arguments, 1),
            t, i, len = methodNames.length;
        for (i = 0; i < len; i++) {
            t = typeof object[methodNames[i]];
            if (!(/^(?:function|object|unknown)$/).test(t)) return false;
        }
        return true;
    }
    var getUniqueId = (function () {
        if (typeof fabric.document.documentElement.uniqueID !== 'undefined') {
            return function (element) {
                return element.uniqueID;
            };
        }
        var uid = 0;
        return function (element) {
            return element.__uniqueID || (element.__uniqueID = 'uniqueID__' + uid++);
        };
    })();

    /** @ignore */
    var getElement, setElement;

    (function () {
        var elements = { };
        /** @ignore */
        getElement = function (uid) {
            return elements[uid];
        };
        /** @ignore */
        setElement = function (uid, element) {
            elements[uid] = element;
        };
    })();

    function createListener(uid, handler) {
        return {
            handler: handler,
            wrappedHandler: createWrappedHandler(uid, handler)
        };
    }

    function createWrappedHandler(uid, handler) {
        return function (e) {
            handler.call(getElement(uid), e || fabric.window.event);
        };
    }

    function createDispatcher(uid, eventName) {
        return function (e) {
            if (handlers[uid] && handlers[uid][eventName]) {
                var handlersForEvent = handlers[uid][eventName];
                for (var i = 0, len = handlersForEvent.length; i < len; i++) {
                    handlersForEvent[i].call(this, e || fabric.window.event);
                }
            }
        };
    }

    var shouldUseAddListenerRemoveListener = (
            areHostMethods(fabric.document.documentElement, 'addEventListener', 'removeEventListener') &&
            areHostMethods(fabric.window, 'addEventListener', 'removeEventListener')),

        shouldUseAttachEventDetachEvent = (
            areHostMethods(fabric.document.documentElement, 'attachEvent', 'detachEvent') &&
            areHostMethods(fabric.window, 'attachEvent', 'detachEvent')),

    // IE branch
        listeners = { },

    // DOM L0 branch
        handlers = { },

        addListener, removeListener;

    if (shouldUseAddListenerRemoveListener) {
        /** @ignore */
        addListener = function (element, eventName, handler) {
            element.addEventListener(eventName, handler, false);
        };
        /** @ignore */
        removeListener = function (element, eventName, handler) {
            element.removeEventListener(eventName, handler, false);
        };
    }

    else if (shouldUseAttachEventDetachEvent) {
        /** @ignore */
        addListener = function (element, eventName, handler) {
            var uid = getUniqueId(element);
            setElement(uid, element);
            if (!listeners[uid]) {
                listeners[uid] = { };
            }
            if (!listeners[uid][eventName]) {
                listeners[uid][eventName] = [ ];

            }
            var listener = createListener(uid, handler);
            listeners[uid][eventName].push(listener);
            element.attachEvent('on' + eventName, listener.wrappedHandler);
        };
        /** @ignore */
        removeListener = function (element, eventName, handler) {
            var uid = getUniqueId(element), listener;
            if (listeners[uid] && listeners[uid][eventName]) {
                for (var i = 0, len = listeners[uid][eventName].length; i < len; i++) {
                    listener = listeners[uid][eventName][i];
                    if (listener && listener.handler === handler) {
                        element.detachEvent('on' + eventName, listener.wrappedHandler);
                        listeners[uid][eventName][i] = null;
                    }
                }
            }
        };
    }
    else {
        /** @ignore */
        addListener = function (element, eventName, handler) {
            var uid = getUniqueId(element);
            if (!handlers[uid]) {
                handlers[uid] = { };
            }
            if (!handlers[uid][eventName]) {
                handlers[uid][eventName] = [ ];
                var existingHandler = element['on' + eventName];
                if (existingHandler) {
                    handlers[uid][eventName].push(existingHandler);
                }
                element['on' + eventName] = createDispatcher(uid, eventName);
            }
            handlers[uid][eventName].push(handler);
        };
        /** @ignore */
        removeListener = function (element, eventName, handler) {
            var uid = getUniqueId(element);
            if (handlers[uid] && handlers[uid][eventName]) {
                var handlersForEvent = handlers[uid][eventName];
                for (var i = 0, len = handlersForEvent.length; i < len; i++) {
                    if (handlersForEvent[i] === handler) {
                        handlersForEvent.splice(i, 1);
                    }
                }
            }
        };
    }

    /**
     * Adds an event listener to an element
     * @mthod addListener
     * @memberOf fabric.util
     * @function
     * @param {HTMLElement} element
     * @param {String} eventName
     * @param {Function} handler
     */
    fabric.util.addListener = addListener;

    /**
     * Removes an event listener from an element
     * @mthod removeListener
     * @memberOf fabric.util
     * @function
     * @param {HTMLElement} element
     * @param {String} eventName
     * @param {Function} handler
     */
    fabric.util.removeListener = removeListener;

    /**
     * Cross-browser wrapper for getting event's coordinates
     * @method getPointer
     * @memberOf fabric.util
     * @param {Event} event
     */
    function getPointer(event) {
        var element = event.target || event.srcElement,
            scrollLeft = 0,
            scrollTop = 0,
            firstFixedAncestor;

        while (element && element.parentNode && !firstFixedAncestor) {
            element = element.parentNode;

            if (element !== fabric.document && fabric.util.getElementPosition(element) === 'fixed') firstFixedAncestor = element;

            scrollLeft += element.scrollLeft || 0;
            scrollTop += element.scrollTop || 0;
        }

        return {
            x: event.clientX + scrollLeft,
            y: event.clientY + scrollTop
        };
    }

    var pointerX = function(event) {
        var docElement = fabric.document.documentElement,
            body = fabric.document.body || { scrollLeft: 0 };

        // looks like in IE (<9) clientX at certain point (apparently when mouseup fires on VML element)
        // is represented as COM object, with all the consequences, like "unknown" type and error on [[Get]]
        // need to investigate later
        return event.pageX || ((typeof event.clientX !== 'unknown' ? event.clientX : 0) +
                               (docElement.scrollLeft || body.scrollLeft) -
                               (docElement.clientLeft || 0));
    };

    var pointerY = function(event) {
        var docElement = fabric.document.documentElement,
            body = fabric.document.body || { scrollTop: 0 };

        return event.pageY || ((typeof event.clientY !== 'unknown' ? event.clientY : 0) +
                               (docElement.scrollTop || body.scrollTop) -
                               (docElement.clientTop || 0));
    };

    if (fabric.isTouchSupported) {
        pointerX = function(event) {
            return event.touches && event.touches[0] && event.touches[0].pageX || event.clientX;
        };
        pointerY = function(event) {
            return event.touches && event.touches[0] && event.touches[0].pageY || event.clientY;
        };
    }

    fabric.util.getPointer = getPointer;

    fabric.util.object.extend(fabric.util, fabric.Observable);

})();
(function () {

    /**
     * Cross-browser wrapper for setting element's style
     * @method setStyle
     * @memberOf fabric.util
     * @param {HTMLElement} element
     * @param {Object} styles
     * @return {HTMLElement} Element that was passed as a first argument
     */
    function setStyle(element, styles) {
        var elementStyle = element.style;
        if (!elementStyle) {
            return element;
        }
        if (typeof styles === 'string') {
            element.style.cssText += ';' + styles;
            return styles.indexOf('opacity') > -1
                ? setOpacity(element, styles.match(/opacity:\s*(\d?\.?\d*)/)[1])
                : element;
        }
        for (var property in styles) {
            if (property === 'opacity') {
                setOpacity(element, styles[property]);
            }
            else {
                var normalizedProperty = (property === 'float' || property === 'cssFloat')
                    ? (typeof elementStyle.styleFloat === 'undefined' ? 'cssFloat' : 'styleFloat')
                    : property;
                elementStyle[normalizedProperty] = styles[property];
            }
        }
        return element;
    }

    var parseEl = fabric.document.createElement('div'),
        supportsOpacity = typeof parseEl.style.opacity === 'string',
        supportsFilters = typeof parseEl.style.filter === 'string',
        reOpacity = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/,

        /** @ignore */
            setOpacity = function (element) { return element; };

    if (supportsOpacity) {
        /** @ignore */
        setOpacity = function(element, value) {
            element.style.opacity = value;
            return element;
        };
    }
    else if (supportsFilters) {
        /** @ignore */
        setOpacity = function(element, value) {
            var es = element.style;
            if (element.currentStyle && !element.currentStyle.hasLayout) {
                es.zoom = 1;
            }
            if (reOpacity.test(es.filter)) {
                value = value >= 0.9999 ? '' : ('alpha(opacity=' + (value * 100) + ')');
                es.filter = es.filter.replace(reOpacity, value);
            }
            else {
                es.filter += ' alpha(opacity=' + (value * 100) + ')';
            }
            return element;
        };
    }

    fabric.util.setStyle = setStyle;

})();
(function() {

    var _slice = Array.prototype.slice;

    /**
     * Takes id and returns an element with that id (if one exists in a document)
     * @method getById
     * @memberOf fabric.util
     * @param {String|HTMLElement} id
     * @return {HTMLElement|null}
     */
    function getById(id) {
        return typeof id === 'string' ? fabric.document.getElementById(id) : id;
    }

    /**
     * Converts an array-like object (e.g. arguments or NodeList) to an array
     * @method toArray
     * @memberOf fabric.util
     * @param {Object} arrayLike
     * @return {Array}
     */
    var toArray = function(arrayLike) {
        return _slice.call(arrayLike, 0);
    };

    var sliceCanConvertNodelists;
    try {
        sliceCanConvertNodelists = toArray(fabric.document.childNodes) instanceof Array;
    }
    catch(err) { }

    if (!sliceCanConvertNodelists) {
        toArray = function(arrayLike) {
            var arr = new Array(arrayLike.length), i = arrayLike.length;
            while (i--) {
                arr[i] = arrayLike[i];
            }
            return arr;
        };
    }

    /**
     * Creates specified element with specified attributes
     * @method makeElement
     * @memberOf fabric.util
     * @param {String} tagName Type of an element to create
     * @param {Object} [attributes] Attributes to set on an element
     * @return {HTMLElement} Newly created element
     */
    function makeElement(tagName, attributes) {
        var el = fabric.document.createElement(tagName);
        for (var prop in attributes) {
            if (prop === 'class') {
                el.className = attributes[prop];
            }
            else if (prop === 'for') {
                el.htmlFor = attributes[prop];
            }
            else {
                el.setAttribute(prop, attributes[prop]);
            }
        }
        return el;
    }

    /**
     * Adds class to an element
     * @method addClass
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to add class to
     * @param {String} className Class to add to an element
     */
    function addClass(element, className) {
        if ((' ' + element.className + ' ').indexOf(' ' + className + ' ') === -1) {
            element.className += (element.className ? ' ' : '') + className;
        }
    }

    /**
     * Wraps element with another element
     * @method wrapElement
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to wrap
     * @param {HTMLElement|String} wrapper Element to wrap with
     * @param {Object} [attributes] Attributes to set on a wrapper
     * @return {HTMLElement} wrapper
     */
    function wrapElement(element, wrapper, attributes) {
        if (typeof wrapper === 'string') {
            wrapper = makeElement(wrapper, attributes);
        }
        if (element.parentNode) {
            element.parentNode.replaceChild(wrapper, element);
        }
        wrapper.appendChild(element);
        return wrapper;
    }

    /**
     * Returns offset for a given element
     * @method getElementOffset
     * @function
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to get offset for
     * @return {Object} Object with "left" and "top" properties
     */
    function getElementOffset(element) {
        // TODO (kangax): need to fix this method
        var valueT = 0, valueL = 0;
        do {
            valueT += element.offsetTop  || 0;
            valueL += element.offsetLeft || 0;
            element = element.offsetParent;
        }
        while (element);
        return ({ left: valueL, top: valueT });
    }

    /**
     * Returns position of a given element
     * @method getElementPosition
     * @function
     * @memberOf fabric.util
     * @param {HTMLElement} element Element to get offset for
     * @return {Object} position of the given element.
     */
    var getElementPosition;
    if (fabric.document.defaultView && fabric.document.defaultView.getComputedStyle) {
        getElementPosition = function (element) {
            return fabric.document.defaultView.getComputedStyle(element).position;
        };
    }
    else {
        getElementPosition = function (element) {
            var value = element.style.position;
            if (!value && element.currentStyle) value = element.currentStyle.position;
            return value;
        };
    }

    (function () {
        var style = fabric.document.documentElement.style;

        var selectProp = 'userSelect' in style
            ? 'userSelect'
            : 'MozUserSelect' in style
                             ? 'MozUserSelect'
                             : 'WebkitUserSelect' in style
                  ? 'WebkitUserSelect'
                  : 'KhtmlUserSelect' in style
                                   ? 'KhtmlUserSelect'
                                   : '';

        /**
         * Makes element unselectable
         * @method makeElementUnselectable
         * @memberOf fabric.util
         * @param {HTMLElement} element Element to make unselectable
         * @return {HTMLElement} Element that was passed in
         */
        function makeElementUnselectable(element) {
            if (typeof element.onselectstart !== 'undefined') {
                element.onselectstart = fabric.util.falseFunction;
            }
            if (selectProp) {
                element.style[selectProp] = 'none';
            }
            else if (typeof element.unselectable === 'string') {
                element.unselectable = 'on';
            }
            return element;
        }

        /**
         * Makes element selectable
         * @method makeElementSelectable
         * @memberOf fabric.util
         * @param {HTMLElement} element Element to make selectable
         * @return {HTMLElement} Element that was passed in
         */
        function makeElementSelectable(element) {
            if (typeof element.onselectstart !== 'undefined') {
                element.onselectstart = null;
            }
            if (selectProp) {
                element.style[selectProp] = '';
            }
            else if (typeof element.unselectable === 'string') {
                element.unselectable = '';
            }
            return element;
        }

        fabric.util.makeElementUnselectable = makeElementUnselectable;
        fabric.util.makeElementSelectable = makeElementSelectable;
    })();

    (function() {

        /**
         * Inserts a script element with a given url into a document; invokes callback, when that script is finished loading
         * @method getScript
         * @memberOf fabric.util
         * @param {String} url URL of a script to load
         * @param {Function} callback Callback to execute when script is finished loading
         */
        function getScript(url, callback) {
            var headEl = fabric.document.getElementsByTagName("head")[0],
                scriptEl = fabric.document.createElement('script'),
                loading = true;

            scriptEl.type = 'text/javascript';
            scriptEl.setAttribute('runat', 'server');

            /** @ignore */
            scriptEl.onload = /** @ignore */ scriptEl.onreadystatechange = function(e) {
                if (loading) {
                    if (typeof this.readyState === 'string' &&
                        this.readyState !== 'loaded' &&
                        this.readyState !== 'complete') return;
                    loading = false;
                    callback(e || fabric.window.event);
                    scriptEl = scriptEl.onload = scriptEl.onreadystatechange = null;
                }
            };
            scriptEl.src = url;
            headEl.appendChild(scriptEl);
            // causes issue in Opera
            // headEl.removeChild(scriptEl);
        }

        fabric.util.getScript = getScript;
    })();

    fabric.util.getById = getById;
    fabric.util.toArray = toArray;
    fabric.util.makeElement = makeElement;
    fabric.util.addClass = addClass;
    fabric.util.wrapElement = wrapElement;
    fabric.util.getElementOffset = getElementOffset;
    fabric.util.getElementPosition = getElementPosition;

})();
(function(){

    function addParamToUrl(url, param) {
        return url + (/\?/.test(url) ? '&' : '?') + param;
    }

    var makeXHR = (function() {
        var factories = [
            function() { return new ActiveXObject("Microsoft.XMLHTTP"); },
            function() { return new ActiveXObject("Msxml2.XMLHTTP"); },
            function() { return new ActiveXObject("Msxml2.XMLHTTP.3.0"); },
            function() { return new XMLHttpRequest(); }
        ];
        for (var i = factories.length; i--; ) {
            try {
                var req = factories[i]();
                if (req) {
                    return factories[i];
                }
            }
            catch (err) { }
        }
    })();

    function emptyFn() { }

    /**
     * Cross-browser abstraction for sending XMLHttpRequest
     * @method request
     * @memberOf fabric.util
     * @param {String} url URL to send XMLHttpRequest to
     * @param {Object} [options] Options object
     * @param {String} [options.method="GET"]
     * @param {Function} options.onComplete Callback to invoke when request is completed
     * @return {XMLHttpRequest} request
     */
    function request(url, options) {

        options || (options = { });

        var method = options.method ? options.method.toUpperCase() : 'GET',
            onComplete = options.onComplete || function() { },
            xhr = makeXHR(),
            body;

        /** @ignore */
        xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
                onComplete(xhr);
                xhr.onreadystatechange = emptyFn;
            }
        };

        if (method === 'GET') {
            body = null;
            if (typeof options.parameters === 'string') {
                url = addParamToUrl(url, options.parameters);
            }
        }

        xhr.open(method, url, true);

        if (method === 'POST' || method === 'PUT') {
            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        }

        xhr.send(body);
        return xhr;
    }

    fabric.util.request = request;
})();
(function() {

    /**
     * @method easeInQuad
     * @memberOf fabric.util.ease
     */
    function easeInQuad(t, b, c, d) {
        return c*(t/=d)*t + b;
    }

    /**
     * @method easeOutQuad
     * @memberOf fabric.util.ease
     */
    function easeOutQuad(t, b, c, d) {
        return -c *(t/=d)*(t-2) + b;
    }

    /**
     * @method easeInOutQuad
     * @memberOf fabric.util.ease
     */
    function easeInOutQuad(t, b, c, d) {
        t /= (d/2);
        if (t < 1) return c/2*t*t + b;
        return -c/2 * ((--t)*(t-2) - 1) + b;
    }

    /**
     * @method easeInCubic
     * @memberOf fabric.util.ease
     */
    function easeInCubic(t, b, c, d) {
        return c*(t/=d)*t*t + b;
    }

    /**
     * @method easeOutCubic
     * @memberOf fabric.util.ease
     */
    function easeOutCubic(t, b, c, d) {
        return c*((t=t/d-1)*t*t + 1) + b;
    }

    /**
     * @method easeInOutCubic
     * @memberOf fabric.util.ease
     */
    function easeInOutCubic(t, b, c, d) {
        t /= d/2;
        if (t < 1) return c/2*t*t*t + b;
        return c/2*((t-=2)*t*t + 2) + b;
    }

    /**
     * @method easeInQuart
     * @memberOf fabric.util.ease
     */
    function easeInQuart(t, b, c, d) {
        return c*(t/=d)*t*t*t + b;
    }

    /**
     * @method easeOutQuart
     * @memberOf fabric.util.ease
     */
    function easeOutQuart(t, b, c, d) {
        return -c * ((t=t/d-1)*t*t*t - 1) + b;
    }

    /**
     * @method easeInOutQuart
     * @memberOf fabric.util.ease
     */
    function easeInOutQuart(t, b, c, d) {
        t /= d/2;
        if (t < 1) return c/2*t*t*t*t + b;
        return -c/2 * ((t-=2)*t*t*t - 2) + b;
    }

    /**
     * @method easeInQuint
     * @memberOf fabric.util.ease
     */
    function easeInQuint(t, b, c, d) {
        return c*(t/=d)*t*t*t*t + b;
    }

    /**
     * @method easeOutQuint
     * @memberOf fabric.util.ease
     */
    function easeOutQuint(t, b, c, d) {
        return c*((t=t/d-1)*t*t*t*t + 1) + b;
    }

    /**
     * @method easeInOutQuint
     * @memberOf fabric.util.ease
     */
    function easeInOutQuint(t, b, c, d) {
        t /= d/2;
        if (t < 1) return c/2*t*t*t*t*t + b;
        return c/2*((t-=2)*t*t*t*t + 2) + b;
    }

    /**
     * @method easeInSine
     * @memberOf fabric.util.ease
     */
    function easeInSine(t, b, c, d) {
        return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
    }

    /**
     * @method easeOutSine
     * @memberOf fabric.util.ease
     */
    function easeOutSine(t, b, c, d) {
        return c * Math.sin(t/d * (Math.PI/2)) + b;
    }

    /**
     * @method easeInOutSine
     * @memberOf fabric.util.ease
     */
    function easeInOutSine(t, b, c, d) {
        return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
    }

    /**
     * @method easeInExpo
     * @memberOf fabric.util.ease
     */
    function easeInExpo(t, b, c, d) {
        return (t===0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
    }

    /**
     * @method easeOutExpo
     * @memberOf fabric.util.ease
     */
    function easeOutExpo(t, b, c, d) {
        return (t===d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
    }

    /**
     * @method easeInOutExpo
     * @memberOf fabric.util.ease
     */
    function easeInOutExpo(t, b, c, d) {
        if (t===0) return b;
        if (t===d) return b+c;
        t /= d/2;
        if (t < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
        return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
    }

    /**
     * @method easeInCirc
     * @memberOf fabric.util.ease
     */
    function easeInCirc(t, b, c, d) {
        return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
    }

    /**
     * @method easeOutCirc
     * @memberOf fabric.util.ease
     */
    function easeOutCirc(t, b, c, d) {
        return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
    }

    /**
     * @method easeInOutCirc
     * @memberOf fabric.util.ease
     */
    function easeInOutCirc(t, b, c, d) {
        t /= d/2;
        if (t < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
        return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
    }

    /**
     * @method easeInElastic
     * @memberOf fabric.util.ease
     */
    function easeInElastic(t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t===0) return b;
        t /= d;
        if (t===1) return b+c;
        if (!p) p=d*0.3;
        if (a < Math.abs(c)) { a=c; s=p/4; }
        else s = p/(2*Math.PI) * Math.asin (c/a);
        return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    }

    /**
     * @method easeOutElastic
     * @memberOf fabric.util.ease
     */
    function easeOutElastic(t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t===0) return b;
        t /= d;
        if (t===1) return b+c;
        if (!p) p=d*0.3;
        if (a < Math.abs(c)) { a=c; s=p/4; }
        else s = p/(2*Math.PI) * Math.asin (c/a);
        return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
    }

    /**
     * @method easeInOutElastic
     * @memberOf fabric.util.ease
     */
    function easeInOutElastic(t, b, c, d) {
        var s=1.70158;var p=0;var a=c;
        if (t===0) return b;
        t /= d/2;
        if (t===2) return b+c;
        if (!p) p=d*(0.3*1.5);
        if (a < Math.abs(c)) { a=c; s=p/4; }
        else s = p/(2*Math.PI) * Math.asin (c/a);
        if (t < 1) return -0.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
        return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*0.5 + c + b;
    }

    /**
     * @method easeInBack
     * @memberOf fabric.util.ease
     */
    function easeInBack(t, b, c, d, s) {
        if (s === undefined) s = 1.70158;
        return c*(t/=d)*t*((s+1)*t - s) + b;
    }

    /**
     * @method easeOutBack
     * @memberOf fabric.util.ease
     */
    function easeOutBack(t, b, c, d, s) {
        if (s === undefined) s = 1.70158;
        return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
    }

    /**
     * @method easeInOutBack
     * @memberOf fabric.util.ease
     */
    function easeInOutBack(t, b, c, d, s) {
        if (s === undefined) s = 1.70158;
        t /= d/2;
        if (t < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
        return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
    }

    /**
     * @method easeInBounce
     * @memberOf fabric.util.ease
     */
    function easeInBounce(t, b, c, d) {
        return c - easeOutBounce (d-t, 0, c, d) + b;
    }

    /**
     * @method easeOutBounce
     * @memberOf fabric.util.ease
     */
    function easeOutBounce(t, b, c, d) {
        if ((t/=d) < (1/2.75)) {
            return c*(7.5625*t*t) + b;
        } else if (t < (2/2.75)) {
            return c*(7.5625*(t-=(1.5/2.75))*t + 0.75) + b;
        } else if (t < (2.5/2.75)) {
            return c*(7.5625*(t-=(2.25/2.75))*t + 0.9375) + b;
        } else {
            return c*(7.5625*(t-=(2.625/2.75))*t + 0.984375) + b;
        }
    }

    /**
     * @method easeInOutBounce
     * @memberOf fabric.util.ease
     */
    function easeInOutBounce(t, b, c, d) {
        if (t < d/2) return easeInBounce (t*2, 0, c, d) * 0.5 + b;
        return easeOutBounce (t*2-d, 0, c, d) * 0.5 + c*0.5 + b;
    }

    /** @namespace fabric.util.ease */
    fabric.util.ease = {
        easeInQuad: easeInQuad,
        easeOutQuad: easeOutQuad,
        easeInOutQuad: easeInOutQuad,
        easeInCubic: easeInCubic,
        easeOutCubic: easeOutCubic,
        easeInOutCubic: easeInOutCubic,
        easeInQuart: easeInQuart,
        easeOutQuart: easeOutQuart,
        easeInOutQuart: easeInOutQuart,
        easeInQuint: easeInQuint,
        easeOutQuint: easeOutQuint,
        easeInOutQuint: easeInOutQuint,
        easeInSine: easeInSine,
        easeOutSine: easeOutSine,
        easeInOutSine: easeInOutSine,
        easeInExpo: easeInExpo,
        easeOutExpo: easeOutExpo,
        easeInOutExpo: easeInOutExpo,
        easeInCirc: easeInCirc,
        easeOutCirc: easeOutCirc,
        easeInOutCirc: easeInOutCirc,
        easeInElastic: easeInElastic,
        easeOutElastic: easeOutElastic,
        easeInOutElastic: easeInOutElastic,
        easeInBack: easeInBack,
        easeOutBack: easeOutBack,
        easeInOutBack: easeInOutBack,
        easeInBounce: easeInBounce,
        easeOutBounce: easeOutBounce,
        easeInOutBounce: easeInOutBounce
    };

}());
(function(global) {

    "use strict";

    /**
     * @name fabric
     * @namespace
     */

    var fabric = global.fabric || (global.fabric = { }),
        extend = fabric.util.object.extend,
        capitalize = fabric.util.string.capitalize,
        clone = fabric.util.object.clone;

    var attributesMap = {
        'cx':               'left',
        'x':                'left',
        'cy':               'top',
        'y':                'top',
        'r':                'radius',
        'fill-opacity':     'opacity',
        'fill-rule':        'fillRule',
        'stroke-width':     'strokeWidth',
        'transform':        'transformMatrix',
        'text-decoration':  'textDecoration',
        'font-size':        'fontSize',
        'font-weight':      'fontWeight',
        'font-style':       'fontStyle',
        'font-family':      'fontFamily'
    };

    function normalizeAttr(attr) {
        // transform attribute names
        if (attr in attributesMap) {
            return attributesMap[attr];
        }
        return attr;
    }

    /**
     * Returns an object of attributes' name/value, given element and an array of attribute names;
     * Parses parent "g" nodes recursively upwards.
     * @static
     * @memberOf fabric
     * @method parseAttributes
     * @param {DOMElement} element Element to parse
     * @param {Array} attributes Array of attributes to parse
     * @return {Object} object containing parsed attributes' names/values
     */
    function parseAttributes(element, attributes) {

        if (!element) {
            return;
        }

        var value,
            parsed,
            parentAttributes = { };

        // if there's a parent container (`g` node), parse its attributes recursively upwards
        if (element.parentNode && /^g$/i.test(element.parentNode.nodeName)) {
            parentAttributes = fabric.parseAttributes(element.parentNode, attributes);
        }

        var ownAttributes = attributes.reduce(function(memo, attr) {
            value = element.getAttribute(attr);
            parsed = parseFloat(value);
            if (value) {
                // "normalize" attribute values
                if ((attr === 'fill' || attr === 'stroke') && value === 'none') {
                    value = '';
                }
                if (attr === 'fill-rule') {
                    value = (value === 'evenodd') ? 'destination-over' : value;
                }
                if (attr === 'transform') {
                    value = fabric.parseTransformAttribute(value);
                }
                attr = normalizeAttr(attr);
                memo[attr] = isNaN(parsed) ? value : parsed;
            }
            return memo;
        }, { });

        // add values parsed from style, which take precedence over attributes
        // (see: http://www.w3.org/TR/SVG/styling.html#UsingPresentationAttributes)

        ownAttributes = extend(ownAttributes, extend(getGlobalStylesForElement(element), fabric.parseStyleAttribute(element)));
        return extend(parentAttributes, ownAttributes);
    }

    /**
     * Parses "transform" attribute, returning an array of values
     * @static
     * @function
     * @memberOf fabric
     * @method parseTransformAttribute
     * @param attributeValue {String} string containing attribute value
     * @return {Array} array of 6 elements representing transformation matrix
     */
    fabric.parseTransformAttribute = (function() {
        function rotateMatrix(matrix, args) {
            var angle = args[0];

            matrix[0] = Math.cos(angle);
            matrix[1] = Math.sin(angle);
            matrix[2] = -Math.sin(angle);
            matrix[3] = Math.cos(angle);
        }

        function scaleMatrix(matrix, args) {
            var multiplierX = args[0],
                multiplierY = (args.length === 2) ? args[1] : args[0];

            matrix[0] = multiplierX;
            matrix[3] = multiplierY;
        }

        function skewXMatrix(matrix, args) {
            matrix[2] = args[0];
        }

        function skewYMatrix(matrix, args) {
            matrix[1] = args[0];
        }

        function translateMatrix(matrix, args) {
            matrix[4] = args[0];
            if (args.length === 2) {
                matrix[5] = args[1];
            }
        }

        // identity matrix
        var iMatrix = [
                1, // a
                0, // b
                0, // c
                1, // d
                0, // e
                0  // f
            ],

        // == begin transform regexp
            number = '(?:[-+]?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)',
            comma_wsp = '(?:\\s+,?\\s*|,\\s*)',

            skewX = '(?:(skewX)\\s*\\(\\s*(' + number + ')\\s*\\))',
            skewY = '(?:(skewY)\\s*\\(\\s*(' + number + ')\\s*\\))',
            rotate = '(?:(rotate)\\s*\\(\\s*(' + number + ')(?:' + comma_wsp + '(' + number + ')' + comma_wsp + '(' + number + '))?\\s*\\))',
            scale = '(?:(scale)\\s*\\(\\s*(' + number + ')(?:' + comma_wsp + '(' + number + '))?\\s*\\))',
            translate = '(?:(translate)\\s*\\(\\s*(' + number + ')(?:' + comma_wsp + '(' + number + '))?\\s*\\))',

            matrix = '(?:(matrix)\\s*\\(\\s*' +
                     '(' + number + ')' + comma_wsp +
                     '(' + number + ')' + comma_wsp +
                     '(' + number + ')' + comma_wsp +
                     '(' + number + ')' + comma_wsp +
                     '(' + number + ')' + comma_wsp +
                     '(' + number + ')' +
                     '\\s*\\))',

            transform = '(?:' +
                        matrix + '|' +
                        translate + '|' +
                        scale + '|' +
                        rotate + '|' +
                        skewX + '|' +
                        skewY +
                        ')',

            transforms = '(?:' + transform + '(?:' + comma_wsp + transform + ')*' + ')',

            transform_list = '^\\s*(?:' + transforms + '?)\\s*$',

        // http://www.w3.org/TR/SVG/coords.html#TransformAttribute
            reTransformList = new RegExp(transform_list),
        // == end transform regexp

            reTransform = new RegExp(transform);

        return function(attributeValue) {

            // start with identity matrix
            var matrix = iMatrix.concat();

            // return if no argument was given or
            // an argument does not match transform attribute regexp
            if (!attributeValue || (attributeValue && !reTransformList.test(attributeValue))) {
                return matrix;
            }

            attributeValue.replace(reTransform, function(match) {

                var m = new RegExp(transform).exec(match).filter(function (match) {
                        return (match !== '' && match != null);
                    }),
                    operation = m[1],
                    args = m.slice(2).map(parseFloat);

                switch(operation) {
                    case 'translate':
                        translateMatrix(matrix, args);
                        break;
                    case 'rotate':
                        rotateMatrix(matrix, args);
                        break;
                    case 'scale':
                        scaleMatrix(matrix, args);
                        break;
                    case 'skewX':
                        skewXMatrix(matrix, args);
                        break;
                    case 'skewY':
                        skewYMatrix(matrix, args);
                        break;
                    case 'matrix':
                        matrix = args;
                        break;
                }
            });
            return matrix;
        };
    })();

    /**
     * Parses "points" attribute, returning an array of values
     * @static
     * @memberOf fabric
     * @method parsePointsAttribute
     * @param points {String} points attribute string
     * @return {Array} array of points
     */
    function parsePointsAttribute(points) {

        // points attribute is required and must not be empty
        if (!points) return null;

        points = points.trim();
        var asPairs = points.indexOf(',') > -1;

        points = points.split(/\s+/);
        var parsedPoints = [ ], i, len;

        // points could look like "10,20 30,40" or "10 20 30 40"
        if (asPairs) {
            i = 0;
            len = points.length;
            for (; i < len; i++) {
                var pair = points[i].split(',');
                parsedPoints.push({ x: parseFloat(pair[0]), y: parseFloat(pair[1]) });
            }
        }
        else {
            i = 0;
            len = points.length;
            for (; i < len; i+=2) {
                parsedPoints.push({ x: parseFloat(points[i]), y: parseFloat(points[i+1]) });
            }
        }

        // odd number of points is an error
        if (parsedPoints.length % 2 !== 0) {
            // return null;
        }

        return parsedPoints;
    }

    /**
     * Parses "style" attribute, retuning an object with values
     * @static
     * @memberOf fabric
     * @method parseStyleAttribute
     * @param {SVGElement} element Element to parse
     * @return {Object} Objects with values parsed from style attribute of an element
     */
    function parseStyleAttribute(element) {
        var oStyle = { },
            style = element.getAttribute('style');

        if (!style) return oStyle;

        if (typeof style === 'string') {
            style = style.replace(/;$/, '').split(';').forEach(function (current) {
                var attr = current.split(':');
                oStyle[normalizeAttr(attr[0].trim().toLowerCase())] = attr[1].trim();
            });
        }
        else {
            for (var prop in style) {
                if (typeof style[prop] === 'undefined') continue;
                oStyle[normalizeAttr(prop.toLowerCase())] = style[prop];
            }
        }

        return oStyle;
    }

    function resolveGradients(instances) {
        for (var i = instances.length; i--; ) {
            var instanceFillValue = instances[i].get('fill');

            if (/^url\(/.test(instanceFillValue)) {

                var gradientId = instanceFillValue.slice(5, instanceFillValue.length - 1);

                if (fabric.gradientDefs[gradientId]) {
                    instances[i].set('fill',
                                     fabric.Gradient.fromElement(fabric.gradientDefs[gradientId], instances[i]));
                }
            }
        }
    }

    /**
     * Transforms an array of svg elements to corresponding fabric.* instances
     * @static
     * @memberOf fabric
     * @method parseElements
     * @param {Array} elements Array of elements to parse
     * @param {Function} callback Being passed an array of fabric instances (transformed from SVG elements)
     * @param {Object} options Options object
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     */
    function parseElements(elements, callback, options, reviver) {
        var instances = new Array(elements.length), i = elements.length;

        function checkIfDone() {
            if (--i === 0) {
                instances = instances.filter(function(el) {
                    return el != null;
                });
                resolveGradients(instances);
                callback(instances);
            }
        }

        for (var index = 0, el, len = elements.length; index < len; index++) {
            el = elements[index];
            var klass = fabric[capitalize(el.tagName)];
            if (klass && klass.fromElement) {
                try {
                    if (klass.async) {
                        klass.fromElement(el, (function(index, el) {
                            return function(obj) {
                                reviver && reviver(el, obj);
                                instances.splice(index, 0, obj);
                                checkIfDone();
                            };
                        })(index), options);
                    }
                    else {
                        var obj = klass.fromElement(el, options);
                        reviver && reviver(el, obj);
                        instances.splice(index, 0, obj);
                        checkIfDone();
                    }
                }
                catch(e) {
                    fabric.log(e.message || e);
                }
            }
            else {
                checkIfDone();
            }
        }
    }

    /**
     * Returns CSS rules for a given SVG document
     * @static
     * @function
     * @memberOf fabric
     * @method getCSSRules
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} CSS rules of this document
     */
    function getCSSRules(doc) {
        var styles = doc.getElementsByTagName('style'),
            allRules = { },
            rules;

        // very crude parsing of style contents
        for (var i = 0, len = styles.length; i < len; i++) {
            var styleContents = styles[0].textContent;

            // remove comments
            styleContents = styleContents.replace(/\/\*[\s\S]*?\*\//g, '');

            rules = styleContents.match(/[^{]*\{[\s\S]*?\}/g);
            rules = rules.map(function(rule) { return rule.trim(); });

            rules.forEach(function(rule) {
                var match = rule.match(/([\s\S]*?)\s*\{([^}]*)\}/);
                rule = match[1];
                var declaration = match[2].trim(),
                    propertyValuePairs = declaration.replace(/;$/, '').split(/\s*;\s*/);

                if (!allRules[rule]) {
                    allRules[rule] = { };
                }

                for (var i = 0, len = propertyValuePairs.length; i < len; i++) {
                    var pair = propertyValuePairs[i].split(/\s*:\s*/),
                        property = pair[0],
                        value = pair[1];

                    allRules[rule][property] = value;
                }
            });
        }

        return allRules;
    }

    function getGlobalStylesForElement(element) {
        var nodeName = element.nodeName,
            className = element.getAttribute('class'),
            id = element.getAttribute('id'),
            styles = { };

        for (var rule in fabric.cssRules) {
            var ruleMatchesElement = (className && new RegExp('^\\.' + className).test(rule)) ||
                                     (id && new RegExp('^#' + id).test(rule)) ||
                                     (new RegExp('^' + nodeName).test(rule));

            if (ruleMatchesElement) {
                for (var property in fabric.cssRules[rule]) {
                    styles[property] = fabric.cssRules[rule][property];
                }
            }
        }

        return styles;
    }

    /**
     * Parses an SVG document, converts it to an array of corresponding fabric.* instances and passes them to a callback
     * @static
     * @function
     * @memberOf fabric
     * @method parseSVGDocument
     * @param {SVGDocument} doc SVG document to parse
     * @param {Function} callback Callback to call when parsing is finished; It's being passed an array of elements (parsed from a document).
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     */
    fabric.parseSVGDocument = (function() {

        var reAllowedSVGTagNames = /^(path|circle|polygon|polyline|ellipse|rect|line|image|text)$/;

        // http://www.w3.org/TR/SVG/coords.html#ViewBoxAttribute
        // \d doesn't quite cut it (as we need to match an actual float number)

        // matches, e.g.: +14.56e-12, etc.
        var reNum = '(?:[-+]?\\d+(?:\\.\\d+)?(?:e[-+]?\\d+)?)';

        var reViewBoxAttrValue = new RegExp(
            '^' +
            '\\s*(' + reNum + '+)\\s*,?' +
            '\\s*(' + reNum + '+)\\s*,?' +
            '\\s*(' + reNum + '+)\\s*,?' +
            '\\s*(' + reNum + '+)\\s*' +
            '$'
        );

        function hasAncestorWithNodeName(element, nodeName) {
            while (element && (element = element.parentNode)) {
                if (nodeName.test(element.nodeName)) {
                    return true;
                }
            }
            return false;
        }

        return function(doc, callback, reviver) {
            if (!doc) return;

            var startTime = new Date(),
                descendants = fabric.util.toArray(doc.getElementsByTagName('*'));

            if (descendants.length === 0) {
                // we're likely in node, where "o3-xml" library fails to gEBTN("*")
                // https://github.com/ajaxorg/node-o3-xml/issues/21
                descendants = doc.selectNodes("//*[name(.)!='svg']");
                var arr = [ ];
                for (var i = 0, len = descendants.length; i < len; i++) {
                    arr[i] = descendants[i];
                }
                descendants = arr;
            }

            var elements = descendants.filter(function(el) {
                return reAllowedSVGTagNames.test(el.tagName) &&
                       !hasAncestorWithNodeName(el, /^(?:pattern|defs)$/); // http://www.w3.org/TR/SVG/struct.html#DefsElement
            });

            if (!elements || (elements && !elements.length)) return;

            var viewBoxAttr = doc.getAttribute('viewBox'),
                widthAttr = doc.getAttribute('width'),
                heightAttr = doc.getAttribute('height'),
                width = null,
                height = null,
                minX,
                minY;

            if (viewBoxAttr && (viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue))) {
                minX = parseInt(viewBoxAttr[1], 10);
                minY = parseInt(viewBoxAttr[2], 10);
                width = parseInt(viewBoxAttr[3], 10);
                height = parseInt(viewBoxAttr[4], 10);
            }

            // values of width/height attributes overwrite those extracted from viewbox attribute
            width = widthAttr ? parseFloat(widthAttr) : width;
            height = heightAttr ? parseFloat(heightAttr) : height;

            var options = {
                width: width,
                height: height
            };

            fabric.gradientDefs = fabric.getGradientDefs(doc);
            fabric.cssRules = getCSSRules(doc);

            // Precedence of rules:   style > class > attribute

            fabric.parseElements(elements, function(instances) {
                fabric.documentParsingTime = new Date() - startTime;
                if (callback) {
                    callback(instances, options);
                }
            }, clone(options), reviver);
        };
    })();

    /**
     * Used for caching SVG documents (loaded via `fabric.Canvas#loadSVGFromURL`)
     * @property
     * @namespace
     */
    var svgCache = {

        /**
         * @method has
         * @param {String} name
         * @param {Function} callback
         */
        has: function (name, callback) {
            callback(false);
        },

        /**
         * @method get
         * @param {String} url
         * @param {Function} callback
         */
        get: function () {
            /* NOOP */
        },

        /**
         * @method set
         * @param {String} url
         * @param {Object} object
         */
        set: function () {
            /* NOOP */
        }
    };

    /**
     * Takes url corresponding to an SVG document, and parses it into a set of fabric objects
     * @method loadSVGFromURL
     * @param {String} url
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     */
    function loadSVGFromURL(url, callback, reviver) {

        url = url.replace(/^\n\s*/, '').trim();

        svgCache.has(url, function (hasUrl) {
            if (hasUrl) {
                svgCache.get(url, function (value) {
                    var enlivedRecord = _enlivenCachedObject(value);
                    callback(enlivedRecord.objects, enlivedRecord.options);
                });
            }
            else {
                new fabric.util.request(url, {
                    method: 'get',
                    onComplete: onComplete
                });
            }
        });

        function onComplete(r) {

            var xml = r.responseXML;
            if (!xml.documentElement && fabric.window.ActiveXObject && r.responseText) {
                xml = new ActiveXObject('Microsoft.XMLDOM');
                xml.async = 'false';
                //IE chokes on DOCTYPE
                xml.loadXML(r.responseText.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i,''));
            }
            if (!xml.documentElement) return;

            fabric.parseSVGDocument(xml.documentElement, function (results, options) {
                svgCache.set(url, {
                    objects: fabric.util.array.invoke(results, 'toObject'),
                    options: options
                });
                callback(results, options);
            }, reviver);
        }
    }

    /**
     * @method _enlivenCachedObject
     */
    function _enlivenCachedObject(cachedObject) {

        var objects = cachedObject.objects,
            options = cachedObject.options;

        objects = objects.map(function (o) {
            return fabric[capitalize(o.type)].fromObject(o);
        });

        return ({ objects: objects, options: options });
    }

    /**
     * Takes string corresponding to an SVG document, and parses it into a set of fabric objects
     * @method loadSVGFromString
     * @param {String} string
     * @param {Function} callback
     * @param {Function} [reviver] Method for further parsing of SVG elements, called after each fabric object created.
     */
    function loadSVGFromString(string, callback, reviver) {
        string = string.trim();
        var doc;
        if (typeof DOMParser !== 'undefined') {
            var parser = new DOMParser();
            if (parser && parser.parseFromString) {
                doc = parser.parseFromString(string, 'text/xml');
            }
        }
        else if (fabric.window.ActiveXObject) {
            doc = new ActiveXObject('Microsoft.XMLDOM');
            doc.async = 'false';
            //IE chokes on DOCTYPE
            doc.loadXML(string.replace(/<!DOCTYPE[\s\S]*?(\[[\s\S]*\])*?>/i,''));
        }

        fabric.parseSVGDocument(doc.documentElement, function (results, options) {
            callback(results, options);
        }, reviver);
    }

    function createSVGFontFacesMarkup(objects) {
        var markup = '';

        for (var i = 0, len = objects.length; i < len; i++) {
            if (objects[i].type !== 'text' || !objects[i].path) continue;

            markup += [
                '@font-face {',
                'font-family: ', objects[i].fontFamily, '; ',
                'src: url(\'', objects[i].path, '\')',
                '}'
            ].join('');
        }

        if (markup) {
            markup = [
                '<defs>',
                '<style type="text/css">',
                '<![CDATA[',
                markup,
                ']]>',
                '</style>',
                '</defs>'
            ].join('');
        }

        return markup;
    }

    extend(fabric, {

        parseAttributes:          parseAttributes,
        parseElements:            parseElements,
        parseStyleAttribute:      parseStyleAttribute,
        parsePointsAttribute:     parsePointsAttribute,
        getCSSRules:              getCSSRules,

        loadSVGFromURL:           loadSVGFromURL,
        loadSVGFromString:        loadSVGFromString,

        createSVGFontFacesMarkup: createSVGFontFacesMarkup
    });

})(typeof exports !== 'undefined' ? exports : this);

(function() {

    function getColorStopFromStyle(el) {
        var style = el.getAttribute('style');

        if (style) {
            var keyValuePairs = style.split(/\s*;\s*/);

            if (keyValuePairs[keyValuePairs.length-1] === '') {
                keyValuePairs.pop();
            }

            for (var i = keyValuePairs.length; i--; ) {

                var split = keyValuePairs[i].split(/\s*:\s*/),
                    key = split[0].trim(),
                    value = split[1].trim();

                if (key === 'stop-color') {
                    return value;
                }
            }
        }
    }

    /**
     * @class Object
     * @memberOf fabric
     */
    fabric.Gradient = fabric.util.createClass(/** @scope fabric.Gradient.prototype */ {

                                                                                          initialize: function(options) {

                                                                                              options || (options = { });

                                                                                              this.x1 = options.x1 || 0;
                                                                                              this.y1 = options.y1 || 0;
                                                                                              this.x2 = options.x2 || 0;
                                                                                              this.y2 = options.y2 || 0;

                                                                                              this.colorStops = options.colorStops;
                                                                                          },

                                                                                          toObject: function() {
                                                                                              return {
                                                                                                  x1: this.x1,
                                                                                                  x2: this.x2,
                                                                                                  y1: this.y1,
                                                                                                  y2: this.y2,
                                                                                                  colorStops: this.colorStops
                                                                                              };
                                                                                          },

                                                                                          toLiveGradient: function(ctx) {
                                                                                              var gradient = ctx.createLinearGradient(
                                                                                                  this.x1, this.y1, this.x2 || ctx.canvas.width, this.y2);

                                                                                              for (var position in this.colorStops) {
                                                                                                  var colorValue = this.colorStops[position];
                                                                                                  gradient.addColorStop(parseFloat(position), colorValue);
                                                                                              }

                                                                                              return gradient;
                                                                                          }
                                                                                      });

    fabric.util.object.extend(fabric.Gradient, {

        /**
         * @method fromElement
         * @static
         * @see http://www.w3.org/TR/SVG/pservers.html#LinearGradientElement
         */
        fromElement: function(el, instance) {

            /**
             *  @example:
             *
             *  <linearGradient id="grad1">
             *    <stop offset="0%" stop-color="white"/>
             *    <stop offset="100%" stop-color="black"/>
             *  </linearGradient>
             *
             *  OR
             *
             *  <linearGradient id="grad1">
             *    <stop offset="0%" style="stop-color:rgb(255,255,255)"/>
             *    <stop offset="100%" style="stop-color:rgb(0,0,0)"/>
             *  </linearGradient>
             *
             */

            var colorStopEls = el.getElementsByTagName('stop'),
                offset,
                colorStops = { },
                coords = {
                    x1: el.getAttribute('x1') || 0,
                    y1: el.getAttribute('y1') || 0,
                    x2: el.getAttribute('x2') || '100%',
                    y2: el.getAttribute('y2') || 0
                };

            for (var i = colorStopEls.length; i--; ) {
                el = colorStopEls[i];
                offset = el.getAttribute('offset');

                // convert percents to absolute values
                offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);
                colorStops[offset] = getColorStopFromStyle(el) || el.getAttribute('stop-color');
            }

            _convertPercentUnitsToValues(instance, coords);

            return new fabric.Gradient({
                                           x1: coords.x1,
                                           y1: coords.y1,
                                           x2: coords.x2,
                                           y2: coords.y2,
                                           colorStops: colorStops
                                       });
        },

        /**
         * @method forObject
         * @static
         */
        forObject: function(obj, options) {
            options || (options = { });
            _convertPercentUnitsToValues(obj, options);
            return new fabric.Gradient(options);
        }
    });

    function _convertPercentUnitsToValues(object, options) {
        for (var prop in options) {
            if (typeof options[prop] === 'string' && /^\d+%$/.test(options[prop])) {
                var percents = parseFloat(options[prop], 10);
                if (prop === 'x1' || prop === 'x2') {
                    options[prop] = object.width * percents / 100;
                }
                else if (prop === 'y1' || prop === 'y2') {
                    options[prop] = object.height * percents / 100;
                }
            }
            // normalize rendering point (should be from top/left corner rather than center of the shape)
            if (prop === 'x1' || prop === 'x2') {
                options[prop] -= object.width / 2;
            }
            else if (prop === 'y1' || prop === 'y2') {
                options[prop] -= object.height / 2;
            }
        }
    }

    /**
     * Parses an SVG document, returning all of the gradient declarations found in it
     * @static
     * @function
     * @memberOf fabric
     * @method getGradientDefs
     * @param {SVGDocument} doc SVG document to parse
     * @return {Object} Gradient definitions; key corresponds to element id, value -- to gradient definition element
     */
    function getGradientDefs(doc) {
        var linearGradientEls = doc.getElementsByTagName('linearGradient'),
            radialGradientEls = doc.getElementsByTagName('radialGradient'),
            el, i,
            gradientDefs = { };

        i = linearGradientEls.length;
        for (; i--; ) {
            el = linearGradientEls[i];
            gradientDefs[el.getAttribute('id')] = el;
        }

        i = radialGradientEls.length;
        for (; i--; ) {
            el = radialGradientEls[i];
            gradientDefs[el.getAttribute('id')] = el;
        }

        return gradientDefs;
    }

    fabric.getGradientDefs = getGradientDefs;

})();
(function(global) {

    "use strict";

    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */

    var fabric = global.fabric || (global.fabric = { });

    if (fabric.Point) {
        fabric.warn('fabric.Point is already defined');
        return;
    }

    fabric.Point = Point;

    /**
     * @name Point
     * @memberOf fabric
     * @constructor
     * @param {Number} x
     * @param {Number} y
     * @return {fabric.Point} thisArg
     */
    function Point(x, y) {
        if (arguments.length > 0) {
            this.init(x, y);
        }
    }

    Point.prototype = /** @scope fabric.Point.prototype */ {

        constructor: Point,

        /**
         * @method init
         * @param {Number} x
         * @param {Number} y
         */
        init: function (x, y) {
            this.x = x;
            this.y = y;
        },

        /**
         * @method add
         * @param {fabric.Point} that
         * @return {fabric.Point} new Point instance with added values
         */
        add: function (that) {
            return new Point(this.x + that.x, this.y + that.y);
        },

        /**
         * @method addEquals
         * @param {fabric.Point} that
         * @return {fabric.Point} thisArg
         */
        addEquals: function (that) {
            this.x += that.x;
            this.y += that.y;
            return this;
        },

        /**
         * @method scalarAdd
         * @param {Number} scalar
         * @return {fabric.Point} new Point with added value
         */
        scalarAdd: function (scalar) {
            return new Point(this.x + scalar, this.y + scalar);
        },

        /**
         * @method scalarAddEquals
         * @param {Number} scalar
         * @param {fabric.Point} thisArg
         */
        scalarAddEquals: function (scalar) {
            this.x += scalar;
            this.y += scalar;
            return this;
        },

        /**
         * @method subtract
         * @param {fabric.Point} that
         * @return {fabric.Point} new Point object with subtracted values
         */
        subtract: function (that) {
            return new Point(this.x - that.x, this.y - that.y);
        },

        /**
         * @method subtractEquals
         * @param {fabric.Point} that
         * @return {fabric.Point} thisArg
         */
        subtractEquals: function (that) {
            this.x -= that.x;
            this.y -= that.y;
            return this;
        },

        scalarSubtract: function (scalar) {
            return new Point(this.x - scalar, this.y - scalar);
        },

        scalarSubtractEquals: function (scalar) {
            this.x -= scalar;
            this.y -= scalar;
            return this;
        },

        multiply: function (scalar) {
            return new Point(this.x * scalar, this.y * scalar);
        },

        multiplyEquals: function (scalar) {
            this.x *= scalar;
            this.y *= scalar;
            return this;
        },

        divide: function (scalar) {
            return new Point(this.x / scalar, this.y / scalar);
        },

        divideEquals: function (scalar) {
            this.x /= scalar;
            this.y /= scalar;
            return this;
        },

        eq: function (that) {
            return (this.x === that.x && this.y === that.y);
        },

        lt: function (that) {
            return (this.x < that.x && this.y < that.y);
        },

        lte: function (that) {
            return (this.x <= that.x && this.y <= that.y);
        },

        gt: function (that) {
            return (this.x > that.x && this.y > that.y);
        },

        gte: function (that) {
            return (this.x >= that.x && this.y >= that.y);
        },

        lerp: function (that, t) {
            return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);
        },

        distanceFrom: function (that) {
            var dx = this.x - that.x,
                dy = this.y - that.y;
            return Math.sqrt(dx * dx + dy * dy);
        },

        min: function (that) {
            return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));
        },

        max: function (that) {
            return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));
        },

        toString: function () {
            return this.x + "," + this.y;
        },

        setXY: function (x, y) {
            this.x = x;
            this.y = y;
        },

        setFromPoint: function (that) {
            this.x = that.x;
            this.y = that.y;
        },

        swap: function (that) {
            var x = this.x,
                y = this.y;
            this.x = that.x;
            this.y = that.y;
            that.x = x;
            that.y = y;
        }
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    /* Adaptation of work of Kevin Lindsey (kevin@kevlindev.com) */

    var fabric = global.fabric || (global.fabric = { });

    if (fabric.Intersection) {
        fabric.warn('fabric.Intersection is already defined');
        return;
    }

    /**
     * @class Intersection
     * @memberOf fabric
     */
    function Intersection(status) {
        if (arguments.length > 0) {
            this.init(status);
        }
    }

    fabric.Intersection = Intersection;

    fabric.Intersection.prototype = /** @scope fabric.Intersection.prototype */ {

        /**
         * @method init
         * @param {String} status
         */
        init: function (status) {
            this.status = status;
            this.points = [];
        },

        /**
         * @method appendPoint
         * @param {String} status
         */
        appendPoint: function (point) {
            this.points.push(point);
        },

        /**
         * @method appendPoints
         * @param {String} status
         */
        appendPoints: function (points) {
            this.points = this.points.concat(points);
        }
    };

    /**
     * @static
     * @method intersectLineLine
     */
    fabric.Intersection.intersectLineLine = function (a1, a2, b1, b2) {
        var result,
            ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x),
            ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x),
            u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
        if (u_b !== 0) {
            var ua = ua_t / u_b,
                ub = ub_t / u_b;
            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
                result = new Intersection("Intersection");
                result.points.push(new fabric.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));
            }
            else {
                result = new Intersection("No Intersection");
            }
        }
        else {
            if (ua_t === 0 || ub_t === 0) {
                result = new Intersection("Coincident");
            }
            else {
                result = new Intersection("Parallel");
            }
        }
        return result;
    };

    /**
     * @method intersectLinePolygon
     */
    fabric.Intersection.intersectLinePolygon = function(a1,a2,points){
        var result = new Intersection("No Intersection"),
            length = points.length;

        for (var i = 0; i < length; i++) {
            var b1 = points[i],
                b2 = points[(i+1) % length],
                inter = Intersection.intersectLineLine(a1, a2, b1, b2);

            result.appendPoints(inter.points);
        }
        if (result.points.length > 0) {
            result.status = "Intersection";
        }
        return result;
    };

    /**
     * @method intersectPolygonPolygon
     */
    fabric.Intersection.intersectPolygonPolygon = function (points1, points2) {
        var result = new Intersection("No Intersection"),
            length = points1.length;

        for (var i = 0; i < length; i++) {
            var a1 = points1[i],
                a2 = points1[(i+1) % length],
                inter = Intersection.intersectLinePolygon(a1, a2, points2);

            result.appendPoints(inter.points);
        }
        if (result.points.length > 0) {
            result.status = "Intersection";
        }
        return result;
    };

    /**
     * @method intersectPolygonRectangle
     */
    fabric.Intersection.intersectPolygonRectangle = function (points, r1, r2) {
        var min = r1.min(r2),
            max = r1.max(r2),
            topRight = new fabric.Point(max.x, min.y),
            bottomLeft = new fabric.Point(min.x, max.y),
            inter1 = Intersection.intersectLinePolygon(min, topRight, points),
            inter2 = Intersection.intersectLinePolygon(topRight, max, points),
            inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points),
            inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points),
            result = new Intersection("No Intersection");

        result.appendPoints(inter1.points);
        result.appendPoints(inter2.points);
        result.appendPoints(inter3.points);
        result.appendPoints(inter4.points);
        if (result.points.length > 0) {
            result.status="Intersection";
        }
        return result;
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { });

    if (fabric.Color) {
        fabric.warn('fabric.Color is already defined.');
        return;
    }

    /**
     * The purpose of {@link fabric.Color} is to abstract and encapsulate common color operations;
     * {@link fabric.Color} is a constructor and creates instances of {@link fabric.Color} objects.
     *
     * @class Color
     * @memberOf fabric
     * @param {String} color (optional) in hex or rgb(a) format
     */
    function Color(color) {
        if (!color) {
            this.setSource([0, 0, 0, 1]);
        }
        else {
            this._tryParsingColor(color);
        }
    }

    fabric.Color = Color;

    fabric.Color.prototype = /** @scope fabric.Color.prototype */ {

        /**
         * @private
         * @method _tryParsingColor
         */
        _tryParsingColor: function(color) {
            var source = Color.sourceFromHex(color);
            if (!source) {
                source = Color.sourceFromRgb(color);
            }
            if (source) {
                this.setSource(source);
            }
        },

        /**
         * Returns source of this color (where source is an array representation; ex: [200, 200, 100, 1])
         * @method getSource
         * @return {Array}
         */
        getSource: function() {
            return this._source;
        },

        /**
         * Sets source of this color (where source is an array representation; ex: [200, 200, 100, 1])
         * @method setSource
         * @param {Array} source
         */
        setSource: function(source) {
            this._source = source;
        },

        /**
         * Returns color represenation in RGB format
         * @method toRgb
         * @return {String} ex: rgb(0-255,0-255,0-255)
         */
        toRgb: function() {
            var source = this.getSource();
            return 'rgb(' + source[0] + ',' + source[1] + ',' + source[2] + ')';
        },

        /**
         * Returns color represenation in RGBA format
         * @method toRgba
         * @return {String} ex: rgba(0-255,0-255,0-255,0-1)
         */
        toRgba: function() {
            var source = this.getSource();
            return 'rgba(' + source[0] + ',' + source[1] + ',' + source[2] + ',' + source[3] + ')';
        },

        /**
         * Returns color represenation in HEX format
         * @method toHex
         * @return {String} ex: FF5555
         */
        toHex: function() {
            var source = this.getSource();

            var r = source[0].toString(16);
            r = (r.length === 1) ? ('0' + r) : r;

            var g = source[1].toString(16);
            g = (g.length === 1) ? ('0' + g) : g;

            var b = source[2].toString(16);
            b = (b.length === 1) ? ('0' + b) : b;

            return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();
        },

        /**
         * Gets value of alpha channel for this color
         * @method getAlpha
         * @return {Number} 0-1
         */
        getAlpha: function() {
            return this.getSource()[3];
        },

        /**
         * Sets value of alpha channel for this color
         * @method setAlpha
         * @param {Number} 0-1
         * @return {fabric.Color} thisArg
         */
        setAlpha: function(alpha) {
            var source = this.getSource();
            source[3] = alpha;
            this.setSource(source);
            return this;
        },

        /**
         * Transforms color to its grayscale representation
         * @method toGrayscale
         * @return {fabric.Color} thisArg
         */
        toGrayscale: function() {
            var source = this.getSource(),
                average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10),
                currentAlpha = source[3];
            this.setSource([average, average, average, currentAlpha]);
            return this;
        },

        /**
         * Transforms color to its black and white representation
         * @method toGrayscale
         * @return {fabric.Color} thisArg
         */
        toBlackWhite: function(threshold) {
            var source = this.getSource(),
                average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0),
                currentAlpha = source[3];

            threshold = threshold || 127;

            average = (Number(average) < Number(threshold)) ? 0 : 255;
            this.setSource([average, average, average, currentAlpha]);
            return this;
        },

        /**
         * Overlays color with another color
         * @method overlayWith
         * @param {String|fabric.Color} otherColor
         * @return {fabric.Color} thisArg
         */
        overlayWith: function(otherColor) {
            if (!(otherColor instanceof Color)) {
                otherColor = new Color(otherColor);
            }

            var result = [],
                alpha = this.getAlpha(),
                otherAlpha = 0.5,
                source = this.getSource(),
                otherSource = otherColor.getSource();

            for (var i = 0; i < 3; i++) {
                result.push(Math.round((source[i] * (1 - otherAlpha)) + (otherSource[i] * otherAlpha)));
            }

            result[3] = alpha;
            this.setSource(result);
            return this;
        }
    };

    /**
     * Regex matching color in RGB or RGBA formats (ex: rgb(0, 0, 0), rgb(255, 100, 10, 0.5), rgb(1,1,1))
     * @static
     * @field
     */
    fabric.Color.reRGBa = /^rgba?\((\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})(?:\s*,\s*(\d+(?:\.\d+)?))?\)$/;

    /**
     * Regex matching color in HEX format (ex: #FF5555, 010155, aff)
     * @static
     * @field
     */
    fabric.Color.reHex = /^#?([0-9a-f]{6}|[0-9a-f]{3})$/i;

    /**
     * Returns new color object, when given a color in RGB format
     * @method fromRgb
     * @param {String} color ex: rgb(0-255,0-255,0-255)
     * @return {fabric.Color}
     */
    fabric.Color.fromRgb = function(color) {
        return Color.fromSource(Color.sourceFromRgb(color));
    };

    /**
     * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in RGB or RGBA format
     * @method sourceFromRgb
     * @param {String} color ex: rgb(0-255,0-255,0-255)
     * @return {Array} source
     */
    fabric.Color.sourceFromRgb = function(color) {
        var match = color.match(Color.reRGBa);
        if (match) {
            return [
                parseInt(match[1], 10),
                parseInt(match[2], 10),
                parseInt(match[3], 10),
                match[4] ? parseFloat(match[4]) : 1
            ];
        }
    };

    /**
     * Returns new color object, when given a color in RGBA format
     * @static
     * @function
     * @method fromRgba
     * @param {String} color
     * @return {fabric.Color}
     */
    fabric.Color.fromRgba = Color.fromRgb;

    /**
     * Returns new color object, when given a color in HEX format
     * @static
     * @method fromHex
     * @return {fabric.Color}
     */
    fabric.Color.fromHex = function(color) {
        return Color.fromSource(Color.sourceFromHex(color));
    };

    /**
     * Returns array represenatation (ex: [100, 100, 200, 1]) of a color that's in HEX format
     * @static
     * @method sourceFromHex
     * @param {String} color ex: FF5555
     * @return {Array} source
     */
    fabric.Color.sourceFromHex = function(color) {
        if (color.match(Color.reHex)) {
            var value = color.slice(color.indexOf('#') + 1),
                isShortNotation = (value.length === 3),
                r = isShortNotation ? (value.charAt(0) + value.charAt(0)) : value.substring(0, 2),
                g = isShortNotation ? (value.charAt(1) + value.charAt(1)) : value.substring(2, 4),
                b = isShortNotation ? (value.charAt(2) + value.charAt(2)) : value.substring(4, 6);

            return [
                parseInt(r, 16),
                parseInt(g, 16),
                parseInt(b, 16),
                1
            ];
        }
    };

    /**
     * Returns new color object, when given color in array representation (ex: [200, 100, 100, 0.5])
     * @static
     * @method fromSource
     * @return {fabric.Color}
     */
    fabric.Color.fromSource = function(source) {
        var oColor = new Color();
        oColor.setSource(source);
        return oColor;
    };

})(typeof exports !== 'undefined' ? exports : this);
(function () {

    "use strict";

    if (fabric.StaticCanvas) {
        fabric.warn('fabric.StaticCanvas is already defined.');
        return;
    }

    // aliases for faster resolution
    var extend = fabric.util.object.extend,
        getElementOffset = fabric.util.getElementOffset,
        removeFromArray = fabric.util.removeFromArray,
        removeListener = fabric.util.removeListener,

        CANVAS_INIT_ERROR = new Error('Could not initialize `canvas` element');

    /**
     * @class fabric.StaticCanvas
     * @constructor
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     */
    fabric.StaticCanvas = function (el, options) {
        options || (options = { });

        this._initStatic(el, options);
        fabric.StaticCanvas.activeInstance = this;
    };

    extend(fabric.StaticCanvas.prototype, fabric.Observable);

    extend(fabric.StaticCanvas.prototype, /** @scope fabric.StaticCanvas.prototype */ {

        /**
         * Background color of canvas instance
         * @property
         * @type String
         */
        backgroundColor: 'rgba(0, 0, 0, 0)',

        /**
         * Background image of canvas instance
         * Should be set via `setBackgroundImage`
         * @property
         * @type String
         */
        backgroundImage: '',

        /**
         * Opacity of the background image of the canvas instance
         * @property
         * @type Float
         */
        backgroundImageOpacity: 1.0,

        /**
         * Indicatus whether the background image should be stretched to fit the
         * dimensions of the canvas instance.
         * @property
         * @type Boolean
         */
        backgroundImageStretch: true,

        /**
         * Overlay image of canvas instance
         * Should be set via `setOverlayImage`
         * @property
         * @type String
         */
        overlayImage: '',

        /**
         * Left offset of overlay image (if present)
         * @property
         * @type Number
         */
        overlayImageLeft: 0,

        /**
         * Top offset of overlay image (if present)
         * @property
         * @type Number
         */
        overlayImageTop: 0,

        /**
         * Indicates whether toObject/toDatalessObject should include default values
         * @property
         * @type Boolean
         */
        includeDefaultValues: true,

        /**
         * Indicates whether objects' state should be saved
         * @property
         * @type Boolean
         */
        stateful: true,

        /**
         * Indicates whether fabric.Canvas#add should also re-render canvas.
         * Disabling this option could give a great performance boost when adding a lot of objects to canvas at once
         * (followed by a manual rendering after addition)
         */
        renderOnAddition: true,

        /**
         * Function that determines clipping of entire canvas area
         * Being passed context as first argument. See clipping canvas area in https://github.com/kangax/fabric.js/wiki/FAQ
         * @property
         * @type Function
         */
        clipTo: null,

        /**
         * Indicates whether object controls (borders/corners) are rendered above overlay image
         * @property
         * @type Boolean
         */
        controlsAboveOverlay: false,

        /**
         * Callback; invoked right before object is about to be scaled/rotated
         * @method onBeforeScaleRotate
         * @param {fabric.Object} target Object that's about to be scaled/rotated
         */
        onBeforeScaleRotate: function () {
            /* NOOP */
        },

        _initStatic: function(el, options) {
            this._objects = [];

            this._createLowerCanvas(el);
            this._initOptions(options);

            if (options.overlayImage) {
                this.setOverlayImage(options.overlayImage, this.renderAll.bind(this));
            }
            if (options.backgroundImage) {
                this.setBackgroundImage(options.backgroundImage, this.renderAll.bind(this));
            }
            this.calcOffset();
        },

        /**
         * Calculates canvas element offset relative to the document
         * This method is also attached as "resize" event handler of window
         * @method calcOffset
         * @return {fabric.Canvas} instance
         * @chainable
         */
        calcOffset: function () {
            this._offset = getElementOffset(this.lowerCanvasEl);
            return this;
        },

        /**
         * Sets overlay image for this canvas
         * @method setOverlayImage
         * @param {String} url url of an image to set overlay to
         * @param {Function} callback callback to invoke when image is loaded and set as an overlay
         * @param {Object} options optional options to set for the overlay image
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        setOverlayImage: function (url, callback, options) { // TODO (kangax): test callback
            fabric.util.loadImage(url, function(img) {
                this.overlayImage = img;
                if (options && ('overlayImageLeft' in options)) {
                    this.overlayImageLeft = options.overlayImageLeft;
                }
                if (options && ('overlayImageTop' in options)) {
                    this.overlayImageTop = options.overlayImageTop;
                }
                callback && callback();
            }, this);

            return this;
        },

        /**
         * Sets background image for this canvas
         * @method setBackgroundImage
         * @param {String} url url of an image to set background to
         * @param {Function} callback callback to invoke when image is loaded and set as background
         * @param {Object} options optional options to set for the background image
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        setBackgroundImage: function (url, callback, options) {
            fabric.util.loadImage(url, function(img) {
                this.backgroundImage = img;
                if (options && ('backgroundImageOpacity' in options)) {
                    this.backgroundImageOpacity = options.backgroundImageOpacity;
                }
                if (options && ('backgroundImageStretch' in options)) {
                    this.backgroundImageStretch = options.backgroundImageStretch;
                }
                callback && callback();
            }, this);

            return this;
        },

        /**
         * @private
         * @method _createCanvasElement
         * @param {Element} element
         */
        _createCanvasElement: function() {
            var element = fabric.document.createElement('canvas');
            if (!element.style) {
                element.style = { };
            }
            if (!element) {
                throw CANVAS_INIT_ERROR;
            }
            this._initCanvasElement(element);
            return element;
        },

        _initCanvasElement: function(element) {
            if (typeof element.getContext === 'undefined' &&
                typeof G_vmlCanvasManager !== 'undefined' &&
                G_vmlCanvasManager.initElement) {

                G_vmlCanvasManager.initElement(element);
            }
            if (typeof element.getContext === 'undefined') {
                throw CANVAS_INIT_ERROR;
            }
        },

        /**
         * @method _initOptions
         * @param {Object} options
         */
        _initOptions: function (options) {
            for (var prop in options) {
                this[prop] = options[prop];
            }

            this.width = parseInt(this.lowerCanvasEl.width, 10) || 0;
            this.height = parseInt(this.lowerCanvasEl.height, 10) || 0;

            if (!this.lowerCanvasEl.style) return;

            this.lowerCanvasEl.style.width = this.width + 'px';
            this.lowerCanvasEl.style.height = this.height + 'px';
        },

        /**
         * Creates a secondary canvas
         * @method _createLowerCanvas
         */
        _createLowerCanvas: function (canvasEl) {
            this.lowerCanvasEl = fabric.util.getById(canvasEl) || this._createCanvasElement();
            this._initCanvasElement(this.lowerCanvasEl);

            fabric.util.addClass(this.lowerCanvasEl, 'lower-canvas');

            if (this.interactive) {
                this._applyCanvasStyle(this.lowerCanvasEl);
            }

            this.contextContainer = this.lowerCanvasEl.getContext('2d');
        },

        /**
         * Returns canvas width
         * @method getWidth
         * @return {Number}
         */
        getWidth: function () {
            return this.width;
        },

        /**
         * Returns canvas height
         * @method getHeight
         * @return {Number}
         */
        getHeight: function () {
            return this.height;
        },

        /**
         * Sets width of this canvas instance
         * @method setWidth
         * @param {Number} width value to set width to
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        setWidth: function (value) {
            return this._setDimension('width', value);
        },

        /**
         * Sets height of this canvas instance
         * @method setHeight
         * @param {Number} height value to set height to
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        setHeight: function (value) {
            return this._setDimension('height', value);
        },

        /**
         * Sets dimensions (width, height) of this canvas instance
         * @method setDimensions
         * @param {Object} dimensions
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        setDimensions: function(dimensions) {
            for (var prop in dimensions) {
                this._setDimension(prop, dimensions[prop]);
            }
            return this;
        },

        /**
         * Helper for setting width/height
         * @private
         * @method _setDimensions
         * @param {String} prop property (width|height)
         * @param {Number} value value to set property to
         * @return {fabric.Canvas} instance
         * @chainable true
         */
        _setDimension: function (prop, value) {
            this.lowerCanvasEl[prop] = value;
            this.lowerCanvasEl.style[prop] = value + 'px';

            if (this.upperCanvasEl) {
                this.upperCanvasEl[prop] = value;
                this.upperCanvasEl.style[prop] = value + 'px';
            }

            if (this.cacheCanvasEl) {
                this.cacheCanvasEl[prop] = value;
            }

            if (this.wrapperEl) {
                this.wrapperEl.style[prop] = value + 'px';
            }

            this[prop] = value;

            this.calcOffset();
            this.renderAll();

            return this;
        },

        /**
         * Returns &lt;canvas> element corresponding to this instance
         * @method getElement
         * @return {HTMLCanvasElement}
         */
        getElement: function () {
            return this.lowerCanvasEl;
        },

        // placeholder
        getActiveObject: function() {
            return null;
        },

        // placeholder
        getActiveGroup: function() {
            return null;
        },

        /**
         * Given a context, renders an object on that context
         * @param ctx {Object} context to render object on
         * @param object {Object} object to render
         * @private
         */
        _draw: function (ctx, object) {
            if (!object) return;

            if (this.controlsAboveOverlay) {
                var hasBorders = object.hasBorders, hasCorners = object.hasCorners;
                object.hasBorders = object.hasCorners = false;
                object.render(ctx);
                object.hasBorders = hasBorders;
                object.hasCorners = hasCorners;
            }
            else {
                object.render(ctx);
            }
        },

        /**
         * Adds objects to canvas, then renders canvas;
         * Objects should be instances of (or inherit from) fabric.Object
         * @method add
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        add: function () {
            this._objects.push.apply(this._objects, arguments);
            for (var i = arguments.length; i--; ) {
                this._initObject(arguments[i]);
            }
            this.renderOnAddition && this.renderAll();
            return this;
        },

        /**
         * @private
         * @method _initObject
         */
        _initObject: function(obj) {
            this.stateful && obj.setupState();
            obj.setCoords();
            obj.canvas = this;
            this.fire('object:added', { target: obj });
            obj.fire('added');
        },

        /**
         * Inserts an object to canvas at specified index and renders canvas.
         * An object should be an instance of (or inherit from) fabric.Object
         * @method insertAt
         * @param object {Object} Object to insert
         * @param index {Number} index to insert object at
         * @param nonSplicing {Boolean} when `true`, no splicing (shifting) of objects occurs
         * @return {fabric.Canvas} instance
         */
        insertAt: function (object, index, nonSplicing) {
            if (nonSplicing) {
                this._objects[index] = object;
            }
            else {
                this._objects.splice(index, 0, object);
            }
            this._initObject(object);
            this.renderOnAddition && this.renderAll();
            return this;
        },

        /**
         * Returns an array of objects this instance has
         * @method getObjects
         * @return {Array}
         */
        getObjects: function () {
            return this._objects;
        },

        /**
         * Clears specified context of canvas element
         * @method clearContext
         * @param context {Object} ctx context to clear
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        clearContext: function(ctx) {
            ctx.clearRect(0, 0, this.width, this.height);
            return this;
        },

        /**
         * Returns context of canvas where objects are drawn
         * @method getContext
         * @return {CanvasRenderingContext2D}
         */
        getContext: function () {
            return this.contextContainer;
        },

        /**
         * Clears all contexts (background, main, top) of an instance
         * @method clear
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        clear: function () {
            this._objects.length = 0;
            this.clearContext(this.contextContainer);
            if (this.contextTop) {
                this.clearContext(this.contextTop);
            }
            this.renderAll();
            return this;
        },

        /**
         * Renders both the top canvas and the secondary container canvas.
         * @method renderAll
         * @param allOnTop {Boolean} optional Whether we want to force all images to be rendered on the top canvas
         * @return {fabric.Canvas} instance
         * @chainable
         */
        renderAll: function (allOnTop) {

            var canvasToDrawOn = this[(allOnTop === true && this.interactive) ? 'contextTop' : 'contextContainer'];

            if (this.contextTop) {
                this.clearContext(this.contextTop);
            }

            if (!allOnTop) {
                this.clearContext(canvasToDrawOn);
            }

            var activeGroup = this.getActiveGroup();

            if (this.clipTo) {
                this._clipCanvas(canvasToDrawOn);
            }

            canvasToDrawOn.fillStyle = this.backgroundColor;
            canvasToDrawOn.fillRect(0, 0, this.width, this.height);

            if (typeof this.backgroundImage === 'object') {
                this._drawBackroundImage(canvasToDrawOn);
            }

            this.fire('before:render');

            for (var i = 0, length = this._objects.length; i < length; ++i) {
                if (!activeGroup ||
                    (activeGroup && this._objects[i] && !activeGroup.contains(this._objects[i]))) {
                    this._draw(canvasToDrawOn, this._objects[i]);
                }
            }

            // delegate rendering to group selection (if one exists)
            if (activeGroup) {
                //Store objects in group preserving order, then replace
                var sortedObjects = [];
                this.forEachObject(function (object) {
                    if (activeGroup.contains(object)) {
                        sortedObjects.push(object);
                    }
                });
                activeGroup._set('objects', sortedObjects);
                this._draw(canvasToDrawOn, activeGroup);
            }

            if (this.clipTo) {
                canvasToDrawOn.restore();
            }

            if (this.overlayImage) {
                canvasToDrawOn.drawImage(this.overlayImage, this.overlayImageLeft, this.overlayImageTop);
            }

            if (this.controlsAboveOverlay) {
                this.drawControls(canvasToDrawOn);
            }

            this.fire('after:render');

            return this;
        },

        _clipCanvas: function(canvasToDrawOn) {
            canvasToDrawOn.save();
            canvasToDrawOn.beginPath();
            this.clipTo(canvasToDrawOn);
            canvasToDrawOn.clip();
        },

        _drawBackroundImage: function(canvasToDrawOn) {
            canvasToDrawOn.save();
            canvasToDrawOn.globalAlpha = this.backgroundImageOpacity;

            if (this.backgroundImageStretch) {
                canvasToDrawOn.drawImage(this.backgroundImage, 0, 0, this.width, this.height);
            }
            else {
                canvasToDrawOn.drawImage(this.backgroundImage, 0, 0);
            }
            canvasToDrawOn.restore();
        },

        /**
         * Method to render only the top canvas.
         * Also used to render the group selection box.
         * @method renderTop
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        renderTop: function () {
            var ctx = this.contextTop || this.contextContainer;
            this.clearContext(ctx);

            // we render the top context - last object
            if (this.selection && this._groupSelector) {
                this._drawSelection();
            }

            // delegate rendering to group selection if one exists
            // used for drawing selection borders/corners
            var activeGroup = this.getActiveGroup();
            if (activeGroup) {
                activeGroup.render(ctx);
            }

            if (this.overlayImage) {
                ctx.drawImage(this.overlayImage, this.overlayImageLeft, this.overlayImageTop);
            }

            this.fire('after:render');

            return this;
        },

        /**
         * Draws objects' controls (borders/corners)
         * @method drawControls
         * @param {Object} ctx context to render controls on
         */
        drawControls: function(ctx) {
            var activeGroup = this.getActiveGroup();
            if (activeGroup) {
                ctx.save();
                fabric.Group.prototype.transform.call(activeGroup, ctx);
                activeGroup.drawBorders(ctx).drawCorners(ctx);
                ctx.restore();
            }
            else {
                for (var i = 0, len = this._objects.length; i < len; ++i) {
                    if (!this._objects[i] || !this._objects[i].active) continue;

                    ctx.save();
                    fabric.Object.prototype.transform.call(this._objects[i], ctx);
                    this._objects[i].drawBorders(ctx).drawCorners(ctx);
                    ctx.restore();

                    this.lastRenderedObjectWithControlsAboveOverlay = this._objects[i];
                }
            }
        },

        /**
         * Exports canvas element to a dataurl image.
         * @method toDataURL
         * @param {String} format the format of the output image. Either "jpeg" or "png".
         * @param {Number} quality quality level (0..1)
         * @return {String}
         */
        toDataURL: function (format, quality) {
            var canvasEl = this.upperCanvasEl || this.lowerCanvasEl;

            this.renderAll(true);
            var data = (fabric.StaticCanvas.supports('toDataURLWithQuality'))
                ? canvasEl.toDataURL('image/' + format, quality)
                : canvasEl.toDataURL('image/' + format);
            this.renderAll();
            return data;
        },

        /**
         * Exports canvas element to a dataurl image (allowing to change image size via multiplier).
         * @method toDataURLWithMultiplier
         * @param {String} format (png|jpeg)
         * @param {Number} multiplier
         * @param {Number} quality (0..1)
         * @return {String}
         */
        toDataURLWithMultiplier: function (format, multiplier, quality) {

            var origWidth = this.getWidth(),
                origHeight = this.getHeight(),
                scaledWidth = origWidth * multiplier,
                scaledHeight = origHeight * multiplier,
                activeObject = this.getActiveObject(),
                activeGroup = this.getActiveGroup();

            this.setWidth(scaledWidth).setHeight(scaledHeight);
            this.contextTop.scale(multiplier, multiplier);

            if (activeGroup) {
                // not removing group due to complications with restoring it with correct state afterwords
                this._tempRemoveBordersCornersFromGroup(activeGroup);
            }
            else if (activeObject) {
                this.deactivateAll();
            }

            // restoring width, height for `renderAll` to draw
            // background properly (while context is scaled)
            this.width = origWidth;
            this.height = origHeight;

            this.renderAll(true);

            var dataURL = this.toDataURL(format, quality);

            this.contextTop.scale(1 / multiplier,  1 / multiplier);
            this.setWidth(origWidth).setHeight(origHeight);

            if (activeGroup) {
                this._restoreBordersCornersOnGroup(activeGroup);
            }
            else if (activeObject) {
                this.setActiveObject(activeObject);
            }

            this.renderAll();

            return dataURL;
        },

        _tempRemoveBordersCornersFromGroup: function(group) {
            group.origHideCorners = group.hideCorners;
            group.origBorderColor = group.borderColor;

            group.hideCorners = true;
            group.borderColor = 'rgba(0,0,0,0)';

            group.forEachObject(function(o) {
                o.origBorderColor = o.borderColor;
                o.borderColor = 'rgba(0,0,0,0)';
            });
        },
        _restoreBordersCornersOnGroup: function(group) {
            group.hideCorners = group.origHideCorners;
            group.borderColor = group.origBorderColor;

            group.forEachObject(function(o) {
                o.borderColor = o.origBorderColor;
                delete o.origBorderColor;
            });
        },

        /**
         * Returns coordinates of a center of canvas.
         * Returned value is an object with top and left properties
         * @method getCenter
         * @return {Object} object with "top" and "left" number values
         */
        getCenter: function () {
            return {
                top: this.getHeight() / 2,
                left: this.getWidth() / 2
            };
        },

        /**
         * Centers object horizontally.
         * @method centerObjectH
         * @param {fabric.Object} object Object to center
         * @return {fabric.Canvas} thisArg
         */
        centerObjectH: function (object) {
            object.set('left', this.getCenter().left);
            this.renderAll();
            return this;
        },

        /**
         * Centers object vertically.
         * @method centerObjectH
         * @param {fabric.Object} object Object to center
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        centerObjectV: function (object) {
            object.set('top', this.getCenter().top);
            this.renderAll();
            return this;
        },

        /**
         * Centers object vertically and horizontally.
         * @method centerObject
         * @param {fabric.Object} object Object to center
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        centerObject: function (object) {
            return this.centerObjectH(object).centerObjectV(object);
        },

        /**
         * Returs dataless JSON representation of canvas
         * @method toDatalessJSON
         * @return {String} json string
         */
        toDatalessJSON: function () {
            return this.toDatalessObject();
        },

        /**
         * Returns object representation of canvas
         * @method toObject
         * @return {Object}
         */
        toObject: function () {
            return this._toObjectMethod('toObject');
        },

        /**
         * Returns dataless object representation of canvas
         * @method toDatalessObject
         * @return {Object}
         */
        toDatalessObject: function () {
            return this._toObjectMethod('toDatalessObject');
        },

        /**
         * @private
         * @method _toObjectMethod
         */
        _toObjectMethod: function (methodName) {
            var data = {
                objects: this._objects.map(function (instance) {
                    // TODO (kangax): figure out how to clean this up
                    var originalValue;
                    if (!this.includeDefaultValues) {
                        originalValue = instance.includeDefaultValues;
                        instance.includeDefaultValues = false;
                    }
                    var object = instance[methodName]();
                    if (!this.includeDefaultValues) {
                        instance.includeDefaultValues = originalValue;
                    }
                    return object;
                }, this),
                background: this.backgroundColor
            };
            if (this.backgroundImage) {
                data.backgroundImage = this.backgroundImage.src;
                data.backgroundImageOpacity = this.backgroundImageOpacity;
                data.backgroundImageStretch = this.backgroundImageStretch;
            }
            if (this.overlayImage) {
                data.overlayImage = this.overlayImage.src;
                data.overlayImageLeft = this.overlayImageLeft;
                data.overlayImageTop = this.overlayImageTop;
            }
            return data;
        },

        /**
         * Returns SVG representation of canvas
         * @function
         * @method toSVG
         * @return {String}
         */
        toSVG: function() {
            var markup = [
                '<?xml version="1.0" standalone="no" ?>',
                '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN" ',
                '"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">',
                '<svg ',
                'xmlns="http://www.w3.org/2000/svg" ',
                'xmlns:xlink="http://www.w3.org/1999/xlink" ',
                'version="1.1" ',
                'width="', this.width, '" ',
                'height="', this.height, '" ',
                'xml:space="preserve">',
                '<desc>Created with Fabric.js ', fabric.version, '</desc>',
                fabric.createSVGFontFacesMarkup(this.getObjects())
            ];

            if (this.backgroundImage) {
                markup.push(
                    '<image x="0" y="0" ',
                    'width="', this.width,
                    '" height="', this.height,
                    '" preserveAspectRatio="', (this.backgroundImageStretch ? 'none' : 'defer'),
                    '" xlink:href="', this.backgroundImage.src,
                    '" style="opacity:', this.backgroundImageOpacity,
                    '"></image>'
                );
            }

            if (this.overlayImage) {
                markup.push(
                    '<image x="', this.overlayImageLeft,
                    '" y="', this.overlayImageTop,
                    '" width="', this.overlayImage.width,
                    '" height="', this.overlayImage.height,
                    '" xlink:href="', this.overlayImage.src,
                    '"></image>'
                );
            }

            for (var i = 0, objects = this.getObjects(), len = objects.length; i < len; i++) {
                markup.push(objects[i].toSVG());
            }
            markup.push('</svg>');

            return markup.join('');
        },

        /**
         * Returns true if canvas contains no objects
         * @method isEmpty
         * @return {Boolean} true if canvas is empty
         */
        isEmpty: function () {
            return this._objects.length === 0;
        },

        /**
         * Removes an object from canvas and returns it
         * @method remove
         * @param object {Object} Object to remove
         * @return {Object} removed object
         */
        remove: function (object) {
            removeFromArray(this._objects, object);
            if (this.getActiveObject() === object) {

                // removing active object should fire "selection:cleared" events
                this.fire('before:selection:cleared', { target: object });
                this.discardActiveObject();
                this.fire('selection:cleared');
            }
            this.renderAll();
            return object;
        },

        /**
         * Moves an object to the bottom of the stack of drawn objects
         * @method sendToBack
         * @param object {fabric.Object} Object to send to back
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        sendToBack: function (object) {
            removeFromArray(this._objects, object);
            this._objects.unshift(object);
            return this.renderAll();
        },

        /**
         * Moves an object to the top of the stack of drawn objects
         * @method bringToFront
         * @param object {fabric.Object} Object to send
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        bringToFront: function (object) {
            removeFromArray(this._objects, object);
            this._objects.push(object);
            return this.renderAll();
        },

        /**
         * Moves an object one level down in stack of drawn objects
         * @method sendBackwards
         * @param object {fabric.Object} Object to send
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        sendBackwards: function (object) {
            var idx = this._objects.indexOf(object),
                nextIntersectingIdx = idx;

            // if object is not on the bottom of stack
            if (idx !== 0) {

                // traverse down the stack looking for the nearest intersecting object
                for (var i=idx-1; i>=0; --i) {

                    var isIntersecting = object.intersectsWithObject(this._objects[i]) ||
                                         object.isContainedWithinObject(this._objects[i]) ||
                                         this._objects[i].isContainedWithinObject(object);

                    if (isIntersecting) {
                        nextIntersectingIdx = i;
                        break;
                    }
                }
                removeFromArray(this._objects, object);
                this._objects.splice(nextIntersectingIdx, 0, object);
            }
            return this.renderAll();
        },

        /**
         * Moves an object one level up in stack of drawn objects
         * @method bringForward
         * @param object {fabric.Object} Object to send
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        bringForward: function (object) {
            var objects = this.getObjects(),
                idx = objects.indexOf(object),
                nextIntersectingIdx = idx;


            // if object is not on top of stack (last item in an array)
            if (idx !== objects.length-1) {

                // traverse up the stack looking for the nearest intersecting object
                for (var i = idx + 1, l = this._objects.length; i < l; ++i) {

                    var isIntersecting = object.intersectsWithObject(objects[i]) ||
                                         object.isContainedWithinObject(this._objects[i]) ||
                                         this._objects[i].isContainedWithinObject(object);

                    if (isIntersecting) {
                        nextIntersectingIdx = i;
                        break;
                    }
                }
                removeFromArray(objects, object);
                objects.splice(nextIntersectingIdx, 0, object);
            }
            this.renderAll();
        },

        /**
         * Returns object at specified index
         * @method item
         * @param {Number} index
         * @return {fabric.Object}
         */
        item: function (index) {
            return this.getObjects()[index];
        },

        /**
         * Returns number representation of an instance complexity
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function () {
            return this.getObjects().reduce(function (memo, current) {
                memo += current.complexity ? current.complexity() : 0;
                return memo;
            }, 0);
        },

        /**
         * Iterates over all objects, invoking callback for each one of them
         * @method forEachObject
         * @return {fabric.Canvas} thisArg
         */
        forEachObject: function(callback, context) {
            var objects = this.getObjects(),
                i = objects.length;
            while (i--) {
                callback.call(context, objects[i], i, objects);
            }
            return this;
        },

        /**
         * Clears a canvas element and removes all event handlers.
         * @method dispose
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        dispose: function () {
            this.clear();
            if (this.interactive) {
                removeListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);
                removeListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);
                removeListener(fabric.window, 'resize', this._onResize);
            }
            return this;
        },

        /**
         * @private
         * @method _resizeImageToFit
         * @param {HTMLImageElement} imgEl
         */
        _resizeImageToFit: function (imgEl) {

            var imageWidth = imgEl.width || imgEl.offsetWidth,
                widthScaleFactor = this.getWidth() / imageWidth;

            // scale image down so that it has original dimensions when printed in large resolution
            if (imageWidth) {
                imgEl.width = imageWidth * widthScaleFactor;
            }
        }
    });

    /**
     * Returns a string representation of an instance
     * @method toString
     * @return {String} string representation of an instance
     */
    fabric.StaticCanvas.prototype.toString = function () { // Assign explicitly since `extend` doesn't take care of DontEnum bug yet
        return '#<fabric.Canvas (' + this.complexity() + '): '+
               '{ objects: ' + this.getObjects().length + ' }>';
    };

    extend(fabric.StaticCanvas, /** @scope fabric.StaticCanvas */ {

        /**
         * @static
         * @property EMPTY_JSON
         * @type String
         */
        EMPTY_JSON: '{"objects": [], "background": "white"}',

        /**
         * Takes &lt;canvas> element and transforms its data in such way that it becomes grayscale
         * @static
         * @method toGrayscale
         * @param {HTMLCanvasElement} canvasEl
         */
        toGrayscale: function (canvasEl) {
            var context = canvasEl.getContext('2d'),
                imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                data = imageData.data,
                iLen = imageData.width,
                jLen = imageData.height,
                index, average, i, j;

            for (i = 0; i < iLen; i++) {
                for (j = 0; j < jLen; j++) {

                    index = (i * 4) * jLen + (j * 4);
                    average = (data[index] + data[index + 1] + data[index + 2]) / 3;

                    data[index]     = average;
                    data[index + 1] = average;
                    data[index + 2] = average;
                }
            }

            context.putImageData(imageData, 0, 0);
        },

        /**
         * Provides a way to check support of some of the canvas methods
         * (either those of HTMLCanvasElement itself, or rendering context)
         *
         * @method supports
         * @param methodName {String} Method to check support for;
         *                            Could be one of "getImageData", "toDataURL" or "toDataURLWithQuality"
         * @return {Boolean | null} `true` if method is supported (or at least exists),
         *                          `null` if canvas element or context can not be initialized
         */
        supports: function (methodName) {
            var el = fabric.document.createElement('canvas');

            if (typeof G_vmlCanvasManager !== 'undefined') {
                G_vmlCanvasManager.initElement(el);
            }
            if (!el || !el.getContext) {
                return null;
            }

            var ctx = el.getContext('2d');
            if (!ctx) {
                return null;
            }

            switch (methodName) {

                case 'getImageData':
                    return typeof ctx.getImageData !== 'undefined';

                case 'toDataURL':
                    return typeof el.toDataURL !== 'undefined';

                case 'toDataURLWithQuality':
                    try {
                        el.toDataURL('image/jpeg', 0);
                        return true;
                    }
                    catch (e) { }
                    return false;

                default:
                    return null;
            }
        }
    });

    /**
     * Returs JSON representation of canvas
     * @function
     * @method toJSON
     * @return {String} json string
     */
    fabric.StaticCanvas.prototype.toJSON = fabric.StaticCanvas.prototype.toObject;

})();
(function() {

    var extend = fabric.util.object.extend,
        getPointer = fabric.util.getPointer,
        addListener = fabric.util.addListener,
        removeListener = fabric.util.removeListener,
        cursorMap = {
            'tr': 'ne-resize',
            'br': 'se-resize',
            'bl': 'sw-resize',
            'tl': 'nw-resize',
            'ml': 'w-resize',
            'mt': 'n-resize',
            'mr': 'e-resize',
            'mb': 's-resize'
        },

        utilMin = fabric.util.array.min,
        utilMax = fabric.util.array.max,

        sqrt = Math.sqrt,
        pow = Math.pow,
        atan2 = Math.atan2,
        abs = Math.abs,
        min = Math.min,
        max = Math.max,

        STROKE_OFFSET = 0.5;

    /**
     * @class fabric.Canvas
     * @constructor
     * @extends fabric.StaticCanvas
     * @param {HTMLElement | String} el &lt;canvas> element to initialize instance on
     * @param {Object} [options] Options object
     */
    fabric.Canvas = function(el, options) {
        options || (options = { });

        this._initStatic(el, options);
        this._initInteractive();
        this._createCacheCanvas();

        fabric.Canvas.activeInstance = this;
    };

    function ProtoProxy(){ }
    ProtoProxy.prototype = fabric.StaticCanvas.prototype;
    fabric.Canvas.prototype = new ProtoProxy();

    var InteractiveMethods = /** @scope fabric.Canvas.prototype */ {

        /**
         * Indicates that canvas is interactive. This property should not be changed.
         * @property
         * @type Boolean
         */
        interactive:            true,

        /**
         * Indicates whether group selection should be enabled
         * @property
         * @type Boolean
         */
        selection:              true,

        /**
         * Color of selection
         * @property
         * @type String
         */
        selectionColor:         'rgba(100, 100, 255, 0.3)', // blue

        /**
         * Color of the border of selection (usually slightly darker than color of selection itself)
         * @property
         * @type String
         */
        selectionBorderColor:   'rgba(255, 255, 255, 0.3)',

        /**
         * Width of a line used in object/group selection
         * @property
         * @type Number
         */
        selectionLineWidth:     1,

        /**
         * Color of the line used in free drawing mode
         * @property
         * @type String
         */
        freeDrawingColor:       'rgb(0, 0, 0)',

        /**
         * Width of a line used in free drawing mode
         * @property
         * @type Number
         */
        freeDrawingLineWidth:   1,

        /**
         * Default cursor value used when hovering over an object on canvas
         * @property
         * @type String
         */
        hoverCursor:            'move',

        /**
         * Default cursor value used when moving an object on canvas
         * @property
         * @type String
         */
        moveCursor:             'move',

        /**
         * Default cursor value used for the entire canvas
         * @property
         * @type String
         */
        defaultCursor:          'default',

        /**
         * Cursor value used for rotation point
         * @property
         * @type String
         */
        rotationCursor:         'crosshair',

        /**
         * Default element class that's given to wrapper (div) element of canvas
         * @property
         * @type String
         */
        containerClass:        'canvas-container',

        /**
         * When true, object detection happens on per-pixel basis rather than on per-bounding-box
         * @property
         * @type Boolean
         */
        perPixelTargetFind:     false,

        /**
         * Number of pixels around target pixel to tolerate (consider active) during object detection
         * @property
         * @type Number
         */
        targetFindTolerance: 0,

        /**
         * @method _initInteractive
         * @private
         */
        _initInteractive: function() {
            this._currentTransform = null;
            this._groupSelector = null;
            this._freeDrawingXPoints = [ ];
            this._freeDrawingYPoints = [ ];
            this._initWrapperElement();
            this._createUpperCanvas();
            this._initEvents();
            this.calcOffset();
        },

        /**
         * Adds mouse listeners to  canvas
         * @method _initEvents
         * @private
         * See configuration documentation for more details.
         */
        _initEvents: function () {
            var _this = this;

            this._onMouseDown = function (e) {
                _this.__onMouseDown(e);

                addListener(fabric.document, 'mouseup', _this._onMouseUp);
                fabric.isTouchSupported && addListener(fabric.document, 'touchend', _this._onMouseUp);

                addListener(fabric.document, 'mousemove', _this._onMouseMove);
                fabric.isTouchSupported && addListener(fabric.document, 'touchmove', _this._onMouseMove);

                removeListener(_this.upperCanvasEl, 'mousemove', _this._onMouseMove);
                fabric.isTouchSupported && removeListener(_this.upperCanvasEl, 'touchmove', _this._onMouseMove);
            };

            this._onMouseUp = function (e) {
                _this.__onMouseUp(e);

                removeListener(fabric.document, 'mouseup', _this._onMouseUp);
                fabric.isTouchSupported && removeListener(fabric.document, 'touchend', _this._onMouseUp);

                removeListener(fabric.document, 'mousemove', _this._onMouseMove);
                fabric.isTouchSupported && removeListener(fabric.document, 'touchmove', _this._onMouseMove);

                addListener(_this.upperCanvasEl, 'mousemove', _this._onMouseMove);
                fabric.isTouchSupported && addListener(_this.upperCanvasEl, 'touchmove', _this._onMouseMove);
            };

            this._onMouseMove = function (e) {
                e.preventDefault && e.preventDefault();
                _this.__onMouseMove(e);
            };

            this._onResize = function () {
                _this.calcOffset();
            };


            addListener(fabric.window, 'resize', this._onResize);

            if (fabric.isTouchSupported) {
                addListener(this.upperCanvasEl, 'touchstart', this._onMouseDown);
                addListener(this.upperCanvasEl, 'touchmove', this._onMouseMove);
            }
            else {
                addListener(this.upperCanvasEl, 'mousedown', this._onMouseDown);
                addListener(this.upperCanvasEl, 'mousemove', this._onMouseMove);
            }
        },

        /**
         * Method that defines the actions when mouse is released on canvas.
         * The method resets the currentTransform parameters, store the image corner
         * position in the image object and render the canvas on top.
         * @method __onMouseUp
         * @param {Event} e Event object fired on mouseup
         *
         */
        __onMouseUp: function (e) {

            var target;

            if (this.isDrawingMode && this._isCurrentlyDrawing) {
                this._finalizeDrawingPath();
                this.fire('mouse:up', { e: e });
                return;
            }

            if (this._currentTransform) {

                var transform = this._currentTransform;

                target = transform.target;
                if (target._scaling) {
                    target._scaling = false;
                }

                // determine the new coords everytime the image changes its position
                var i = this._objects.length;
                while (i--) {
                    this._objects[i].setCoords();
                }

                // only fire :modified event if target coordinates were changed during mousedown-mouseup
                if (this.stateful && target.hasStateChanged()) {
                    target.isMoving = false;
                    this.fire('object:modified', { target: target });
                    target.fire('modified');
                }
            }

            this._currentTransform = null;

            if (this._groupSelector) {
                // group selection was completed, determine its bounds
                this._findSelectedObjects(e);
            }
            var activeGroup = this.getActiveGroup();
            if (activeGroup) {
                activeGroup.setObjectsCoords();
                activeGroup.set('isMoving', false);
                this._setCursor(this.defaultCursor);
            }

            // clear selection
            this._groupSelector = null;
            this.renderAll();

            this._setCursorFromEvent(e, target);

            // fix for FF
            this._setCursor('');

            var _this = this;
            setTimeout(function () {
                _this._setCursorFromEvent(e, target);
            }, 50);

            this.fire('mouse:up', { target: target, e: e });
            target && target.fire('mouseup', { e: e });
        },

        /**
         * Method that defines the actions when mouse is clic ked on canvas.
         * The method inits the currentTransform parameters and renders all the
         * canvas so the current image can be placed on the top canvas and the rest
         * in on the container one.
         * @method __onMouseDown
         * @param e {Event} Event object fired on mousedown
         *
         */
        __onMouseDown: function (e) {

            // accept only left clicks
            var isLeftClick  = 'which' in e ? e.which === 1 : e.button === 1;
            if (!isLeftClick && !fabric.isTouchSupported) return;

            if (this.isDrawingMode) {
                this._prepareForDrawing(e);

                // capture coordinates immediately; this allows to draw dots (when movement never occurs)
                this._captureDrawingPath(e);
                this.fire('mouse:down', { e: e });
                return;
            }

            // ignore if some object is being transformed at this moment
            if (this._currentTransform) return;

            var target = this.findTarget(e),
                pointer = this.getPointer(e),
                activeGroup = this.getActiveGroup(),
                corner;

            if (this._shouldClearSelection(e)) {

                this._groupSelector = {
                    ex: pointer.x,
                    ey: pointer.y,
                    top: 0,
                    left: 0
                };

                this.deactivateAllWithDispatch();
            }
            else {
                // determine if it's a drag or rotate case
                // rotate and scale will happen at the same time
                this.stateful && target.saveState();

                if ((corner = target._findTargetCorner(e, this._offset))) {
                    this.onBeforeScaleRotate(target);
                }

                var shouldHandleGroupLogic = e.shiftKey && (activeGroup || this.getActiveObject()) && this.selection;
                if (shouldHandleGroupLogic) {
                    this._handleGroupLogic(e, target);
                    target = this.getActiveGroup();
                }
                else {
                    if (target !== this.getActiveGroup()) {
                        this.deactivateAll();
                    }
                    this.setActiveObject(target, e);
                }

                this._setupCurrentTransform(e, target);
            }
            // we must renderAll so that active image is placed on the top canvas
            this.renderAll();

            this.fire('mouse:down', { target: target, e: e });
            target && target.fire('mousedown', { e: e });
        },

        /**
         * Method that defines the actions when mouse is hovering the canvas.
         * The currentTransform parameter will definde whether the user is rotating/scaling/translating
         * an image or neither of them (only hovering). A group selection is also possible and would cancel
         * all any other type of action.
         * In case of an image transformation only the top canvas will be rendered.
         * @method __onMouseMove
         * @param e {Event} Event object fired on mousemove
         *
         */
        __onMouseMove: function (e) {

            var target;

            if (this.isDrawingMode) {
                if (this._isCurrentlyDrawing) {
                    this._captureDrawingPath(e);
                }
                this.fire('mouse:move', { e: e });
                return;
            }

            var groupSelector = this._groupSelector, pointer;

            // We initially clicked in an empty area, so we draw a box for multiple selection.
            if (groupSelector !== null) {
                pointer = getPointer(e);

                groupSelector.left = pointer.x - this._offset.left - groupSelector.ex;
                groupSelector.top = pointer.y - this._offset.top - groupSelector.ey;
                this.renderTop();
            }
            else if (!this._currentTransform) {

                // alias style to elimintate unnecessary lookup
                var style = this.upperCanvasEl.style;

                // Here we are hovering the canvas then we will determine
                // what part of the pictures we are hovering to change the caret symbol.
                // We won't do that while dragging or rotating in order to improve the
                // performance.
                target = this.findTarget(e);

                if (!target) {
                    // image/text was hovered-out from, we remove its borders
                    for (var i = this._objects.length; i--; ) {
                        if (this._objects[i] && !this._objects[i].active) {
                            this._objects[i].setActive(false);
                        }
                    }
                    style.cursor = this.defaultCursor;
                }
                else {
                    // set proper cursor
                    this._setCursorFromEvent(e, target);
                }
            }
            else {
                // object is being transformed (scaled/rotated/moved/etc.)
                pointer = getPointer(e);

                var x = pointer.x,
                    y = pointer.y;

                this._currentTransform.target.isMoving = true;

                if (this._currentTransform.action === 'rotate') {
                    // rotate object only if shift key is not pressed
                    // and if it is not a group we are transforming

                    if (!e.shiftKey) {
                        this._rotateObject(x, y);

                        this.fire('object:rotating', {
                            target: this._currentTransform.target
                        });
                        this._currentTransform.target.fire('rotating');
                    }
                    if (!this._currentTransform.target.hasRotatingPoint) {
                        this._scaleObject(x, y);
                        this.fire('object:scaling', {
                            target: this._currentTransform.target
                        });
                        this._currentTransform.target.fire('scaling');
                    }
                }
                else if (this._currentTransform.action === 'scale') {
                    this._scaleObject(x, y);
                    this.fire('object:scaling', {
                        target: this._currentTransform.target
                    });
                    this._currentTransform.target.fire('scaling');
                }
                else if (this._currentTransform.action === 'scaleX') {
                    this._scaleObject(x, y, 'x');

                    this.fire('object:scaling', {
                        target: this._currentTransform.target
                    });
                    this._currentTransform.target.fire('scaling');
                }
                else if (this._currentTransform.action === 'scaleY') {
                    this._scaleObject(x, y, 'y');

                    this.fire('object:scaling', {
                        target: this._currentTransform.target
                    });
                    this._currentTransform.target.fire('scaling');
                }
                else {
                    this._translateObject(x, y);

                    this.fire('object:moving', {
                        target: this._currentTransform.target
                    });

                    this._setCursor(this.moveCursor);

                    this._currentTransform.target.fire('moving');
                }
                // only commit here. when we are actually moving the pictures
                this.renderAll();
            }
            this.fire('mouse:move', { target: target, e: e });
            target && target.fire('mousemove', { e: e });
        },

        /**
         * Applies one implementation of 'point inside polygon' algorithm
         * @method containsPoint
         * @param e { Event } event object
         * @param target { fabric.Object } object to test against
         * @return {Boolean} true if point contains within area of given object
         */
        containsPoint: function (e, target) {
            var pointer = this.getPointer(e),
                xy = this._normalizePointer(target, pointer),
                x = xy.x,
                y = xy.y;

            // http://www.geog.ubc.ca/courses/klink/gis.notes/ncgia/u32.html
            // http://idav.ucdavis.edu/~okreylos/TAship/Spring2000/PointInPolygon.html

            // we iterate through each object. If target found, return it.
            var iLines = target._getImageLines(target.oCoords),
                xpoints = target._findCrossPoints(x, y, iLines);

            // if xcount is odd then we clicked inside the object
            // For the specific case of square images xcount === 1 in all true cases
            if ((xpoints && xpoints % 2 === 1) || target._findTargetCorner(e, this._offset)) {
                return true;
            }
            return false;
        },

        /**
         * @private
         * @method _normalizePointer
         */
        _normalizePointer: function (object, pointer) {

            var activeGroup = this.getActiveGroup(),
                x = pointer.x,
                y = pointer.y;

            var isObjectInGroup = (
                activeGroup &&
                object.type !== 'group' &&
                activeGroup.contains(object)
                );

            if (isObjectInGroup) {
                x -= activeGroup.left;
                y -= activeGroup.top;
            }
            return { x: x, y: y };
        },

        _isTargetTransparent: function (target, x, y) {
            var cacheContext = this.contextCache;

            var hasBorders = target.hasBorders, transparentCorners = target.transparentCorners;
            target.hasBorders = target.transparentCorners = false;

            this._draw(cacheContext, target);

            target.hasBorders = hasBorders;
            target.transparentCorners = transparentCorners;

            // If tolerance is > 0 adjust start coords to take into account. If moves off Canvas fix to 0
            if (this.targetFindTolerance > 0) {
                if (x > this.targetFindTolerance) {
                    x -= this.targetFindTolerance;
                }
                else {
                    x = 0;
                }
                if (y > this.targetFindTolerance) {
                    y -= this.targetFindTolerance;
                }
                else {
                    y = 0;
                }
            }

            var isTransparent = true;
            var imageData = cacheContext.getImageData(
                x, y, (this.targetFindTolerance * 2) || 1, (this.targetFindTolerance * 2) || 1);

            // Split image data - for tolerance > 1, pixelDataSize = 4;
            for (var i = 3; i < imageData.data.length; i += 4) {
                var temp = imageData.data[i];
                isTransparent = temp <= 0;
                if (isTransparent === false) break; //Stop if colour found
            }

            imageData = null;
            this.clearContext(cacheContext);
            return isTransparent;
        },

        /**
         * @private
         * @method _shouldClearSelection
         */
        _shouldClearSelection: function (e) {
            var target = this.findTarget(e),
                activeGroup = this.getActiveGroup();
            return (
                !target || (
                    target &&
                    activeGroup &&
                    !activeGroup.contains(target) &&
                    activeGroup !== target &&
                    !e.shiftKey
                    )
                );
        },

        /**
         * @private
         * @method _setupCurrentTransform
         */
        _setupCurrentTransform: function (e, target) {
            var action = 'drag',
                corner,
                pointer = getPointer(e);

            if ((corner = target._findTargetCorner(e, this._offset))) {
                action = (corner === 'ml' || corner === 'mr')
                    ? 'scaleX'
                    : (corner === 'mt' || corner === 'mb')
                             ? 'scaleY'
                             : corner === 'mtr'
                          ? 'rotate'
                          : (target.hasRotatingPoint)
                                   ? 'scale'
                                   : 'rotate';
            }

            this._currentTransform = {
                target: target,
                action: action,
                scaleX: target.scaleX,
                scaleY: target.scaleY,
                offsetX: pointer.x - target.left,
                offsetY: pointer.y - target.top,
                ex: pointer.x,
                ey: pointer.y,
                left: target.left,
                top: target.top,
                theta: target._theta,
                width: target.width * target.scaleX
            };

            this._currentTransform.original = {
                left: target.left,
                top: target.top
            };
        },

        _handleGroupLogic: function (e, target) {
            if (target === this.getActiveGroup()) {
                // if it's a group, find target again, this time skipping group
                target = this.findTarget(e, true);
                // if even object is not found, bail out
                if (!target || target.isType('group')) {
                    return;
                }
            }
            var activeGroup = this.getActiveGroup();
            if (activeGroup) {
                if (activeGroup.contains(target)) {
                    activeGroup.removeWithUpdate(target);
                    this._resetObjectTransform(activeGroup);
                    target.setActive(false);
                    if (activeGroup.size() === 1) {
                        // remove group alltogether if after removal it only contains 1 object
                        this.discardActiveGroup();
                    }
                }
                else {
                    activeGroup.addWithUpdate(target);
                    this._resetObjectTransform(activeGroup);
                }
                this.fire('selection:created', { target: activeGroup, e: e });
                activeGroup.setActive(true);
            }
            else {
                // group does not exist
                if (this._activeObject) {
                    // only if there's an active object
                    if (target !== this._activeObject) {
                        // and that object is not the actual target
                        var group = new fabric.Group([ this._activeObject, target ]);
                        this.setActiveGroup(group);
                        activeGroup = this.getActiveGroup();
                    }
                }
                // activate target object in any case
                target.setActive(true);
            }

            if (activeGroup) {
                activeGroup.saveCoords();
            }
        },

        /**
         * @private
         * @method _prepareForDrawing
         */
        _prepareForDrawing: function(e) {

            this._isCurrentlyDrawing = true;

            this.discardActiveObject().renderAll();

            var pointer = this.getPointer(e);

            this._freeDrawingXPoints.length = this._freeDrawingYPoints.length = 0;

            this._freeDrawingXPoints.push(pointer.x);
            this._freeDrawingYPoints.push(pointer.y);

            this.contextTop.beginPath();
            this.contextTop.moveTo(pointer.x, pointer.y);
            this.contextTop.strokeStyle = this.freeDrawingColor;
            this.contextTop.lineWidth = this.freeDrawingLineWidth;
            this.contextTop.lineCap = this.contextTop.lineJoin = 'round';
        },

        /**
         * @private
         * @method _captureDrawingPath
         */
        _captureDrawingPath: function(e) {
            var pointer = this.getPointer(e);

            this._freeDrawingXPoints.push(pointer.x);
            this._freeDrawingYPoints.push(pointer.y);

            this.contextTop.lineTo(pointer.x, pointer.y);
            this.contextTop.stroke();
        },

        /**
         * @private
         * @method _finalizeDrawingPath
         */
        _finalizeDrawingPath: function() {

            this.contextTop.closePath();

            this._isCurrentlyDrawing = false;

            var minX = utilMin(this._freeDrawingXPoints),
                minY = utilMin(this._freeDrawingYPoints),
                maxX = utilMax(this._freeDrawingXPoints),
                maxY = utilMax(this._freeDrawingYPoints),
                path = [ ],
                xPoints = this._freeDrawingXPoints,
                yPoints = this._freeDrawingYPoints;

            path.push('M ', xPoints[0] - minX, ' ', yPoints[0] - minY, ' ');

            for (var i = 1, len = xPoints.length; i < len; i++) {
                path.push('L ', xPoints[i] - minX, ' ', yPoints[i] - minY, ' ');
            }

            // TODO (kangax): maybe remove Path creation from here, to decouple fabric.Canvas from fabric.Path,
            // and instead fire something like "drawing:completed" event with path string

            path = path.join('');

            if (path === "M 0 0 L 0 0 ") {
                // do not create 0 width/height paths, as they are rendered inconsistently across browsers
                // Firefox 4, for example, renders a dot, whereas Chrome 10 renders nothing
                this.renderAll();
                return;
            }

            var p = new fabric.Path(path);

            p.fill = null;
            p.stroke = this.freeDrawingColor;
            p.strokeWidth = this.freeDrawingLineWidth;
            this.add(p);
            p.set("left", minX + (maxX - minX) / 2).set("top", minY + (maxY - minY) / 2).setCoords();
            this.renderAll();
            this.fire('path:created', { path: p });
        },

        /**
         * Translates object by "setting" its left/top
         * @method _translateObject
         * @param x {Number} pointer's x coordinate
         * @param y {Number} pointer's y coordinate
         */
        _translateObject: function (x, y) {
            var target = this._currentTransform.target;
            target.lockMovementX || target.set('left', x - this._currentTransform.offsetX);
            target.lockMovementY || target.set('top', y - this._currentTransform.offsetY);
        },

        /**
         * Scales object by invoking its scaleX/scaleY methods
         * @method _scaleObject
         * @param x {Number} pointer's x coordinate
         * @param y {Number} pointer's y coordinate
         * @param by {String} Either 'x' or 'y' - specifies dimension constraint by which to scale an object.
         *                    When not provided, an object is scaled by both dimensions equally
         */
        _scaleObject: function (x, y, by) {
            var t = this._currentTransform,
                offset = this._offset,
                target = t.target;

            if (target.lockScalingX && target.lockScalingY) return;

            var lastLen = sqrt(pow(t.ey - t.top - offset.top, 2) + pow(t.ex - t.left - offset.left, 2)),
                curLen = sqrt(pow(y - t.top - offset.top, 2) + pow(x - t.left - offset.left, 2));

            target._scaling = true;

            if (!by) {
                target.lockScalingX || target.set('scaleX', t.scaleX * curLen/lastLen);
                target.lockScalingY || target.set('scaleY', t.scaleY * curLen/lastLen);
            }
            else if (by === 'x' && !target.lockUniScaling) {
                target.lockScalingX || target.set('scaleX', t.scaleX * curLen/lastLen);
            }
            else if (by === 'y' && !target.lockUniScaling) {
                target.lockScalingY || target.set('scaleY', t.scaleY * curLen/lastLen);
            }
        },

        /**
         * Rotates object by invoking its rotate method
         * @method _rotateObject
         * @param x {Number} pointer's x coordinate
         * @param y {Number} pointer's y coordinate
         */
        _rotateObject: function (x, y) {

            var t = this._currentTransform,
                o = this._offset;

            if (t.target.lockRotation) return;

            var lastAngle = atan2(t.ey - t.top - o.top, t.ex - t.left - o.left),
                curAngle = atan2(y - t.top - o.top, x - t.left - o.left);

            t.target._theta = (curAngle - lastAngle) + t.theta;
        },

        /**
         * @method _setCursor
         */
        _setCursor: function (value) {
            this.upperCanvasEl.style.cursor = value;
        },

        /**
         * @private
         * @method _resetObjectTransform:
         */
        _resetObjectTransform: function (target) {
            target.scaleX = 1;
            target.scaleY = 1;
            target.setAngle(0);
        },

        /**
         * Sets the cursor depending on where the canvas is being hovered.
         * Note: very buggy in Opera
         * @method _setCursorFromEvent
         * @param e {Event} Event object
         * @param target {Object} Object that the mouse is hovering, if so.
         */
        _setCursorFromEvent: function (e, target) {
            var s = this.upperCanvasEl.style;
            if (!target) {
                s.cursor = this.defaultCursor;
                return false;
            }
            else {
                var activeGroup = this.getActiveGroup();
                // only show proper corner when group selection is not active
                var corner = !!target._findTargetCorner
                                 && (!activeGroup || !activeGroup.contains(target))
                    && target._findTargetCorner(e, this._offset);

                if (!corner) {
                    s.cursor = this.hoverCursor;
                }
                else {
                    if (corner in cursorMap) {
                        s.cursor = cursorMap[corner];
                    } else if (corner === 'mtr' && target.hasRotatingPoint) {
                        s.cursor = this.rotationCursor;
                    } else {
                        s.cursor = this.defaultCursor;
                        return false;
                    }
                }
            }
            return true;
        },

        /**
         * @method _drawSelection
         * @private
         */
        _drawSelection: function () {
            var groupSelector = this._groupSelector,
                left = groupSelector.left,
                top = groupSelector.top,
                aleft = abs(left),
                atop = abs(top);

            this.contextTop.fillStyle = this.selectionColor;

            this.contextTop.fillRect(
                groupSelector.ex - ((left > 0) ? 0 : -left),
                groupSelector.ey - ((top > 0) ? 0 : -top),
                aleft,
                atop
            );

            this.contextTop.lineWidth = this.selectionLineWidth;
            this.contextTop.strokeStyle = this.selectionBorderColor;

            this.contextTop.strokeRect(
                groupSelector.ex + STROKE_OFFSET - ((left > 0) ? 0 : aleft),
                groupSelector.ey + STROKE_OFFSET - ((top > 0) ? 0 : atop),
                aleft,
                atop
            );
        },

        _findSelectedObjects: function (e) {
            var group = [ ],
                x1 = this._groupSelector.ex,
                y1 = this._groupSelector.ey,
                x2 = x1 + this._groupSelector.left,
                y2 = y1 + this._groupSelector.top,
                currentObject,
                selectionX1Y1 = new fabric.Point(min(x1, x2), min(y1, y2)),
                selectionX2Y2 = new fabric.Point(max(x1, x2), max(y1, y2));

            for (var i = 0, len = this._objects.length; i < len; ++i) {
                currentObject = this._objects[i];

                if (!currentObject) continue;

                if (currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2) ||
                    currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2)) {

                    if (this.selection && currentObject.selectable) {
                        currentObject.setActive(true);
                        group.push(currentObject);
                    }
                }
            }

            // do not create group for 1 element only
            if (group.length === 1) {
                this.setActiveObject(group[0], e);
            }
            else if (group.length > 1) {
                group = new fabric.Group(group);
                this.setActiveGroup(group);
                group.saveCoords();
                this.fire('selection:created', { target: group });
            }

            this.renderAll();
        },

        /**
         * Method that determines what object we are clicking on
         * @method findTarget
         * @param {Event} e mouse event
         * @param {Boolean} skipGroup when true, group is skipped and only objects are traversed through
         */
        findTarget: function (e, skipGroup) {

            var target,
                pointer = this.getPointer(e);

            if (this.controlsAboveOverlay &&
                this.lastRenderedObjectWithControlsAboveOverlay &&
                this.containsPoint(e, this.lastRenderedObjectWithControlsAboveOverlay)) {
                target = this.lastRenderedObjectWithControlsAboveOverlay;
                return target;
            }

            // first check current group (if one exists)
            var activeGroup = this.getActiveGroup();
            if (activeGroup && !skipGroup && this.containsPoint(e, activeGroup)) {
                target = activeGroup;
                return target;
            }

            // then check all of the objects on canvas
            // Cache all targets where their bounding box contains point.
            var possibleTargets = [];
            for (var i = this._objects.length; i--; ) {
                if (this._objects[i] && this.containsPoint(e, this._objects[i])) {
                    if (this.perPixelTargetFind || this._objects[i].perPixelTargetFind) {
                        possibleTargets[possibleTargets.length] = this._objects[i];
                    }
                    else {
                        target = this._objects[i];
                        this.relatedTarget = target;
                        break;
                    }
                }
            }
            for (var j = 0, len = possibleTargets.length; j < len; j++) {
                pointer = this.getPointer(e);
                var isTransparent = this._isTargetTransparent(possibleTargets[j], pointer.x, pointer.y);
                if (!isTransparent) {
                    target = possibleTargets[j];
                    this.relatedTarget = target;
                    break;
                }
            }
            if (target && target.selectable) {
                return target;
            }
        },

        /**
         * Returns pointer coordinates relative to canvas.
         * @method getPointer
         * @return {Object} object with "x" and "y" number values
         */
        getPointer: function (e) {
            var pointer = getPointer(e);
            return {
                x: pointer.x - this._offset.left,
                y: pointer.y - this._offset.top
            };
        },

        /**
         * @method _createUpperCanvas
         * @param {HTMLElement|String} canvasEl Canvas element
         * @throws {CANVAS_INIT_ERROR} If canvas can not be initialized
         */
        _createUpperCanvas: function () {
            this.upperCanvasEl = this._createCanvasElement();
            this.upperCanvasEl.className = 'upper-canvas';

            this.wrapperEl.appendChild(this.upperCanvasEl);

            this._applyCanvasStyle(this.upperCanvasEl);
            this.contextTop = this.upperCanvasEl.getContext('2d');
        },

        _createCacheCanvas: function () {
            this.cacheCanvasEl = this._createCanvasElement();
            this.cacheCanvasEl.setAttribute('width', this.width);
            this.cacheCanvasEl.setAttribute('height', this.height);
            this.contextCache = this.cacheCanvasEl.getContext('2d');
        },

        /**
         * @private
         * @method _initWrapperElement
         * @param {Number} width
         * @param {Number} height
         */
        _initWrapperElement: function () {
            this.wrapperEl = fabric.util.wrapElement(this.lowerCanvasEl, 'div', {
                'class': this.containerClass
            });
            fabric.util.setStyle(this.wrapperEl, {
                width: this.getWidth() + 'px',
                height: this.getHeight() + 'px',
                position: 'relative'
            });
            fabric.util.makeElementUnselectable(this.wrapperEl);
        },

        /**
         * @private
         * @method _applyCanvasStyle
         * @param {Element} element
         */
        _applyCanvasStyle: function (element) {
            var width = this.getWidth() || element.width,
                height = this.getHeight() || element.height;

            fabric.util.setStyle(element, {
                position: 'absolute',
                width: width + 'px',
                height: height + 'px',
                left: 0,
                top: 0
            });
            element.width = width;
            element.height = height;
            fabric.util.makeElementUnselectable(element);
        },

        /**
         * Returns context of canvas where object selection is drawn
         * @method getSelectionContext
         * @return {CanvasRenderingContext2D}
         */
        getSelectionContext: function() {
            return this.contextTop;
        },

        /**
         * Returns &lt;canvas> element on which object selection is drawn
         * @method getSelectionElement
         * @return {HTMLCanvasElement}
         */
        getSelectionElement: function () {
            return this.upperCanvasEl;
        },

        /**
         * Sets given object as active
         * @method setActiveObject
         * @param object {fabric.Object} Object to set as an active one
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        setActiveObject: function (object, e) {
            if (this._activeObject) {
                this._activeObject.setActive(false);
            }
            this._activeObject = object;
            object.setActive(true);

            this.renderAll();

            this.fire('object:selected', { target: object, e: e });
            object.fire('selected', { e: e });
            return this;
        },

        /**
         * Returns currently active object
         * @method getActiveObject
         * @return {fabric.Object} active object
         */
        getActiveObject: function () {
            return this._activeObject;
        },

        /**
         * Discards currently active object
         * @method discardActiveObject
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        discardActiveObject: function () {
            if (this._activeObject) {
                this._activeObject.setActive(false);
            }
            this._activeObject = null;
            return this;
        },

        /**
         * Sets active group to a speicified one
         * @method setActiveGroup
         * @param {fabric.Group} group Group to set as a current one
         * @return {fabric.Canvas} thisArg
         * @chainable
         */
        setActiveGroup: function (group) {
            this._activeGroup = group;
            group && group.setActive(true);
            return this;
        },

        /**
         * Returns currently active group
         * @method getActiveGroup
         * @return {fabric.Group} Current group
         */
        getActiveGroup: function () {
            return this._activeGroup;
        },

        /**
         * Removes currently active group
         * @method discardActiveGroup
         * @return {fabric.Canvas} thisArg
         */
        discardActiveGroup: function () {
            var g = this.getActiveGroup();
            if (g) {
                g.destroy();
            }
            return this.setActiveGroup(null);
        },

        /**
         * Deactivates all objects by calling their setActive(false)
         * @method deactivateAll
         * @return {fabric.Canvas} thisArg
         */
        deactivateAll: function () {
            var allObjects = this.getObjects(),
                i = 0,
                len = allObjects.length;
            for ( ; i < len; i++) {
                allObjects[i].setActive(false);
            }
            this.discardActiveGroup();
            this.discardActiveObject();
            return this;
        },

        /**
         * Deactivates all objects and dispatches appropriate events
         * @method deactivateAllWithDispatch
         * @return {fabric.Canvas} thisArg
         */
        deactivateAllWithDispatch: function () {
            var activeObject = this.getActiveGroup() || this.getActiveObject();
            if (activeObject) {
                this.fire('before:selection:cleared', { target: activeObject });
            }
            this.deactivateAll();
            if (activeObject) {
                this.fire('selection:cleared');
            }
            return this;
        }
    };

    fabric.Canvas.prototype.toString = fabric.StaticCanvas.prototype.toString;
    extend(fabric.Canvas.prototype, InteractiveMethods);

    // iterating manually to workaround Opera's bug
    // where "prototype" property is enumerable and overrides existing prototype
    for (var prop in fabric.StaticCanvas) {
        if (prop !== 'prototype') {
            fabric.Canvas[prop] = fabric.StaticCanvas[prop];
        }
    }

    if (fabric.isTouchSupported) {
        fabric.Canvas.prototype._setCursorFromEvent = function() { };
    }

    /**
     * @class fabric.Element
     * @alias fabric.Canvas
     * @deprecated
     * @constructor
     */
    fabric.Element = fabric.Canvas;
})();
fabric.util.object.extend(fabric.StaticCanvas.prototype, {

    FX_DURATION: 500,

    /**
     * Centers object horizontally with animation.
     * @method fxCenterObjectH
     * @param {fabric.Object} object Object to center
     * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    fxCenterObjectH: function (object, callbacks) {
        callbacks = callbacks || { };

        var empty = function() { },
            onComplete = callbacks.onComplete || empty,
            onChange = callbacks.onChange || empty,
            _this = this;

        fabric.util.animate({
                                startValue: object.get('left'),
                                endValue: this.getCenter().left,
                                duration: this.FX_DURATION,
                                onChange: function(value) {
                                    object.set('left', value);
                                    _this.renderAll();
                                    onChange();
                                },
                                onComplete: function() {
                                    object.setCoords();
                                    onComplete();
                                }
                            });

        return this;
    },

    /**
     * Centers object vertically with animation.
     * @method fxCenterObjectV
     * @param {fabric.Object} object Object to center
     * @param {Object} [callbacks] Callbacks object with optional "onComplete" and/or "onChange" properties
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    fxCenterObjectV: function (object, callbacks) {
        callbacks = callbacks || { };

        var empty = function() { },
            onComplete = callbacks.onComplete || empty,
            onChange = callbacks.onChange || empty,
            _this = this;

        fabric.util.animate({
                                startValue: object.get('top'),
                                endValue: this.getCenter().top,
                                duration: this.FX_DURATION,
                                onChange: function(value) {
                                    object.set('top', value);
                                    _this.renderAll();
                                    onChange();
                                },
                                onComplete: function() {
                                    object.setCoords();
                                    onComplete();
                                }
                            });

        return this;
    },

    /**
     * Same as `fabric.Canvas#remove` but animated
     * @method fxRemove
     * @param {fabric.Object} object Object to remove
     * @param {Function} callback Callback, invoked on effect completion
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    fxRemove: function (object, callbacks) {
        callbacks = callbacks || { };

        var empty = function() { },
            onComplete = callbacks.onComplete || empty,
            onChange = callbacks.onChange || empty,
            _this = this;

        fabric.util.animate({
                                startValue: object.get('opacity'),
                                endValue: 0,
                                duration: this.FX_DURATION,
                                onStart: function() {
                                    object.setActive(false);
                                },
                                onChange: function(value) {
                                    object.set('opacity', value);
                                    _this.renderAll();
                                    onChange();
                                },
                                onComplete: function () {
                                    _this.remove(object);
                                    onComplete();
                                }
                            });

        return this;
    }
});
fabric.util.object.extend(fabric.StaticCanvas.prototype, {

    /**
     * Populates canvas with data from the specified dataless JSON
     * JSON format must conform to the one of `fabric.Canvas#toDatalessJSON`
     * @method loadFromDatalessJSON
     * @param {String} json JSON string
     * @param {Function} callback Callback, invoked when json is parsed
     *                            and corresponding objects (e.g: fabric.Image)
     *                            are initialized
     * @return {fabric.Canvas} instance
     * @chainable
     */
    loadFromDatalessJSON: function (json, callback) {

        if (!json) {
            return;
        }

        // serialize if it wasn't already
        var serialized = (typeof json === 'string')
            ? JSON.parse(json)
            : json;

        if (!serialized || (serialized && !serialized.objects)) return;

        this.clear();

        // TODO: test this
        this.backgroundColor = serialized.background;
        this._enlivenDatalessObjects(serialized.objects, callback);
    },

    /**
     * @method _enlivenDatalessObjects
     * @param {Array} objects
     * @param {Function} callback
     */
    _enlivenDatalessObjects: function (objects, callback) {

        /** @ignore */
        function onObjectLoaded(object, index) {
            _this.insertAt(object, index, true);
            object.setCoords();
            if (++numLoadedObjects === numTotalObjects) {
                callback && callback();
            }
        }

        /** @ignore */
        function loadObject(obj, index) {

            var pathProp = obj.paths ? 'paths' : 'path';
            var path = obj[pathProp];

            delete obj[pathProp];

            if (typeof path !== 'string') {
                if (obj.type === 'image') {
                    fabric[fabric.util.string.capitalize(obj.type)].fromObject(obj, function (o) {
                        onObjectLoaded(o, index);
                    });
                }
                else {
                    var klass = fabric[fabric.util.string.camelize(fabric.util.string.capitalize(obj.type))];
                    if (!klass || !klass.fromObject) return;

                    // restore path
                    if (path) {
                        obj[pathProp] = path;
                    }
                    onObjectLoaded(klass.fromObject(obj), index);
                }
            }
            else {
                if (obj.type === 'image') {
                    fabric.util.loadImage(path, function (image) {
                        var oImg = new fabric.Image(image);

                        oImg.setSourcePath(path);

                        fabric.util.object.extend(oImg, obj);
                        oImg.setAngle(obj.angle);

                        onObjectLoaded(oImg, index);
                    });
                }
                else if (obj.type === 'text') {

                    if (obj.useNative) {
                        onObjectLoaded(fabric.Text.fromObject(obj), index);
                    }
                    else {
                        obj.path = path;
                        var object = fabric.Text.fromObject(obj);
                        var onscriptload = function () {
                            // TODO (kangax): find out why Opera refuses to work without this timeout
                            if (Object.prototype.toString.call(fabric.window.opera) === '[object Opera]') {
                                setTimeout(function () {
                                    onObjectLoaded(object, index);
                                }, 500);
                            }
                            else {
                                onObjectLoaded(object, index);
                            }
                        };

                        fabric.util.getScript(path, onscriptload);
                    }
                }
                else {
                    fabric.loadSVGFromURL(path, function (elements) {
                        var object = fabric.util.groupSVGElements(elements, obj, path);

                        // copy parameters from serialied json to object (left, top, scaleX, scaleY, etc.)
                        // skip this step if an object is a PathGroup, since we already passed it options object before
                        if (!(object instanceof fabric.PathGroup)) {
                            fabric.util.object.extend(object, obj);
                            if (typeof obj.angle !== 'undefined') {
                                object.setAngle(obj.angle);
                            }
                        }

                        onObjectLoaded(object, index);
                    });
                }
            }
        }

        var _this = this,
            numLoadedObjects = 0,
            numTotalObjects = objects.length;

        if (numTotalObjects === 0 && callback) {
            callback();
        }

        try {
            objects.forEach(loadObject, this);
        }
        catch(e) {
            fabric.log(e.message);
        }
    },

    /**
     * Populates canvas with data from the specified JSON
     * JSON format must conform to the one of `fabric.Canvas#toJSON`
     * @method loadFromJSON
     * @param {String} json JSON string
     * @param {Function} callback Callback, invoked when json is parsed
     *                            and corresponding objects (e.g: fabric.Image)
     *                            are initialized
     * @return {fabric.Canvas} instance
     * @chainable
     */
    loadFromJSON: function (json, callback) {
        if (!json) return;

        var serialized = JSON.parse(json);
        if (!serialized || (serialized && !serialized.objects)) return;

        this.clear();
        var _this = this;
        this._enlivenObjects(serialized.objects, function () {
            _this.backgroundColor = serialized.background;

            if (serialized.backgroundImage) {
                _this.setBackgroundImage(serialized.backgroundImage, function() {

                    _this.backgroundImageOpacity = serialized.backgroundImageOpacity;
                    _this.backgroundImageStretch = serialized.backgroundImageStretch;

                    _this.renderAll();

                    callback && callback();
                });
                return;
            }
            if (serialized.overlayImage) {
                _this.setOverlayImage(serialized.overlayImage, function() {

                    _this.overlayImageLeft = serialized.overlayImageLeft || 0;
                    _this.overlayImageTop = serialized.overlayImageTop || 0;

                    _this.renderAll();

                    callback && callback();
                });
                return;
            }
            callback && callback();
        });

        return this;
    },

    /**
     * @method _enlivenObjects
     * @param {Array} objects
     * @param {Function} callback
     */
    _enlivenObjects: function (objects, callback) {
        var _this = this;
        fabric.util.enlivenObjects(objects, function(enlivenedObjects) {
            enlivenedObjects.forEach(function(obj, index) {
                _this.insertAt(obj, index, true);
            });
            callback && callback();
        });
    },

    /**
     * @private
     * @method _toDataURL
     * @param {String} format
     * @param {Function} callback
     */
    _toDataURL: function (format, callback) {
        this.clone(function (clone) {
            callback(clone.toDataURL(format));
        });
    },

    /**
     * @private
     * @method _toDataURLWithMultiplier
     * @param {String} format
     * @param {Number} multiplier
     * @param {Function} callback
     */
    _toDataURLWithMultiplier: function (format, multiplier, callback) {
        this.clone(function (clone) {
            callback(clone.toDataURLWithMultiplier(format, multiplier));
        });
    },

    /**
     * Clones canvas instance
     * @method clone
     * @param {Object} [callback] Receives cloned instance as a first argument
     */
    clone: function (callback) {
        var data = JSON.stringify(this);
        this.cloneWithoutData(function(clone) {
            clone.loadFromJSON(data, function() {
                callback && callback(clone);
            });
        });
    },

    /**
     * Clones canvas instance without cloning existing data.
     * This essentially copies canvas dimensions, clipping properties, etc.
     * but leaves data empty (so that you can populate it with your own)
     * @method cloneWithoutData
     * @param {Object} [callback] Receives cloned instance as a first argument
     */
    cloneWithoutData: function(callback) {
        var el = fabric.document.createElement('canvas');

        el.width = this.getWidth();
        el.height = this.getHeight();

        var clone = new fabric.Canvas(el);
        clone.clipTo = this.clipTo;
        if (this.backgroundImage) {
            clone.setBackgroundImage(this.backgroundImage.src, function() {
                clone.renderAll();
                callback && callback(clone);
            });
            clone.backgroundImageOpacity = this.backgroundImageOpacity;
            clone.backgroundImageStretch = this.backgroundImageStretch;
        }
        else {
            callback && callback(clone);
        }
    }
});
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        extend = fabric.util.object.extend,
        toFixed = fabric.util.toFixed,
        capitalize = fabric.util.string.capitalize,
        getPointer = fabric.util.getPointer,
        degreesToRadians = fabric.util.degreesToRadians,
        slice = Array.prototype.slice;

    if (fabric.Object) {
        return;
    }

    /**
     * @class Object
     * @memberOf fabric
     */
    fabric.Object = fabric.util.createClass(/** @scope fabric.Object.prototype */ {

                                                                                      /**
                                                                                       * Type of an object (rect, circle, path, etc)
                                                                                       * @property
                                                                                       * @type String
                                                                                       */
                                                                                      type:                       'object',

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      top:                      0,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      left:                     0,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      width:                    0,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      height:                   0,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      scaleX:                   1,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      scaleY:                   1,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Boolean
                                                                                       */
                                                                                      flipX:                    false,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Boolean
                                                                                       */
                                                                                      flipY:                    false,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      opacity:                  1,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      angle:                    0,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      cornersize:               12,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Boolean
                                                                                       */
                                                                                      transparentCorners:       true,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      padding:                  0,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type String
                                                                                       */
                                                                                      borderColor:              'rgba(102,153,255,0.75)',

                                                                                      /**
                                                                                       * @property
                                                                                       * @type String
                                                                                       */
                                                                                      cornerColor:              'rgba(102,153,255,0.5)',

                                                                                      /**
                                                                                       * @property
                                                                                       * @type String
                                                                                       */
                                                                                      fill:                     'rgb(0,0,0)',

                                                                                      /**
                                                                                       * @property
                                                                                       * @type String
                                                                                       */
                                                                                      fillRule:                 'source-over',

                                                                                      /**
                                                                                       * @property
                                                                                       * @type String
                                                                                       */
                                                                                      overlayFill:              null,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type String
                                                                                       */
                                                                                      stroke:                   null,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      strokeWidth:              1,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Array
                                                                                       */
                                                                                      strokeDashArray:          null,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      borderOpacityWhenMoving:  0.4,

                                                                                      /**
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      borderScaleFactor:        1,

                                                                                      /**
                                                                                       * Transform matrix
                                                                                       * @property
                                                                                       * @type Array
                                                                                       */
                                                                                      transformMatrix:          null,

                                                                                      /**
                                                                                       * When set to `false`, an object can not be selected for modification (using either point-click-based or group-based selection)
                                                                                       * @property
                                                                                       * @type Boolean
                                                                                       */
                                                                                      selectable:               true,

                                                                                      /**
                                                                                       * When set to `false`, object's controls are not displayed and can not be used to manipulate object
                                                                                       * @property
                                                                                       * @type Boolean
                                                                                       */
                                                                                      hasControls:              true,

                                                                                      /**
                                                                                       * When set to `false`, object's borders are not rendered
                                                                                       * @property
                                                                                       * @type Boolean
                                                                                       */
                                                                                      hasBorders:               true,

                                                                                      /**
                                                                                       * When set to `false`, object's rotating point will not be visible or selectable
                                                                                       * @property
                                                                                       * @type Boolean
                                                                                       */
                                                                                      hasRotatingPoint:         false,

                                                                                      /**
                                                                                       * Offset for object's rotating point (when enabled)
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      rotatingPointOffset:      40,

                                                                                      /**
                                                                                       * @private
                                                                                       * @property
                                                                                       * @type Number
                                                                                       */
                                                                                      _theta:                   0,

                                                                                      perPixelTargetFind:       false,

                                                                                      includeDefaultValues:     true,

                                                                                      /**
                                                                                       * List of properties to consider when checking if state of an object is changed (fabric.Object#hasStateChanged);
                                                                                       * as well as for history (undo/redo) purposes
                                                                                       * @property
                                                                                       * @type Array
                                                                                       */
                                                                                      stateProperties:  (
                                                                                                            'top left width height scaleX scaleY flipX flipY ' +
                                                                                                            'theta angle opacity cornersize fill overlayFill ' +
                                                                                                            'stroke strokeWidth strokeDashArray fillRule ' +
                                                                                                            'borderScaleFactor transformMatrix selectable'
                                                                                                            ).split(' '),

                                                                                      /**
                                                                                       * @method callSuper
                                                                                       * @param {String} methodName
                                                                                       */
                                                                                      callSuper: function(methodName) {
                                                                                          var fn = this.constructor.superclass.prototype[methodName];
                                                                                          return (arguments.length > 1)
                                                                                              ? fn.apply(this, slice.call(arguments, 1))
                                                                                              : fn.call(this);
                                                                                      },

                                                                                      /**
                                                                                       * Constructor
                                                                                       * @method initialize
                                                                                       * @param {Object} [options] Options object
                                                                                       */
                                                                                      initialize: function(options) {
                                                                                          if (options) {
                                                                                              this.setOptions(options);
                                                                                          }
                                                                                      },

                                                                                      /**
                                                                                       * @method initGradient
                                                                                       */
                                                                                      _initGradient: function(options) {
                                                                                          if (options.fill && typeof options.fill === 'object' && !(options.fill instanceof fabric.Gradient)) {
                                                                                              this.set('fill', new fabric.Gradient(options.fill));
                                                                                          }
                                                                                      },

                                                                                      /**
                                                                                       * @method setOptions
                                                                                       * @param {Object} [options]
                                                                                       */
                                                                                      setOptions: function(options) {
                                                                                          var i = this.stateProperties.length, prop;
                                                                                          while (i--) {
                                                                                              prop = this.stateProperties[i];
                                                                                              if (prop in options) {
                                                                                                  this.set(prop, options[prop]);
                                                                                              }
                                                                                          }
                                                                                          this._initGradient(options);
                                                                                      },

                                                                                      /**
                                                                                       * @method transform
                                                                                       * @param {CanvasRenderingContext2D} ctx Context
                                                                                       */
                                                                                      transform: function(ctx) {
                                                                                          ctx.globalAlpha = this.opacity;
                                                                                          ctx.translate(this.left, this.top);
                                                                                          ctx.rotate(this._theta);
                                                                                          ctx.scale(
                                                                                              this.scaleX * (this.flipX ? -1 : 1),
                                                                                              this.scaleY * (this.flipY ? -1 : 1)
                                                                                          );
                                                                                      },

                                                                                      /**
                                                                                       * Returns an object representation of an instance
                                                                                       * @method toObject
                                                                                       * @return {Object}
                                                                                       */
                                                                                      toObject: function() {

                                                                                          var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;

                                                                                          var object = {
                                                                                              type:             this.type,
                                                                                              left:             toFixed(this.left, NUM_FRACTION_DIGITS),
                                                                                              top:              toFixed(this.top, NUM_FRACTION_DIGITS),
                                                                                              width:            toFixed(this.width, NUM_FRACTION_DIGITS),
                                                                                              height:           toFixed(this.height, NUM_FRACTION_DIGITS),
                                                                                              fill:             (this.fill && this.fill.toObject) ? this.fill.toObject() : this.fill,
                                                                                              overlayFill:      this.overlayFill,
                                                                                              stroke:           this.stroke,
                                                                                              strokeWidth:      this.strokeWidth,
                                                                                              strokeDashArray:  this.strokeDashArray,
                                                                                              scaleX:           toFixed(this.scaleX, NUM_FRACTION_DIGITS),
                                                                                              scaleY:           toFixed(this.scaleY, NUM_FRACTION_DIGITS),
                                                                                              angle:            toFixed(this.getAngle(), NUM_FRACTION_DIGITS),
                                                                                              flipX:            this.flipX,
                                                                                              flipY:            this.flipY,
                                                                                              opacity:          toFixed(this.opacity, NUM_FRACTION_DIGITS),
                                                                                              selectable:       this.selectable,
                                                                                              hasControls:      this.hasControls,
                                                                                              hasBorders:       this.hasBorders,
                                                                                              hasRotatingPoint: this.hasRotatingPoint,
                                                                                              transparentCorners: this.transparentCorners,
                                                                                              perPixelTargetFind: this.perPixelTargetFind
                                                                                          };

                                                                                          if (!this.includeDefaultValues) {
                                                                                              object = this._removeDefaultValues(object);
                                                                                          }

                                                                                          return object;
                                                                                      },

                                                                                      /**
                                                                                       * Returns (dataless) object representation of an instance
                                                                                       * @method toDatalessObject
                                                                                       */
                                                                                      toDatalessObject: function() {
                                                                                          // will be overwritten by subclasses
                                                                                          return this.toObject();
                                                                                      },

                                                                                      /**
                                                                                       * Returns styles-string for svg-export
                                                                                       * @method getSvgStyles
                                                                                       * @return {string}
                                                                                       */
                                                                                      getSvgStyles: function() {
                                                                                          return [
                                                                                              "stroke: ", (this.stroke ? this.stroke : 'none'), "; ",
                                                                                              "stroke-width: ", (this.strokeWidth ? this.strokeWidth : '0'), "; ",
                                                                                              "stroke-dasharray: ", (this.strokeDashArray ? this.strokeDashArray.join(' ') : "; "),
                                                                                              "fill: ", (this.fill ? this.fill : 'none'), "; ",
                                                                                              "opacity: ", (this.opacity ? this.opacity : '1'), ";"
                                                                                          ].join("");
                                                                                      },

                                                                                      /**
                                                                                       * Returns transform-string for svg-export
                                                                                       * @method getSvgTransform
                                                                                       * @return {string}
                                                                                       */
                                                                                      getSvgTransform: function() {
                                                                                          var angle = this.getAngle();
                                                                                          var NUM_FRACTION_DIGITS = fabric.Object.NUM_FRACTION_DIGITS;

                                                                                          var translatePart = "translate(" +
                                                                                                              toFixed(this.left, NUM_FRACTION_DIGITS) +
                                                                                                              " " +
                                                                                                              toFixed(this.top, NUM_FRACTION_DIGITS) +
                                                                                                              ")";

                                                                                          var anglePart = angle !== 0
                                                                                              ? (" rotate(" + toFixed(angle, NUM_FRACTION_DIGITS) + ")")
                                                                                              : '';

                                                                                          var scalePart = (this.scaleX === 1 && this.scaleY === 1)
                                                                                              ? '' :
                                                                                                          (" scale(" +
                                                                                                           toFixed(this.scaleX, NUM_FRACTION_DIGITS) +
                                                                                                           " " +
                                                                                                           toFixed(this.scaleY, NUM_FRACTION_DIGITS) +
                                                                                                           ")");

                                                                                          var flipXPart = this.flipX ? "matrix(-1 0 0 1 0 0) " : "";
                                                                                          var flipYPart = this.flipY ? "matrix(1 0 0 -1 0 0)" : "";

                                                                                          return [ translatePart, anglePart, scalePart, flipXPart, flipYPart ].join('');
                                                                                      },

                                                                                      /**
                                                                                       * @private
                                                                                       * @method _removeDefaultValues
                                                                                       */
                                                                                      _removeDefaultValues: function(object) {
                                                                                          var defaultOptions = fabric.Object.prototype.options;
                                                                                          if (defaultOptions) {
                                                                                              this.stateProperties.forEach(function(prop) {
                                                                                                  if (object[prop] === defaultOptions[prop]) {
                                                                                                      delete object[prop];
                                                                                                  }
                                                                                              });
                                                                                          }
                                                                                          return object;
                                                                                      },

                                                                                      /**
                                                                                       * Returns true if an object is in its active state
                                                                                       * @return {Boolean} true if an object is in its active state
                                                                                       */
                                                                                      isActive: function() {
                                                                                          return !!this.active;
                                                                                      },

                                                                                      /**
                                                                                       * Sets state of an object - `true` makes it active, `false` - inactive
                                                                                       * @param {Boolean} active
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      setActive: function(active) {
                                                                                          this.active = !!active;
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Returns a string representation of an instance
                                                                                       * @return {String}
                                                                                       */
                                                                                      toString: function() {
                                                                                          return "#<fabric." + capitalize(this.type) + ">";
                                                                                      },

                                                                                      /**
                                                                                       * Sets property to a given value
                                                                                       * @method set
                                                                                       * @param {String} name
                                                                                       * @param {Object|Function} value
                                                                                       * @return {fabric.Group} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      set: function(key, value) {
                                                                                          if (typeof key === 'object') {
                                                                                              for (var prop in key) {
                                                                                                  this._set(prop, key[prop]);
                                                                                              }
                                                                                          }
                                                                                          else {
                                                                                              if (typeof value === 'function') {
                                                                                                  this._set(key, value(this.get(key)));
                                                                                              }
                                                                                              else {
                                                                                                  this._set(key, value);
                                                                                              }
                                                                                          }
                                                                                          return this;
                                                                                      },

                                                                                      _set: function(key, value) {
                                                                                          var shouldConstrainValue = (key === 'scaleX' || key === 'scaleY') &&
                                                                                                                     value < fabric.Object.MIN_SCALE_LIMIT;

                                                                                          if (shouldConstrainValue) {
                                                                                              value = fabric.Object.MIN_SCALE_LIMIT;
                                                                                          }
                                                                                          if (key === 'angle') {
                                                                                              this.setAngle(value);
                                                                                          }
                                                                                          else {
                                                                                              this[key] = value;
                                                                                          }
                                                                                      },

                                                                                      /**
                                                                                       * Toggles specified property from `true` to `false` or from `false` to `true`
                                                                                       * @method toggle
                                                                                       * @param {String} property property to toggle
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      toggle: function(property) {
                                                                                          var value = this.get(property);
                                                                                          if (typeof value === 'boolean') {
                                                                                              this.set(property, !value);
                                                                                          }
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * @method setSourcePath
                                                                                       * @param {String} value
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      setSourcePath: function(value) {
                                                                                          this.sourcePath = value;
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Basic getter
                                                                                       * @method get
                                                                                       * @param {Any} property
                                                                                       * @return {Any} value of a property
                                                                                       */
                                                                                      get: function(property) {
                                                                                          return (property === 'angle')
                                                                                              ? this.getAngle()
                                                                                              : this[property];
                                                                                      },

                                                                                      /**
                                                                                       * @method render
                                                                                       * @param {CanvasRenderingContext2D} ctx context to render on
                                                                                       * @param {Boolean} noTransform
                                                                                       */
                                                                                      render: function(ctx, noTransform) {

                                                                                          // do not render if width or height are zeros
                                                                                          if (this.width === 0 || this.height === 0) return;

                                                                                          ctx.save();

                                                                                          var m = this.transformMatrix;
                                                                                          if (m && !this.group) {
                                                                                              ctx.setTransform(m[0], m[1], m[2], m[3], m[4], m[5]);
                                                                                          }

                                                                                          if (!noTransform) {
                                                                                              this.transform(ctx);
                                                                                          }

                                                                                          if (this.stroke || this.strokeDashArray) {
                                                                                              ctx.lineWidth = this.strokeWidth;
                                                                                              ctx.strokeStyle = this.stroke;
                                                                                          }

                                                                                          if (this.overlayFill) {
                                                                                              ctx.fillStyle = this.overlayFill;
                                                                                          }
                                                                                          else if (this.fill) {
                                                                                              ctx.fillStyle = this.fill.toLiveGradient
                                                                                                  ? this.fill.toLiveGradient(ctx)
                                                                                                  : this.fill;
                                                                                          }

                                                                                          if (m && this.group) {
                                                                                              ctx.translate(-this.group.width/2, -this.group.height/2);
                                                                                              ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
                                                                                          }

                                                                                          this._render(ctx, noTransform);

                                                                                          if (this.active && !noTransform) {
                                                                                              this.drawBorders(ctx);
                                                                                              this.drawCorners(ctx);
                                                                                          }
                                                                                          ctx.restore();
                                                                                      },

                                                                                      /**
                                                                                       * Returns width of an object
                                                                                       * @method getWidth
                                                                                       * @return {Number} width value
                                                                                       */
                                                                                      getWidth: function() {
                                                                                          return this.width * this.scaleX;
                                                                                      },

                                                                                      /**
                                                                                       * Returns height of an object
                                                                                       * @method getHeight
                                                                                       * @return {Number} height value
                                                                                       */
                                                                                      getHeight: function() {
                                                                                          return this.height * this.scaleY;
                                                                                      },

                                                                                      /**
                                                                                       * Scales an object (equally by x and y)
                                                                                       * @method scale
                                                                                       * @param value {Number} scale factor
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      scale: function(value) {
                                                                                          this.scaleX = value;
                                                                                          this.scaleY = value;
                                                                                          this.setCoords();
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Scales an object to a given width, with respect to bounding box (scaling by x/y equally)
                                                                                       * @method scaleToWidth
                                                                                       * @param value {Number} new width value
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      scaleToWidth: function(value) {
                                                                                          // adjust to bounding rect factor so that rotated shapes would fit as well
                                                                                          var boundingRectFactor = this.getBoundingRectWidth() / this.getWidth();
                                                                                          return this.scale(value / this.width / boundingRectFactor);
                                                                                      },

                                                                                      /**
                                                                                       * Scales an object to a given height, with respect to bounding box (scaling by x/y equally)
                                                                                       * @method scaleToHeight
                                                                                       * @param value {Number} new height value
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      scaleToHeight: function(value) {
                                                                                          // adjust to bounding rect factor so that rotated shapes would fit as well
                                                                                          var boundingRectFactor = this.getBoundingRectHeight() / this.getHeight();
                                                                                          return this.scale(value / this.height / boundingRectFactor);
                                                                                      },

                                                                                      /**
                                                                                       * Sets object opacity
                                                                                       * @method setOpacity
                                                                                       * @param value {Number} value 0-1
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      setOpacity: function(value) {
                                                                                          this.set('opacity', value);
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Returns object's angle value
                                                                                       * @method getAngle
                                                                                       * @return {Number} angle value
                                                                                       */
                                                                                      getAngle: function() {
                                                                                          return this._theta * 180 / Math.PI;
                                                                                      },

                                                                                      /**
                                                                                       * Sets object's angle
                                                                                       * @method setAngle
                                                                                       * @param value {Number} angle value
                                                                                       * @return {Object} thisArg
                                                                                       */
                                                                                      setAngle: function(value) {
                                                                                          this._theta = value / 180 * Math.PI;
                                                                                          this.angle = value;
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Sets corner position coordinates based on current angle, width and height.
                                                                                       * @method setCoords
                                                                                       * return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      setCoords: function() {

                                                                                          var strokeWidth = this.strokeWidth > 1 ? this.strokeWidth : 0,
                                                                                              padding = this.padding;

                                                                                          this.currentWidth = (this.width + strokeWidth) * this.scaleX + padding * 2;
                                                                                          this.currentHeight = (this.height + strokeWidth) * this.scaleY + padding * 2;

                                                                                          //If width is negative, make postive. Fixes path selection issue
                                                                                          if(this.currentWidth < 0){
                                                                                              this.currentWidth = Math.abs(this.currentWidth);
                                                                                          }

                                                                                          this._hypotenuse = Math.sqrt(
                                                                                              Math.pow(this.currentWidth / 2, 2) +
                                                                                              Math.pow(this.currentHeight / 2, 2));

                                                                                          this._angle = Math.atan(this.currentHeight / this.currentWidth);

                                                                                          // offset added for rotate and scale actions
                                                                                          var offsetX = Math.cos(this._angle + this._theta) * this._hypotenuse,
                                                                                              offsetY = Math.sin(this._angle + this._theta) * this._hypotenuse,
                                                                                              theta = this._theta,
                                                                                              sinTh = Math.sin(theta),
                                                                                              cosTh = Math.cos(theta);

                                                                                          var tl = {
                                                                                              x: this.left - offsetX,
                                                                                              y: this.top - offsetY
                                                                                          };
                                                                                          var tr = {
                                                                                              x: tl.x + (this.currentWidth * cosTh),
                                                                                              y: tl.y + (this.currentWidth * sinTh)
                                                                                          };
                                                                                          var br = {
                                                                                              x: tr.x - (this.currentHeight * sinTh),
                                                                                              y: tr.y + (this.currentHeight * cosTh)
                                                                                          };
                                                                                          var bl = {
                                                                                              x: tl.x - (this.currentHeight * sinTh),
                                                                                              y: tl.y + (this.currentHeight * cosTh)
                                                                                          };
                                                                                          var ml = {
                                                                                              x: tl.x - (this.currentHeight/2 * sinTh),
                                                                                              y: tl.y + (this.currentHeight/2 * cosTh)
                                                                                          };
                                                                                          var mt = {
                                                                                              x: tl.x + (this.currentWidth/2 * cosTh),
                                                                                              y: tl.y + (this.currentWidth/2 * sinTh)
                                                                                          };
                                                                                          var mr = {
                                                                                              x: tr.x - (this.currentHeight/2 * sinTh),
                                                                                              y: tr.y + (this.currentHeight/2 * cosTh)
                                                                                          };
                                                                                          var mb = {
                                                                                              x: bl.x + (this.currentWidth/2 * cosTh),
                                                                                              y: bl.y + (this.currentWidth/2 * sinTh)
                                                                                          };
                                                                                          var mtr = {
                                                                                              x: tl.x + (this.currentWidth/2 * cosTh),
                                                                                              y: tl.y + (this.currentWidth/2 * sinTh)
                                                                                          };

                                                                                          // debugging

                                                                                          // setTimeout(function() {
                                                                                          //         canvas.contextTop.fillStyle = 'green';
                                                                                          //         canvas.contextTop.fillRect(mb.x, mb.y, 3, 3);
                                                                                          //         canvas.contextTop.fillRect(bl.x, bl.y, 3, 3);
                                                                                          //         canvas.contextTop.fillRect(br.x, br.y, 3, 3);
                                                                                          //         canvas.contextTop.fillRect(tl.x, tl.y, 3, 3);
                                                                                          //         canvas.contextTop.fillRect(tr.x, tr.y, 3, 3);
                                                                                          //         canvas.contextTop.fillRect(ml.x, ml.y, 3, 3);
                                                                                          //         canvas.contextTop.fillRect(mr.x, mr.y, 3, 3);
                                                                                          //         canvas.contextTop.fillRect(mt.x, mt.y, 3, 3);
                                                                                          //       }, 50);

                                                                                          // clockwise
                                                                                          this.oCoords = { tl: tl, tr: tr, br: br, bl: bl, ml: ml, mt: mt, mr: mr, mb: mb, mtr: mtr };

                                                                                          // set coordinates of the draggable boxes in the corners used to scale/rotate the image
                                                                                          this._setCornerCoords();

                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Returns width of an object's bounding rectangle
                                                                                       * @method getBoundingRectWidth
                                                                                       * @return {Number} width value
                                                                                       */
                                                                                      getBoundingRectWidth: function() {
                                                                                          this.oCoords || this.setCoords();
                                                                                          var xCoords = [this.oCoords.tl.x, this.oCoords.tr.x, this.oCoords.br.x, this.oCoords.bl.x];
                                                                                          var minX = fabric.util.array.min(xCoords);
                                                                                          var maxX = fabric.util.array.max(xCoords);
                                                                                          return Math.abs(minX - maxX);
                                                                                      },

                                                                                      /**
                                                                                       * Returns height of an object's bounding rectangle
                                                                                       * @method getBoundingRectHeight
                                                                                       * @return {Number} height value
                                                                                       */
                                                                                      getBoundingRectHeight: function() {
                                                                                          this.oCoords || this.setCoords();
                                                                                          var yCoords = [this.oCoords.tl.y, this.oCoords.tr.y, this.oCoords.br.y, this.oCoords.bl.y];
                                                                                          var minY = fabric.util.array.min(yCoords);
                                                                                          var maxY = fabric.util.array.max(yCoords);
                                                                                          return Math.abs(minY - maxY);
                                                                                      },

                                                                                      /**
                                                                                       * Draws borders of an object's bounding box.
                                                                                       * Requires public properties: width, height
                                                                                       * Requires public options: padding, borderColor
                                                                                       * @method drawBorders
                                                                                       * @param {CanvasRenderingContext2D} ctx Context to draw on
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      drawBorders: function(ctx) {
                                                                                          if (!this.hasBorders) return;

                                                                                          var MIN_SCALE_LIMIT = fabric.Object.MIN_SCALE_LIMIT,
                                                                                              padding = this.padding,
                                                                                              padding2 = padding * 2,
                                                                                              strokeWidth = this.strokeWidth > 1 ? this.strokeWidth : 0;

                                                                                          ctx.save();

                                                                                          ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
                                                                                          ctx.strokeStyle = this.borderColor;

                                                                                          var scaleX = 1 / (this.scaleX < MIN_SCALE_LIMIT ? MIN_SCALE_LIMIT : this.scaleX),
                                                                                              scaleY = 1 / (this.scaleY < MIN_SCALE_LIMIT ? MIN_SCALE_LIMIT : this.scaleY);

                                                                                          ctx.lineWidth = 1 / this.borderScaleFactor;

                                                                                          ctx.scale(scaleX, scaleY);

                                                                                          var w = this.getWidth(),
                                                                                              h = this.getHeight();

                                                                                          ctx.strokeRect(
                                                                                              ~~(-(w / 2) - padding - strokeWidth / 2 * this.scaleX) + 0.5, // offset needed to make lines look sharper
                                                                                              ~~(-(h / 2) - padding - strokeWidth / 2 * this.scaleY) + 0.5,
                                                                                              ~~(w + padding2 + strokeWidth * this.scaleX),
                                                                                              ~~(h + padding2 + strokeWidth * this.scaleY)
                                                                                          );

                                                                                          if (this.hasRotatingPoint && !this.lockRotation && this.hasControls) {

                                                                                              var rotateHeight = (
                                                                                                                     this.flipY
                                                                                                                         ? h + (strokeWidth * this.scaleY) + (padding * 2)
                                                                                                                         : -h - (strokeWidth * this.scaleY) - (padding * 2)
                                                                                                                     ) / 2;

                                                                                              ctx.beginPath();
                                                                                              ctx.moveTo(0, rotateHeight);
                                                                                              ctx.lineTo(0, rotateHeight + (this.flipY ? this.rotatingPointOffset : -this.rotatingPointOffset));
                                                                                              ctx.closePath();
                                                                                              ctx.stroke();
                                                                                          }

                                                                                          ctx.restore();
                                                                                          return this;
                                                                                      },

                                                                                      _renderDashedStroke: function(ctx) {

                                                                                          if (1 & this.strokeDashArray.length /* if odd number of items */) {
                                                                                              /* duplicate items */
                                                                                              this.strokeDashArray.push.apply(this.strokeDashArray, this.strokeDashArray);
                                                                                          }

                                                                                          var i = 0,
                                                                                              x = -this.width/2, y = -this.height/2,
                                                                                              _this = this,
                                                                                              padding = this.padding,
                                                                                              dashedArrayLength = this.strokeDashArray.length;

                                                                                          ctx.save();
                                                                                          ctx.beginPath();

                                                                                          function renderSide(xMultiplier, yMultiplier) {

                                                                                              var lineLength = 0,
                                                                                                  lengthDiff = 0,
                                                                                                  sideLength = (yMultiplier ? _this.height : _this.width) + padding * 2;

                                                                                              while (lineLength < sideLength) {

                                                                                                  var lengthOfSubPath = _this.strokeDashArray[i++];
                                                                                                  lineLength += lengthOfSubPath;

                                                                                                  if (lineLength > sideLength) {
                                                                                                      lengthDiff = lineLength - sideLength;
                                                                                                  }

                                                                                                  // track coords
                                                                                                  if (xMultiplier) {
                                                                                                      x += (lengthOfSubPath * xMultiplier) - (lengthDiff * xMultiplier || 0);
                                                                                                  }
                                                                                                  else {
                                                                                                      y += (lengthOfSubPath * yMultiplier) - (lengthDiff * yMultiplier || 0);
                                                                                                  }

                                                                                                  ctx[1 & i /* odd */ ? 'moveTo' : 'lineTo'](x, y);
                                                                                                  if (i >= dashedArrayLength) {
                                                                                                      i = 0;
                                                                                                  }
                                                                                              }
                                                                                          }

                                                                                          renderSide(1, 0);
                                                                                          renderSide(0, 1);
                                                                                          renderSide(-1, 0);
                                                                                          renderSide(0, -1);

                                                                                          ctx.stroke();
                                                                                          ctx.closePath();
                                                                                          ctx.restore();
                                                                                      },

                                                                                      /**
                                                                                       * Draws corners of an object's bounding box.
                                                                                       * Requires public properties: width, height, scaleX, scaleY
                                                                                       * Requires public options: cornersize, padding
                                                                                       * @method drawCorners
                                                                                       * @param {CanvasRenderingContext2D} ctx Context to draw on
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      drawCorners: function(ctx) {
                                                                                          if (!this.hasControls) return;

                                                                                          var size = this.cornersize,
                                                                                              size2 = size / 2,
                                                                                              strokeWidth2 = this.strokeWidth / 2,
                                                                                              left = -(this.width / 2),
                                                                                              top = -(this.height / 2),
                                                                                              _left,
                                                                                              _top,
                                                                                              sizeX = size / this.scaleX,
                                                                                              sizeY = size / this.scaleY,
                                                                                              paddingX = this.padding / this.scaleX,
                                                                                              paddingY = this.padding / this.scaleY,
                                                                                              scaleOffsetY = size2 / this.scaleY,
                                                                                              scaleOffsetX = size2 / this.scaleX,
                                                                                              scaleOffsetSizeX = (size2 - size) / this.scaleX,
                                                                                              scaleOffsetSizeY = (size2 - size) / this.scaleY,
                                                                                              height = this.height,
                                                                                              width = this.width,
                                                                                              methodName = this.transparentCorners ? 'strokeRect' : 'fillRect';

                                                                                          ctx.save();

                                                                                          ctx.lineWidth = 1 / Math.max(this.scaleX, this.scaleY);

                                                                                          ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
                                                                                          ctx.strokeStyle = ctx.fillStyle = this.cornerColor;

                                                                                          // top-left
                                                                                          _left = left - scaleOffsetX - strokeWidth2 - paddingX;
                                                                                          _top = top - scaleOffsetY - strokeWidth2 - paddingY;

                                                                                          ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                          ctx[methodName](_left, _top, sizeX, sizeY);

                                                                                          // top-right
                                                                                          _left = left + width - scaleOffsetX + strokeWidth2 + paddingX;
                                                                                          _top = top - scaleOffsetY - strokeWidth2 - paddingY;

                                                                                          ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                          ctx[methodName](_left, _top, sizeX, sizeY);

                                                                                          // bottom-left
                                                                                          _left = left - scaleOffsetX - strokeWidth2 - paddingX;
                                                                                          _top = top + height + scaleOffsetSizeY + strokeWidth2 + paddingY;

                                                                                          ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                          ctx[methodName](_left, _top, sizeX, sizeY);

                                                                                          // bottom-right
                                                                                          _left = left + width + scaleOffsetSizeX + strokeWidth2 + paddingX;
                                                                                          _top = top + height + scaleOffsetSizeY + strokeWidth2 + paddingY;

                                                                                          ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                          ctx[methodName](_left, _top, sizeX, sizeY);

                                                                                          if (!this.lockUniScaling) {
                                                                                              // middle-top
                                                                                              _left = left + width/2 - scaleOffsetX;
                                                                                              _top = top - scaleOffsetY - strokeWidth2 - paddingY;

                                                                                              ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                              ctx[methodName](_left, _top, sizeX, sizeY);

                                                                                              // middle-bottom
                                                                                              _left = left + width/2 - scaleOffsetX;
                                                                                              _top = top + height + scaleOffsetSizeY + strokeWidth2 + paddingY;

                                                                                              ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                              ctx[methodName](_left, _top, sizeX, sizeY);

                                                                                              // middle-right
                                                                                              _left = left + width + scaleOffsetSizeX + strokeWidth2 + paddingX;
                                                                                              _top = top + height/2 - scaleOffsetY;

                                                                                              ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                              ctx[methodName](_left, _top, sizeX, sizeY);

                                                                                              // middle-left
                                                                                              _left = left - scaleOffsetX - strokeWidth2 - paddingX;
                                                                                              _top = top + height/2 - scaleOffsetY;

                                                                                              ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                              ctx[methodName](_left, _top, sizeX, sizeY);
                                                                                          }

                                                                                          // middle-top-rotate
                                                                                          if (this.hasRotatingPoint) {

                                                                                              _left = left + width/2 - scaleOffsetX;

                                                                                              _top = this.flipY ?
                                                                                                     (top + height + (this.rotatingPointOffset / this.scaleY) - sizeY/2 + strokeWidth2 + paddingY)
                                                                                                  : (top - (this.rotatingPointOffset / this.scaleY) - sizeY/2 - strokeWidth2 - paddingY);

                                                                                              ctx.clearRect(_left, _top, sizeX, sizeY);
                                                                                              ctx[methodName](_left, _top, sizeX, sizeY);
                                                                                          }

                                                                                          ctx.restore();

                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Clones an instance
                                                                                       * @method clone
                                                                                       * @param {Object} options object
                                                                                       * @return {fabric.Object} clone of an instance
                                                                                       */
                                                                                      clone: function(options) {
                                                                                          if (this.constructor.fromObject) {
                                                                                              return this.constructor.fromObject(this.toObject(), options);
                                                                                          }
                                                                                          return new fabric.Object(this.toObject());
                                                                                      },

                                                                                      /**
                                                                                       * Creates an instance of fabric.Image out of an object
                                                                                       * @method cloneAsImage
                                                                                       * @param callback {Function} callback, invoked with an instance as a first argument
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      cloneAsImage: function(callback) {
                                                                                          if (fabric.Image) {
                                                                                              var i = new Image();

                                                                                              /** @ignore */
                                                                                              i.onload = function() {
                                                                                                  if (callback) {
                                                                                                      callback(new fabric.Image(i), orig);
                                                                                                  }
                                                                                                  i = i.onload = null;
                                                                                              };

                                                                                              var orig = {
                                                                                                  angle: this.get('angle'),
                                                                                                  flipX: this.get('flipX'),
                                                                                                  flipY: this.get('flipY')
                                                                                              };

                                                                                              // normalize angle
                                                                                              this.set('angle', 0).set('flipX', false).set('flipY', false);
                                                                                              this.toDataURL(function(dataURL) {
                                                                                                  i.src = dataURL;
                                                                                              });
                                                                                          }
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Converts an object into a data-url-like string
                                                                                       * @method toDataURL
                                                                                       * @return {String} string of data
                                                                                       */
                                                                                      toDataURL: function(callback) {
                                                                                          var el = fabric.document.createElement('canvas');
                                                                                          if (!el.getContext && typeof G_vmlCanvasManager !== 'undefined') {
                                                                                              G_vmlCanvasManager.initElement(el);
                                                                                          }

                                                                                          el.width = this.getBoundingRectWidth();
                                                                                          el.height = this.getBoundingRectHeight();

                                                                                          fabric.util.wrapElement(el, 'div');

                                                                                          var canvas = new fabric.Canvas(el);
                                                                                          canvas.backgroundColor = 'transparent';
                                                                                          canvas.renderAll();

                                                                                          if (this.constructor.async) {
                                                                                              this.clone(proceed);
                                                                                          }
                                                                                          else {
                                                                                              proceed(this.clone());
                                                                                          }

                                                                                          function proceed(clone) {
                                                                                              clone.left = el.width / 2;
                                                                                              clone.top = el.height / 2;

                                                                                              clone.setActive(false);

                                                                                              canvas.add(clone);
                                                                                              var data = canvas.toDataURL('png');

                                                                                              canvas.dispose();
                                                                                              canvas = clone = null;

                                                                                              callback && callback(data);
                                                                                          }
                                                                                      },

                                                                                      /**
                                                                                       * @method hasStateChanged
                                                                                       * @return {Boolean} true if instance' state has changed
                                                                                       */
                                                                                      hasStateChanged: function() {
                                                                                          return this.stateProperties.some(function(prop) {
                                                                                              return this[prop] !== this.originalState[prop];
                                                                                          }, this);
                                                                                      },

                                                                                      /**
                                                                                       * @method saveState
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      saveState: function() {
                                                                                          this.stateProperties.forEach(function(prop) {
                                                                                              this.originalState[prop] = this.get(prop);
                                                                                          }, this);
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * @method setupState
                                                                                       */
                                                                                      setupState: function() {
                                                                                          this.originalState = { };
                                                                                          this.saveState();
                                                                                      },

                                                                                      /**
                                                                                       * Returns true if object intersects with an area formed by 2 points
                                                                                       * @method intersectsWithRect
                                                                                       * @param {Object} selectionTL
                                                                                       * @param {Object} selectionBR
                                                                                       * @return {Boolean}
                                                                                       */
                                                                                      intersectsWithRect: function(selectionTL, selectionBR) {
                                                                                          var oCoords = this.oCoords,
                                                                                              tl = new fabric.Point(oCoords.tl.x, oCoords.tl.y),
                                                                                              tr = new fabric.Point(oCoords.tr.x, oCoords.tr.y),
                                                                                              bl = new fabric.Point(oCoords.bl.x, oCoords.bl.y),
                                                                                              br = new fabric.Point(oCoords.br.x, oCoords.br.y);

                                                                                          var intersection = fabric.Intersection.intersectPolygonRectangle(
                                                                                              [tl, tr, br, bl],
                                                                                              selectionTL,
                                                                                              selectionBR
                                                                                          );
                                                                                          return (intersection.status === 'Intersection');
                                                                                      },

                                                                                      /**
                                                                                       * Returns true if object intersects with another object
                                                                                       * @method intersectsWithObject
                                                                                       * @param {Object} other Object to test
                                                                                       * @return {Boolean}
                                                                                       */
                                                                                      intersectsWithObject: function(other) {
                                                                                          // extracts coords
                                                                                          function getCoords(oCoords) {
                                                                                              return {
                                                                                                  tl: new fabric.Point(oCoords.tl.x, oCoords.tl.y),
                                                                                                  tr: new fabric.Point(oCoords.tr.x, oCoords.tr.y),
                                                                                                  bl: new fabric.Point(oCoords.bl.x, oCoords.bl.y),
                                                                                                  br: new fabric.Point(oCoords.br.x, oCoords.br.y)
                                                                                              };
                                                                                          }
                                                                                          var thisCoords = getCoords(this.oCoords),
                                                                                              otherCoords = getCoords(other.oCoords);

                                                                                          var intersection = fabric.Intersection.intersectPolygonPolygon(
                                                                                              [thisCoords.tl, thisCoords.tr, thisCoords.br, thisCoords.bl],
                                                                                              [otherCoords.tl, otherCoords.tr, otherCoords.br, otherCoords.bl]
                                                                                          );

                                                                                          return (intersection.status === 'Intersection');
                                                                                      },

                                                                                      /**
                                                                                       * Returns true if object is fully contained within area of another object
                                                                                       * @method isContainedWithinObject
                                                                                       * @param {Object} other Object to test
                                                                                       * @return {Boolean}
                                                                                       */
                                                                                      isContainedWithinObject: function(other) {
                                                                                          return this.isContainedWithinRect(other.oCoords.tl, other.oCoords.br);
                                                                                      },

                                                                                      /**
                                                                                       * Returns true if object is fully contained within area formed by 2 points
                                                                                       * @method isContainedWithinRect
                                                                                       * @param {Object} selectionTL
                                                                                       * @param {Object} selectionBR
                                                                                       * @return {Boolean}
                                                                                       */
                                                                                      isContainedWithinRect: function(selectionTL, selectionBR) {
                                                                                          var oCoords = this.oCoords,
                                                                                              tl = new fabric.Point(oCoords.tl.x, oCoords.tl.y),
                                                                                              tr = new fabric.Point(oCoords.tr.x, oCoords.tr.y),
                                                                                              bl = new fabric.Point(oCoords.bl.x, oCoords.bl.y);

                                                                                          return tl.x > selectionTL.x
                                                                                                     && tr.x < selectionBR.x
                                                                                                     && tl.y > selectionTL.y
                                                                                              && bl.y < selectionBR.y;
                                                                                      },

                                                                                      /**
                                                                                       * @method isType
                                                                                       * @param type {String} type to check against
                                                                                       * @return {Boolean} true if specified type is identical to the type of instance
                                                                                       */
                                                                                      isType: function(type) {
                                                                                          return this.type === type;
                                                                                      },

                                                                                      /**
                                                                                       * Determines which one of the four corners has been clicked
                                                                                       * @method _findTargetCorner
                                                                                       * @private
                                                                                       * @param e {Event} event object
                                                                                       * @param offset {Object} canvas offset
                                                                                       * @return {String|Boolean} corner code (tl, tr, bl, br, etc.), or false if nothing is found
                                                                                       */
                                                                                      _findTargetCorner: function(e, offset) {
                                                                                          if (!this.hasControls || !this.active) return false;

                                                                                          var pointer = getPointer(e),
                                                                                              ex = pointer.x - offset.left,
                                                                                              ey = pointer.y - offset.top,
                                                                                              xpoints,
                                                                                              lines;

                                                                                          for (var i in this.oCoords) {

                                                                                              if (i === 'mtr' && !this.hasRotatingPoint) {
                                                                                                  continue;
                                                                                              }

                                                                                              if (this.lockUniScaling && (i === 'mt' || i === 'mr' || i === 'mb' || i === 'ml')) {
                                                                                                  continue;
                                                                                              }

                                                                                              lines = this._getImageLines(this.oCoords[i].corner, i);

                                                                                              // debugging

                                                                                              // canvas.contextTop.fillRect(lines.bottomline.d.x, lines.bottomline.d.y, 2, 2);
                                                                                              // canvas.contextTop.fillRect(lines.bottomline.o.x, lines.bottomline.o.y, 2, 2);

                                                                                              // canvas.contextTop.fillRect(lines.leftline.d.x, lines.leftline.d.y, 2, 2);
                                                                                              // canvas.contextTop.fillRect(lines.leftline.o.x, lines.leftline.o.y, 2, 2);

                                                                                              // canvas.contextTop.fillRect(lines.topline.d.x, lines.topline.d.y, 2, 2);
                                                                                              // canvas.contextTop.fillRect(lines.topline.o.x, lines.topline.o.y, 2, 2);

                                                                                              // canvas.contextTop.fillRect(lines.rightline.d.x, lines.rightline.d.y, 2, 2);
                                                                                              // canvas.contextTop.fillRect(lines.rightline.o.x, lines.rightline.o.y, 2, 2);

                                                                                              xpoints = this._findCrossPoints(ex, ey, lines);
                                                                                              if (xpoints % 2 === 1 && xpoints !== 0) {
                                                                                                  this.__corner = i;
                                                                                                  return i;
                                                                                              }
                                                                                          }
                                                                                          return false;
                                                                                      },

                                                                                      /**
                                                                                       * Helper method to determine how many cross points are between the 4 image edges
                                                                                       * and the horizontal line determined by the position of our mouse when clicked on canvas
                                                                                       * @method _findCrossPoints
                                                                                       * @private
                                                                                       * @param ex {Number} x coordinate of the mouse
                                                                                       * @param ey {Number} y coordinate of the mouse
                                                                                       * @param oCoords {Object} Coordinates of the image being evaluated
                                                                                       */
                                                                                      _findCrossPoints: function(ex, ey, oCoords) {
                                                                                          var b1, b2, a1, a2, xi, yi,
                                                                                              xcount = 0,
                                                                                              iLine;

                                                                                          for (var lineKey in oCoords) {
                                                                                              iLine = oCoords[lineKey];
                                                                                              // optimisation 1: line below dot. no cross
                                                                                              if ((iLine.o.y < ey) && (iLine.d.y < ey)) {
                                                                                                  continue;
                                                                                              }
                                                                                              // optimisation 2: line above dot. no cross
                                                                                              if ((iLine.o.y >= ey) && (iLine.d.y >= ey)) {
                                                                                                  continue;
                                                                                              }
                                                                                              // optimisation 3: vertical line case
                                                                                              if ((iLine.o.x === iLine.d.x) && (iLine.o.x >= ex)) {
                                                                                                  xi = iLine.o.x;
                                                                                                  yi = ey;
                                                                                              }
                                                                                              // calculate the intersection point
                                                                                              else {
                                                                                                  b1 = 0;
                                                                                                  b2 = (iLine.d.y-iLine.o.y)/(iLine.d.x-iLine.o.x);
                                                                                                  a1 = ey-b1*ex;
                                                                                                  a2 = iLine.o.y-b2*iLine.o.x;

                                                                                                  xi = - (a1-a2)/(b1-b2);
                                                                                                  yi = a1+b1*xi;
                                                                                              }
                                                                                              // dont count xi < ex cases
                                                                                              if (xi >= ex) {
                                                                                                  xcount += 1;
                                                                                              }
                                                                                              // optimisation 4: specific for square images
                                                                                              if (xcount === 2) {
                                                                                                  break;
                                                                                              }
                                                                                          }
                                                                                          return xcount;
                                                                                      },

                                                                                      /**
                                                                                       * Method that returns an object with the image lines in it given the coordinates of the corners
                                                                                       * @method _getImageLines
                                                                                       * @private
                                                                                       * @param oCoords {Object} coordinates of the image corners
                                                                                       */
                                                                                      _getImageLines: function(oCoords) {
                                                                                          return {
                                                                                              topline: {
                                                                                                  o: oCoords.tl,
                                                                                                  d: oCoords.tr
                                                                                              },
                                                                                              rightline: {
                                                                                                  o: oCoords.tr,
                                                                                                  d: oCoords.br
                                                                                              },
                                                                                              bottomline: {
                                                                                                  o: oCoords.br,
                                                                                                  d: oCoords.bl
                                                                                              },
                                                                                              leftline: {
                                                                                                  o: oCoords.bl,
                                                                                                  d: oCoords.tl
                                                                                              }
                                                                                          };
                                                                                      },

                                                                                      /**
                                                                                       * Sets the coordinates of the draggable boxes in the corners of
                                                                                       * the image used to scale/rotate it.
                                                                                       * @method _setCornerCoords
                                                                                       * @private
                                                                                       */
                                                                                      _setCornerCoords: function() {
                                                                                          var coords = this.oCoords,
                                                                                              theta = degreesToRadians(45 - this.getAngle()),
                                                                                              cornerHypotenuse = Math.sqrt(2 * Math.pow(this.cornersize, 2)) / 2,
                                                                                              cosHalfOffset = cornerHypotenuse * Math.cos(theta),
                                                                                              sinHalfOffset = cornerHypotenuse * Math.sin(theta),
                                                                                              sinTh = Math.sin(this._theta),
                                                                                              cosTh = Math.cos(this._theta);

                                                                                          coords.tl.corner = {
                                                                                              tl: {
                                                                                                  x: coords.tl.x - sinHalfOffset,
                                                                                                  y: coords.tl.y - cosHalfOffset
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.tl.x + cosHalfOffset,
                                                                                                  y: coords.tl.y - sinHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.tl.x - cosHalfOffset,
                                                                                                  y: coords.tl.y + sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.tl.x + sinHalfOffset,
                                                                                                  y: coords.tl.y + cosHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.tr.corner = {
                                                                                              tl: {
                                                                                                  x: coords.tr.x - sinHalfOffset,
                                                                                                  y: coords.tr.y - cosHalfOffset
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.tr.x + cosHalfOffset,
                                                                                                  y: coords.tr.y - sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.tr.x + sinHalfOffset,
                                                                                                  y: coords.tr.y + cosHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.tr.x - cosHalfOffset,
                                                                                                  y: coords.tr.y + sinHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.bl.corner = {
                                                                                              tl: {
                                                                                                  x: coords.bl.x - sinHalfOffset,
                                                                                                  y: coords.bl.y - cosHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.bl.x - cosHalfOffset,
                                                                                                  y: coords.bl.y + sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.bl.x + sinHalfOffset,
                                                                                                  y: coords.bl.y + cosHalfOffset
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.bl.x + cosHalfOffset,
                                                                                                  y: coords.bl.y - sinHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.br.corner = {
                                                                                              tr: {
                                                                                                  x: coords.br.x + cosHalfOffset,
                                                                                                  y: coords.br.y - sinHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.br.x - cosHalfOffset,
                                                                                                  y: coords.br.y + sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.br.x + sinHalfOffset,
                                                                                                  y: coords.br.y + cosHalfOffset
                                                                                              },
                                                                                              tl: {
                                                                                                  x: coords.br.x - sinHalfOffset,
                                                                                                  y: coords.br.y - cosHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.ml.corner = {
                                                                                              tl: {
                                                                                                  x: coords.ml.x - sinHalfOffset,
                                                                                                  y: coords.ml.y - cosHalfOffset
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.ml.x + cosHalfOffset,
                                                                                                  y: coords.ml.y - sinHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.ml.x - cosHalfOffset,
                                                                                                  y: coords.ml.y + sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.ml.x + sinHalfOffset,
                                                                                                  y: coords.ml.y + cosHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.mt.corner = {
                                                                                              tl: {
                                                                                                  x: coords.mt.x - sinHalfOffset,
                                                                                                  y: coords.mt.y - cosHalfOffset
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.mt.x + cosHalfOffset,
                                                                                                  y: coords.mt.y - sinHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.mt.x - cosHalfOffset,
                                                                                                  y: coords.mt.y + sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.mt.x + sinHalfOffset,
                                                                                                  y: coords.mt.y + cosHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.mr.corner = {
                                                                                              tl: {
                                                                                                  x: coords.mr.x - sinHalfOffset,
                                                                                                  y: coords.mr.y - cosHalfOffset
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.mr.x + cosHalfOffset,
                                                                                                  y: coords.mr.y - sinHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.mr.x - cosHalfOffset,
                                                                                                  y: coords.mr.y + sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.mr.x + sinHalfOffset,
                                                                                                  y: coords.mr.y + cosHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.mb.corner = {
                                                                                              tl: {
                                                                                                  x: coords.mb.x - sinHalfOffset,
                                                                                                  y: coords.mb.y - cosHalfOffset
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.mb.x + cosHalfOffset,
                                                                                                  y: coords.mb.y - sinHalfOffset
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.mb.x - cosHalfOffset,
                                                                                                  y: coords.mb.y + sinHalfOffset
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.mb.x + sinHalfOffset,
                                                                                                  y: coords.mb.y + cosHalfOffset
                                                                                              }
                                                                                          };

                                                                                          coords.mtr.corner = {
                                                                                              tl: {
                                                                                                  x: coords.mtr.x - sinHalfOffset + (sinTh * this.rotatingPointOffset),
                                                                                                  y: coords.mtr.y - cosHalfOffset - (cosTh * this.rotatingPointOffset)
                                                                                              },
                                                                                              tr: {
                                                                                                  x: coords.mtr.x + cosHalfOffset + (sinTh * this.rotatingPointOffset),
                                                                                                  y: coords.mtr.y - sinHalfOffset - (cosTh * this.rotatingPointOffset)
                                                                                              },
                                                                                              bl: {
                                                                                                  x: coords.mtr.x - cosHalfOffset + (sinTh * this.rotatingPointOffset),
                                                                                                  y: coords.mtr.y + sinHalfOffset - (cosTh * this.rotatingPointOffset)
                                                                                              },
                                                                                              br: {
                                                                                                  x: coords.mtr.x + sinHalfOffset + (sinTh * this.rotatingPointOffset),
                                                                                                  y: coords.mtr.y + cosHalfOffset - (cosTh * this.rotatingPointOffset)
                                                                                              }
                                                                                          };
                                                                                      },

                                                                                      /**
                                                                                       * Makes object's color grayscale
                                                                                       * @method toGrayscale
                                                                                       * @return {fabric.Object} thisArg
                                                                                       */
                                                                                      toGrayscale: function() {
                                                                                          var fillValue = this.get('fill');
                                                                                          if (fillValue) {
                                                                                              this.set('overlayFill', new fabric.Color(fillValue).toGrayscale().toRgb());
                                                                                          }
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * @method complexity
                                                                                       * @return {Number}
                                                                                       */
                                                                                      complexity: function() {
                                                                                          return 0;
                                                                                      },

                                                                                      /**
                                                                                       * Returns a JSON representation of an instance
                                                                                       * @method toJSON
                                                                                       * @return {String} json
                                                                                       */
                                                                                      toJSON: function() {
                                                                                          // delegate, not alias
                                                                                          return this.toObject();
                                                                                      },

                                                                                      /**
                                                                                       * @method setGradientFill
                                                                                       */
                                                                                      setGradientFill: function(options) {
                                                                                          this.set('fill', fabric.Gradient.forObject(this, options));
                                                                                      },

                                                                                      /**
                                                                                       * @method animate
                                                                                       *
                                                                                       * As object — multiple properties
                                                                                       *
                                                                                       * object.animate({ left: ..., top: ... });
                                                                                       * object.animate({ left: ..., top: ... }, { duration: ... });
                                                                                       *
                                                                                       * As string — one property
                                                                                       *
                                                                                       * object.animate('left', ...);
                                                                                       * object.animate('left', { duration: ... });
                                                                                       *
                                                                                       */
                                                                                      animate: function() {
                                                                                          if (arguments[0] && typeof arguments[0] === 'object') {
                                                                                              for (var prop in arguments[0]) {
                                                                                                  this._animate(prop, arguments[0][prop], arguments[1]);
                                                                                              }
                                                                                          }
                                                                                          else {
                                                                                              this._animate.apply(this, arguments);
                                                                                          }
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * @private
                                                                                       * @method _animate
                                                                                       */
                                                                                      _animate: function(property, to, options) {
                                                                                          var obj = this;

                                                                                          options || (options = { });

                                                                                          if (!('from' in options)) {
                                                                                              options.from = this.get(property);
                                                                                          }

                                                                                          if (/[+\-]/.test((to + '').charAt(0))) {
                                                                                              to = this.get(property) + parseFloat(to);
                                                                                          }

                                                                                          fabric.util.animate({
                                                                                                                  startValue: options.from,
                                                                                                                  endValue: to,
                                                                                                                  byValue: options.by,
                                                                                                                  easing: options.easing,
                                                                                                                  duration: options.duration,
                                                                                                                  onChange: function(value) {
                                                                                                                      obj.set(property, value);
                                                                                                                      options.onChange && options.onChange();
                                                                                                                  },
                                                                                                                  onComplete: function() {
                                                                                                                      obj.setCoords();
                                                                                                                      options.onComplete && options.onComplete();
                                                                                                                  }
                                                                                                              });
                                                                                      },

                                                                                      /**
                                                                                       * Centers object horizontally on canvas to which it was added last
                                                                                       * @method centerH
                                                                                       * @return {fabric.Object} thisArg
                                                                                       */
                                                                                      centerH: function () {
                                                                                          this.canvas.centerObjectH(this);
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Centers object vertically on canvas to which it was added last
                                                                                       * @method centerV
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      centerV: function () {
                                                                                          this.canvas.centerObjectV(this);
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Centers object vertically and horizontally on canvas to which is was added last
                                                                                       * @method center
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      center: function () {
                                                                                          return this.centerH().centerV();
                                                                                      },

                                                                                      /**
                                                                                       * Removes object from canvas to which it was added last
                                                                                       * @method remove
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      remove: function() {
                                                                                          return this.canvas.remove(this);
                                                                                      },

                                                                                      /**
                                                                                       * Moves an object to the bottom of the stack of drawn objects
                                                                                       * @method sendToBack
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      sendToBack: function() {
                                                                                          this.canvas.sendToBack(this);
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Moves an object to the top of the stack of drawn objects
                                                                                       * @method bringToFront
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      bringToFront: function() {
                                                                                          this.canvas.bringToFront(this);
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Moves an object one level down in stack of drawn objects
                                                                                       * @method sendBackwards
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      sendBackwards: function() {
                                                                                          this.canvas.sendBackwards(this);
                                                                                          return this;
                                                                                      },

                                                                                      /**
                                                                                       * Moves an object one level up in stack of drawn objects
                                                                                       * @method bringForward
                                                                                       * @return {fabric.Object} thisArg
                                                                                       * @chainable
                                                                                       */
                                                                                      bringForward: function() {
                                                                                          this.canvas.bringForward(this);
                                                                                          return this;
                                                                                      }
                                                                                  });

    /**
     * @alias rotate -> setAngle
     */
    fabric.Object.prototype.rotate = fabric.Object.prototype.setAngle;

    var proto = fabric.Object.prototype;
    for (var i = proto.stateProperties.length; i--; ) {

        var propName = proto.stateProperties[i],
            capitalizedPropName = propName.charAt(0).toUpperCase() + propName.slice(1),
            setterName = 'set' + capitalizedPropName,
            getterName = 'get' + capitalizedPropName;

        // using `new Function` for better introspection
        if (!proto[getterName]) {
            proto[getterName] = (function(property) {
                return new Function('return this.get("' + property + '")');
            })(propName);
        }
        if (!proto[setterName]) {
            proto[setterName] = (function(property) {
                return new Function('value', 'return this.set("' + property + '", value)');
            })(propName);
        }
    }

    extend(fabric.Object.prototype, fabric.Observable);

    extend(fabric.Object, {

        /**
         * @static
         * @constant
         * @type Number
         */
        NUM_FRACTION_DIGITS:        2,

        /**
         * @static
         * @constant
         * @type Number
         */
        MIN_SCALE_LIMIT:            0.1

    });

})(typeof exports !== 'undefined' ? exports : this);

(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        extend = fabric.util.object.extend,
        coordProps = { 'x1': 1, 'x2': 1, 'y1': 1, 'y2': 1 };

    if (fabric.Line) {
        fabric.warn('fabric.Line is already defined');
        return;
    }

    /**
     * @class Line
     * @extends fabric.Object
     */
    fabric.Line = fabric.util.createClass(fabric.Object, /** @scope fabric.Line.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'line',

        /**
         * Constructor
         * @method initialize
         * @param {Array} points Array of points
         * @param {Object} [options] Options object
         * @return {fabric.Line} thisArg
         */
        initialize: function(points, options) {
            options = options || { };

            if (!points) {
                points = [0, 0, 0, 0];
            }

            this.callSuper('initialize', options);

            this.set('x1', points[0]);
            this.set('y1', points[1]);
            this.set('x2', points[2]);
            this.set('y2', points[3]);

            this._setWidthHeight(options);
        },

        /**
         * @private
         * @method _setWidthHeight
         * @param {Object} options
         */
        _setWidthHeight: function(options) {
            options || (options = { });

            this.set('width', (this.x2 - this.x1) || 1);
            this.set('height', (this.y2 - this.y1) || 1);

            this.set('left', 'left' in options ? options.left : (this.x1 + this.width / 2));
            this.set('top', 'top' in options ? options.top : (this.y1 + this.height / 2));
        },

        /**
         * @private
         * @method _set
         * @param {String} key
         * @param {Any} value
         */
        _set: function(key, value) {
            this[key] = value;
            if (key in coordProps) {
                this._setWidthHeight();
            }
            return this;
        },

        /**
         * @private
         * @method _render
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(ctx) {
            ctx.beginPath();

            if (this.group) {
                ctx.translate(-this.group.width/2 + this.left, -this.group.height / 2 + this.top);
            }

            // move from center (of virtual box) to its left/top corner
            ctx.moveTo(this.width === 1 ? 0 : (-this.width / 2), this.height === 1 ? 0 : (-this.height / 2));
            ctx.lineTo(this.width === 1 ? 0 : (this.width / 2), this.height === 1 ? 0 : (this.height / 2));

            ctx.lineWidth = this.strokeWidth;

            // TODO: test this
            // make sure setting "fill" changes color of a line
            // (by copying fillStyle to strokeStyle, since line is stroked, not filled)
            var origStrokeStyle = ctx.strokeStyle;
            ctx.strokeStyle = ctx.fillStyle;
            ctx.stroke();
            ctx.strokeStyle = origStrokeStyle;
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return 1;
        },

        /**
         * Returns object representation of an instance
         * @methd toObject
         * @return {Object}
         */
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                x1: this.get('x1'),
                y1: this.get('y1'),
                x2: this.get('x2'),
                y2: this.get('y2')
            });
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            return [
                '<line ',
                'x1="', this.get('x1'), '" ',
                'y1="', this.get('y1'), '" ',
                'x2="', this.get('x2'), '" ',
                'y2="', this.get('y2'), '" ',
                'style="', this.getSvgStyles(), '" ',
                '/>'
            ].join('');
        }
    });

    /**
     * List of attribute names to account for when parsing SVG element (used by `fabric.Line.fromElement`)
     * @static
     * @see http://www.w3.org/TR/SVG/shapes.html#LineElement
     */
    fabric.Line.ATTRIBUTE_NAMES = 'x1 y1 x2 y2 stroke stroke-width transform'.split(' ');

    /**
     * Returns fabric.Line instance from an SVG element
     * @static
     * @method fabric.Line.fromElement
     * @param {SVGElement} element Element to parse
     * @param {Object} [options] Options object
     * @return {fabric.Line} instance of fabric.Line
     */
    fabric.Line.fromElement = function(element, options) {
        var parsedAttributes = fabric.parseAttributes(element, fabric.Line.ATTRIBUTE_NAMES);
        var points = [
            parsedAttributes.x1 || 0,
            parsedAttributes.y1 || 0,
            parsedAttributes.x2 || 0,
            parsedAttributes.y2 || 0
        ];
        return new fabric.Line(points, extend(parsedAttributes, options));
    };

    /**
     * Returns fabric.Line instance from an object representation
     * @static
     * @method fabric.Line.fromObject
     * @param {Object} object Object to create an instance from
     * @return {fabric.Line} instance of fabric.Line
     */
    fabric.Line.fromObject = function(object) {
        var points = [object.x1, object.y1, object.x2, object.y2];
        return new fabric.Line(points, object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var fabric  = global.fabric || (global.fabric = { }),
        piBy2   = Math.PI * 2,
        extend = fabric.util.object.extend;

    if (fabric.Circle) {
        fabric.warn('fabric.Circle is already defined.');
        return;
    }

    /**
     * @class Circle
     * @extends fabric.Object
     */
    fabric.Circle = fabric.util.createClass(fabric.Object, /** @scope fabric.Circle.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'circle',

        /**
         * Constructor
         * @method initialize
         * @param {Object} [options] Options object
         * @return {fabric.Circle} thisArg
         */
        initialize: function(options) {
            options = options || { };

            this.set('radius', options.radius || 0);
            this.callSuper('initialize', options);

            var diameter = this.get('radius') * 2;
            this.set('width', diameter).set('height', diameter);
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} object representation of an instance
         */
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                radius: this.get('radius')
            });
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            return ('<circle ' +
                    'cx="0" cy="0" ' +
                    'r="' + this.radius + '" ' +
                    'style="' + this.getSvgStyles() + '" ' +
                    'transform="' + this.getSvgTransform() + '" ' +
                    '/>');
        },

        /**
         * @private
         * @method _render
         * @param ctx {CanvasRenderingContext2D} context to render on
         */
        _render: function(ctx, noTransform) {
            ctx.beginPath();
            // multiply by currently set alpha (the one that was set by path group where this object is contained, for example)
            ctx.globalAlpha = this.group ? (ctx.globalAlpha * this.opacity) : this.opacity;
            ctx.arc(noTransform ? this.left : 0, noTransform ? this.top : 0, this.radius, 0, piBy2, false);
            ctx.closePath();
            if (this.fill) {
                ctx.fill();
            }
            if (this.stroke) {
                ctx.stroke();
            }
        },

        /**
         * Returns horizontal radius of an object (according to how an object is scaled)
         * @method getRadiusX
         * @return {Number}
         */
        getRadiusX: function() {
            return this.get('radius') * this.get('scaleX');
        },

        /**
         * Returns vertical radius of an object (according to how an object is scaled)
         * @method getRadiusY
         * @return {Number}
         */
        getRadiusY: function() {
            return this.get('radius') * this.get('scaleY');
        },

        /**
         * Sets radius of an object (and updates width accordingly)
         * @method setRadius
         * @return {Number}
         */
        setRadius: function(value) {
            this.radius = value;
            this.set('width', value * 2).set('height', value * 2);
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity of this instance
         */
        complexity: function() {
            return 1;
        }
    });

    /**
     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Circle.fromElement})
     * @static
     * @see: http://www.w3.org/TR/SVG/shapes.html#CircleElement
     */
    fabric.Circle.ATTRIBUTE_NAMES = 'cx cy r fill fill-opacity opacity stroke stroke-width transform'.split(' ');

    /**
     * Returns {@link fabric.Circle} instance from an SVG element
     * @static
     * @method fabric.Circle.fromElement
     * @param element {SVGElement} element to parse
     * @param options {Object} options object
     * @throws {Error} If value of `r` attribute is missing or invalid
     * @return {Object} instance of fabric.Circle
     */
    fabric.Circle.fromElement = function(element, options) {
        options || (options = { });
        var parsedAttributes = fabric.parseAttributes(element, fabric.Circle.ATTRIBUTE_NAMES);
        if (!isValidRadius(parsedAttributes)) {
            throw new Error('value of `r` attribute is required and can not be negative');
        }
        if ('left' in parsedAttributes) {
            parsedAttributes.left -= (options.width / 2) || 0;
        }
        if ('top' in parsedAttributes) {
            parsedAttributes.top -= (options.height / 2) || 0;
        }
        return new fabric.Circle(extend(parsedAttributes, options));
    };

    /**
     * @private
     */
    function isValidRadius(attributes) {
        return (('radius' in attributes) && (attributes.radius > 0));
    }

    /**
     * Returns {@link fabric.Circle} instance from an object representation
     * @static
     * @method fabric.Circle.fromObject
     * @param {Object} object Object to create an instance from
     * @return {Object} Instance of fabric.Circle
     */
    fabric.Circle.fromObject = function(object) {
        return new fabric.Circle(object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { });

    if (fabric.Triangle) {
        fabric.warn('fabric.Triangle is already defined');
        return;
    }

    /**
     * @class Triangle
     * @extends fabric.Object
     */
    fabric.Triangle = fabric.util.createClass(fabric.Object, /** @scope fabric.Triangle.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'triangle',

        /**
         * Constructor
         * @method initialize
         * @param options {Object} options object
         * @return {Object} thisArg
         */
        initialize: function(options) {
            options = options || { };

            this.callSuper('initialize', options);

            this.set('width', options.width || 100)
                .set('height', options.height || 100);
        },

        /**
         * @private
         * @method _render
         * @param ctx {CanvasRenderingContext2D} Context to render on
         */
        _render: function(ctx) {
            var widthBy2 = this.width / 2,
                heightBy2 = this.height / 2;

            ctx.beginPath();
            ctx.moveTo(-widthBy2, heightBy2);
            ctx.lineTo(0, -heightBy2);
            ctx.lineTo(widthBy2, heightBy2);
            ctx.closePath();

            if (this.fill) {
                ctx.fill();
            }
            if (this.stroke) {
                ctx.stroke();
            }
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity of this instance
         */
        complexity: function() {
            return 1;
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {

            var widthBy2 = this.width / 2,
                heightBy2 = this.height / 2;

            var points = [
                -widthBy2 + " " + heightBy2,
                "0 " + -heightBy2,
                widthBy2 + " " + heightBy2
            ].join(",");

            return '<polygon ' +
                   'points="' + points + '" ' +
                   'style="' + this.getSvgStyles() + '" ' +
                   'transform="' + this.getSvgTransform() + '" ' +
                   '/>';
        }
    });

    /**
     * Returns fabric.Triangle instance from an object representation
     * @static
     * @method Canvas.Trangle.fromObject
     * @param object {Object} object to create an instance from
     * @return {Object} instance of Canvas.Triangle
     */
    fabric.Triangle.fromObject = function(object) {
        return new fabric.Triangle(object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global){

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        piBy2   = Math.PI * 2,
        extend = fabric.util.object.extend;

    if (fabric.Ellipse) {
        fabric.warn('fabric.Ellipse is already defined.');
        return;
    }

    /**
     * @class Ellipse
     * @extends fabric.Object
     */
    fabric.Ellipse = fabric.util.createClass(fabric.Object, /** @scope fabric.Ellipse.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'ellipse',

        /**
         * Constructor
         * @method initialize
         * @param {Object} [options] Options object
         * @return {Object} thisArg
         */
        initialize: function(options) {
            options = options || { };

            this.callSuper('initialize', options);

            this.set('rx', options.rx || 0);
            this.set('ry', options.ry || 0);

            this.set('width', this.get('rx') * 2);
            this.set('height', this.get('ry') * 2);
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} object representation of an instance
         */
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                rx: this.get('rx'),
                ry: this.get('ry')
            });
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            return [
                '<ellipse ',
                'rx="', this.get('rx'), '" ',
                'ry="', this.get('ry'), '" ',
                'style="', this.getSvgStyles(), '" ',
                'transform="', this.getSvgTransform(), '" ',
                '/>'
            ].join('');
        },

        /**
         * Renders this instance on a given context
         * @method render
         * @param ctx {CanvasRenderingContext2D} context to render on
         * @param noTransform {Boolean} context is not transformed when set to true
         */
        render: function(ctx, noTransform) {
            // do not use `get` for perf. reasons
            if (this.rx === 0 || this.ry === 0) return;
            return this.callSuper('render', ctx, noTransform);
        },

        /**
         * @private
         * @method _render
         * @param ctx {CanvasRenderingContext2D} context to render on
         */
        _render: function(ctx, noTransform) {
            ctx.beginPath();
            ctx.save();
            ctx.globalAlpha = this.group ? (ctx.globalAlpha * this.opacity) : this.opacity;
            if (this.transformMatrix && this.group) {
                ctx.translate(this.cx, this.cy);
            }
            ctx.transform(1, 0, 0, this.ry/this.rx, 0, 0);
            ctx.arc(noTransform ? this.left : 0, noTransform ? this.top : 0, this.rx, 0, piBy2, false);
            if (this.stroke) {
                ctx.stroke();
            }
            if (this.fill) {
                ctx.fill();
            }
            ctx.restore();
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return 1;
        }
    });

    /**
     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Ellipse.fromElement})
     * @static
     * @see http://www.w3.org/TR/SVG/shapes.html#EllipseElement
     */
    fabric.Ellipse.ATTRIBUTE_NAMES = 'cx cy rx ry fill fill-opacity opacity stroke stroke-width transform'.split(' ');

    /**
     * Returns {@link fabric.Ellipse} instance from an SVG element
     * @static
     * @method fabric.Ellipse.fromElement
     * @param {SVGElement} element Element to parse
     * @param {Object} [options] Options object
     * @return {fabric.Ellipse}
     */
    fabric.Ellipse.fromElement = function(element, options) {
        options || (options = { });

        var parsedAttributes = fabric.parseAttributes(element, fabric.Ellipse.ATTRIBUTE_NAMES);
        var cx = parsedAttributes.left;
        var cy = parsedAttributes.top;

        if ('left' in parsedAttributes) {
            parsedAttributes.left -= (options.width / 2) || 0;
        }
        if ('top' in parsedAttributes) {
            parsedAttributes.top -= (options.height / 2) || 0;
        }

        var ellipse = new fabric.Ellipse(extend(parsedAttributes, options));

        ellipse.cx = cx || 0;
        ellipse.cy = cy || 0;

        return ellipse;
    };

    /**
     * Returns fabric.Ellipse instance from an object representation
     * @static
     * @method fabric.Ellipse.fromObject
     * @param {Object} object Object to create an instance from
     * @return {fabric.Ellipse}
     */
    fabric.Ellipse.fromObject = function(object) {
        return new fabric.Ellipse(object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { });

    if (fabric.Rect) {
        console.warn('fabric.Rect is already defined');
        return;
    }

    /**
     * @class Rect
     * @extends fabric.Object
     */
    fabric.Rect = fabric.util.createClass(fabric.Object, /** @scope fabric.Rect.prototype */ {

        /**
         * Type of the instance
         * @property
         * @type String
         */
        type: 'rect',

        /**
         * Horizontal border radius
         * @property
         * @type Number
         */
        rx: 0,

        /**
         * Vertical border radius
         * @property
         * @type Number
         */
        ry: 0,

        /**
         * Constructor
         * @method initialize
         * @param options {Object} options object
         * @return {Object} thisArg
         */
        initialize: function(options) {
            options = options || { };

            this._initStateProperties();
            this.callSuper('initialize', options);
            this._initRxRy();
        },

        /**
         * Creates `stateProperties` list on an instance, and adds `fabric.Rect` -specific ones to it
         * (such as "rx", "ry", etc.)
         * @private
         * @method _initStateProperties
         */
        _initStateProperties: function() {
            this.stateProperties = this.stateProperties.concat(['rx', 'ry']);
        },

        /**
         * @private
         * @method _initRxRy
         */
        _initRxRy: function() {
            if (this.rx && !this.ry) {
                this.ry = this.rx;
            }
            else if (this.ry && !this.rx) {
                this.rx = this.ry;
            }
        },

        /**
         * @private
         * @method _render
         * @param ctx {CanvasRenderingContext2D} context to render on
         */
        _render: function(ctx) {
            var rx = this.rx || 0,
                ry = this.ry || 0,
                x = -this.width / 2,
                y = -this.height / 2,
                w = this.width,
                h = this.height;

            ctx.beginPath();
            ctx.globalAlpha = this.group ? (ctx.globalAlpha * this.opacity) : this.opacity;

            if (this.transformMatrix && this.group) {
                ctx.translate(
                    this.width / 2 + this.x,
                    this.height / 2 + this.y);
            }
            if (!this.transformMatrix && this.group) {
                ctx.translate(
                    -this.group.width / 2 + this.width / 2 + this.x,
                    -this.group.height / 2 + this.height / 2 + this.y);
            }

            ctx.moveTo(x+rx, y);
            ctx.lineTo(x+w-rx, y);
            ctx.quadraticCurveTo(x+w, y, x+w, y+ry, x+w, y+ry);
            ctx.lineTo(x+w, y+h-ry);
            ctx.quadraticCurveTo(x+w,y+h,x+w-rx,y+h,x+w-rx,y+h);
            ctx.lineTo(x+rx,y+h);
            ctx.quadraticCurveTo(x,y+h,x,y+h-ry,x,y+h-ry);
            ctx.lineTo(x,y+ry);
            ctx.quadraticCurveTo(x,y,x+rx,y,x+rx,y);
            ctx.closePath();

            if (this.fill) {
                ctx.fill();
            }

            if (this.strokeDashArray) {
                this._renderDashedStroke(ctx);
            }
            else if (this.stroke) {
                ctx.stroke();
            }
        },

        /**
         * @method _normalizeLeftTopProperties
         * @private
         * Since coordinate system differs from that of SVG
         */
        _normalizeLeftTopProperties: function(parsedAttributes) {
            if (parsedAttributes.left) {
                this.set('left', parsedAttributes.left + this.getWidth() / 2);
            }
            this.set('x', parsedAttributes.left || 0);
            if (parsedAttributes.top) {
                this.set('top', parsedAttributes.top + this.getHeight() / 2);
            }
            this.set('y', parsedAttributes.top || 0);
            return this;
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return 1;
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} object representation of an instance
         */
        toObject: function() {
            return fabric.util.object.extend(this.callSuper('toObject'), {
                rx: this.get('rx') || 0,
                ry: this.get('ry') || 0
            });
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            return '<rect ' +
                   'x="' + (-1 * this.width / 2) + '" y="' + (-1 * this.height / 2) + '" ' +
                   'rx="' + this.get('rx') + '" ry="' + this.get('ry') + '" ' +
                   'width="' + this.width + '" height="' + this.height + '" ' +
                   'style="' + this.getSvgStyles() + '" ' +
                   'transform="' + this.getSvgTransform() + '" ' +
                   '/>';
        }
    });

    // TODO (kangax): implement rounded rectangles (both parsing and rendering)

    /**
     * List of attribute names to account for when parsing SVG element (used by `fabric.Rect.fromElement`)
     * @static
     */
    fabric.Rect.ATTRIBUTE_NAMES = 'x y width height rx ry fill fill-opacity opacity stroke stroke-width transform'.split(' ');

    /**
     * @private
     */
    function _setDefaultLeftTopValues(attributes) {
        attributes.left = attributes.left || 0;
        attributes.top  = attributes.top  || 0;
        return attributes;
    }

    /**
     * Returns fabric.Rect instance from an SVG element
     * @static
     * @method fabric.Rect.fromElement
     * @param element {SVGElement} element to parse
     * @param options {Object} options object
     * @return {fabric.Rect} instance of fabric.Rect
     */
    fabric.Rect.fromElement = function(element, options) {
        if (!element) {
            return null;
        }

        var parsedAttributes = fabric.parseAttributes(element, fabric.Rect.ATTRIBUTE_NAMES);
        parsedAttributes = _setDefaultLeftTopValues(parsedAttributes);

        var rect = new fabric.Rect(fabric.util.object.extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes));
        rect._normalizeLeftTopProperties(parsedAttributes);

        return rect;
    };

    /**
     * Returns fabric.Rect instance from an object representation
     * @static
     * @method fabric.Rect.fromObject
     * @param object {Object} object to create an instance from
     * @return {Object} instance of fabric.Rect
     */
    fabric.Rect.fromObject = function(object) {
        return new fabric.Rect(object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        toFixed = fabric.util.toFixed;

    if (fabric.Polyline) {
        fabric.warn('fabric.Polyline is already defined');
        return;
    }

    /**
     * @class Polyline
     * @extends fabric.Object
     */
    fabric.Polyline = fabric.util.createClass(fabric.Object, /** @scope fabric.Polyline.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'polyline',

        /**
         * Constructor
         * @method initialize
         * @param {Array} points array of points
         * @param {Object} [options] Options object
         * @return {Object} thisArg
         */
        initialize: function(points, options) {
            options = options || { };
            this.set('points', points);
            this.callSuper('initialize', options);
            this._calcDimensions();
        },

        /**
         * @private
         * @method _calcDimensions
         */
        _calcDimensions: function() {
            return fabric.Polygon.prototype._calcDimensions.call(this);
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
            return fabric.Polygon.prototype.toObject.call(this);
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            var points = [];
            for (var i = 0, len = this.points.length; i < len; i++) {
                points.push(toFixed(this.points[i].x, 2), ',', toFixed(this.points[i].y, 2), ' ');
            }

            return [
                '<polyline ',
                'points="', points.join(''), '" ',
                'style="', this.getSvgStyles(), '" ',
                'transform="', this.getSvgTransform(), '" ',
                '/>'
            ].join('');
        },

        /**
         * @private
         * @method _render
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(ctx) {
            var point;
            ctx.beginPath();
            ctx.moveTo(this.points[0].x, this.points[0].y);
            for (var i = 0, len = this.points.length; i < len; i++) {
                point = this.points[i];
                ctx.lineTo(point.x, point.y);
            }
            if (this.fill) {
                ctx.fill();
            }
            if (this.stroke) {
                ctx.stroke();
            }
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return this.get('points').length;
        }
    });

    /**
     * List of attribute names to account for when parsing SVG element (used by `fabric.Polyline.fromElement`)
     * @static
     * @see: http://www.w3.org/TR/SVG/shapes.html#PolylineElement
     */
    fabric.Polyline.ATTRIBUTE_NAMES = 'fill fill-opacity opacity stroke stroke-width transform'.split(' ');

    /**
     * Returns fabric.Polyline instance from an SVG element
     * @static
     * @method fabric.Polyline.fromElement
     * @param {SVGElement} element Element to parse
     * @param {Object} [options] Options object
     * @return {Object} instance of fabric.Polyline
     */
    fabric.Polyline.fromElement = function(element, options) {
        if (!element) {
            return null;
        }
        options || (options = { });

        var points = fabric.parsePointsAttribute(element.getAttribute('points')),
            parsedAttributes = fabric.parseAttributes(element, fabric.Polyline.ATTRIBUTE_NAMES);

        for (var i = 0, len = points.length; i < len; i++) {
            // normalize coordinates, according to containing box (dimensions of which are passed via `options`)
            points[i].x -= (options.width / 2) || 0;
            points[i].y -= (options.height / 2) || 0;
        }

        return new fabric.Polyline(points, fabric.util.object.extend(parsedAttributes, options));
    };

    /**
     * Returns fabric.Polyline instance from an object representation
     * @static
     * @method fabric.Polyline.fromObject
     * @param {Object} [object] Object to create an instance from
     * @return {fabric.Polyline}
     */
    fabric.Polyline.fromObject = function(object) {
        var points = object.points;
        return new fabric.Polyline(points, object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        extend = fabric.util.object.extend,
        min = fabric.util.array.min,
        max = fabric.util.array.max,
        toFixed = fabric.util.toFixed;

    if (fabric.Polygon) {
        fabric.warn('fabric.Polygon is already defined');
        return;
    }

    /**
     * @class Polygon
     * @extends fabric.Object
     */
    fabric.Polygon = fabric.util.createClass(fabric.Object, /** @scope fabric.Polygon.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'polygon',

        /**
         * Constructor
         * @method initialize
         * @param {Array} points Array of points
         * @param {Object} options Options object
         * @return {fabric.Polygon} thisArg
         */
        initialize: function(points, options) {
            options = options || { };
            this.points = points;
            this.callSuper('initialize', options);
            this._calcDimensions();
        },

        /**
         * @private
         * @method _calcDimensions
         */
        _calcDimensions: function() {

            var points = this.points,
                minX = min(points, 'x'),
                minY = min(points, 'y'),
                maxX = max(points, 'x'),
                maxY = max(points, 'y');

            this.width = (maxX - minX) || 1;
            this.height = (maxY - minY) || 1;

            this.minX = minX;
            this.minY = minY;
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} object representation of an instance
         */
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                points: this.points.concat()
            });
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            var points = [];
            for (var i = 0, len = this.points.length; i < len; i++) {
                points.push(toFixed(this.points[i].x, 2), ',', toFixed(this.points[i].y, 2), ' ');
            }

            return [
                '<polygon ',
                'points="', points.join(''), '" ',
                'style="', this.getSvgStyles(), '" ',
                'transform="', this.getSvgTransform(), '" ',
                '/>'
            ].join('');
        },

        /**
         * @private
         * @method _render
         * @param ctx {CanvasRenderingContext2D} context to render on
         */
        _render: function(ctx) {
            var point;
            ctx.beginPath();
            ctx.moveTo(this.points[0].x, this.points[0].y);
            for (var i = 0, len = this.points.length; i < len; i++) {
                point = this.points[i];
                ctx.lineTo(point.x, point.y);
            }
            if (this.fill) {
                ctx.fill();
            }
            if (this.stroke) {
                ctx.closePath();
                ctx.stroke();
            }
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity of this instance
         */
        complexity: function() {
            return this.points.length;
        }
    });

    /**
     * List of attribute names to account for when parsing SVG element (used by `fabric.Polygon.fromElement`)
     * @static
     * @see: http://www.w3.org/TR/SVG/shapes.html#PolygonElement
     */
    fabric.Polygon.ATTRIBUTE_NAMES = 'fill fill-opacity opacity stroke stroke-width transform'.split(' ');

    /**
     * Returns fabric.Polygon instance from an SVG element
     * @static
     * @method fabric.Polygon.fromElement
     * @param {SVGElement} element Element to parse
     * @param {Object} options Options object
     * @return {fabric.Polygon}
     */
    fabric.Polygon.fromElement = function(element, options) {
        if (!element) {
            return null;
        }
        options || (options = { });

        var points = fabric.parsePointsAttribute(element.getAttribute('points')),
            parsedAttributes = fabric.parseAttributes(element, fabric.Polygon.ATTRIBUTE_NAMES);

        for (var i = 0, len = points.length; i < len; i++) {
            // normalize coordinates, according to containing box (dimensions of which are passed via `options`)
            points[i].x -= (options.width / 2) || 0;
            points[i].y -= (options.height / 2) || 0;
        }

        return new fabric.Polygon(points, extend(parsedAttributes, options));
    };

    /**
     * Returns fabric.Polygon instance from an object representation
     * @static
     * @method fabric.Polygon.fromObject
     * @param {Object} object Object to create an instance from
     * @return {fabric.Polygon}
     */
    fabric.Polygon.fromObject = function(object) {
        return new fabric.Polygon(object.points, object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    var commandLengths = {
        m: 2,
        l: 2,
        h: 1,
        v: 1,
        c: 6,
        s: 4,
        q: 4,
        t: 2,
        a: 7
    };

    function drawArc(ctx, x, y, coords) {
        var rx = coords[0];
        var ry = coords[1];
        var rot = coords[2];
        var large = coords[3];
        var sweep = coords[4];
        var ex = coords[5];
        var ey = coords[6];
        var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);
        for (var i=0; i<segs.length; i++) {
            var bez = segmentToBezier.apply(this, segs[i]);
            ctx.bezierCurveTo.apply(ctx, bez);
        }
    }

    var arcToSegmentsCache = { },
        segmentToBezierCache = { },
        _join = Array.prototype.join,
        argsString;

    // Generous contribution by Raph Levien, from libsvg-0.1.0.tar.gz
    function arcToSegments(x, y, rx, ry, large, sweep, rotateX, ox, oy) {
        argsString = _join.call(arguments);
        if (arcToSegmentsCache[argsString]) {
            return arcToSegmentsCache[argsString];
        }

        var th = rotateX * (Math.PI/180);
        var sin_th = Math.sin(th);
        var cos_th = Math.cos(th);
        rx = Math.abs(rx);
        ry = Math.abs(ry);
        var px = cos_th * (ox - x) * 0.5 + sin_th * (oy - y) * 0.5;
        var py = cos_th * (oy - y) * 0.5 - sin_th * (ox - x) * 0.5;
        var pl = (px*px) / (rx*rx) + (py*py) / (ry*ry);
        if (pl > 1) {
            pl = Math.sqrt(pl);
            rx *= pl;
            ry *= pl;
        }

        var a00 = cos_th / rx;
        var a01 = sin_th / rx;
        var a10 = (-sin_th) / ry;
        var a11 = (cos_th) / ry;
        var x0 = a00 * ox + a01 * oy;
        var y0 = a10 * ox + a11 * oy;
        var x1 = a00 * x + a01 * y;
        var y1 = a10 * x + a11 * y;

        var d = (x1-x0) * (x1-x0) + (y1-y0) * (y1-y0);
        var sfactor_sq = 1 / d - 0.25;
        if (sfactor_sq < 0) sfactor_sq = 0;
        var sfactor = Math.sqrt(sfactor_sq);
        if (sweep === large) sfactor = -sfactor;
        var xc = 0.5 * (x0 + x1) - sfactor * (y1-y0);
        var yc = 0.5 * (y0 + y1) + sfactor * (x1-x0);

        var th0 = Math.atan2(y0-yc, x0-xc);
        var th1 = Math.atan2(y1-yc, x1-xc);

        var th_arc = th1-th0;
        if (th_arc < 0 && sweep === 1){
            th_arc += 2*Math.PI;
        } else if (th_arc > 0 && sweep === 0) {
            th_arc -= 2 * Math.PI;
        }

        var segments = Math.ceil(Math.abs(th_arc / (Math.PI * 0.5 + 0.001)));
        var result = [];
        for (var i=0; i<segments; i++) {
            var th2 = th0 + i * th_arc / segments;
            var th3 = th0 + (i+1) * th_arc / segments;
            result[i] = [xc, yc, th2, th3, rx, ry, sin_th, cos_th];
        }

        return (arcToSegmentsCache[argsString] = result);
    }

    function segmentToBezier(cx, cy, th0, th1, rx, ry, sin_th, cos_th) {
        argsString = _join.call(arguments);
        if (segmentToBezierCache[argsString]) {
            return segmentToBezierCache[argsString];
        }

        var a00 = cos_th * rx;
        var a01 = -sin_th * ry;
        var a10 = sin_th * rx;
        var a11 = cos_th * ry;

        var th_half = 0.5 * (th1 - th0);
        var t = (8/3) * Math.sin(th_half * 0.5) * Math.sin(th_half * 0.5) / Math.sin(th_half);
        var x1 = cx + Math.cos(th0) - t * Math.sin(th0);
        var y1 = cy + Math.sin(th0) + t * Math.cos(th0);
        var x3 = cx + Math.cos(th1);
        var y3 = cy + Math.sin(th1);
        var x2 = x3 + t * Math.sin(th1);
        var y2 = y3 - t * Math.cos(th1);

        return (segmentToBezierCache[argsString] = [
            a00 * x1 + a01 * y1,      a10 * x1 + a11 * y1,
            a00 * x2 + a01 * y2,      a10 * x2 + a11 * y2,
            a00 * x3 + a01 * y3,      a10 * x3 + a11 * y3
        ]);
    }

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        min = fabric.util.array.min,
        max = fabric.util.array.max,
        extend = fabric.util.object.extend,
        _toString = Object.prototype.toString;

    if (fabric.Path) {
        fabric.warn('fabric.Path is already defined');
        return;
    }

    /**
     * @private
     */
    function getX(item) {
        if (item[0] === 'H') {
            return item[1];
        }
        return item[item.length - 2];
    }

    /**
     * @private
     */
    function getY(item) {
        if (item[0] === 'V') {
            return item[1];
        }
        return item[item.length - 1];
    }

    /**
     * @class Path
     * @extends fabric.Object
     */
    fabric.Path = fabric.util.createClass(fabric.Object, /** @scope fabric.Path.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'path',

        /**
         * Constructor
         * @method initialize
         * @param {Array|String} path Path data (sequence of coordinates and corresponding "command" tokens)
         * @param {Object} [options] Options object
         */
        initialize: function(path, options) {
            options = options || { };

            this.setOptions(options);

            if (!path) {
                throw new Error('`path` argument is required');
            }

            var fromArray = _toString.call(path) === '[object Array]';

            this.path = fromArray
                ? path
                // one of commands (m,M,l,L,q,Q,c,C,etc.) followed by non-command characters (i.e. command values)
                : path.match && path.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);

            if (!this.path) return;

            if (!fromArray) {
                this._initializeFromString(options);
            }

            if (options.sourcePath) {
                this.setSourcePath(options.sourcePath);
            }
        },

        /**
         * @private
         * @method _initializeFromString
         */
        _initializeFromString: function(options) {
            var isWidthSet = 'width' in options,
                isHeightSet = 'height' in options;

            this.path = this._parsePath();

            if (!isWidthSet || !isHeightSet) {
                extend(this, this._parseDimensions());
                if (isWidthSet) {
                    this.width = options.width;
                }
                if (isHeightSet) {
                    this.height = options.height;
                }
            }
        },

        /**
         * @private
         * @method _render
         */
        _render: function(ctx) {
            var current, // current instruction
                previous = null,
                x = 0, // current x
                y = 0, // current y
                controlX = 0, // current control point x
                controlY = 0, // current control point y
                tempX,
                tempY,
                tempControlX,
                tempControlY,
                l = -(this.width / 2),
                t = -(this.height / 2);

            for (var i = 0, len = this.path.length; i < len; ++i) {

                current = this.path[i];

                switch (current[0]) { // first letter

                    case 'l': // lineto, relative
                        x += current[1];
                        y += current[2];
                        ctx.lineTo(x + l, y + t);
                        break;

                    case 'L': // lineto, absolute
                        x = current[1];
                        y = current[2];
                        ctx.lineTo(x + l, y + t);
                        break;

                    case 'h': // horizontal lineto, relative
                        x += current[1];
                        ctx.lineTo(x + l, y + t);
                        break;

                    case 'H': // horizontal lineto, absolute
                        x = current[1];
                        ctx.lineTo(x + l, y + t);
                        break;

                    case 'v': // vertical lineto, relative
                        y += current[1];
                        ctx.lineTo(x + l, y + t);
                        break;

                    case 'V': // verical lineto, absolute
                        y = current[1];
                        ctx.lineTo(x + l, y + t);
                        break;

                    case 'm': // moveTo, relative
                        x += current[1];
                        y += current[2];
                        // draw a line if previous command was moveTo as well (otherwise, it will have no effect)
                        ctx[(previous && (previous[0] === 'm' || previous[0] === 'M')) ? 'lineTo' : 'moveTo'](x + l, y + t);
                        break;

                    case 'M': // moveTo, absolute
                        x = current[1];
                        y = current[2];
                        // draw a line if previous command was moveTo as well (otherwise, it will have no effect)
                        ctx[(previous && (previous[0] === 'm' || previous[0] === 'M')) ? 'lineTo' : 'moveTo'](x + l, y + t);
                        break;

                    case 'c': // bezierCurveTo, relative
                        tempX = x + current[5];
                        tempY = y + current[6];
                        controlX = x + current[3];
                        controlY = y + current[4];
                        ctx.bezierCurveTo(
                            x + current[1] + l, // x1
                            y + current[2] + t, // y1
                            controlX + l, // x2
                            controlY + t, // y2
                            tempX + l,
                            tempY + t
                        );
                        x = tempX;
                        y = tempY;
                        break;

                    case 'C': // bezierCurveTo, absolute
                        x = current[5];
                        y = current[6];
                        controlX = current[3];
                        controlY = current[4];
                        ctx.bezierCurveTo(
                            current[1] + l,
                            current[2] + t,
                            controlX + l,
                            controlY + t,
                            x + l,
                            y + t
                        );
                        break;

                    case 's': // shorthand cubic bezierCurveTo, relative

                        // transform to absolute x,y
                        tempX = x + current[3];
                        tempY = y + current[4];

                        // calculate reflection of previous control points
                        controlX = controlX ? (2 * x - controlX) : x;
                        controlY = controlY ? (2 * y - controlY) : y;

                        ctx.bezierCurveTo(
                            controlX + l,
                            controlY + t,
                            x + current[1] + l,
                            y + current[2] + t,
                            tempX + l,
                            tempY + t
                        );
                        // set control point to 2nd one of this command
                        // "... the first control point is assumed to be the reflection of the second control point on the previous command relative to the current point."
                        controlX = x + current[1];
                        controlY = y + current[2];

                        x = tempX;
                        y = tempY;
                        break;

                    case 'S': // shorthand cubic bezierCurveTo, absolute
                        tempX = current[3];
                        tempY = current[4];
                        // calculate reflection of previous control points
                        controlX = 2*x - controlX;
                        controlY = 2*y - controlY;
                        ctx.bezierCurveTo(
                            controlX + l,
                            controlY + t,
                            current[1] + l,
                            current[2] + t,
                            tempX + l,
                            tempY + t
                        );
                        x = tempX;
                        y = tempY;

                        // set control point to 2nd one of this command
                        // "... the first control point is assumed to be the reflection of the second control point on the previous command relative to the current point."
                        controlX = current[1];
                        controlY = current[2];

                        break;

                    case 'q': // quadraticCurveTo, relative
                        // transform to absolute x,y
                        tempX = x + current[3];
                        tempY = y + current[4];

                        controlX = x + current[1];
                        controlY = y + current[2];

                        ctx.quadraticCurveTo(
                            controlX + l,
                            controlY + t,
                            tempX + l,
                            tempY + t
                        );
                        x = tempX;
                        y = tempY;
                        break;

                    case 'Q': // quadraticCurveTo, absolute
                        tempX = current[3];
                        tempY = current[4];

                        ctx.quadraticCurveTo(
                            current[1] + l,
                            current[2] + t,
                            tempX + l,
                            tempY + t
                        );
                        x = tempX;
                        y = tempY;
                        controlX = current[1];
                        controlY = current[2];
                        break;

                    case 't': // shorthand quadraticCurveTo, relative

                        // transform to absolute x,y
                        tempX = x + current[1];
                        tempY = y + current[2];


                        if (previous[0].match(/[QqTt]/) === null) {
                            // If there is no previous command or if the previous command was not a Q, q, T or t,
                            // assume the control point is coincident with the current point
                            controlX = x;
                            controlY = y;
                        }
                        else if (previous[0] === 't') {
                            // calculate reflection of previous control points for t
                            controlX = 2 * x - tempControlX;
                            controlY = 2 * y - tempControlY;
                        }
                        else if (previous[0] === 'q') {
                            // calculate reflection of previous control points for q
                            controlX = 2 * x - controlX;
                            controlY = 2 * y - controlY;
                        }

                        tempControlX = controlX;
                        tempControlY = controlY;

                        ctx.quadraticCurveTo(
                            controlX + l,
                            controlY + t,
                            tempX + l,
                            tempY + t
                        );
                        x = tempX;
                        y = tempY;
                        controlX = x + current[1];
                        controlY = y + current[2];
                        break;

                    case 'T':
                        tempX = current[1];
                        tempY = current[2];

                        // calculate reflection of previous control points
                        controlX = 2 * x - controlX;
                        controlY = 2 * y - controlY;
                        ctx.quadraticCurveTo(
                            controlX + l,
                            controlY + t,
                            tempX + l,
                            tempY + t
                        );
                        x = tempX;
                        y = tempY;
                        break;

                    case 'a':
                        // TODO: optimize this
                        drawArc(ctx, x + l, y + t, [
                            current[1],
                            current[2],
                            current[3],
                            current[4],
                            current[5],
                            current[6] + x + l,
                            current[7] + y + t
                        ]);
                        x += current[6];
                        y += current[7];
                        break;

                    case 'A':
                        // TODO: optimize this
                        drawArc(ctx, x + l, y + t, [
                            current[1],
                            current[2],
                            current[3],
                            current[4],
                            current[5],
                            current[6] + l,
                            current[7] + t
                        ]);
                        x = current[6];
                        y = current[7];
                        break;

                    case 'z':
                    case 'Z':
                        ctx.closePath();
                        break;
                }
                previous = current;
            }
        },

        /**
         * Renders path on a specified context
         * @method render
         * @param {CanvasRenderingContext2D} ctx context to render path on
         * @param {Boolean} noTransform When true, context is not transformed
         */
        render: function(ctx, noTransform) {
            ctx.save();
            var m = this.transformMatrix;
            if (m) {
                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
            }
            if (!noTransform) {
                this.transform(ctx);
            }
            // ctx.globalCompositeOperation = this.fillRule;

            if (this.overlayFill) {
                ctx.fillStyle = this.overlayFill;
            }
            else if (this.fill) {
                ctx.fillStyle = this.fill.toLiveGradient
                    ? this.fill.toLiveGradient(ctx)
                    : this.fill;
            }

            if (this.stroke) {
                ctx.strokeStyle = this.stroke;
            }
            ctx.beginPath();

            this._render(ctx);

            if (this.fill) {
                ctx.fill();
            }
            if (this.stroke) {
                ctx.strokeStyle = this.stroke;
                ctx.lineWidth = this.strokeWidth;
                ctx.lineCap = ctx.lineJoin = 'round';
                ctx.stroke();
            }
            if (!noTransform && this.active) {
                this.drawBorders(ctx);
                this.hideCorners || this.drawCorners(ctx);
            }
            ctx.restore();
        },

        /**
         * Returns string representation of an instance
         * @method toString
         * @return {String} string representation of an instance
         */
        toString: function() {
            return '#<fabric.Path (' + this.complexity() +
                   '): { "top": ' + this.top + ', "left": ' + this.left + ' }>';
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object}
         */
        toObject: function() {
            var o = extend(this.callSuper('toObject'), {
                path: this.path
            });
            if (this.sourcePath) {
                o.sourcePath = this.sourcePath;
            }
            if (this.transformMatrix) {
                o.transformMatrix = this.transformMatrix;
            }
            return o;
        },

        /**
         * Returns dataless object representation of an instance
         * @method toDatalessObject
         * @return {Object}
         */
        toDatalessObject: function() {
            var o = this.toObject();
            if (this.sourcePath) {
                o.path = this.sourcePath;
            }
            delete o.sourcePath;
            return o;
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            var chunks = [];
            for (var i = 0, len = this.path.length; i < len; i++) {
                chunks.push(this.path[i].join(' '));
            }
            var path = chunks.join(' ');

            return [
                '<g transform="', this.getSvgTransform(), '">',
                '<path ',
                'width="', this.width, '" height="', this.height, '" ',
                'd="', path, '" ',
                'style="', this.getSvgStyles(), '" ',
                'transform="translate(', (-this.width / 2), ' ', (-this.height/2), ')" />',
                '</g>'
            ].join('');
        },

        /**
         * Returns number representation of an instance complexity
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return this.path.length;
        },

        /**
         * @private
         * @method _parsePath
         */
        _parsePath: function() {
            var result = [ ],
                currentPath,
                chunks,
                parsed;

            for (var i = 0, chunksParsed, len = this.path.length; i < len; i++) {
                currentPath = this.path[i];
                chunks = currentPath.slice(1).trim().replace(/(\d)-/g, '$1###-').split(/\s|,|###/);
                chunksParsed = [ currentPath.charAt(0) ];

                for (var j = 0, jlen = chunks.length; j < jlen; j++) {
                    parsed = parseFloat(chunks[j]);
                    if (!isNaN(parsed)) {
                        chunksParsed.push(parsed);
                    }
                }

                var command = chunksParsed[0].toLowerCase(),
                    commandLength = commandLengths[command];

                if (chunksParsed.length - 1 > commandLength) {
                    for (var k = 1, klen = chunksParsed.length; k < klen; k += commandLength) {
                        result.push([ chunksParsed[0] ].concat(chunksParsed.slice(k, k + commandLength)));
                    }
                }
                else {
                    result.push(chunksParsed);
                }
            }

            return result;
        },

        /**
         * @method _parseDimensions
         */
        _parseDimensions: function() {
            var aX = [],
                aY = [],
                previousX,
                previousY,
                isLowerCase = false,
                x,
                y;

            this.path.forEach(function(item, i) {
                if (item[0] !== 'H') {
                    previousX = (i === 0) ? getX(item) : getX(this.path[i-1]);
                }
                if (item[0] !== 'V') {
                    previousY = (i === 0) ? getY(item) : getY(this.path[i-1]);
                }

                // lowercased letter denotes relative position;
                // transform to absolute
                if (item[0] === item[0].toLowerCase()) {
                    isLowerCase = true;
                }

                // last 2 items in an array of coordinates are the actualy x/y (except H/V);
                // collect them

                // TODO (kangax): support relative h/v commands

                x = isLowerCase
                    ? previousX + getX(item)
                    : item[0] === 'V'
                        ? previousX
                        : getX(item);

                y = isLowerCase
                    ? previousY + getY(item)
                    : item[0] === 'H'
                        ? previousY
                        : getY(item);

                var val = parseInt(x, 10);
                if (!isNaN(val)) aX.push(val);

                val = parseInt(y, 10);
                if (!isNaN(val)) aY.push(val);

            }, this);

            var minX = min(aX),
                minY = min(aY),
                deltaX = 0,
                deltaY = 0;

            var o = {
                top: minY - deltaY,
                left: minX - deltaX,
                bottom: max(aY) - deltaY,
                right: max(aX) - deltaX
            };

            o.width = o.right - o.left;
            o.height = o.bottom - o.top;

            return o;
        }
    });

    /**
     * Creates an instance of fabric.Path from an object
     * @static
     * @method fabric.Path.fromObject
     * @return {fabric.Path} Instance of fabric.Path
     */
    fabric.Path.fromObject = function(object) {
        return new fabric.Path(object.path, object);
    };

    /**
     * List of attribute names to account for when parsing SVG element (used by `fabric.Path.fromElement`)
     * @static
     * @see http://www.w3.org/TR/SVG/paths.html#PathElement
     */
    fabric.Path.ATTRIBUTE_NAMES = 'd fill fill-opacity opacity fill-rule stroke stroke-width transform'.split(' ');

    /**
     * Creates an instance of fabric.Path from an SVG <path> element
     * @static
     * @method fabric.Path.fromElement
     * @param {SVGElement} element to parse
     * @param {Object} options object
     * @return {fabric.Path} Instance of fabric.Path
     */
    fabric.Path.fromElement = function(element, options) {
        var parsedAttributes = fabric.parseAttributes(element, fabric.Path.ATTRIBUTE_NAMES);
        return new fabric.Path(parsedAttributes.d, extend(parsedAttributes, options));
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        extend = fabric.util.object.extend,
        invoke = fabric.util.array.invoke,
        parentToObject = fabric.Object.prototype.toObject,
        camelize = fabric.util.string.camelize,
        capitalize = fabric.util.string.capitalize;

    if (fabric.PathGroup) {
        fabric.warn('fabric.PathGroup is already defined');
        return;
    }

    /**
     * @class PathGroup
     * @extends fabric.Path
     */
    fabric.PathGroup = fabric.util.createClass(fabric.Path, /** @scope fabric.PathGroup.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'path-group',

        /**
         * @property
         * @type String
         */
        fill: '',

        /**
         * @property
         * @type Boolean
         */
        forceFillOverwrite: false,

        /**
         * Constructor
         * @method initialize
         * @param {Array} paths
         * @param {Object} [options] Options object
         * @return {fabric.PathGroup} thisArg
         */
        initialize: function(paths, options) {

            options = options || { };
            this.paths = paths || [ ];

            for (var i = this.paths.length; i--; ) {
                this.paths[i].group = this;
            }

            this.setOptions(options);
            this.setCoords();

            if (options.sourcePath) {
                this.setSourcePath(options.sourcePath);
            }
        },

        /**
         * Renders this group on a specified context
         * @method render
         * @param {CanvasRenderingContext2D} ctx Context to render this instance on
         */
        render: function(ctx) {
            ctx.save();

            var m = this.transformMatrix;
            if (m) {
                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
            }

            this.transform(ctx);
            for (var i = 0, l = this.paths.length; i < l; ++i) {
                this.paths[i].render(ctx, true);
            }
            if (this.active) {
                this.drawBorders(ctx);
                this.hideCorners || this.drawCorners(ctx);
            }
            ctx.restore();
        },

        /**
         * Sets certain property to a certain value
         * @method _set
         * @param {String} prop
         * @param {Any} value
         * @return {fabric.PathGroup} thisArg
         */
        _set: function(prop, value) {

            if ((prop === 'fill' || prop === 'overlayFill') && value && this.isSameColor()) {
                var i = this.paths.length;
                while (i--) {
                    this.paths[i]._set(prop, value);
                }
            }

            return this.callSuper('_set', prop, value);
        },

        /**
         * Returns object representation of this path group
         * @method toObject
         * @return {Object} object representation of an instance
         */
        toObject: function() {
            return extend(parentToObject.call(this), {
                paths: invoke(this.getObjects(), 'toObject'),
                sourcePath: this.sourcePath
            });
        },

        /**
         * Returns dataless object representation of this path group
         * @method toDatalessObject
         * @return {Object} dataless object representation of an instance
         */
        toDatalessObject: function() {
            var o = this.toObject();
            if (this.sourcePath) {
                o.paths = this.sourcePath;
            }
            return o;
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            var objects = this.getObjects();
            var markup = [
                '<g ',
                'width="', this.width, '" ',
                'height="', this.height, '" ',
                'style="', this.getSvgStyles(), '" ',
                'transform="', this.getSvgTransform(), '" ',
                '>'
            ];

            for (var i = 0, len = objects.length; i < len; i++) {
                markup.push(objects[i].toSVG());
            }
            markup.push('</g>');

            return markup.join('');
        },

        /**
         * Returns a string representation of this path group
         * @method toString
         * @return {String} string representation of an object
         */
        toString: function() {
            return '#<fabric.PathGroup (' + this.complexity() +
                   '): { top: ' + this.top + ', left: ' + this.left + ' }>';
        },

        /**
         * Returns true if all paths in this group are of same color
         * @method isSameColor
         * @return {Boolean} true if all paths are of the same color (`fill`)
         */
        isSameColor: function() {
            var firstPathFill = this.getObjects()[0].get('fill');
            return this.getObjects().every(function(path) {
                return path.get('fill') === firstPathFill;
            });
        },

        /**
         * Returns number representation of object's complexity
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return this.paths.reduce(function(total, path) {
                return total + ((path && path.complexity) ? path.complexity() : 0);
            }, 0);
        },

        /**
         * Makes path group grayscale
         * @method toGrayscale
         * @return {fabric.PathGroup} thisArg
         */
        toGrayscale: function() {
            var i = this.paths.length;
            while (i--) {
                this.paths[i].toGrayscale();
            }
            return this;
        },

        /**
         * Returns all paths in this path group
         * @method getObjects
         * @return {Array} array of path objects included in this path group
         */
        getObjects: function() {
            return this.paths;
        }
    });

    /**
     * @private
     * @method instantiatePaths
     */
    function instantiatePaths(paths) {
        for (var i = 0, len = paths.length; i < len; i++) {
            if (!(paths[i] instanceof fabric.Object)) {
                var klassName = camelize(capitalize(paths[i].type));
                paths[i] = fabric[klassName].fromObject(paths[i]);
            }
        }
        return paths;
    }

    /**
     * Creates fabric.PathGroup instance from an object representation
     * @static
     * @method fabric.PathGroup.fromObject
     * @param {Object} object
     * @return {fabric.PathGroup}
     */
    fabric.PathGroup.fromObject = function(object) {
        var paths = instantiatePaths(object.paths);
        return new fabric.PathGroup(paths, object);
    };

})(typeof exports !== 'undefined' ? exports : this);
(function(global){

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        extend = fabric.util.object.extend,
        min = fabric.util.array.min,
        max = fabric.util.array.max,
        invoke = fabric.util.array.invoke,
        removeFromArray = fabric.util.removeFromArray;

    if (fabric.Group) {
        return;
    }

    /**
     * @class Group
     * @extends fabric.Object
     */
    fabric.Group = fabric.util.createClass(fabric.Object, /** @scope fabric.Group.prototype */ {

        /**
         * @property
         * @type String
         */
        type: 'group',

        /**
         * Constructor
         * @method initialized
         * @param {Object} objects Group objects
         * @param {Object} [options] Options object
         * @return {Object} thisArg
         */
        initialize: function(objects, options) {
            options = options || { };

            this.objects = objects || [];
            this.originalState = { };

            this.callSuper('initialize');

            this._calcBounds();
            this._updateObjectsCoords();

            if (options) {
                extend(this, options);
            }
            this._setOpacityIfSame();

            // group is active by default
            this.setCoords(true);
            this.saveCoords();

            //this.activateAllObjects();
        },

        /**
         * @private
         * @method _updateObjectsCoords
         */
        _updateObjectsCoords: function() {
            var groupDeltaX = this.left,
                groupDeltaY = this.top;

            this.forEachObject(function(object) {

                var objectLeft = object.get('left'),
                    objectTop = object.get('top');

                object.set('originalLeft', objectLeft);
                object.set('originalTop', objectTop);

                object.set('left', objectLeft - groupDeltaX);
                object.set('top', objectTop - groupDeltaY);

                object.setCoords();

                // do not display corners of objects enclosed in a group
                object.hideCorners = true;
            }, this);
        },

        /**
         * Returns string represenation of a group
         * @method toString
         * @return {String}
         */
        toString: function() {
            return '#<fabric.Group: (' + this.complexity() + ')>';
        },

        /**
         * Returns an array of all objects in this group
         * @method getObjects
         * @return {Array} group objects
         */
        getObjects: function() {
            return this.objects;
        },

        /**
         * Adds an object to a group; Then recalculates group's dimension, position.
         * @method addWithUpdate
         * @param {Object} object
         * @return {fabric.Group} thisArg
         * @chainable
         */
        addWithUpdate: function(object) {
            this._restoreObjectsState();
            this.objects.push(object);
            this._calcBounds();
            this._updateObjectsCoords();
            return this;
        },

        /**
         * Removes an object from a group; Then recalculates group's dimension, position.
         * @method removeWithUpdate
         * @param {Object} object
         * @return {fabric.Group} thisArg
         * @chainable
         */
        removeWithUpdate: function(object) {
            this._restoreObjectsState();
            removeFromArray(this.objects, object);
            object.setActive(false);
            this._calcBounds();
            this._updateObjectsCoords();
            return this;
        },

        /**
         * Adds an object to a group
         * @method add
         * @param {Object} object
         * @return {fabric.Group} thisArg
         * @chainable
         */
        add: function(object) {
            this.objects.push(object);
            return this;
        },

        /**
         * Removes an object from a group
         * @method remove
         * @param {Object} object
         * @return {fabric.Group} thisArg
         * @chainable
         */
        remove: function(object) {
            removeFromArray(this.objects, object);
            return this;
        },

        /**
         * Returns a size of a group (i.e: length of an array containing its objects)
         * @return {Number} Group size
         */
        size: function() {
            return this.getObjects().length;
        },

        /**
         * @private
         */
        _set: function(key, value) {
            if (key === 'fill' || key === 'opacity') {
                var i = this.objects.length;
                this[key] = value;
                while (i--) {
                    this.objects[i].set(key, value);
                }
            }
            else {
                this[key] = value;
            }
        },

        /**
         * Returns true if a group contains an object
         * @method contains
         * @param {Object} object Object to check against
         * @return {Boolean} `true` if group contains an object
         */
        contains: function(object) {
            return this.objects.indexOf(object) > -1;
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} object representation of an instance
         */
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                objects: invoke(this.objects, 'toObject')
            });
        },

        /**
         * Renders instance on a given context
         * @method render
         * @param {CanvasRenderingContext2D} ctx context to render instance on
         */
        render: function(ctx, noTransform) {
            ctx.save();
            this.transform(ctx);

            var groupScaleFactor = Math.max(this.scaleX, this.scaleY);

            //The array is now sorted in order of highest first, so start from end.
            for (var i = this.objects.length; i > 0; i--) {

                var object = this.objects[i-1],
                    originalScaleFactor = object.borderScaleFactor,
                    originalHasRotatingPoint = object.hasRotatingPoint;

                object.borderScaleFactor = groupScaleFactor;
                object.hasRotatingPoint = false;

                object.render(ctx);

                object.borderScaleFactor = originalScaleFactor;
                object.hasRotatingPoint = originalHasRotatingPoint;
            }

            if (!noTransform && this.active) {
                this.drawBorders(ctx);
                this.hideCorners || this.drawCorners(ctx);
            }
            ctx.restore();
            this.setCoords();
        },

        /**
         * Returns object from the group at the specified index
         * @method item
         * @param index {Number} index of item to get
         * @return {fabric.Object}
         */
        item: function(index) {
            return this.getObjects()[index];
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return this.getObjects().reduce(function(total, object) {
                total += (typeof object.complexity === 'function') ? object.complexity() : 0;
                return total;
            }, 0);
        },

        /**
         * Retores original state of each of group objects (original state is that which was before group was created).
         * @private
         * @method _restoreObjectsState
         * @return {fabric.Group} thisArg
         * @chainable
         */
        _restoreObjectsState: function() {
            this.objects.forEach(this._restoreObjectState, this);
            return this;
        },

        /**
         * Restores original state of a specified object in group
         * @private
         * @method _restoreObjectState
         * @param {fabric.Object} object
         * @return {fabric.Group} thisArg
         */
        _restoreObjectState: function(object) {

            var groupLeft = this.get('left'),
                groupTop = this.get('top'),
                groupAngle = this.getAngle() * (Math.PI / 180),
                rotatedTop = Math.cos(groupAngle) * object.get('top') + Math.sin(groupAngle) * object.get('left'),
                rotatedLeft = -Math.sin(groupAngle) * object.get('top') + Math.cos(groupAngle) * object.get('left');

            object.setAngle(object.getAngle() + this.getAngle());

            object.set('left', groupLeft + rotatedLeft * this.get('scaleX'));
            object.set('top', groupTop + rotatedTop * this.get('scaleY'));

            object.set('scaleX', object.get('scaleX') * this.get('scaleX'));
            object.set('scaleY', object.get('scaleY') * this.get('scaleY'));

            object.setCoords();
            object.hideCorners = false;
            object.setActive(false);
            object.setCoords();

            return this;
        },

        /**
         * Destroys a group (restoring state of its objects)
         * @method destroy
         * @return {fabric.Group} thisArg
         * @chainable
         */
        destroy: function() {
            return this._restoreObjectsState();
        },

        /**
         * Saves coordinates of this instance (to be used together with `hasMoved`)
         * @saveCoords
         * @return {fabric.Group} thisArg
         * @chainable
         */
        saveCoords: function() {
            this._originalLeft = this.get('left');
            this._originalTop = this.get('top');
            return this;
        },

        /**
         * Checks whether this group was moved (since `saveCoords` was called last)
         * @method hasMoved
         * @return {Boolean} true if an object was moved (since fabric.Group#saveCoords was called)
         */
        hasMoved: function() {
            return this._originalLeft !== this.get('left') ||
                   this._originalTop !== this.get('top');
        },

        /**
         * Sets coordinates of all group objects
         * @method setObjectsCoords
         * @return {fabric.Group} thisArg
         * @chainable
         */
        setObjectsCoords: function() {
            this.forEachObject(function(object) {
                object.setCoords();
            });
            return this;
        },

        /**
         * Activates (makes active) all group objects
         * @method activateAllObjects
         * @return {fabric.Group} thisArg
         * @chainable
         */
        activateAllObjects: function() {
            this.forEachObject(function(object) {
                object.setActive();
            });
            return this;
        },

        /**
         * Executes given function for each object in this group
         * @method forEachObject
         * @param {Function} callback
         *                   Callback invoked with current object as first argument,
         *                   index - as second and an array of all objects - as third.
         *                   Iteration happens in reverse order (for performance reasons).
         *                   Callback is invoked in a context of Global Object (e.g. `window`)
         *                   when no `context` argument is given
         *
         * @param {Object} context Context (aka thisObject)
         *
         * @return {fabric.Group} thisArg
         * @chainable
         */
        forEachObject: fabric.StaticCanvas.prototype.forEachObject,

        /**
         * @private
         * @method _setOpacityIfSame
         */
        _setOpacityIfSame: function() {
            var objects = this.getObjects(),
                firstValue = objects[0] ? objects[0].get('opacity') : 1;

            var isSameOpacity = objects.every(function(o) {
                return o.get('opacity') === firstValue;
            });

            if (isSameOpacity) {
                this.opacity = firstValue;
            }
        },

        /**
         * @private
         * @method _calcBounds
         */
        _calcBounds: function() {
            var aX = [],
                aY = [],
                minX, minY, maxX, maxY, o, width, height,
                i = 0,
                len = this.objects.length;

            for (; i < len; ++i) {
                o = this.objects[i];
                o.setCoords();
                for (var prop in o.oCoords) {
                    // alert(o.oCoords[prop].x
                    // alert(o.oCoords[prop].y                    
                    aX.push(o.oCoords[prop].x);
                    aY.push(o.oCoords[prop].y);
                }
            };

            minX = min(aX);
            maxX = max(aX);
            minY = min(aY);
            maxY = max(aY);

            width = (maxX - minX) || 0;
            height = (maxY - minY) || 0;

            this.width = width;
            this.height = height;

            this.left = (minX + width / 2) || 0;
            this.top = (minY + height / 2) || 0;
        },

        /**
         * Checks if point is contained within the group
         * @method containsPoint
         * @param {fabric.Point} point point with `x` and `y` properties
         * @return {Boolean} true if point is contained within group
         */
        containsPoint: function(point) {

            var halfWidth = this.get('width') / 2,
                halfHeight = this.get('height') / 2,
                centerX = this.get('left'),
                centerY = this.get('top');

            return  centerX - halfWidth < point.x &&
                    centerX + halfWidth > point.x &&
                    centerY - halfHeight < point.y &&
                    centerY + halfHeight > point.y;
        },

        /**
         * Makes all of this group's objects grayscale (i.e. calling `toGrayscale` on them)
         * @method toGrayscale
         */
        toGrayscale: function() {
            var i = this.objects.length;
            while (i--) {
                this.objects[i].toGrayscale();
            }
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            var objectsMarkup = [ ];
            for (var i = 0, len = this.objects.length; i < len; i++) {
                objectsMarkup.push(this.objects[i].toSVG());
            }

            return (
                '<g transform="' + this.getSvgTransform() + '">' +
                objectsMarkup.join('') +
                '</g>');
        }
    });

    /**
     * Returns fabric.Group instance from an object representation
     * @static
     * @method fabric.Group.fromObject
     * @param object {Object} object to create a group from
     * @param options {Object} options object
     * @return {fabric.Group} an instance of fabric.Group
     */
    fabric.Group.fromObject = function(object, callback) {
        fabric.util.enlivenObjects(object.objects, function(enlivenedObjects) {
            delete object.objects;
            callback && callback(new fabric.Group(enlivenedObjects, object));
        });
    };

    fabric.Group.async = true;

})(typeof exports !== 'undefined' ? exports : this);
(function(global) {

    "use strict";

    var extend = fabric.util.object.extend;

    if (!global.fabric) {
        global.fabric = { };
    }

    if (global.fabric.Image) {
        fabric.warn('fabric.Image is already defined.');
        return;
    }

    /**
     * @class Image
     * @extends fabric.Object
     */
    fabric.Image = fabric.util.createClass(fabric.Object, /** @scope fabric.Image.prototype */ {

        /**
         * @property
         * @type Boolean
         */
        active: false,

        /**
         * @property
         * @type String
         */
        type: 'image',

        /**
         * Constructor
         * @param {HTMLImageElement | String} element Image element
         * @param {Object} options optional
         */
        initialize: function(element, options) {
            options || (options = { });

            this.callSuper('initialize', options);
            this._initElement(element);
            this._originalImage = this.getElement();
            this._initConfig(options);

            this.filters = [ ];

            if (options.filters) {
                this.filters = options.filters;
                this.applyFilters();
            }
        },

        /**
         * Returns image element which this instance if based on
         * @method getElement
         * @return {HTMLImageElement} image element
         */
        getElement: function() {
            return this._element;
        },

        /**
         * Sets image element for this instance to a specified one
         * @method setElement
         * @param {HTMLImageElement} element
         * @return {fabric.Image} thisArg
         * @chainable
         */
        setElement: function(element) {
            this._element = element;
            this._initConfig();
            return this;
        },

        /**
         * Returns original size of an image
         * @method getOriginalSize
         * @return {Object} object with "width" and "height" properties
         */
        getOriginalSize: function() {
            var element = this.getElement();
            return {
                width: element.width,
                height: element.height
            };
        },

        /**
         * Renders image on a specified context
         * @method render
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        render: function(ctx, noTransform) {
            ctx.save();
            var m = this.transformMatrix;
            this._resetWidthHeight();
            if (this.group) {
                ctx.translate(-this.group.width/2 + this.width/2, -this.group.height/2 + this.height/2);
            }
            if (m) {
                ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
            }
            if (!noTransform) {
                this.transform(ctx);
            }
            this._render(ctx);
            if (this.active && !noTransform) {
                this.drawBorders(ctx);
                this.hideCorners || this.drawCorners(ctx);
            }
            ctx.restore();
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} Object representation of an instance
         */
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                src: this._originalImage.src || this._originalImage._src,
                filters: this.filters.concat()
            });
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {
            return '<g transform="' + this.getSvgTransform() + '">'+
                   '<image xlink:href="' + this.getSvgSrc() + '" '+
                   'style="' + this.getSvgStyles() + '" ' +
                       // we're essentially moving origin of transformation from top/left corner to the center of the shape
                       // by wrapping it in container <g> element with actual transformation, then offsetting object to the top/left
                       // so that object's center aligns with container's left/top
                   'transform="translate('+ (-this.width/2) + ' ' + (-this.height/2) + ')" ' +
                   'width="' + this.width + '" ' +
                   'height="' + this.height + '"' + '/>'+
                   '</g>';
        },

        /**
         * Returns source of an image
         * @method getSrc
         * @return {String} Source of an image
         */
        getSrc: function() {
            return this.getElement().src || this.getElement()._src;
        },

        /**
         * Returns string representation of an instance
         * @method toString
         * @return {String} String representation of an instance
         */
        toString: function() {
            return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
        },

        /**
         * Returns a clone of an instance
         * @mthod clone
         * @param {Function} callback Callback is invoked with a clone as a first argument
         */
        clone: function(callback) {
            this.constructor.fromObject(this.toObject(), callback);
        },

        /**
         * Applies filters assigned to this image (from "filters" array)
         * @mthod applyFilters
         * @param {Function} callback Callback is invoked when all filters have been applied and new image is generated
         */
        applyFilters: function(callback) {

            if (this.filters.length === 0) {
                this.setElement(this._originalImage);
                callback && callback();
                return;
            }

            var isLikelyNode = typeof Buffer !== 'undefined' && typeof window === 'undefined',
                imgEl = this._originalImage,
                canvasEl = fabric.document.createElement('canvas'),
                replacement = isLikelyNode ? new (require('canvas').Image)() : fabric.document.createElement('img'),
                _this = this;

            if (!canvasEl.getContext && typeof G_vmlCanvasManager !== 'undefined') {
                G_vmlCanvasManager.initElement(canvasEl);
            }

            canvasEl.width = imgEl.width;
            canvasEl.height = imgEl.height;

            canvasEl.getContext('2d').drawImage(imgEl, 0, 0, imgEl.width, imgEl.height);

            this.filters.forEach(function(filter) {
                filter && filter.applyTo(canvasEl);
            });

            /** @ignore */
            replacement.onload = function() {
                _this._element = replacement;
                callback && callback();
                replacement.onload = canvasEl = imgEl = null;
            };
            replacement.width = imgEl.width;
            replacement.height = imgEl.height;

            if (isLikelyNode) {
                var base64str = canvasEl.toDataURL('image/png').replace(/data:image\/png;base64,/, '');
                replacement.src = new Buffer(base64str, 'base64');
                _this._element = replacement;

                // onload doesn't fire in node, so we invoke callback manually
                callback && callback();
            }
            else {
                replacement.src = canvasEl.toDataURL('image/png');
            }

            return this;
        },

        /**
         * @private
         * @method _render
         */
        _render: function(ctx) {
            ctx.drawImage(
                this.getElement(),
                - this.width / 2,
                -this.height / 2,
                this.width,
                this.height
            );
        },

        /**
         * @private
         * @method _resetWidthHeight
         */
        _resetWidthHeight: function() {
            var element = this.getElement();

            this.set('width', element.width);
            this.set('height', element.height);
        },

        /**
         * The Image class's initialization method. This method is automatically
         * called by the constructor.
         * @private
         * @method _initElement
         * @param {HTMLImageElement|String} el The element representing the image
         */
        _initElement: function(element) {
            this.setElement(fabric.util.getById(element));
            fabric.util.addClass(this.getElement(), fabric.Image.CSS_CANVAS);
        },

        /**
         * @private
         * @method _initConfig
         * @param {Object} options Options object
         */
        _initConfig: function(options) {
            options || (options = { });
            this.setOptions(options);
            this._setWidthHeight(options);
        },

        /**
         * @private
         * @method _initFilters
         * @param {Object} object Object with filters property
         */
        _initFilters: function(object) {
            if (object.filters && object.filters.length) {
                this.filters = object.filters.map(function(filterObj) {
                    return filterObj && fabric.Image.filters[filterObj.type].fromObject(filterObj);
                });
            }
        },

        /**
         * @private
         * @method _setWidthHeight
         * @param {Object} options Object with width/height properties
         */
        _setWidthHeight: function(options) {
            this.width = 'width' in options
                ? options.width
                : (this.getElement().width || 0);

            this.height = 'height' in options
                ? options.height
                : (this.getElement().height || 0);
        },

        /**
         * Returns complexity of an instance
         * @method complexity
         * @return {Number} complexity
         */
        complexity: function() {
            return 1;
        }
    });

    /**
     * Default CSS class name for canvas
     * @static
     * @type String
     */
    fabric.Image.CSS_CANVAS = "canvas-img";

    fabric.Image.prototype.getSvgSrc = fabric.Image.prototype.getSrc;

    /**
     * Creates an instance of fabric.Image from its object representation
     * @static
     * @method fromObject
     * @param object {Object}
     * @param callback {Function} optional
     */
    fabric.Image.fromObject = function(object, callback) {
        var img = fabric.document.createElement('img'),
            src = object.src;

        if (object.width) {
            img.width = object.width;
        }
        if (object.height) {
            img.height = object.height;
        }

        /** @ignore */
        img.onload = function() {
            fabric.Image.prototype._initFilters.call(object, object);

            var instance = new fabric.Image(img, object);
            callback && callback(instance);
            img = img.onload = null;
        };
        img.src = src;
    };

    /**
     * Creates an instance of fabric.Image from an URL string
     * @static
     * @method fromURL
     * @param {String} url URL to create an image from
     * @param {Function} [callback] Callback to invoke when image is created (newly created image is passed as a first argument)
     * @param {Object} [imgOptions] Options object
     */
    fabric.Image.fromURL = function(url, callback, imgOptions) {
        var img = fabric.document.createElement('img');

        /** @ignore */
        img.onload = function() {
            if (callback) {
                callback(new fabric.Image(img, imgOptions));
            }
            img = img.onload = null;
        };
        img.src = url;
    };

    /**
     * List of attribute names to account for when parsing SVG element (used by {@link fabric.Image.fromElement})
     * @static
     * @see http://www.w3.org/TR/SVG/struct.html#ImageElement
     */
    fabric.Image.ATTRIBUTE_NAMES = 'x y width height fill fill-opacity opacity stroke stroke-width transform xlink:href'.split(' ');

    /**
     * Returns {@link fabric.Image} instance from an SVG element
     * @static
     * @method fabric.Image.fromElement
     * @param {SVGElement} element Element to parse
     * @param {Function} callback Callback to execute when fabric.Image object is created
     * @param {Object} [options] Options object
     * @return {fabric.Image}
     */
    fabric.Image.fromElement = function(element, callback, options) {
        options || (options = { });

        var parsedAttributes = fabric.parseAttributes(element, fabric.Image.ATTRIBUTE_NAMES);

        fabric.Image.fromURL(parsedAttributes['xlink:href'], callback, extend(parsedAttributes, options));
    };

    fabric.Image.async = true;

})(typeof exports !== 'undefined' ? exports : this);

fabric.util.object.extend(fabric.Object.prototype, {

    /**
     * @method _getAngleValueForStraighten
     * @return {Number} angle value
     * @private
     */
    _getAngleValueForStraighten: function() {
        var angle = this.get('angle');

        // TODO (kangax): can this be simplified?

        if      (angle > -225 && angle <= -135) { return -180;  }
        else if (angle > -135 && angle <= -45)  { return  -90;  }
        else if (angle > -45  && angle <= 45)   { return    0;  }
        else if (angle > 45   && angle <= 135)  { return   90;  }
        else if (angle > 135  && angle <= 225 ) { return  180;  }
        else if (angle > 225  && angle <= 315)  { return  270;  }
        else if (angle > 315)                   { return  360;  }

        return 0;
    },

    /**
     * @method straighten
     * @return {fabric.Object} thisArg
     * @chainable
     */
    straighten: function() {
        var angle = this._getAngleValueForStraighten();
        this.setAngle(angle);
        return this;
    },

    /**
     * @method fxStraighten
     * @param {Object} callbacks
     *                  - onComplete: invoked on completion
     *                  - onChange: invoked on every step of animation
     *
     * @return {fabric.Object} thisArg
     * @chainable
     */
    fxStraighten: function(callbacks) {
        callbacks = callbacks || { };

        var empty = function() { },
            onComplete = callbacks.onComplete || empty,
            onChange = callbacks.onChange || empty,
            _this = this;

        fabric.util.animate({
                                startValue: this.get('angle'),
                                endValue: this._getAngleValueForStraighten(),
                                duration: this.FX_DURATION,
                                onChange: function(value) {
                                    _this.setAngle(value);
                                    onChange();
                                },
                                onComplete: function() {
                                    _this.setCoords();
                                    onComplete();
                                },
                                onStart: function() {
                                    _this.setActive(false);
                                }
                            });

        return this;
    }
});

fabric.util.object.extend(fabric.StaticCanvas.prototype, {

    /**
     * Straightens object, then rerenders canvas
     * @method straightenObject
     * @param {fabric.Object} object Object to straighten
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    straightenObject: function (object) {
        object.straighten();
        this.renderAll();
        return this;
    },

    /**
     * Same as `fabric.Canvas#straightenObject`, but animated
     * @method fxStraightenObject
     * @param {fabric.Object} object Object to straighten
     * @return {fabric.Canvas} thisArg
     * @chainable
     */
    fxStraightenObject: function (object) {
        object.fxStraighten({
                                onChange: this.renderAll.bind(this)
                            });
        return this;
    }
});
/**
 * @namespace
 */
fabric.Image.filters = { };

/**
 * @class fabric.Image.filters.Grayscale
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Grayscale = fabric.util.createClass( /** @scope fabric.Image.filters.Grayscale.prototype */ {

                                                                                                                     /**
                                                                                                                      * @param {String} type
                                                                                                                      */
                                                                                                                     type: "Grayscale",

                                                                                                                     /**
                                                                                                                      * @method applyTo
                                                                                                                      * @memberOf fabric.Image.filters.Grayscale.prototype
                                                                                                                      * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                                      */
                                                                                                                     applyTo: function(canvasEl) {
                                                                                                                         var context = canvasEl.getContext('2d'),
                                                                                                                             imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                             data = imageData.data,
                                                                                                                             iLen = imageData.width,
                                                                                                                             jLen = imageData.height,
                                                                                                                             index, average, i, j;

                                                                                                                         for (i = 0; i < iLen; i++) {
                                                                                                                             for (j = 0; j < jLen; j++) {

                                                                                                                                 index = (i * 4) * jLen + (j * 4);
                                                                                                                                 average = (data[index] + data[index + 1] + data[index + 2]) / 3;

                                                                                                                                 data[index]     = average;
                                                                                                                                 data[index + 1] = average;
                                                                                                                                 data[index + 2] = average;
                                                                                                                             }
                                                                                                                         }

                                                                                                                         context.putImageData(imageData, 0, 0);
                                                                                                                     },

                                                                                                                     /**
                                                                                                                      * @method toJSON
                                                                                                                      * @return {String} json representation of filter
                                                                                                                      */
                                                                                                                     toJSON: function() {
                                                                                                                         return { type: this.type };
                                                                                                                     }
                                                                                                                 });

fabric.Image.filters.Grayscale.fromObject = function() {
    return new fabric.Image.filters.Grayscale();
};

/**
 * @class fabric.Image.filters.RemoveWhite
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.RemoveWhite = fabric.util.createClass( /** @scope fabric.Image.filters.RemoveWhite.prototype */ {

                                                                                                                         /**
                                                                                                                          * @param {String} type
                                                                                                                          */
                                                                                                                         type: "RemoveWhite",

                                                                                                                         /**
                                                                                                                          * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                                                                                          * @param {Object} [options] Options object
                                                                                                                          */
                                                                                                                         initialize: function(options) {
                                                                                                                             options || (options = { });
                                                                                                                             this.threshold = options.threshold || 30;
                                                                                                                             this.distance = options.distance || 20;
                                                                                                                         },

                                                                                                                         /**
                                                                                                                          * @method applyTo
                                                                                                                          * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                                          */
                                                                                                                         applyTo: function(canvasEl) {
                                                                                                                             var context = canvasEl.getContext('2d'),
                                                                                                                                 imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                                 data = imageData.data,
                                                                                                                                 threshold = this.threshold,
                                                                                                                                 distance = this.distance,
                                                                                                                                 limit = 255 - threshold,
                                                                                                                                 abs = Math.abs,
                                                                                                                                 r, g, b;

                                                                                                                             for (var i = 0, len = data.length; i < len; i += 4) {

                                                                                                                                 r = data[i];
                                                                                                                                 g = data[i+1];
                                                                                                                                 b = data[i+2];

                                                                                                                                 if (r > limit &&
                                                                                                                                     g > limit &&
                                                                                                                                     b > limit &&
                                                                                                                                     abs(r-g) < distance &&
                                                                                                                                     abs(r-b) < distance &&
                                                                                                                                     abs(g-b) < distance) {

                                                                                                                                     data[i+3] = 1;
                                                                                                                                 }
                                                                                                                             }

                                                                                                                             context.putImageData(imageData, 0, 0);
                                                                                                                         },

                                                                                                                         /**
                                                                                                                          * @method toJSON
                                                                                                                          * @return {String} json representation of filter
                                                                                                                          */
                                                                                                                         toJSON: function() {
                                                                                                                             return {
                                                                                                                                 type: this.type,
                                                                                                                                 threshold: this.threshold,
                                                                                                                                 distance: this.distance
                                                                                                                             };
                                                                                                                         }
                                                                                                                     });

fabric.Image.filters.RemoveWhite.fromObject = function(object) {
    return new fabric.Image.filters.RemoveWhite(object);
};

/**
 * @class fabric.Image.filters.Invert
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Invert = fabric.util.createClass( /** @scope fabric.Image.filters.Invert.prototype */ {

                                                                                                               /**
                                                                                                                * @param {String} type
                                                                                                                */
                                                                                                               type: "Invert",

                                                                                                               /**
                                                                                                                * @method applyTo
                                                                                                                * @memberOf fabric.Image.filters.Invert.prototype
                                                                                                                * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                                */
                                                                                                               applyTo: function(canvasEl) {
                                                                                                                   var context = canvasEl.getContext('2d'),
                                                                                                                       imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                       data = imageData.data,
                                                                                                                       iLen = data.length, i;

                                                                                                                   for (i = 0; i < iLen; i+=4) {
                                                                                                                       data[i] = 255 - data[i];
                                                                                                                       data[i + 1] = 255 - data[i + 1];
                                                                                                                       data[i + 2] = 255 - data[i + 2];
                                                                                                                   }

                                                                                                                   context.putImageData(imageData, 0, 0);
                                                                                                               },

                                                                                                               /**
                                                                                                                * @method toJSON
                                                                                                                * @return {String} json representation of filter
                                                                                                                */
                                                                                                               toJSON: function() {
                                                                                                                   return { type: this.type };
                                                                                                               }
                                                                                                           });

fabric.Image.filters.Invert.fromObject = function() {
    return new fabric.Image.filters.Invert();
};

/**
 * @class fabric.Image.filters.Sepia
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Sepia = fabric.util.createClass( /** @scope fabric.Image.filters.Sepia.prototype */ {

                                                                                                             /**
                                                                                                              * @param {String} type
                                                                                                              */
                                                                                                             type: "Sepia",

                                                                                                             /**
                                                                                                              * @method applyTo
                                                                                                              * @memberOf fabric.Image.filters.Sepia.prototype
                                                                                                              * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                              */
                                                                                                             applyTo: function(canvasEl) {
                                                                                                                 var context = canvasEl.getContext('2d'),
                                                                                                                     imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                     data = imageData.data,
                                                                                                                     iLen = data.length, i, avg;

                                                                                                                 for (i = 0; i < iLen; i+=4) {
                                                                                                                     avg = 0.3  * data[i] + 0.59 * data[i + 1] + 0.11 * data[i + 2];
                                                                                                                     data[i] = avg + 100;
                                                                                                                     data[i + 1] = avg + 50;
                                                                                                                     data[i + 2] = avg + 255;
                                                                                                                 }

                                                                                                                 context.putImageData(imageData, 0, 0);
                                                                                                             },

                                                                                                             /**
                                                                                                              * @method toJSON
                                                                                                              * @return {String} json representation of filter
                                                                                                              */
                                                                                                             toJSON: function() {
                                                                                                                 return { type: this.type };
                                                                                                             }
                                                                                                         });

fabric.Image.filters.Sepia.fromObject = function() {
    return new fabric.Image.filters.Sepia();
};

/**
 * @class fabric.Image.filters.Sepia2
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Sepia2 = fabric.util.createClass( /** @scope fabric.Image.filters.Sepia2.prototype */ {

                                                                                                               /**
                                                                                                                * @param {String} type
                                                                                                                */
                                                                                                               type: "Sepia2",

                                                                                                               /**
                                                                                                                * @method applyTo
                                                                                                                * @memberOf fabric.Image.filters.Sepia.prototype
                                                                                                                * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                                */
                                                                                                               applyTo: function(canvasEl) {
                                                                                                                   var context = canvasEl.getContext('2d'),
                                                                                                                       imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                       data = imageData.data,
                                                                                                                       iLen = data.length, i, r, g, b;

                                                                                                                   for (i = 0; i < iLen; i+=4) {

                                                                                                                       r = data[i];
                                                                                                                       g = data[i + 1];
                                                                                                                       b = data[i + 2];

                                                                                                                       data[i] = (r * 0.393 + g * 0.769 + b * 0.189 ) / 1.351;
                                                                                                                       data[i + 1] = (r * 0.349 + g * 0.686 + b * 0.168 ) / 1.203;
                                                                                                                       data[i + 2] = (r * 0.272 + g * 0.534 + b * 0.131 ) / 2.140;
                                                                                                                   }

                                                                                                                   context.putImageData(imageData, 0, 0);
                                                                                                               },

                                                                                                               /**
                                                                                                                * @method toJSON
                                                                                                                * @return {String} json representation of filter
                                                                                                                */
                                                                                                               toJSON: function() {
                                                                                                                   return { type: this.type };
                                                                                                               }
                                                                                                           });

fabric.Image.filters.Sepia2.fromObject = function() {
    return new fabric.Image.filters.Sepia2();
};

/**
 * @class fabric.Image.filters.Brightness
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Brightness = fabric.util.createClass( /** @scope fabric.Image.filters.Brightness.prototype */ {

                                                                                                                       /**
                                                                                                                        * @param {String} type
                                                                                                                        */
                                                                                                                       type: "Brightness",

                                                                                                                       /**
                                                                                                                        * @memberOf fabric.Image.filters.Brightness.prototype
                                                                                                                        * @param {Object} [options] Options object
                                                                                                                        */
                                                                                                                       initialize: function(options) {
                                                                                                                           options || (options = { });
                                                                                                                           this.brightness = options.brightness || 100;
                                                                                                                       },

                                                                                                                       /**
                                                                                                                        * @method applyTo
                                                                                                                        * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                                        */
                                                                                                                       applyTo: function(canvasEl) {
                                                                                                                           var context = canvasEl.getContext('2d'),
                                                                                                                               imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                               data = imageData.data,
                                                                                                                               brightness = this.brightness;

                                                                                                                           for (var i = 0, len = data.length; i < len; i += 4) {
                                                                                                                               data[i] += brightness;
                                                                                                                               data[i + 1] += brightness;
                                                                                                                               data[i + 2] += brightness;
                                                                                                                           }

                                                                                                                           context.putImageData(imageData, 0, 0);
                                                                                                                       },

                                                                                                                       /**
                                                                                                                        * @method toJSON
                                                                                                                        * @return {String} json representation of filter
                                                                                                                        */
                                                                                                                       toJSON: function() {
                                                                                                                           return {
                                                                                                                               type: this.type,
                                                                                                                               brightness: this.brightness
                                                                                                                           };
                                                                                                                       }
                                                                                                                   });

fabric.Image.filters.Brightness.fromObject = function(object) {
    return new fabric.Image.filters.Brightness(object);
};

/**
 * @class fabric.Image.filters.Brightness
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Noise = fabric.util.createClass( /** @scope fabric.Image.filters.Noise.prototype */ {

                                                                                                             /**
                                                                                                              * @param {String} type
                                                                                                              */
                                                                                                             type: "Noise",

                                                                                                             /**
                                                                                                              * @memberOf fabric.Image.filters.Brightness.prototype
                                                                                                              * @param {Object} [options] Options object
                                                                                                              */
                                                                                                             initialize: function(options) {
                                                                                                                 options || (options = { });
                                                                                                                 this.noise = options.noise || 100;
                                                                                                             },

                                                                                                             /**
                                                                                                              * @method applyTo
                                                                                                              * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                              */
                                                                                                             applyTo: function(canvasEl) {
                                                                                                                 var context = canvasEl.getContext('2d'),
                                                                                                                     imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                     data = imageData.data,
                                                                                                                     noise = this.noise, rand;

                                                                                                                 for (var i = 0, len = data.length; i < len; i += 4) {

                                                                                                                     rand = (0.5 - Math.random()) * noise;

                                                                                                                     data[i] += rand;
                                                                                                                     data[i + 1] += rand;
                                                                                                                     data[i + 2] += rand;
                                                                                                                 }

                                                                                                                 context.putImageData(imageData, 0, 0);
                                                                                                             },

                                                                                                             /**
                                                                                                              * @method toJSON
                                                                                                              * @return {String} json representation of filter
                                                                                                              */
                                                                                                             toJSON: function() {
                                                                                                                 return {
                                                                                                                     type: this.type,
                                                                                                                     noise: this.noise
                                                                                                                 };
                                                                                                             }
                                                                                                         });

fabric.Image.filters.Noise.fromObject = function(object) {
    return new fabric.Image.filters.Noise(object);
};

/**
 * @class fabric.Image.filters.Brightness
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.GradientTransparency = fabric.util.createClass( /** @scope fabric.Image.filters.GradientTransparency.prototype */ {

                                                                                                                                           /**
                                                                                                                                            * @param {String} type
                                                                                                                                            */
                                                                                                                                           type: "GradientTransparency",

                                                                                                                                           /**
                                                                                                                                            * @memberOf fabric.Image.filters.GradientTransparency.prototype
                                                                                                                                            * @param {Object} [options] Options object
                                                                                                                                            */
                                                                                                                                           initialize: function(options) {
                                                                                                                                               options || (options = { });
                                                                                                                                               this.threshold = options.threshold || 100;
                                                                                                                                           },

                                                                                                                                           /**
                                                                                                                                            * @method applyTo
                                                                                                                                            * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                                                            */
                                                                                                                                           applyTo: function(canvasEl) {
                                                                                                                                               var context = canvasEl.getContext('2d'),
                                                                                                                                                   imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                                                   data = imageData.data,
                                                                                                                                                   threshold = this.threshold,
                                                                                                                                                   total = data.length;

                                                                                                                                               for (var i = 0, len = data.length; i < len; i += 4) {
                                                                                                                                                   data[i + 3] = threshold + 255 * (total - i) / total;
                                                                                                                                               }

                                                                                                                                               context.putImageData(imageData, 0, 0);
                                                                                                                                           },

                                                                                                                                           /**
                                                                                                                                            * @method toJSON
                                                                                                                                            * @return {String} json representation of filter
                                                                                                                                            */
                                                                                                                                           toJSON: function() {
                                                                                                                                               return {
                                                                                                                                                   type: this.type,
                                                                                                                                                   threshold: this.threshold
                                                                                                                                               };
                                                                                                                                           }
                                                                                                                                       });

fabric.Image.filters.GradientTransparency.fromObject = function(object) {
    return new fabric.Image.filters.GradientTransparency(object);
};

/**
 * @class fabric.Image.filters.Tint
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Tint = fabric.util.createClass( /** @scope fabric.Image.filters.Tint.prototype */ {

                                                                                                           /**
                                                                                                            * @param {String} type
                                                                                                            */
                                                                                                           type: "Tint",

                                                                                                           /**
                                                                                                            * @memberOf fabric.Image.filters.Tint.prototype
                                                                                                            * @param {Object} [options] Options object
                                                                                                            */
                                                                                                           initialize: function(options) {
                                                                                                               options || (options = { });
                                                                                                               this.color = options.color || 0;
                                                                                                           },

                                                                                                           /**
                                                                                                            * @method applyTo
                                                                                                            * @param {Object} canvasEl Canvas element to apply filter to
                                                                                                            */
                                                                                                           applyTo: function(canvasEl) {

                                                                                                               var context = canvasEl.getContext('2d'),
                                                                                                                   imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                                                                   data = imageData.data,
                                                                                                                   iLen = data.length, i, a;

                                                                                                               var rgb = parseInt(this.color, 10).toString(16);

                                                                                                               var cr = parseInt('0x' + rgb.substr(0, 2), 16);
                                                                                                               var cg = parseInt('0x' + rgb.substr(2, 2), 16);
                                                                                                               var cb = parseInt('0x' + rgb.substr(4, 2), 16);

                                                                                                               for (i = 0; i < iLen; i+=4) {

                                                                                                                   a = data[i+3];

                                                                                                                   if (a > 0){
                                                                                                                       data[i] = cr;
                                                                                                                       data[i+1] = cg;
                                                                                                                       data[i+2] = cb;
                                                                                                                   }
                                                                                                               }

                                                                                                               context.putImageData(imageData, 0, 0);
                                                                                                           },

                                                                                                           /**
                                                                                                            * @method toJSON
                                                                                                            * @return {String} json representation of filter
                                                                                                            */
                                                                                                           toJSON: function() {
                                                                                                               return {
                                                                                                                   type: this.type,
                                                                                                                   color: this.color
                                                                                                               };
                                                                                                           }
                                                                                                       });

fabric.Image.filters.Tint.fromObject = function(object) {
    return new fabric.Image.filters.Tint(object);
};

/**
 * @class fabric.Image.filters.Convolute
 * @memberOf fabric.Image.filters
 * Adapted from http://www.html5rocks.com/en/tutorials/canvas/imagefilters/
 */
fabric.Image.filters.Convolute = fabric.util.createClass({

                                                             /**
                                                              * @param {String} type
                                                              */
                                                             type: 'Convolute',

                                                             /**
                                                              * @memberOf fabric.Image.filters.Convolute.prototype
                                                              * @param {Object} [options] Options object
                                                              */
                                                             initialize: function(options) {
                                                                 options || (options = { });

                                                                 this.opaque = options.opaque;
                                                                 this.matrix = options.matrix || [ 0, 0, 0,
                                                                                                   0, 1, 0,
                                                                                                   0, 0, 0 ];

                                                                 this.tmpCtx = fabric.document.createElement('canvas').getContext('2d');
                                                             },

                                                             /**
                                                              * @private
                                                              * @method _createImageData
                                                              */
                                                             _createImageData: function(w, h) {
                                                                 return this.tmpCtx.createImageData(w, h);
                                                             },

                                                             /**
                                                              * @method applyTo
                                                              * @param {Object} canvasEl Canvas element to apply filter to
                                                              */
                                                             applyTo: function(canvasEl) {

                                                                 var weights = this.matrix;
                                                                 var context = canvasEl.getContext('2d');
                                                                 var pixels = context.getImageData(0, 0, canvasEl.width, canvasEl.height);

                                                                 var side = Math.round(Math.sqrt(weights.length));
                                                                 var halfSide = Math.floor(side/2);
                                                                 var src = pixels.data;
                                                                 var sw = pixels.width;
                                                                 var sh = pixels.height;

                                                                 // pad output by the convolution matrix
                                                                 var w = sw;
                                                                 var h = sh;
                                                                 var output = this._createImageData(w, h);

                                                                 var dst = output.data;

                                                                 // go through the destination image pixels
                                                                 var alphaFac = this.opaque ? 1 : 0;
                                                                 for (var y=0; y<h; y++) {
                                                                     for (var x=0; x<w; x++) {
                                                                         var sy = y;
                                                                         var sx = x;
                                                                         var dstOff = (y*w+x)*4;
                                                                         // calculate the weighed sum of the source image pixels that
                                                                         // fall under the convolution matrix
                                                                         var r=0, g=0, b=0, a=0;
                                                                         for (var cy=0; cy<side; cy++) {
                                                                             for (var cx=0; cx<side; cx++) {
                                                                                 var scy = sy + cy - halfSide;
                                                                                 var scx = sx + cx - halfSide;
                                                                                 if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
                                                                                     var srcOff = (scy*sw+scx)*4;
                                                                                     var wt = weights[cy*side+cx];
                                                                                     r += src[srcOff] * wt;
                                                                                     g += src[srcOff+1] * wt;
                                                                                     b += src[srcOff+2] * wt;
                                                                                     a += src[srcOff+3] * wt;
                                                                                 }
                                                                             }
                                                                         }
                                                                         dst[dstOff] = r;
                                                                         dst[dstOff+1] = g;
                                                                         dst[dstOff+2] = b;
                                                                         dst[dstOff+3] = a + alphaFac*(255-a);
                                                                     }
                                                                 }

                                                                 context.putImageData(output, 0, 0);
                                                             },

                                                             /**
                                                              * @method toJSON
                                                              * @return {String} json representation of filter
                                                              */
                                                             toJSON: function() {
                                                                 return {
                                                                     type: this.type,
                                                                     matrix: this.matrix
                                                                 }
                                                             }
                                                         });

fabric.Image.filters.Convolute.fromObject = function(object) {
    return new fabric.Image.filters.Convolute(object);
};

/**
 * @class fabric.Image.filters.Pixelate
 * @memberOf fabric.Image.filters
 */
fabric.Image.filters.Pixelate = fabric.util.createClass({

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: 'Pixelate',

                                                            /**
                                                             * @memberOf fabric.Image.filters.Pixelate.prototype
                                                             * @param {Object} [options] Options object
                                                             */
                                                            initialize: function(options) {
                                                                options || (options = { });
                                                                this.blocksize = options.blocksize || 4;
                                                            },

                                                            /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function(canvasEl) {

                                                                var context = canvasEl.getContext('2d'),
                                                                    imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height),
                                                                    data = imageData.data,
                                                                    iLen = imageData.width,
                                                                    jLen = imageData.height,
                                                                    index, average, i, j,
                                                                    offsetBlocksize = this.blocksize - 1, r, g, b, a;

                                                                for (i = 0; i < iLen; i += this.blocksize) {
                                                                    for (j = 0; j < jLen; j += this.blocksize) {

                                                                        index = (i * 4) * jLen + (j * 4);

                                                                        r = data[index];
                                                                        g = data[index+1];
                                                                        b = data[index+2];
                                                                        a = data[index+3];

                                                                        /*
                                                                         blocksize: 4

                                                                         [1,x,x,x,1]
                                                                         [x,x,x,x,1]
                                                                         [x,x,x,x,1]
                                                                         [x,x,x,x,1]
                                                                         [1,1,1,1,1]
                                                                         */

                                                                        for (var _i = i, _ilen = i + this.blocksize; _i < _ilen; _i++) {
                                                                            for (var _j = j, _jlen = j + this.blocksize; _j < _jlen; _j++) {
                                                                                index = (_i * 4) * jLen + (_j * 4);
                                                                                data[index] = r;
                                                                                data[index + 1] = g;
                                                                                data[index + 2] = b;
                                                                                data[index + 3] = a;
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                context.putImageData(imageData, 0, 0);
                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type,
                                                                    blocksize: this.blocksize
                                                                };
                                                            }
                                                        });

fabric.Image.filters.Pixelate.fromObject = function(object) {
    return new fabric.Image.filters.Pixelate(object);
};
(function(global) {

    "use strict";

    var fabric = global.fabric || (global.fabric = { }),
        extend = fabric.util.object.extend,
        clone = fabric.util.object.clone,
        toFixed = fabric.util.toFixed;

    if (fabric.Text) {
        fabric.warn('fabric.Text is already defined');
        return;
    }

    /**
     * @class Text
     * @extends fabric.Object
     */
    fabric.Text = fabric.util.createClass(fabric.Object, /** @scope fabric.Text.prototype */ {

        /**
         * @property
         * @type Number
         */
        fontSize:         40,

        /**
         * @property
         * @type Number
         */
        fontWeight:       400,

        /**
         * @property
         * @type String
         */
        fontFamily:       'Times New Roman',

        /**
         * @property
         * @type String
         */
        textDecoration:   '',

        /**
         * @property
         * @type String | null
         */
        textShadow:       '',

        /**
         * Determines text alignment. Possible values: "left", "center", or "right".
         * @property
         * @type String
         */
        textAlign:        'left',

        /**
         * @property
         * @type String
         */
        fontStyle:        '',

        /**
         * @property
         * @type Number
         */
        lineHeight:       1.3,

        /**
         * @property
         * @type String
         */
        strokeStyle:      '',

        /**
         * @property
         * @type Number
         */
        strokeWidth:      1,

        /**
         * @property
         * @type String
         */
        backgroundColor:  '',


        /**
         * @property
         * @type String | null
         */
        path:             null,

        /**
         * @property
         * @type String
         */
        type:             'text',

        /**
         * Indicates whether canvas native text methods should be used to render text (otherwise, Cufon is used)
         * @property
         * @type Boolean
         */
        useNative:       true,

        /**
         * Constructor
         * @method initialize
         * @param {String} text
         * @param {Object} [options]
         * @return {fabric.Text} thisArg
         */
        initialize: function(text, options) {
            options = options || { };

            this._initStateProperties();
            this.text = text;
            this.setOptions(options);
            this._theta = this.angle * Math.PI / 180;
            this._initDimensions();
            this.setCoords();
        },

        /**
         * Renders text object on offscreen canvas, so that it would get dimensions
         * @private
         * @method _initDimensions
         */
        _initDimensions: function() {
            var canvasEl = fabric.document.createElement('canvas');

            if (!canvasEl.getContext && typeof G_vmlCanvasManager !== 'undefined') {
                G_vmlCanvasManager.initElement(canvasEl);
            }

            this._render(canvasEl.getContext('2d'));
        },

        /**
         * Creates `stateProperties` list on an instance, and adds `fabric.Text` -specific ones to it
         * (such as "fontFamily", "fontWeight", etc.)
         * @private
         * @method _initStateProperties
         */
        _initStateProperties: function() {
            this.stateProperties = this.stateProperties.concat();
            this.stateProperties.push(
                'fontFamily',
                'fontWeight',
                'fontSize',
                'path',
                'text',
                'textDecoration',
                'textShadow',
                'textAlign',
                'fontStyle',
                'lineHeight',
                'strokeStyle',
                'strokeWidth',
                'backgroundColor',
                'useNative'
            );
            fabric.util.removeFromArray(this.stateProperties, 'width');
        },

        /**
         * Returns string representation of an instance
         * @method toString
         * @return {String} String representation of text object
         */
        toString: function() {
            return '#<fabric.Text (' + this.complexity() +
                   '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
        },

        /**
         * @private
         * @method _render
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _render: function(ctx) {
            if (typeof Cufon === 'undefined' || this.useNative === true) {
                this._renderViaNative(ctx);
            }
            else {
                this._renderViaCufon(ctx);
            }
        },

        /**
         * @private
         * @method _renderViaCufon
         */
        _renderViaCufon: function(ctx) {
            var o = Cufon.textOptions || (Cufon.textOptions = { });

            // export options to be used by cufon.js
            o.left = this.left;
            o.top = this.top;
            o.context = ctx;
            o.color = this.fill;

            var el = this._initDummyElementForCufon();

            // set "cursor" to top/left corner
            this.transform(ctx);

            // draw text
            Cufon.replaceElement(el, {
                engine: 'canvas',
                separate: 'none',
                fontFamily: this.fontFamily,
                fontWeight: this.fontWeight,
                textDecoration: this.textDecoration,
                textShadow: this.textShadow,
                textAlign: this.textAlign,
                fontStyle: this.fontStyle,
                lineHeight: this.lineHeight,
                strokeStyle: this.strokeStyle,
                strokeWidth: this.strokeWidth,
                backgroundColor: this.backgroundColor
            });

            // update width, height
            this.width = o.width;
            this.height = o.height;

            this._totalLineHeight = o.totalLineHeight;
            this._fontAscent = o.fontAscent;
            this._boundaries = o.boundaries;
            this._shadowOffsets = o.shadowOffsets;
            this._shadows = o.shadows || [ ];

            el = null;

            // need to set coords _after_ the width/height was retreived from Cufon
            this.setCoords();
        },

        /**
         * @private
         * @method _render_native
         * @param {CanvasRenderingContext2D} ctx Context to render on
         */
        _renderViaNative: function(ctx) {

            this.transform(ctx);
            this._setTextStyles(ctx);

            var textLines = this.text.split(/\r?\n/);

            this.width = this._getTextWidth(ctx, textLines);
            this.height = this._getTextHeight(ctx, textLines);

            this._renderTextBackground(ctx, textLines);

            if (this.textAlign !== 'left') {
                ctx.save();
                ctx.translate(this.textAlign === 'center' ? (this.width / 2) : this.width, 0);
            }

            this._setTextShadow(ctx);
            this._renderTextFill(ctx, textLines);
            this.textShadow && ctx.restore();

            this._renderTextStroke(ctx, textLines);
            if (this.textAlign !== 'left') {
                ctx.restore();
            }

            this._renderTextDecoration(ctx, textLines);
            this._setBoundaries(ctx, textLines);
            this._totalLineHeight = 0;

            this.setCoords();
        },

        /**
         * @private
         * @method _setBoundaries
         */
        _setBoundaries: function(ctx, textLines) {
            this._boundaries = [ ];

            for (var i = 0, len = textLines.length; i < len; i++) {

                var lineWidth = ctx.measureText(textLines[i]).width;
                var lineLeftOffset = this._getLineLeftOffset(lineWidth);

                this._boundaries.push({
                                          height: this.fontSize,
                                          width: lineWidth,
                                          left: lineLeftOffset
                                      });
            }
        },

        /**
         * @private
         * @method _setTextStyles
         */
        _setTextStyles: function(ctx) {
            ctx.fillStyle = this.fill;
            ctx.strokeStyle = this.strokeStyle;
            ctx.lineWidth = this.strokeWidth;
            ctx.textBaseline = 'alphabetic';
            ctx.textAlign = this.textAlign;
            ctx.font = this._getFontDeclaration();
        },

        /**
         * @private
         * @method _getTextHeight
         */
        _getTextHeight: function(ctx, textLines) {
            return this.fontSize * textLines.length * this.lineHeight;
        },

        /**
         * @private
         * @method _getTextWidth
         */
        _getTextWidth: function(ctx, textLines) {
            var maxWidth = ctx.measureText(textLines[0]).width;

            for (var i = 1, len = textLines.length; i < len; i++) {
                var currentLineWidth = ctx.measureText(textLines[i]).width;
                if (currentLineWidth > maxWidth) {
                    maxWidth = currentLineWidth;
                }
            }
            return maxWidth;
        },

        /**
         * @private
         * @method _setTextShadow
         */
        _setTextShadow: function(ctx) {
            if (this.textShadow) {

                // "rgba(0,0,0,0.2) 2px 2px 10px"
                // "rgb(0, 100, 0) 0 0 5px"
                // "red 2px 2px 1px"
                // "#f55 123 345 567"
                var reOffsetsAndBlur = /\s+(-?\d+)(?:px)?\s+(-?\d+)(?:px)?\s+(\d+)(?:px)?\s*/;

                var shadowDeclaration = this.textShadow;
                var offsetsAndBlur = reOffsetsAndBlur.exec(this.textShadow);
                var shadowColor = shadowDeclaration.replace(reOffsetsAndBlur, '');

                ctx.save();
                ctx.shadowColor = shadowColor;
                ctx.shadowOffsetX = parseInt(offsetsAndBlur[1], 10);
                ctx.shadowOffsetY = parseInt(offsetsAndBlur[2], 10);
                ctx.shadowBlur = parseInt(offsetsAndBlur[3], 10);

                this._shadows = [{
                                     blur: ctx.shadowBlur,
                                     color: ctx.shadowColor,
                                     offX: ctx.shadowOffsetX,
                                     offY: ctx.shadowOffsetY
                                 }];

                this._shadowOffsets = [[
                                           parseInt(ctx.shadowOffsetX, 10), parseInt(ctx.shadowOffsetY, 10)
                                       ]];
            }
        },

        _renderTextFill: function(ctx, textLines) {
            this._boundaries = [ ];
            for (var i = 0, len = textLines.length; i < len; i++) {
                ctx.fillText(
                    textLines[i],
                    -this.width / 2,
                    (-this.height / 2) + (i * this.fontSize * this.lineHeight) + this.fontSize
                );
            }
        },

        /**
         * @private
         * @method _renderTextStroke
         */
        _renderTextStroke: function(ctx, textLines) {
            if (this.strokeStyle) {
                for (var i = 0, len = textLines.length; i < len; i++) {
                    ctx.strokeText(
                        textLines[i],
                        -this.width / 2,
                        (-this.height / 2) + (i * this.fontSize * this.lineHeight) + this.fontSize
                    );
                }
            }
        },

        /**
         * @private
         * @_renderTextBackground
         */
        _renderTextBackground: function(ctx, textLines) {
            if (this.backgroundColor) {
                ctx.save();
                ctx.fillStyle = this.backgroundColor;

                for (var i = 0, len = textLines.length; i < len; i++) {

                    var lineWidth = ctx.measureText(textLines[i]).width;
                    var lineLeftOffset = this._getLineLeftOffset(lineWidth);

                    ctx.fillRect(
                        (-this.width / 2) + lineLeftOffset,
                        (-this.height / 2) + (i * this.fontSize * this.lineHeight),
                        lineWidth,
                        this.fontSize
                    );
                }
                ctx.restore();
            }
        },

        /**
         * @private
         * @method _getLineLeftOffset
         */
        _getLineLeftOffset: function(lineWidth) {
            if (this.textAlign === 'center') {
                return (this.width - lineWidth) / 2;
            }
            if (this.textAlign === 'right') {
                return this.width - lineWidth;
            }
            return 0;
        },

        /**
         * @private
         * @method _renderTextDecoration
         */
        _renderTextDecoration: function(ctx, textLines) {

            var halfOfVerticalBox = this._getTextHeight(ctx, textLines) / 2;
            var _this = this;

            function renderLinesAtOffset(offset) {
                for (var i = 0, len = textLines.length; i < len; i++) {

                    var lineWidth = ctx.measureText(textLines[i]).width;
                    var lineLeftOffset = _this._getLineLeftOffset(lineWidth);

                    ctx.fillRect(
                        (-_this.width / 2) + lineLeftOffset,
                        (offset + (i * _this.fontSize * _this.lineHeight)) - halfOfVerticalBox,
                        lineWidth,
                        1);
                }
            }

            if (this.textDecoration.indexOf('underline') > -1) {
                renderLinesAtOffset(this.fontSize);
            }
            if (this.textDecoration.indexOf('line-through') > -1) {
                renderLinesAtOffset(this.fontSize / 2);
            }
            if (this.textDecoration.indexOf('overline') > -1) {
                renderLinesAtOffset(0);
            }
        },

        /**
         * @private
         * @method _getFontDeclaration
         */
        _getFontDeclaration: function() {
            return [
                this.fontStyle,
                this.fontWeight,
                this.fontSize + 'px',
                (fabric.isLikelyNode ? ('"' + this.fontFamily + '"') : this.fontFamily)
            ].join(' ');
        },

        /**
         * @private
         * @method _initDummyElement
         */
        _initDummyElementForCufon: function() {
            var el = fabric.document.createElement('pre'),
                container = fabric.document.createElement('div');

            // Cufon doesn't play nice with textDecoration=underline if element doesn't have a parent
            container.appendChild(el);

            if (typeof G_vmlCanvasManager === 'undefined') {
                el.innerHTML = this.text;
            }
            else {
                // IE 7 & 8 drop newlines and white space on text nodes
                // see: http://web.student.tuwien.ac.at/~e0226430/innerHtmlQuirk.html
                // see: http://www.w3schools.com/dom/dom_mozilla_vs_ie.asp
                el.innerText =  this.text.replace(/\r?\n/gi, '\r');
            }

            el.style.fontSize = this.fontSize + 'px';
            el.style.letterSpacing = 'normal';

            return el;
        },

        /**
         * Renders text instance on a specified context
         * @method render
         * @param ctx {CanvasRenderingContext2D} context to render on
         */
        render: function(ctx, noTransform) {
            ctx.save();
            this._render(ctx);
            if (!noTransform && this.active) {
                this.drawBorders(ctx);
                this.hideCorners || this.drawCorners(ctx);
            }
            ctx.restore();
        },

        /**
         * Returns object representation of an instance
         * @method toObject
         * @return {Object} Object representation of text object
         */
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                text:             this.text,
                fontSize:         this.fontSize,
                fontWeight:       this.fontWeight,
                fontFamily:       this.fontFamily,
                fontStyle:        this.fontStyle,
                lineHeight:       this.lineHeight,
                textDecoration:   this.textDecoration,
                textShadow:       this.textShadow,
                textAlign:        this.textAlign,
                path:             this.path,
                strokeStyle:      this.strokeStyle,
                strokeWidth:      this.strokeWidth,
                backgroundColor:  this.backgroundColor,
                useNative:        this.useNative
            });
        },

        /**
         * Returns svg representation of an instance
         * @method toSVG
         * @return {string} svg representation of an instance
         */
        toSVG: function() {

            var textLines = this.text.split(/\r?\n/),
                lineTopOffset = this.useNative
                    ? this.fontSize * this.lineHeight
                    : (-this._fontAscent - ((this._fontAscent / 5) * this.lineHeight)),

                textLeftOffset = -(this.width/2),
                textTopOffset = this.useNative
                    ? this.fontSize - 1
                    : (this.height/2) - (textLines.length * this.fontSize) - this._totalLineHeight,

                textAndBg = this._getSVGTextAndBg(lineTopOffset, textLeftOffset, textLines),
                shadowSpans = this._getSVGShadows(lineTopOffset, textLines);

            // move top offset by an ascent
            textTopOffset += (this._fontAscent ? ((this._fontAscent / 5) * this.lineHeight) : 0);

            return [
                '<g transform="', this.getSvgTransform(), '">',
                textAndBg.textBgRects.join(''),
                '<text ',
                (this.fontFamily ? 'font-family="\'' + this.fontFamily + '\'" ': ''),
                (this.fontSize ? 'font-size="' + this.fontSize + '" ': ''),
                (this.fontStyle ? 'font-style="' + this.fontStyle + '" ': ''),
                (this.fontWeight ? 'font-weight="' + this.fontWeight + '" ': ''),
                (this.textDecoration ? 'text-decoration="' + this.textDecoration + '" ': ''),
                'style="', this.getSvgStyles(), '" ',
                /* svg starts from left/bottom corner so we normalize height */
                'transform="translate(', toFixed(textLeftOffset, 2), ' ', toFixed(textTopOffset, 2), ')">',
                shadowSpans.join(''),
                textAndBg.textSpans.join(''),
                '</text>',
                '</g>'
            ].join('');
        },

        _getSVGShadows: function(lineTopOffset, textLines) {
            var shadowSpans = [], j, i, jlen, ilen, lineTopOffsetMultiplier = 1;

            if (!this._shadows || !this._boundaries) {
                return shadowSpans;
            }

            for (j = 0, jlen = this._shadows.length; j < jlen; j++) {
                for (i = 0, ilen = textLines.length; i < ilen; i++) {
                    if (textLines[i] !== '') {
                        var lineLeftOffset = (this._boundaries && this._boundaries[i]) ? this._boundaries[i].left : 0;
                        shadowSpans.push(
                            '<tspan x="',
                            toFixed((lineLeftOffset + lineTopOffsetMultiplier) + this._shadowOffsets[j][0], 2),
                            ((i === 0 || this.useNative) ? '" y' : '" dy'), '="',
                            toFixed(this.useNative
                                        ? ((lineTopOffset * i) - this.height / 2 + this._shadowOffsets[j][1])
                                        : (lineTopOffset + (i === 0 ? this._shadowOffsets[j][1] : 0)), 2),
                            '" ',
                            this._getFillAttributes(this._shadows[j].color), '>',
                            fabric.util.string.escapeXml(textLines[i]),
                            '</tspan>');
                        lineTopOffsetMultiplier = 1;
                    } else {
                        // in some environments (e.g. IE 7 & 8) empty tspans are completely ignored, using a lineTopOffsetMultiplier
                        // prevents empty tspans
                        lineTopOffsetMultiplier++;
                    }
                }
            }
            return shadowSpans;
        },

        _getSVGTextAndBg: function(lineTopOffset, textLeftOffset, textLines) {
            var textSpans = [ ], textBgRects = [ ], i, lineLeftOffset, len, lineTopOffsetMultiplier = 1;

            // text and background
            for (i = 0, len = textLines.length; i < len; i++) {
                if (textLines[i] !== '') {
                    lineLeftOffset = (this._boundaries && this._boundaries[i]) ? toFixed(this._boundaries[i].left, 2) : 0;
                    textSpans.push(
                        '<tspan x="',
                        lineLeftOffset, '" ',
                        (i === 0 || this.useNative ? 'y' : 'dy'), '="',
                        toFixed(this.useNative ? ((lineTopOffset * i) - this.height / 2) : (lineTopOffset * lineTopOffsetMultiplier), 2) , '" ',
                        // doing this on <tspan> elements since setting opacity on containing <text> one doesn't work in Illustrator
                        this._getFillAttributes(this.fill), '>',
                        fabric.util.string.escapeXml(textLines[i]),
                        '</tspan>'
                    );
                    lineTopOffsetMultiplier = 1;
                } else {
                    // in some environments (e.g. IE 7 & 8) empty tspans are completely ignored, using a lineTopOffsetMultiplier
                    // prevents empty tspans
                    lineTopOffsetMultiplier++;
                }

                if (!this.backgroundColor || !this._boundaries) continue;

                textBgRects.push(
                    '<rect ',
                    this._getFillAttributes(this.backgroundColor),
                    ' x="',
                    toFixed(textLeftOffset + this._boundaries[i].left, 2),
                    '" y="',
                    /* an offset that seems to straighten things out */
                    toFixed((lineTopOffset * i) - this.height / 2, 2),
                    '" width="',
                    toFixed(this._boundaries[i].width, 2),
                    '" height="',
                    toFixed(this._boundaries[i].height, 2),
                    '"></rect>');
            }
            return {
                textSpans: textSpans,
                textBgRects: textBgRects
            };
        },

        // Adobe Illustrator (at least CS5) is unable to render rgba()-based fill values
        // we work around it by "moving" alpha channel into opacity attribute and setting fill's alpha to 1
        _getFillAttributes: function(value) {
            var fillColor = value ? new fabric.Color(value) : '';
            if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {
                return 'fill="' + value + '"';
            }
            return 'opacity="' + fillColor.getAlpha() + '" fill="' + fillColor.setAlpha(1).toRgb() + '"';
        },

        /**
         * Sets "color" of an instance (alias of `set('fill', &hellip;)`)
         * @method setColor
         * @param {String} value
         * @return {fabric.Text} thisArg
         * @chainable
         */
        setColor: function(value) {
            this.set('fill', value);
            return this;
        },

        /**
         * Sets fontSize of an instance and updates its coordinates
         * @method setFontsize
         * @param {Number} value
         * @return {fabric.Text} thisArg
         * @chainable
         */
        setFontsize: function(value) {
            this.set('fontSize', value);
            this._initDimensions();
            this.setCoords();
            return this;
        },

        /**
         * Returns actual text value of an instance
         * @method getText
         * @return {String}
         */
        getText: function() {
            return this.text;
        },

        /**
         * Sets text of an instance, and updates its coordinates
         * @method setText
         * @param {String} value
         * @return {fabric.Text} thisArg
         * @chainable
         */
        setText: function(value) {
            this.set('text', value);
            this._initDimensions();
            this.setCoords();
            return this;
        },

        /**
         * Sets specified property to a specified value
         * @method set
         * @param {String} name
         * @param {Any} value
         * @return {fabric.Text} thisArg
         * @chainable
         */
        _set: function(name, value) {
            if (name === 'fontFamily' && this.path) {
                this.path = this.path.replace(/(.*?)([^\/]*)(\.font\.js)/, '$1' + value + '$3');
            }
            this.callSuper('_set', name, value);
        }
    });

    /**
     * List of attribute names to account for when parsing SVG element (used by `fabric.Text.fromElement`)
     * @static
     */
    fabric.Text.ATTRIBUTE_NAMES =
    ('x y fill fill-opacity opacity stroke stroke-width transform ' +
     'font-family font-style font-weight font-size text-decoration').split(' ');

    /**
     * Returns fabric.Text instance from an object representation
     * @static
     * @method fromObject
     * @param {Object} object to create an instance from
     * @return {fabric.Text} an instance
     */
    fabric.Text.fromObject = function(object) {
        return new fabric.Text(object.text, clone(object));
    };

    /**
     * Returns fabric.Text instance from an SVG element (<b>not yet implemented</b>)
     * @static
     * @method fabric.Text.fromElement
     * @param element
     * @param options
     * @return {fabric.Text} an instance
     */
    fabric.Text.fromElement = function(element, options) {

        if (!element) {
            return null;
        }

        var parsedAttributes = fabric.parseAttributes(element, fabric.Text.ATTRIBUTE_NAMES);
        options = fabric.util.object.extend((options ? fabric.util.object.clone(options) : { }), parsedAttributes);

        var text = new fabric.Text(element.textContent, options);

        /*
         Adjust positioning:
         x/y attributes in SVG correspond to the bottom-left corner of text bounding box
         top/left properties in Fabric correspond to center point of text bounding box
         */

        text.set({
                     left: text.getLeft() + text.getWidth() / 2,
                     top: text.getTop() - text.getHeight() / 2
                 });

        return text;
    };

})(typeof exports !== 'undefined' ? exports : this);
(function() {

    if (typeof document !== 'undefined' && typeof window !== 'undefined') {
        return;
    }

    var DOMParser = new require('xmldom').DOMParser,
        URL = require('url'),
        HTTP = require('http'),

        Canvas = require('canvas'),
        Image = require('canvas').Image;

    function request(url, encoding, callback) {
        var oURL = URL.parse(url),
            client = HTTP.createClient(oURL.port, oURL.hostname),
            req = client.request('GET', oURL.pathname, { 'host': oURL.hostname });

        client.addListener('error', function(err) {
            if (err.errno === process.ECONNREFUSED) {
                fabric.log('ECONNREFUSED: connection refused to ' + client.host + ':' + client.port);
            }
            else {
                fabric.log(err.message);
            }
        });

        req.end();
        req.on('response', function (response) {
            var body = "";
            if (encoding) {
                response.setEncoding(encoding);
            }
            response.on('end', function () {
                callback(body);
            });
            response.on('data', function (chunk) {
                if (response.statusCode === 200) {
                    body += chunk;
                }
            });
        });
    }

    fabric.util.loadImage = function(url, callback) {
        request(url, 'binary', function(body) {
            var img = new Image();
            img.src = new Buffer(body, 'binary');
            // preserving original url, which seems to be lost in node-canvas
            img._src = url;
            callback(img);
        });
    };

    fabric.loadSVGFromURL = function(url, callback) {
        url = url.replace(/^\n\s*/, '').replace(/\?.*$/, '').trim();
        request(url, '', function(body) {
            fabric.loadSVGFromString(body, callback);
        });
    };

    fabric.loadSVGFromString = function(string, callback) {
        var doc = new DOMParser().parseFromString(string);
        fabric.parseSVGDocument(doc.documentElement, function(results, options) {
            callback(results, options);
        });
    };

    fabric.util.getScript = function(url, callback) {
        request(url, '', function(body) {
            eval(body);
            callback && callback();
        });
    };

    fabric.Image.fromObject = function(object, callback) {
        fabric.util.loadImage(object.src, function(img) {
            var oImg = new fabric.Image(img);

            oImg._initConfig(object);
            oImg._initFilters(object);
            callback(oImg);
        });
    };

    /**
     * Only available when running fabric on node.js
     * @method createCanvasForNode
     * @param width Canvas width
     * @param height Canvas height
     * @return {Object} wrapped canvas instance
     */
    fabric.createCanvasForNode = function(width, height) {

        var canvasEl = fabric.document.createElement('canvas'),
            nodeCanvas = new Canvas(width || 600, height || 600);

        // jsdom doesn't create style on canvas element, so here be temp. workaround
        canvasEl.style = { };

        canvasEl.width = nodeCanvas.width;
        canvasEl.height = nodeCanvas.height;

        var FabricCanvas = fabric.Canvas || fabric.StaticCanvas;
        var fabricCanvas = new FabricCanvas(canvasEl);
        fabricCanvas.contextContainer = nodeCanvas.getContext('2d');
        fabricCanvas.nodeCanvas = nodeCanvas;

        return fabricCanvas;
    };

    fabric.StaticCanvas.prototype.createPNGStream = function() {
        return this.nodeCanvas.createPNGStream();
    };

    var origSetWidth = fabric.StaticCanvas.prototype.setWidth;
    fabric.StaticCanvas.prototype.setWidth = function(width) {
        origSetWidth.call(this);
        this.nodeCanvas.width = width;
        return this;
    };
    if (fabric.Canvas) {
        fabric.Canvas.prototype.setWidth = fabric.StaticCanvas.prototype.setWidth;
    }

    var origSetHeight = fabric.StaticCanvas.prototype.setHeight;
    fabric.StaticCanvas.prototype.setHeight = function(height) {
        origSetHeight.call(this);
        this.nodeCanvas.height = height;
        return this;
    };
    if (fabric.Canvas) {
        fabric.Canvas.prototype.setHeight = fabric.StaticCanvas.prototype.setHeight;
    }

})();

/**
 * Dav Start
 * FabricJS extensions
 **/
(function() {
    /**
     * @namespace
     */
    fabric.imgutil = { };

    /**
     * Removes value from an array.
     * Presence of value (and its position in an array) is determined via `Array.prototype.indexOf`
     * @static
     * @memberOf fabric.util
     * @method removeFromArray
     * @param {Array} array
     * @param {Any} value
     * @return {Array} original array
     */

    /** contrast **/
    function contrast( adjust ) {
        adjust = Math.pow( (adjust + 100) / 100, 2 );
        var process = function( rgba ) {
            rgba.r /= 255;
            rgba.r -= 0.5;
            rgba.r *= adjust;
            rgba.r += 0.5;
            rgba.r *= 255;
            rgba.g /= 255;
            rgba.g -= 0.5;
            rgba.g *= adjust;
            rgba.g += 0.5;
            rgba.g *= 255;
            rgba.b /= 255;
            rgba.b -= 0.5;
            rgba.b *= adjust;
            rgba.b += 0.5;
            rgba.b *= 255;
            return rgba;
        }

        return process;
    }

    /** noise **/
    function noise( adjust ) {
        adjust = Math.abs( adjust ) * 2.55;
        var process = function( rgba ) {
            var rand;
            rand = Calculate.randomRange( adjust * -1, adjust );
            rgba.r += rand;
            rgba.g += rand;
            rgba.b += rand;
            return rgba;
        }
        return process;
    }

    function sepia( adjust ) {
        if( adjust == null ) {
            adjust = 100;
        }

        adjust /= 100;
        var process = function( rgba ) {
            rgba.r = Math.min( 255, (rgba.r * (1 - (0.607 * adjust))) + (rgba.g * (0.769 * adjust)) + (rgba.b * (0.189 * adjust)) );
            rgba.g = Math.min( 255, (rgba.r * (0.349 * adjust)) + (rgba.g * (1 - (0.314 * adjust))) + (rgba.b * (0.168 * adjust)) );
            rgba.b = Math.min( 255, (rgba.r * (0.272 * adjust)) + (rgba.g * (0.534 * adjust)) + (rgba.b * (1 - (0.869 * adjust))) );
            return rgba;
        }
        return process;
    }

    function channels( options ) {
        var chan, value;
        if( typeof options !== "object" ) {
            return this;
        }

        for( chan in options ) {

            value = options[chan];
            if( value === 0 ) {
                delete options[chan];
                continue;
            }
            options[chan] /= 100;
        }
        if( options.length === 0 ) {
            return this;
        }

        var process = function( rgba ) {
            if( options.red != null ) {
                if( options.red > 0 ) {
                    rgba.r += (255 - rgba.r) * options.red;
                } else {
                    rgba.r -= rgba.r * Math.abs( options.red );
                }
            }
            if( options.green != null ) {
                if( options.green > 0 ) {
                    rgba.g += (255 - rgba.g) * options.green;
                } else {
                    rgba.g -= rgba.g * Math.abs( options.green );
                }
            }
            if( options.blue != null ) {
                if( options.blue > 0 ) {
                    rgba.b += (255 - rgba.b) * options.blue;
                } else {
                    rgba.b -= rgba.b * Math.abs( options.blue );
                }
            }
            return rgba;
        }
        return process;
    }

    function gamma( adjust ) {
        var process = function( rgba ) {
            rgba.r = Math.pow( rgba.r / 255, adjust ) * 255;
            rgba.g = Math.pow( rgba.g / 255, adjust ) * 255;
            rgba.b = Math.pow( rgba.b / 255, adjust ) * 255;
            return rgba;
        }
        return process;
    }

    function greyscale() {
        var process = function( rgba ) {

            var avg;
            avg = 0.3 * rgba.r + 0.59 * rgba.g + 0.11 * rgba.b;
            rgba.r = avg;
            rgba.g = avg;
            rgba.b = avg;
            return rgba;
        }
        return process;
    }

    function locationXY( width, height, loc ) {
        var x, y;
        y = height - Math.floor( loc / (width * 4) );
        x = (loc % (width * 4)) / 4;
        return {
            x: x,
            y: y
        };
    }

    function vignette( size, strength, data, width, height ) {
        var bezier, center, end, start;
        if( strength == null ) {
            strength = 60;
        }
        if( typeof size === "string" && size.substr( -1 ) === "%" ) {
            if( height > width ) {
                size = width * (parseInt( size.substr( 0, size.length - 1 ), 10 ) / 100);
            } else {
                size = height * (parseInt( size.substr( 0, size.length - 1 ), 10 ) / 100);
            }
        }
        strength /= 100;

        center = [width / 2, height / 2];
        start = Math.sqrt( Math.pow( center[0], 2 ) + Math.pow( center[1], 2 ) );
        end = start - size;
        bezier = Calculate.bezier( [0, 1], [30, 30], [70, 60], [100, 80] );

        var r, g, b;
        for( var i = 0, len = data.length; i < len; i += 4 ) {
            var dist, div, loc;
            loc = locationXY( width, height, i );

            dist = Calculate.distance( loc.x, loc.y, center[0], center[1] );

            r = data[i];
            g = data[i + 1];
            b = data[i + 2];
            if( dist > end ) {

                div = Math.max( 1, (bezier[Math.round( ((dist - end) / size) * 100 )] / 10) * strength );
                r = Math.pow( r / 255, div ) * 255;
                g = Math.pow( g / 255, div ) * 255;
                b = Math.pow( b / 255, div ) * 255;
            }
            data[i] = r;
            data[i + 1] = g;
            data[i + 2] = b;

        }

        return data;
    }

    function curves( chans, start, ctrl1, ctrl2, end ) {
        var bezier, i, _ref, _ref2;
        if( typeof chans === "string" ) {
            chans = chans.split( "" );
        }
        bezier = Calculate.bezier( start, ctrl1, ctrl2, end, 0, 255 );
        if( start[0] > 0 ) {
            for( i = 0, _ref = start[0]; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i-- ) {
                bezier[i] = start[1];
            }
        }
        if( end[0] < 255 ) {
            for( i = _ref2 = end[0]; _ref2 <= 255 ? i <= 255 : i >= 255; _ref2 <= 255 ? i++ : i-- ) {
                bezier[i] = end[1];
            }
        }

        var process = function( rgba ) {

            var i, _ref3;
            for( i = 0, _ref3 = chans.length; 0 <= _ref3 ? i < _ref3 : i > _ref3; 0 <= _ref3 ? i++ : i-- ) {
                rgba[chans[i]] = bezier[rgba[chans[i]]];
            }
            return rgba;
        };

        return process;

    }

    function exposure( adjust ) {
        var ctrl1, ctrl2, p;
        p = Math.abs( adjust ) / 100;
        ctrl1 = [0, 255 * p];
        ctrl2 = [255 - (255 * p), 255];
        if( adjust < 0 ) {
            ctrl1 = ctrl1.reverse();
            ctrl2 = ctrl2.reverse();
        }

        return curves( 'rgb', [0, 0], ctrl1, ctrl2, [255, 255] );
    }

    function saturation( adjust ) {
        adjust *= -0.01;
        var process = function( rgba ) {
            var max;
            max = Math.max( rgba.r, rgba.g, rgba.b );
            if( rgba.r !== max ) {
                rgba.r += (max - rgba.r) * adjust;
            }
            if( rgba.g !== max ) {
                rgba.g += (max - rgba.g) * adjust;
            }
            if( rgba.b !== max ) {
                rgba.b += (max - rgba.b) * adjust;
            }
            return rgba;
        }

        return process;

    }

    function vibrance( adjust ) {
        adjust *= -1;
        var process = function( rgba ) {
            var amt, avg, max;
            max = Math.max( rgba.r, rgba.g, rgba.b );
            avg = (rgba.r + rgba.g + rgba.b) / 3;
            amt = ((Math.abs( max - avg ) * 2 / 255) * adjust) / 100;
            if( rgba.r !== max ) {
                rgba.r += (max - rgba.r) * amt;
            }
            if( rgba.g !== max ) {
                rgba.g += (max - rgba.g) * amt;
            }
            if( rgba.b !== max ) {
                rgba.b += (max - rgba.b) * amt;
            }
            return rgba;
        }

        return process;
    }

    function colorize() {
        var level, rgb;
        if( arguments.length === 2 ) {
            rgb = Convert.hexToRGB( arguments[0] );
            level = arguments[1];
        } else if( arguments.length === 4 ) {
            rgb = {
                r: arguments[0],
                g: arguments[1],
                b: arguments[2]
            };
            level = arguments[3];
        }
        var process = function( rgba ) {
            rgba.r -= (rgba.r - rgb.r) * (level / 100);
            rgba.g -= (rgba.g - rgb.g) * (level / 100);
            rgba.b -= (rgba.b - rgb.b) * (level / 100);
            return rgba;
        }
        return process;
    };

    function brightness( adjust ) {
        adjust = Math.floor( 255 * (adjust / 100) );
        var process = function( rgba ) {
            rgba.r += adjust;
            rgba.g += adjust;
            rgba.b += adjust;
            return rgba;
        };
        return process;
    }

    function posterize( adjust ) {
        var numOfAreas, numOfValues;
        numOfAreas = 256 / adjust;
        numOfValues = 255 / (adjust - 1);
        var process = function( rgba ) {
            rgba.r = Math.floor( Math.floor( rgba.r / numOfAreas ) * numOfValues );
            rgba.g = Math.floor( Math.floor( rgba.g / numOfAreas ) * numOfValues );
            rgba.b = Math.floor( Math.floor( rgba.b / numOfAreas ) * numOfValues );
            return rgba;
        };

        return process;
    }

    function clip( adjust ) {
        adjust = Math.abs( adjust ) * 2.55;
        var process = function( rgba ) {
            if( rgba.r > 255 - adjust ) {
                rgba.r = 255;
            } else if( rgba.r < adjust ) {
                rgba.r = 0;
            }
            if( rgba.g > 255 - adjust ) {
                rgba.g = 255;
            } else if( rgba.g < adjust ) {
                rgba.g = 0;
            }
            if( rgba.b > 255 - adjust ) {
                rgba.b = 255;
            } else if( rgba.b < adjust ) {
                rgba.b = 0;
            }
            return rgba;
        }
        return process;
    }

    function fillColor() {
        var color;
        if( arguments.length === 1 ) {
            color = Convert.hexToRGB( arguments[0] );
        } else {
            color = {
                r: arguments[0],
                g: arguments[1],
                b: arguments[2]
            };
        }
        var process = function( rgba ) {
            rgba.r = color.r;
            rgba.g = color.g;
            rgba.b = color.b;
            rgba.a = 255;
            return rgba;
        };

        return process;
    }

    fabric.imgutil.opacity = function( adjust ) {
        adjust = adjust / 100;

        var process = function( rgba ) {
            rgba.a = 255 * adjust;
            return rgba;
        };
        return process;
    }

    BlurStack = function() {
        this.r = 0;
        this.g = 0;
        this.b = 0;
        this.a = 0;
        return this.next = null;
    };

    mul_table =
    [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345,
     328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345,
     337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307,
     302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345,
     341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442,
     437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307,
     304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
    shg_table =
    [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20,
     20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22,
     22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
     23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
     24, 24, 24, 24, 24, 24, 24, 24, 24, 24];

    function stackBlur( pixels, width, height, radius ) {
        var b_in_sum, b_out_sum, b_sum, div, g_in_sum, g_out_sum, g_sum, heightMinus1, i, mul_sum, p, pb, pg, pr, r_in_sum, r_out_sum, r_sum, radiusPlus1, rbs, shg_sum, stack, stackEnd, stackIn, stackOut, stackStart, sumFactor, w4, widthMinus1, x, y, yi, yp, yw;
        if( isNaN( radius ) || radius < 1 ) {
            return;
        }
        radius |= 0;
        div = radius + radius + 1;
        w4 = width << 2;
        widthMinus1 = width - 1;
        heightMinus1 = height - 1;
        radiusPlus1 = radius + 1;
        sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
        stackStart = new BlurStack();
        stack = stackStart;
        for( i = 1; 1 <= div ? i < div : i > div; 1 <= div ? i++ : i-- ) {
            stack = stack.next = new BlurStack();
            if( i === radiusPlus1 ) {
                stackEnd = stack;
            }
        }

        stack.next = stackStart;
        stackIn = null;
        stackOut = null;
        yw = yi = 0;
        mul_sum = mul_table[radius];
        shg_sum = shg_table[radius];
        for( y = 0; 0 <= height ? y < height : y > height; 0 <= height ? y++ : y-- ) {
            r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;
            r_out_sum = radiusPlus1 * (pr = pixels[yi]);
            g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
            b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
            r_sum += sumFactor * pr;
            g_sum += sumFactor * pg;
            b_sum += sumFactor * pb;
            stack = stackStart;
            for( i = 0; 0 <= radiusPlus1 ? i < radiusPlus1 : i > radiusPlus1; 0 <= radiusPlus1 ? i++ : i-- ) {
                stack.r = pr;
                stack.g = pg;
                stack.b = pb;
                stack = stack.next;
            }
            for( i = 1; 1 <= radiusPlus1 ? i < radiusPlus1 : i > radiusPlus1; 1 <= radiusPlus1 ? i++ : i-- ) {
                p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
                r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);
                g_sum += (stack.g = (pg = pixels[p + 1])) * rbs;
                b_sum += (stack.b = (pb = pixels[p + 2])) * rbs;
                r_in_sum += pr;
                g_in_sum += pg;
                b_in_sum += pb;
                stack = stack.next;
            }
            stackIn = stackStart;
            stackOut = stackEnd;
            for( x = 0; 0 <= width ? x < width : x > width; 0 <= width ? x++ : x-- ) {
                pixels[yi] = (r_sum * mul_sum) >> shg_sum;
                pixels[yi + 1] = (g_sum * mul_sum) >> shg_sum;
                pixels[yi + 2] = (b_sum * mul_sum) >> shg_sum;
                r_sum -= r_out_sum;
                g_sum -= g_out_sum;
                b_sum -= b_out_sum;
                r_out_sum -= stackIn.r;
                g_out_sum -= stackIn.g;
                b_out_sum -= stackIn.b;
                p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
                r_in_sum += (stackIn.r = pixels[p]);
                g_in_sum += (stackIn.g = pixels[p + 1]);
                b_in_sum += (stackIn.b = pixels[p + 2]);
                r_sum += r_in_sum;
                g_sum += g_in_sum;
                b_sum += b_in_sum;
                stackIn = stackIn.next;
                r_out_sum += (pr = stackOut.r);
                g_out_sum += (pg = stackOut.g);
                b_out_sum += (pb = stackOut.b);
                r_in_sum -= pr;
                g_in_sum -= pg;
                b_in_sum -= pb;
                stackOut = stackOut.next;
                yi += 4;
            }
            yw += width;
        }
        for( x = 0; 0 <= width ? x < width : x > width; 0 <= width ? x++ : x-- ) {
            g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;
            yi = x << 2;
            r_out_sum = radiusPlus1 * (pr = pixels[yi]);
            g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
            b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
            r_sum += sumFactor * pr;
            g_sum += sumFactor * pg;
            b_sum += sumFactor * pb;
            stack = stackStart;
            for( i = 0; 0 <= radiusPlus1 ? i < radiusPlus1 : i > radiusPlus1; 0 <= radiusPlus1 ? i++ : i-- ) {
                stack.r = pr;
                stack.g = pg;
                stack.b = pb;
                stack = stack.next;
            }
            yp = width;
            for( i = 1; 1 <= radius ? i <= radius : i >= radius; 1 <= radius ? i++ : i-- ) {
                yi = (yp + x) << 2;
                r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);
                g_sum += (stack.g = (pg = pixels[yi + 1])) * rbs;
                b_sum += (stack.b = (pb = pixels[yi + 2])) * rbs;
                r_in_sum += pr;
                g_in_sum += pg;
                b_in_sum += pb;
                stack = stack.next;
                if( i < heightMinus1 ) {
                    yp += width;
                }
            }
            yi = x;
            stackIn = stackStart;
            stackOut = stackEnd;
            for( y = 0; 0 <= height ? y < height : y > height; 0 <= height ? y++ : y-- ) {
                p = yi << 2;
                pixels[p] = (r_sum * mul_sum) >> shg_sum;
                pixels[p + 1] = (g_sum * mul_sum) >> shg_sum;
                pixels[p + 2] = (b_sum * mul_sum) >> shg_sum;
                r_sum -= r_out_sum;
                g_sum -= g_out_sum;
                b_sum -= b_out_sum;
                r_out_sum -= stackIn.r;
                g_out_sum -= stackIn.g;
                b_out_sum -= stackIn.b;
                p = (x + (((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width)) << 2;
                r_sum += (r_in_sum += (stackIn.r = pixels[p]));
                g_sum += (g_in_sum += (stackIn.g = pixels[p + 1]));
                b_sum += (b_in_sum += (stackIn.b = pixels[p + 2]));
                stackIn = stackIn.next;
                r_out_sum += (pr = stackOut.r);
                g_out_sum += (pg = stackOut.g);
                b_out_sum += (pb = stackOut.b);
                r_in_sum -= pr;
                g_in_sum -= pg;
                b_in_sum -= pb;
                stackOut = stackOut.next;
                yi += width;
            }
        }

    }

    function applyLayer( layer, data, layerData, width, height, layerArr ) {

        var filters = layer[1];
        var filterLen = filters.length;
        var opacity = 100;
        var r, g, b, a;
        for( var k = 0; k < filterLen; k++ ) {
            if( typeof filters[k] === 'string' ) {
                var options = filters[k].split( ':' );
                if( options[0] == 'stackBlur' ) {
                    fabric.imgutil.stackBlur( layerData, width, height, parseInt( options[1] ) );
                } else if( options[0] == 'opacity' ) {
                    opacity = parseInt( options[1] ) / 100;
                } else if( options[0] == "sharpen" ) {
                    var func = fabric.imgutil.sharpen( parseInt( options[1] ) );
                    func( data, width, height );
                }
                continue;
            }
            if( typeof filters[k] === 'number' ) {

                fabric.imgutil.applyLayer( layerArr[filters[k]].filter, layerData, layerArr[filters[k]].layer.pixels, width, height, layer );
                continue;
            }

            for( var i = 0, len = layerData.length; i < len; i += 4 ) {

                r = layerData[i];
                g = layerData[i + 1];
                b = layerData[i + 2];
                a = layerData[i + 3];

                var rgba = {
                    r: r,
                    g: g,
                    b: b,
                    a: a
                }

                rgba = filters[k]( rgba );

                layerData[i] = rgba.r;
                layerData[i + 1] = rgba.g;
                layerData[i + 2] = rgba.b;
                layerData[i + 3] = rgba.a;
            }

        }
        var parentData, result, rgbaLayer, rgbaParent, _ref, _results;

        for( i = 0, _ref = layerData.length; i < _ref; i += 4 ) {

            rgbaParent = {
                r: data[i],
                g: data[i + 1],
                b: data[i + 2],
                a: data[i + 3]
            };

            rgbaLayer = {
                r: layerData[i],
                g: layerData[i + 1],
                b: layerData[i + 2],
                a: layerData[i + 3]
            };

            result = layer[0]( rgbaLayer, rgbaParent );
            result.r = Util.clampRGB( result.r );
            result.g = Util.clampRGB( result.g );
            result.b = Util.clampRGB( result.b );
            if( !(result.a != null) ) {
                result.a = rgbaLayer.a;
            }
            data[i] = rgbaParent.r - ((rgbaParent.r - result.r) * (opacity * (result.a / 255)));
            data[i + 1] = rgbaParent.g - ((rgbaParent.g - result.g) * (opacity * (result.a / 255)));
            data[i + 2] = rgbaParent.b - ((rgbaParent.b - result.b) * (opacity * (result.a / 255)));
        }

    }

    function addLayer( data, width, height ) {

        var newlayer = fabric.document.createElement( 'canvas' ), layerContext = newlayer.getContext( '2d' );
        newlayer.width = width;
        newlayer.height = height;
        layerContext.createImageData( newlayer.width, newlayer.height );

        var layerImageData = layerContext.getImageData( 0, 0, width, height );
        var layerData = layerImageData.data;

        var l, _ref;
        for( l = 0, _ref = data.length; l < _ref; l += 4 ) {
            layerData[l] = data[l];
            layerData[l + 1] = data[l + 1];
            layerData[l + 2] = data[l + 2];
            layerData[l + 3] = data[l + 3];
        }

        return  {
            layer: newlayer,
            pixels: layerData
        }

    }

    function renderKernel( job ) {
        var adjust, adjustSize, bias, builder, builderIndex, divisor, end, i, j, k, kernel, modPixelData, n, name, pixel, pixelInfo, res, start;
        var width, height;
        width = job.width;
        height = job.height;
        bias = job.bias;
        divisor = job.divisor;
        n = job.pixelData.length;
        adjust = job.adjust;
        adjustSize = Math.sqrt( adjust.length );
        kernel = [];
        modPixelData = [];
        start = width * 4 * ((adjustSize - 1) / 2);
        end = n - (height * 4 * ((adjustSize - 1) / 2));
        builder = (adjustSize - 1) / 2;
        pixelInfo = new PixelInfo( job.pixelData, width, height );
        for( i = start; i < end; i += 4 ) {
            pixelInfo.loc = i;
            builderIndex = 0;
            for( j = -builder; -builder <= builder ? j <= builder : j >= builder; -builder <= builder ? j++ : j-- ) {
                for( k = builder; builder <= -builder ? k <= -builder : k >= -builder; builder <= -builder ? k++ : k-- ) {
                    pixel = pixelInfo.getPixelRelative( j, k );
                    kernel[builderIndex * 3] = pixel.r;
                    kernel[builderIndex * 3 + 1] = pixel.g;
                    kernel[builderIndex * 3 + 2] = pixel.b;
                    builderIndex++;
                }
            }
            res = processKernel( adjust, kernel, divisor, bias );
            modPixelData[i] = Util.clampRGB( res.r );
            modPixelData[i + 1] = Util.clampRGB( res.g );
            modPixelData[i + 2] = Util.clampRGB( res.b );
            modPixelData[i + 3] = job.pixelData[i + 3];
        }
        for( i = start; start <= end ? i < end : i > end; start <= end ? i++ : i-- ) {
            job.pixelData[i] = modPixelData[i];
        }

    }

    function processKernel( adjust, kernel, divisor, bias ) {
        var i, val, _ref;
        val = {
            r: 0,
            g: 0,
            b: 0
        };
        for( i = 0, _ref = adjust.length; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i-- ) {
            val.r += adjust[i] * kernel[i * 3];
            val.g += adjust[i] * kernel[i * 3 + 1];
            val.b += adjust[i] * kernel[i * 3 + 2];
        }
        val.r = (val.r / divisor) + bias;
        val.g = (val.g / divisor) + bias;
        val.b = (val.b / divisor) + bias;
        return val;
    }

    function sharpen( amt ) {
        if( amt == null ) {
            amt = 100;
        }
        amt /= 100;

        return real_processKernel( "Sharpen", [0, -amt, 0, -amt, 4 * amt + 1, -amt, 0, -amt, 0] );
    }

    function real_processKernel( name, adjust, divisor, bias ) {
        var i, _ref;
        if( !divisor ) {
            divisor = 0;
            for( i = 0, _ref = adjust.length; 0 <= _ref ? i < _ref : i > _ref; 0 <= _ref ? i++ : i-- ) {
                divisor += adjust[i];
            }
        }

        var process = function( data, width, height ) {
            renderKernel( {
                              width: width,
                              height: height,
                              bias: bias || 0,
                              divisor: divisor,
                              pixelData: data,
                              adjust: adjust
                          } );
        };
        return process;
    }

    function renderFilters( data, width, height, processfunc, layer ) {
        var r, g, b;
        var funcLen = processfunc.length;
        for( var j = 0; j < funcLen; j++ ) {

            if( typeof processfunc[j] === 'string' ) {
                var filter = processfunc[j].split( ':' );
                if( filter[0] == "vignette" ) {
                    fabric.imgutil.vignette( filter[1], filter[2], data, width, height );
                } else if( filter[0] == "sharpen" ) {
                    var func = fabric.imgutil.sharpen( parseInt( filter[1] ) );

                    func( data, width, height );
                }
                continue;
            }
            if( typeof processfunc[j] === 'number' ) {

                fabric.imgutil.applyLayer( layer[processfunc[j]].filter, data, layer[processfunc[j]].layer.pixels, width, height, layer );
                continue;
            }
            for( var i = 0, len = data.length; i < len; i += 4 ) {

                r = data[i];
                g = data[i + 1];
                b = data[i + 2];
                var rgba = {r: r, g: g, b: b}
                rgba = processfunc[j]( rgba );
                data[i] = rgba.r;
                data[i + 1] = rgba.g;
                data[i + 2] = rgba.b;

            }
        }
    }

    function hue( adjust ) {
        var process = function( rgba ) {
            var h, hsv, rgb;
            hsv = Convert.rgbToHSV( rgba.r, rgba.g, rgba.b );
            h = hsv.h * 100;
            h += Math.abs( adjust );
            h = h % 100;
            h /= 100;
            hsv.h = h;
            rgb = Convert.hsvToRGB( hsv.h, hsv.s, hsv.v );
            rgb.a = rgba.a;
            return rgb;
        };
        return process;
    }

    fabric.imgutil.contrast = contrast;
    fabric.imgutil.noise = noise;
    fabric.imgutil.sepia = sepia;
    fabric.imgutil.channels = channels;
    fabric.imgutil.gamma = gamma;
    fabric.imgutil.greyscale = greyscale;
    fabric.imgutil.vignette = vignette;
    fabric.imgutil.exposure = exposure;
    fabric.imgutil.saturation = saturation;
    fabric.imgutil.vibrance = vibrance;
    fabric.imgutil.curves = curves;
    fabric.imgutil.exposure = exposure;
    fabric.imgutil.colorize = colorize;
    fabric.imgutil.brightness = brightness;
    fabric.imgutil.posterize = posterize;
    fabric.imgutil.clip = clip;
    fabric.imgutil.fillColor = fillColor;
    fabric.imgutil.applyLayer = applyLayer;
    fabric.imgutil.stackBlur = stackBlur;
    fabric.imgutil.addLayer = addLayer;
    fabric.imgutil.renderKernel = renderKernel;
    fabric.imgutil.sharpen = sharpen;
    fabric.imgutil.renderFilters = renderFilters;
    fabric.imgutil.hue = hue;
})();
(function() {

    PixelInfo = function( c, width, height ) {
        this.pixelData = c;
        this.loc = 0;
        this.width = width;
        this.height = height;
    }

    PixelInfo.prototype.locationXY = function() {
        var x, y;
        y = this.height - Math.floor( this.loc / (this.width * 4) );
        x = (this.loc % (this.width * 4)) / 4;
        return {
            x: x,
            y: y
        };
    }

    PixelInfo.prototype.getPixelRelative = function( horiz, vert ) {
        var newLoc;
        newLoc = this.loc + (this.width * 4 * (vert * -1)) + (4 * horiz);
        if( newLoc > this.pixelData.length || newLoc < 0 ) {
            return {
                r: 0,
                g: 0,
                b: 0,
                a: 0
            };
        }
        return {
            r: this.pixelData[newLoc],
            g: this.pixelData[newLoc + 1],
            b: this.pixelData[newLoc + 2],
            a: this.pixelData[newLoc + 3]
        };
    }

    PixelInfo.prototype.getPixel = function( x, y ) {
        var loc;
        loc = (y * this.width + x) * 4;
        return {
            r: this.pixelData[loc],
            g: this.pixelData[loc + 1],
            b: this.pixelData[loc + 2],
            a: this.pixelData[loc + 3]
        };
    }

    PixelInfo.prototype.putPixel = function( x, y, rgba ) {
        var loc;
        loc = (y * this.width + x) * 4;
        this.pixelData[loc] = rgba.r;
        this.pixelData[loc + 1] = rgba.g;
        this.pixelData[loc + 2] = rgba.b;
        return this.pixelData[loc + 3] = rgba.a;
    };
})();
(function() {
    Util = {}

    Util.clampRGB = function( val ) {
        if( val < 0 ) {
            return 0;
        }
        if( val > 255 ) {
            return 255;
        }
        return val;
    }

})();
(function() {
    Blender = {}

    Blender.normal = function( rgbaLayer, rgbaParent ) {
        return {
            r: rgbaLayer.r,
            g: rgbaLayer.g,
            b: rgbaLayer.b
        };
    }

    Blender.multiply = function( rgbaLayer, rgbaParent ) {
        return {
            r: (rgbaLayer.r * rgbaParent.r) / 255,
            g: (rgbaLayer.g * rgbaParent.g) / 255,
            b: (rgbaLayer.b * rgbaParent.b) / 255
        };
    }

    Blender.overlay = function( rgbaLayer, rgbaParent ) {
        var result;
        result = {};
        result.r = rgbaParent.r > 128 ? 255 - 2 * (255 - rgbaLayer.r) * (255 - rgbaParent.r) / 255 : (rgbaParent.r * rgbaLayer.r * 2) / 255;
        result.g = rgbaParent.g > 128 ? 255 - 2 * (255 - rgbaLayer.g) * (255 - rgbaParent.g) / 255 : (rgbaParent.g * rgbaLayer.g * 2) / 255;
        result.b = rgbaParent.b > 128 ? 255 - 2 * (255 - rgbaLayer.b) * (255 - rgbaParent.b) / 255 : (rgbaParent.b * rgbaLayer.b * 2) / 255;
        return result;
    }
    Blender.screen = function( rgbaLayer, rgbaParent ) {
        return {
            r: 255 - (((255 - rgbaLayer.r) * (255 - rgbaParent.r)) / 255),
            g: 255 - (((255 - rgbaLayer.g) * (255 - rgbaParent.g)) / 255),
            b: 255 - (((255 - rgbaLayer.b) * (255 - rgbaParent.b)) / 255)
        };
    }

    Blender.difference = function( rgbaLayer, rgbaParent ) {
        return {
            r: rgbaLayer.r - rgbaParent.r,
            g: rgbaLayer.g - rgbaParent.g,
            b: rgbaLayer.b - rgbaParent.b
        };
    }

    Blender.addition = function( rgbaLayer, rgbaParent ) {
        return {
            r: rgbaParent.r + rgbaLayer.r,
            g: rgbaParent.g + rgbaLayer.g,
            b: rgbaParent.b + rgbaLayer.b
        };
    }

    Blender.exclusion = function( rgbaLayer, rgbaParent ) {
        return {
            r: 128 - 2 * (rgbaParent.r - 128) * (rgbaLayer.r - 128) / 255,
            g: 128 - 2 * (rgbaParent.g - 128) * (rgbaLayer.g - 128) / 255,
            b: 128 - 2 * (rgbaParent.b - 128) * (rgbaLayer.b - 128) / 255
        };
    }

    Blender.softLight = function( rgbaLayer, rgbaParent ) {
        var result;
        result = {};
        result.r = rgbaParent.r > 128 ? 255 - ((255 - rgbaParent.r) * (255 - (rgbaLayer.r - 128))) / 255 : (rgbaParent.r * (rgbaLayer.r + 128)) / 255;
        result.g = rgbaParent.g > 128 ? 255 - ((255 - rgbaParent.g) * (255 - (rgbaLayer.g - 128))) / 255 : (rgbaParent.g * (rgbaLayer.g + 128)) / 255;
        result.b = rgbaParent.b > 128 ? 255 - ((255 - rgbaParent.b) * (255 - (rgbaLayer.b - 128))) / 255 : (rgbaParent.b * (rgbaLayer.b + 128)) / 255;
        return result;
    }

    Blender.lighten = function( rgbaLayer, rgbaParent ) {
        return {
            r: rgbaParent.r > rgbaLayer.r ? rgbaParent.r : rgbaLayer.r,
            g: rgbaParent.g > rgbaLayer.g ? rgbaParent.g : rgbaLayer.g,
            b: rgbaParent.b > rgbaLayer.b ? rgbaParent.b : rgbaLayer.b
        };
    }

    Blender.darken = function( rgbaLayer, rgbaParent ) {
        return {
            r: rgbaParent.r > rgbaLayer.r ? rgbaLayer.r : rgbaParent.r,
            g: rgbaParent.g > rgbaLayer.g ? rgbaLayer.g : rgbaParent.g,
            b: rgbaParent.b > rgbaLayer.b ? rgbaLayer.b : rgbaParent.b
        };
    }

})();
(function() {
    Convert = {}

    Convert.hexToRGB = function( hex ) {
        var b, g, r;
        if( hex.charAt( 0 ) === "#" ) {
            hex = hex.substr( 1 );
        }
        r = parseInt( hex.substr( 0, 2 ), 16 );
        g = parseInt( hex.substr( 2, 2 ), 16 );
        b = parseInt( hex.substr( 4, 2 ), 16 );
        return {
            r: r,
            g: g,
            b: b
        };
    };

    Convert.rgbToHSV = function( r, g, b ) {
        var d, h, max, min, s, v;
        r /= 255;
        g /= 255;
        b /= 255;
        max = Math.max( r, g, b );
        min = Math.min( r, g, b );
        v = max;
        d = max - min;
        s = max === 0 ? 0 : d / max;
        if( max === min ) {
            h = 0;
        } else {
            h = (function() {
                switch( max ) {
                    case r:
                        return (g - b) / d + (g < b ? 6 : 0);
                    case g:
                        return (b - r) / d + 2;
                    case b:
                        return (r - g) / d + 4;
                }
            })();
            h /= 6;
        }
        return {
            h: h,
            s: s,
            v: v
        };
    };

    Convert.hsvToRGB = function( h, s, v ) {
        var b, f, g, i, p, q, r, t;
        i = Math.floor( h * 6 );
        f = h * 6 - i;
        p = v * (1 - s);
        q = v * (1 - f * s);
        t = v * (1 - (1 - f) * s);
        switch( i % 6 ) {
            case 0:
                r = v;
                g = t;
                b = p;
                break;
            case 1:
                r = q;
                g = v;
                b = p;
                break;
            case 2:
                r = p;
                g = v;
                b = t;
                break;
            case 3:
                r = p;
                g = q;
                b = v;
                break;
            case 4:
                r = t;
                g = p;
                b = v;
                break;
            case 5:
                r = v;
                g = p;
                b = q;
        }
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255
        };
    };

})();
(function() {

    Calculate = {}

    Calculate.distance = function( x1, y1, x2, y2 ) {
        return Math.sqrt( Math.pow( x2 - x1, 2 ) + Math.pow( y2 - y1, 2 ) );
    };

    Calculate.randomRange = function( min, max, getFloat ) {
        var rand;
        if( getFloat == null ) {
            getFloat = false;
        }
        rand = min + (Math.random() * (max - min));
        if( getFloat ) {
            return rand.toFixed( getFloat );
        } else {
            return Math.round( rand );
        }
    };

    Calculate.bezier = function( start, ctrl1, ctrl2, end, lowBound, highBound ) {
        var Ax, Ay, Bx, By, Cx, Cy, bezier, curveX, curveY, i, j, leftCoord, rightCoord, t, x0, x1, x2, x3, y0, y1, y2, y3, _ref, _ref2;
        x0 = start[0];
        y0 = start[1];
        x1 = ctrl1[0];
        y1 = ctrl1[1];
        x2 = ctrl2[0];
        y2 = ctrl2[1];
        x3 = end[0];
        y3 = end[1];
        bezier = {};
        Cx = 3 * (x1 - x0);
        Bx = 3 * (x2 - x1) - Cx;
        Ax = x3 - x0 - Cx - Bx;
        Cy = 3 * (y1 - y0);
        By = 3 * (y2 - y1) - Cy;
        Ay = y3 - y0 - Cy - By;
        for( i = 0; i < 1000; i++ ) {
            t = i / 1000;
            curveX = Math.round( (Ax * Math.pow( t, 3 )) + (Bx * Math.pow( t, 2 )) + (Cx * t) + x0 );
            curveY = Math.round( (Ay * Math.pow( t, 3 )) + (By * Math.pow( t, 2 )) + (Cy * t) + y0 );
            if( lowBound && curveY < lowBound ) {
                curveY = lowBound;
            } else if( highBound && curveY > highBound ) {
                curveY = highBound;
            }
            bezier[curveX] = curveY;
        }
        if( bezier.length < end[0] + 1 ) {
            for( i = 0, _ref = end[0]; 0 <= _ref ? i <= _ref : i >= _ref; 0 <= _ref ? i++ : i-- ) {
                if( !(bezier[i] != null) ) {
                    leftCoord = [i - 1, bezier[i - 1]];
                    for( j = i, _ref2 = end[0]; i <= _ref2 ? j <= _ref2 : j >= _ref2; i <= _ref2 ? j++ : j-- ) {
                        if( bezier[j] != null ) {
                            rightCoord = [j, bezier[j]];
                            break;
                        }
                    }
                    bezier[i] = leftCoord[1] + ((rightCoord[1] - leftCoord[1]) / (rightCoord[0] - leftCoord[0])) * (i - leftCoord[0]);
                }
            }
        }
        if( !(bezier[end[0]] != null) ) {
            bezier[end[0]] = bezier[end[0] - 1];
        }
        return bezier;
    };

})();
fabric.Canvas.prototype.getAbsoluteCoords = function( object ) {
    return ( { left: object.left + this._offset.left - object.width / 2, top: object.top + this._offset.top + object.height / 2 } );
}
/**
 * Dav END
 * FabricJS extenstions
 **/

/**
 * BEGIN ADDITIONAL FILTERS
 **/
fabric.Image.filters.vintage = fabric.util.createClass( {

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: "vintage",

                                                            /**
                                                             * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                             * @param {Object} [options] Options object

                                                             /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function( canvasEl ) {

                                                                var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                             canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b;

                                                                var processfunc = [];
                                                                processfunc.push( fabric.imgutil.greyscale() );
                                                                processfunc.push( fabric.imgutil.contrast( 5 ) );
                                                                processfunc.push( fabric.imgutil.noise( 3 ) );
                                                                processfunc.push( fabric.imgutil.sepia( 100 ) );
                                                                processfunc.push( fabric.imgutil.channels( {
                                                                                                               red: 8,
                                                                                                               blue: 2,
                                                                                                               green: 4
                                                                                                           } ) );
                                                                processfunc.push( fabric.imgutil.gamma( 0.87 ) );

                                                                var funcLen = processfunc.length;
                                                                for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                    r = data[i];
                                                                    g = data[i + 1];
                                                                    b = data[i + 2];
                                                                    var rgba = {r: r, g: g, b: b}
                                                                    for( var j = 0; j < funcLen; j++ ) {
                                                                        rgba = processfunc[j]( rgba );
                                                                    }
                                                                    //            var rgb = fabric.imgutil.greyscale({r:r, g:g,b:b});
                                                                    //            rgb = fabric.imgutil.contrast(rgb, 5);
                                                                    //            rgb = fabric.imgutil.noise(rgb, 3);
                                                                    //            rgb = fabric.imgutil.sepia(rgb, 100);
                                                                    //            rgb = fabric.imgutil.channels(rgb, {
                                                                    //                red: 8,
                                                                    //                blue: 2,
                                                                    //                green: 4
                                                                    //                });
                                                                    //            rgb = fabric.imgutil.gamma(rgb, 0.87);
                                                                    data[i] = rgba.r;
                                                                    data[i + 1] = rgba.g;
                                                                    data[i + 2] = rgba.b;

                                                                }
                                                                fabric.imgutil.vignette( "40%", 30, data, width, height );
                                                                //        for (i = 0, len = data1.length; i < len; i ++) {
                                                                //            data[i] = data1[i];
                                                                //        }
                                                                context.putImageData( imageData, 0, 0 );

                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type
                                                                };
                                                            }
                                                        } );
fabric.Image.filters.vintage.fromObject = function( object ) {
    return new fabric.Image.filters.vintage( object );
};

fabric.Image.filters.sunrise = fabric.util.createClass( {

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: "sunrise",

                                                            /**
                                                             * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                             * @param {Object} [options] Options object

                                                             /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function( canvasEl ) {

                                                                var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                             canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b;
                                                                var processfunc = [];
                                                                processfunc.push( fabric.imgutil.exposure( 3.5 ) );
                                                                processfunc.push( fabric.imgutil.saturation( -5 ) );
                                                                processfunc.push( fabric.imgutil.vibrance( 50 ) );
                                                                processfunc.push( fabric.imgutil.sepia( 60 ) );
                                                                processfunc.push( fabric.imgutil.colorize( "#e87b22", 10 ) );
                                                                processfunc.push( fabric.imgutil.channels( {
                                                                                                               red: 8,
                                                                                                               blue: 8
                                                                                                           } ) );
                                                                processfunc.push( fabric.imgutil.contrast( 5 ) );
                                                                processfunc.push( fabric.imgutil.gamma( 1.2 ) );
                                                                //
                                                                var funcLen = processfunc.length;

                                                                for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                    r = data[i];
                                                                    g = data[i + 1];
                                                                    b = data[i + 2];
                                                                    var rgba = {r: r, g: g, b: b}
                                                                    for( var j = 0; j < funcLen; j++ ) {
                                                                        rgba = processfunc[j]( rgba );
                                                                    }
                                                                    data[i] = rgba.r;
                                                                    data[i + 1] = rgba.g;
                                                                    data[i + 2] = rgba.b;

                                                                }

                                                                fabric.imgutil.vignette( "55%", 25, data, width, height );
                                                                //        for (i = 0, len = data1.length; i < len; i ++) {
                                                                //            data[i] = data1[i];
                                                                //        }
                                                                context.putImageData( imageData, 0, 0 );

                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type
                                                                };
                                                            }



                                                        } );
fabric.Image.filters.sunrise.fromObject = function( object ) {
    return new fabric.Image.filters.sunrise( object );
};

fabric.Image.filters.sinCity = fabric.util.createClass( {

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: "sinCity",

                                                            /**
                                                             * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                             * @param {Object} [options] Options object

                                                             /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function( canvasEl ) {

                                                                var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                             canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b, a;
                                                                var processfunc = [];

                                                                processfunc.push( fabric.imgutil.contrast( 100 ) );
                                                                processfunc.push( fabric.imgutil.brightness( 15 ) );
                                                                processfunc.push( fabric.imgutil.exposure( 10 ) );
                                                                processfunc.push( fabric.imgutil.posterize( 80 ) );
                                                                processfunc.push( fabric.imgutil.clip( 30 ) );
                                                                processfunc.push( fabric.imgutil.greyscale() );

                                                                var funcLen = processfunc.length;
                                                                for( var j = 0; j < funcLen; j++ ) {
                                                                    for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                        r = data[i];
                                                                        g = data[i + 1];
                                                                        b = data[i + 2];
                                                                        a = data[i + 3];

                                                                        var rgba = {r: r, g: g, b: b, a: a}

                                                                        rgba = processfunc[j]( rgba );

                                                                        data[i] = rgba.r;
                                                                        data[i + 1] = rgba.g;
                                                                        data[i + 2] = rgba.b;
                                                                        data[i + 3] = rgba.a;

                                                                    }
                                                                }
                                                                context.putImageData( imageData, 0, 0 );

                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type
                                                                };
                                                            }

                                                        } );
fabric.Image.filters.sinCity.fromObject = function( object ) {
    return new fabric.Image.filters.sinCity( object );
};

fabric.Image.filters.pinhole = fabric.util.createClass( {

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: "pinhole",

                                                            /**
                                                             * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                             * @param {Object} [options] Options object

                                                             /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function( canvasEl ) {

                                                                var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                             canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b, a;
                                                                var processfunc = [];

                                                                processfunc.push( fabric.imgutil.greyscale() );
                                                                processfunc.push( fabric.imgutil.sepia( 10 ) );
                                                                processfunc.push( fabric.imgutil.exposure( 10 ) );
                                                                processfunc.push( fabric.imgutil.contrast( 15 ) );

                                                                var funcLen = processfunc.length;
                                                                for( var j = 0; j < funcLen; j++ ) {
                                                                    for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                        r = data[i];
                                                                        g = data[i + 1];
                                                                        b = data[i + 2];
                                                                        a = data[i + 3];

                                                                        var rgba = {r: r, g: g, b: b, a: a}
                                                                        rgba = processfunc[j]( rgba );

                                                                        data[i] = rgba.r;
                                                                        data[i + 1] = rgba.g;
                                                                        data[i + 2] = rgba.b;
                                                                        data[i + 3] = rgba.a;

                                                                    }
                                                                }
                                                                fabric.imgutil.vignette( "60%", 35, data, width, height );
                                                                context.putImageData( imageData, 0, 0 );
                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type
                                                                };
                                                            }

                                                        } );
fabric.Image.filters.pinhole.fromObject = function( object ) {
    return new fabric.Image.filters.pinhole( object );
};

fabric.Image.filters.orangePeel = fabric.util.createClass( {

                                                               /**
                                                                * @param {String} type
                                                                */
                                                               type: "orangePeel",

                                                               /**
                                                                * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                                * @param {Object} [options] Options object

                                                                /**
                                                                * @method applyTo
                                                                * @param {Object} canvasEl Canvas element to apply filter to
                                                                */
                                                               applyTo: function( canvasEl ) {

                                                                   var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                                canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b, a;
                                                                   var processfunc = [];

                                                                   processfunc.push( fabric.imgutil.curves( 'rgb', [0, 0], [100, 50], [140, 200], [255, 255] ) );
                                                                   processfunc.push( fabric.imgutil.vibrance( -30 ) );
                                                                   processfunc.push( fabric.imgutil.saturation( -30 ) );
                                                                   processfunc.push( fabric.imgutil.colorize( '#ff9000', 30 ) );
                                                                   processfunc.push( fabric.imgutil.contrast( -5 ) );
                                                                   processfunc.push( fabric.imgutil.gamma( 1.4 ) );

                                                                   var funcLen = processfunc.length;
                                                                   for( var j = 0; j < funcLen; j++ ) {
                                                                       for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                           r = data[i];
                                                                           g = data[i + 1];
                                                                           b = data[i + 2];
                                                                           a = data[i + 3];

                                                                           var rgba = {r: r, g: g, b: b, a: a}
                                                                           rgba = processfunc[j]( rgba );

                                                                           data[i] = rgba.r;
                                                                           data[i + 1] = rgba.g;
                                                                           data[i + 2] = rgba.b;
                                                                           data[i + 3] = rgba.a;

                                                                       }
                                                                   }

                                                                   context.putImageData( imageData, 0, 0 );
                                                               },

                                                               /**
                                                                * @method toJSON
                                                                * @return {String} json representation of filter
                                                                */
                                                               toJSON: function() {
                                                                   return {
                                                                       type: this.type
                                                                   };
                                                               }

                                                           } );
fabric.Image.filters.orangePeel.fromObject = function( object ) {
    return new fabric.Image.filters.orangePeel( object );
};

fabric.Image.filters.oldBoot = fabric.util.createClass( {

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: "oldBoot",

                                                            /**
                                                             * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                             * @param {Object} [options] Options object

                                                             /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function( canvasEl ) {

                                                                var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                             canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b, a;
                                                                var processfunc = [];

                                                                processfunc.push( fabric.imgutil.saturation( -20 ) );
                                                                processfunc.push( fabric.imgutil.vibrance( -50 ) );
                                                                processfunc.push( fabric.imgutil.gamma( 1.1 ) );
                                                                processfunc.push( fabric.imgutil.sepia( 30 ) );
                                                                processfunc.push( fabric.imgutil.channels( {
                                                                                                               red: -10,
                                                                                                               blue: 5
                                                                                                           } ) );
                                                                processfunc.push( fabric.imgutil.curves( 'rgb', [0, 0], [80, 50], [128, 230], [255, 255] ) );

                                                                var funcLen = processfunc.length;
                                                                for( var j = 0; j < funcLen; j++ ) {

                                                                    for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                        r = data[i];
                                                                        g = data[i + 1];
                                                                        b = data[i + 2];
                                                                        a = data[i + 3];

                                                                        var rgba = {r: r, g: g, b: b, a: a}
                                                                        rgba = processfunc[j]( rgba );

                                                                        data[i] = rgba.r;
                                                                        data[i + 1] = rgba.g;
                                                                        data[i + 2] = rgba.b;
                                                                        data[i + 3] = rgba.a;

                                                                    }
                                                                }
                                                                fabric.imgutil.vignette( "60%", 30, data, width, height );
                                                                context.putImageData( imageData, 0, 0 );
                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type
                                                                };
                                                            }

                                                        } );
fabric.Image.filters.oldBoot.fromObject = function( object ) {
    return new fabric.Image.filters.oldBoot( object );
};

fabric.Image.filters.nostalgia = fabric.util.createClass( {

                                                              /**
                                                               * @param {String} type
                                                               */
                                                              type: "nostalgia",

                                                              /**
                                                               * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                               * @param {Object} [options] Options object

                                                               /**
                                                               * @method applyTo
                                                               * @param {Object} canvasEl Canvas element to apply filter to
                                                               */
                                                              applyTo: function( canvasEl ) {

                                                                  var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                               canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b, a;

                                                                  var layers = [];
                                                                  var processfunc = [];

                                                                  processfunc.push( fabric.imgutil.saturation( 20 ) );
                                                                  processfunc.push( fabric.imgutil.gamma( 1.4 ) );
                                                                  processfunc.push( fabric.imgutil.greyscale() );
                                                                  processfunc.push( fabric.imgutil.contrast( 5 ) );
                                                                  processfunc.push( fabric.imgutil.sepia( 100 ) );
                                                                  processfunc.push( fabric.imgutil.channels( {
                                                                                                                 red: 8,
                                                                                                                 blue: 2,
                                                                                                                 green: 4
                                                                                                             } ) );
                                                                  processfunc.push( fabric.imgutil.gamma( 0.8 ) );
                                                                  processfunc.push( fabric.imgutil.contrast( 5 ) );
                                                                  processfunc.push( fabric.imgutil.exposure( 10 ) );
                                                                  processfunc.push( 0 );
                                                                  layers.push( fabric.imgutil.addLayer( data, width, height ) );
                                                                  var filter0 = [];
                                                                  var layerFilter = [];

                                                                  filter0.push( 'opacity:55' );
                                                                  filter0.push( 'stackBlur:10' );

                                                                  layerFilter.push( [Blender.overlay, filter0] );

                                                                  processfunc.push();
                                                                  var funcLen = processfunc.length;

                                                                  for( var j = 0; j < funcLen; j++ ) {
                                                                      if( typeof processfunc[j] === 'number' ) {
                                                                          fabric.imgutil.applyLayer( layerFilter[processfunc[j]], data, layers[processfunc[j]].pixels, width, height );
                                                                          continue;
                                                                      }

                                                                      for( var i = 0, len = data.length; i < len; i += 4 ) {
                                                                          r = data[i];
                                                                          g = data[i + 1];
                                                                          b = data[i + 2];
                                                                          a = data[i + 3];

                                                                          var rgba = {r: r, g: g, b: b, a: a}
                                                                          rgba = processfunc[j]( rgba );

                                                                          data[i] = rgba.r;
                                                                          data[i + 1] = rgba.g;
                                                                          data[i + 2] = rgba.b;
                                                                          data[i + 3] = rgba.a;

                                                                      }
                                                                  }

                                                                  for( i = 0, len = layers.length; i < len; i++ ) {
                                                                      layers[i].layer = null;
                                                                  }
                                                                  fabric.imgutil.vignette( "50%", 30, data, width, height );
                                                                  context.putImageData( imageData, 0, 0 );
                                                              },

                                                              /**
                                                               * @method toJSON
                                                               * @return {String} json representation of filter
                                                               */
                                                              toJSON: function() {
                                                                  return {
                                                                      type: this.type
                                                                  };
                                                              }

                                                          } );
fabric.Image.filters.nostalgia.fromObject = function( object ) {
    return new fabric.Image.filters.nostalgia( object );
};

fabric.Image.filters.glowingSun = fabric.util.createClass( {

                                                               /**
                                                                * @param {String} type
                                                                */
                                                               type: "glowingSun",

                                                               /**
                                                                * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                                * @param {Object} [options] Options object

                                                                /**
                                                                * @method applyTo
                                                                * @param {Object} canvasEl Canvas element to apply filter to
                                                                */
                                                               applyTo: function( canvasEl ) {

                                                                   var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                                canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b, a;

                                                                   var layers = [];
                                                                   var processfunc = [];
                                                                   var filter0 = [];

                                                                   processfunc.push( fabric.imgutil.brightness( 10 ) );
                                                                   processfunc.push( 0 );
                                                                   filter0.push( 'opacity:80' );
                                                                   filter0.push( fabric.imgutil.gamma( 0.8 ) );
                                                                   filter0.push( fabric.imgutil.contrast( 50 ) );
                                                                   filter0.push( fabric.imgutil.exposure( 10 ) );
                                                                   layers.push( {
                                                                                    layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                    filter: [Blender.multiply, filter0]
                                                                                } );

                                                                   processfunc.push( 1 );
                                                                   var filter1 = [];
                                                                   filter1.push( 'opacity:80' );
                                                                   filter1.push( fabric.imgutil.fillColor( "#f49600" ) );
                                                                   layers.push( {
                                                                                    layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                    filter: [Blender.softLight, filter1]
                                                                                } );

                                                                   processfunc.push( fabric.imgutil.exposure( 20 ) );
                                                                   processfunc.push( fabric.imgutil.gamma( 0.8 ) );
                                                                   processfunc.push( 'vignette:45%:20' );
                                                                   fabric.imgutil.renderFilters( data, width, height, processfunc, layers );
                                                                   context.putImageData( imageData, 0, 0 );
                                                               },

                                                               /**
                                                                * @method toJSON
                                                                * @return {String} json representation of filter
                                                                */
                                                               toJSON: function() {
                                                                   return {
                                                                       type: this.type
                                                                   };
                                                               }

                                                           } );
fabric.Image.filters.glowingSun.fromObject = function( object ) {
    return new fabric.Image.filters.glowingSun( object );
};

fabric.Image.filters.love = fabric.util.createClass( {

                                                         /**
                                                          * @param {String} type
                                                          */
                                                         type: "love",

                                                         /**
                                                          * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                          * @param {Object} [options] Options object

                                                          /**
                                                          * @method applyTo
                                                          * @param {Object} canvasEl Canvas element to apply filter to
                                                          */
                                                         applyTo: function( canvasEl ) {

                                                             var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                          canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b;
                                                             var processfunc = [];

                                                             processfunc.push( fabric.imgutil.brightness( 5 ) );
                                                             processfunc.push( fabric.imgutil.exposure( 8 ) );
                                                             processfunc.push( fabric.imgutil.contrast( 4 ) );
                                                             processfunc.push( fabric.imgutil.colorize( '#c42007', 30 ) );
                                                             processfunc.push( fabric.imgutil.vibrance( 50 ) );
                                                             processfunc.push( fabric.imgutil.gamma( 1.3 ) );

                                                             var funcLen = processfunc.length;
                                                             for( var j = 0; j < funcLen; j++ ) {

                                                                 for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                     r = data[i];
                                                                     g = data[i + 1];
                                                                     b = data[i + 2];
                                                                     var rgba = {r: r, g: g, b: b}
                                                                     rgba = processfunc[j]( rgba );
                                                                     data[i] = rgba.r;
                                                                     data[i + 1] = rgba.g;
                                                                     data[i + 2] = rgba.b;

                                                                 }
                                                             }
                                                             context.putImageData( imageData, 0, 0 );

                                                         },

                                                         /**
                                                          * @method toJSON
                                                          * @return {String} json representation of filter
                                                          */
                                                         toJSON: function() {
                                                             return {
                                                                 type: this.type
                                                             };
                                                         }



                                                     } );
fabric.Image.filters.love.fromObject = function( object ) {
    return new fabric.Image.filters.love( object );
};

fabric.Image.filters.lomo = fabric.util.createClass( {

                                                         /**
                                                          * @param {String} type
                                                          */
                                                         type: "lomo",

                                                         /**
                                                          * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                          * @param {Object} [options] Options object

                                                          /**
                                                          * @method applyTo
                                                          * @param {Object} canvasEl Canvas element to apply filter to
                                                          */
                                                         applyTo: function( canvasEl ) {

                                                             var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                          canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height, r, g, b;
                                                             var processfunc = [];

                                                             processfunc.push( fabric.imgutil.brightness( 15 ) );
                                                             processfunc.push( fabric.imgutil.exposure( 15 ) );
                                                             processfunc.push( fabric.imgutil.curves( 'rgb', [0, 0], [200, 0], [155, 255], [255, 255] ) );
                                                             processfunc.push( fabric.imgutil.saturation( -20 ) );
                                                             processfunc.push( fabric.imgutil.gamma( 1.8 ) );
                                                             processfunc.push( 'vignette:50%:60' );
                                                             processfunc.push( fabric.imgutil.brightness( 5 ) );
                                                             var funcLen = processfunc.length;
                                                             for( var j = 0; j < funcLen; j++ ) {
                                                                 if( typeof processfunc[j] === 'string' ) {
                                                                     var filter = processfunc[j].split( ':' );
                                                                     if( filter[0] == "vignette" ) {
                                                                         fabric.imgutil.vignette( filter[1], filter[2], data, width, height );
                                                                     }
                                                                     continue;
                                                                 }

                                                                 for( var i = 0, len = data.length; i < len; i += 4 ) {

                                                                     r = data[i];
                                                                     g = data[i + 1];
                                                                     b = data[i + 2];
                                                                     var rgba = {r: r, g: g, b: b}
                                                                     rgba = processfunc[j]( rgba );
                                                                     data[i] = rgba.r;
                                                                     data[i + 1] = rgba.g;
                                                                     data[i + 2] = rgba.b;

                                                                 }
                                                             }
                                                             context.putImageData( imageData, 0, 0 );
                                                         },

                                                         /**
                                                          * @method toJSON
                                                          * @return {String} json representation of filter
                                                          */
                                                         toJSON: function() {
                                                             return {
                                                                 type: this.type
                                                             };
                                                         }



                                                     } );
fabric.Image.filters.lomo.fromObject = function( object ) {
    return new fabric.Image.filters.lomo( object );
};

fabric.Image.filters.jarques = fabric.util.createClass( {

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: "jarques",

                                                            /**
                                                             * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                             * @param {Object} [options] Options object

                                                             /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function( canvasEl ) {

                                                                var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                             canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;
                                                                //            r, g, b;
                                                                var processfunc = [];

                                                                processfunc.push( fabric.imgutil.saturation( -35 ) );
                                                                processfunc.push( fabric.imgutil.curves( 'b', [20, 0], [90, 120], [186, 144], [255, 230] ) );
                                                                processfunc.push( fabric.imgutil.curves( 'r', [0, 0], [144, 90], [138, 120], [255, 255] ) );
                                                                processfunc.push( fabric.imgutil.curves( 'g', [10, 0], [115, 105], [148, 100], [255, 248] ) );
                                                                processfunc.push( fabric.imgutil.curves( 'rgb', [0, 0], [120, 100], [128, 140], [255, 255] ) );
                                                                processfunc.push( 'sharpen:20' );

                                                                fabric.imgutil.renderFilters( data, width, height, processfunc );
                                                                context.putImageData( imageData, 0, 0 );
                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type
                                                                };
                                                            }



                                                        } );
fabric.Image.filters.jarques.fromObject = function( object ) {
    return new fabric.Image.filters.jarques( object );
};

fabric.Image.filters.grungy = fabric.util.createClass( {

                                                           /**
                                                            * @param {String} type
                                                            */
                                                           type: "grungy",

                                                           /**
                                                            * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                            * @param {Object} [options] Options object

                                                            /**
                                                            * @method applyTo
                                                            * @param {Object} canvasEl Canvas element to apply filter to
                                                            */
                                                           applyTo: function( canvasEl ) {
                                                               var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                            canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;
                                                               //            r, g, b;
                                                               var processfunc = [];

                                                               processfunc.push( fabric.imgutil.gamma( 1.5 ) );
                                                               processfunc.push( fabric.imgutil.clip( 25 ) );
                                                               processfunc.push( fabric.imgutil.saturation( -60 ) );
                                                               processfunc.push( fabric.imgutil.contrast( 5 ) );
                                                               processfunc.push( fabric.imgutil.noise( 5 ) );
                                                               processfunc.push( 'vignette:50%:30' );

                                                               fabric.imgutil.renderFilters( data, width, height, processfunc );
                                                               context.putImageData( imageData, 0, 0 );
                                                           },

                                                           /**
                                                            * @method toJSON
                                                            * @return {String} json representation of filter
                                                            */
                                                           toJSON: function() {
                                                               return {
                                                                   type: this.type
                                                               };
                                                           }



                                                       } );
fabric.Image.filters.grungy.fromObject = function( object ) {
    return new fabric.Image.filters.grungy( object );
};

fabric.Image.filters.herMajesty = fabric.util.createClass( {

                                                               /**
                                                                * @param {String} type
                                                                */
                                                               type: "herMajesty",

                                                               /**
                                                                * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                                * @param {Object} [options] Options object

                                                                /**
                                                                * @method applyTo
                                                                * @param {Object} canvasEl Canvas element to apply filter to
                                                                */
                                                               applyTo: function( canvasEl ) {

                                                                   var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                                canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;

                                                                   var processfunc = [];
                                                                   var layers = [];
                                                                   var filter0 = [];

                                                                   processfunc.push( fabric.imgutil.brightness( 40 ) );
                                                                   processfunc.push( fabric.imgutil.colorize( "#ea1c5d", 10 ) );
                                                                   processfunc.push( fabric.imgutil.curves( 'b', [0, 10], [128, 180], [190, 190], [255, 255] ) );
                                                                   processfunc.push( 0 );

                                                                   filter0.push( 'opacity:50' );
                                                                   filter0.push( fabric.imgutil.gamma( 0.7 ) );
                                                                   // layer 0-1
                                                                   filter0.push( 1 );
                                                                   layers.push( {
                                                                                    layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                    filter: [Blender.overlay, filter0]
                                                                                } );
                                                                   var filter1 = [];
                                                                   filter1.push( 'opacity:60' );
                                                                   filter1.push( fabric.imgutil.fillColor( "#ea1c5d" ) );
                                                                   layers.push( {
                                                                                    layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                    filter: [Blender.normal, filter1]
                                                                                } );

                                                                   // layer 1
                                                                   processfunc.push( 2 );
                                                                   var filter2 = [];
                                                                   filter2.push( 'opacity:60' );
                                                                   filter2.push( fabric.imgutil.saturation( 50 ) );
                                                                   filter2.push( fabric.imgutil.hue( 90 ) );
                                                                   filter2.push( fabric.imgutil.contrast( 10 ) );

                                                                   layers.push( {
                                                                                    layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                    filter: [Blender.multiply, filter2]
                                                                                } );

                                                                   processfunc.push( fabric.imgutil.gamma( 1.4 ) );
                                                                   processfunc.push( fabric.imgutil.vibrance( -30 ) );
                                                                   //
                                                                   //        // layer 2
                                                                   processfunc.push( 3 );
                                                                   var filter3 = [];
                                                                   filter3.push( 'opacity:10' );
                                                                   filter3.push( fabric.imgutil.fillColor( '#e5f0ff' ) );

                                                                   layers.push( {
                                                                                    layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                    filter: [Blender.normal, filter3]
                                                                                } );

                                                                   fabric.imgutil.renderFilters( data, width, height, processfunc, layers );
                                                                   context.putImageData( imageData, 0, 0 );
                                                               },

                                                               /**
                                                                * @method toJSON
                                                                * @return {String} json representation of filter
                                                                */
                                                               toJSON: function() {
                                                                   return {
                                                                       type: this.type
                                                                   };
                                                               }



                                                           } );
fabric.Image.filters.herMajesty.fromObject = function( object ) {
    return new fabric.Image.filters.herMajesty( object );
};

fabric.Image.filters.hemingway = fabric.util.createClass( {

                                                              /**
                                                               * @param {String} type
                                                               */
                                                              type: "hemingway",

                                                              /**
                                                               * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                               * @param {Object} [options] Options object

                                                               /**
                                                               * @method applyTo
                                                               * @param {Object} canvasEl Canvas element to apply filter to
                                                               */
                                                              applyTo: function( canvasEl ) {

                                                                  var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                               canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;

                                                                  var processfunc = [];
                                                                  var layers = [];
                                                                  var filter0 = [];

                                                                  processfunc.push( fabric.imgutil.greyscale() );
                                                                  processfunc.push( fabric.imgutil.contrast( 10 ) );
                                                                  processfunc.push( fabric.imgutil.gamma( 0.9 ) );
                                                                  processfunc.push( 0 );

                                                                  filter0.push( 'opacity:40' );
                                                                  filter0.push( fabric.imgutil.exposure( 15 ) );
                                                                  filter0.push( fabric.imgutil.contrast( 15 ) );
                                                                  filter0.push( fabric.imgutil.channels( {
                                                                                                             green: 10,
                                                                                                             red: 5
                                                                                                         } ) );

                                                                  layers.push( {
                                                                                   layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                   filter: [Blender.multiply, filter0]
                                                                               } );

                                                                  processfunc.push( fabric.imgutil.sepia( 30 ) );
                                                                  processfunc.push( fabric.imgutil.curves( 'rgb', [0, 10], [120, 90], [180, 200], [235, 255] ) );
                                                                  processfunc.push( fabric.imgutil.channels( {
                                                                                                                 red: 5,
                                                                                                                 green: -2
                                                                                                             } ) );
                                                                  processfunc.push( fabric.imgutil.exposure( 15 ) );
                                                                  fabric.imgutil.renderFilters( data, width, height, processfunc, layers );
                                                                  context.putImageData( imageData, 0, 0 );
                                                              },

                                                              /**
                                                               * @method toJSON
                                                               * @return {String} json representation of filter
                                                               */
                                                              toJSON: function() {
                                                                  return {
                                                                      type: this.type
                                                                  };
                                                              }



                                                          } );
fabric.Image.filters.hemingway.fromObject = function( object ) {
    return new fabric.Image.filters.hemingway( object );
};

fabric.Image.filters.concentrate = fabric.util.createClass( {

                                                                /**
                                                                 * @param {String} type
                                                                 */
                                                                type: "concentrate",

                                                                /**
                                                                 * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                                 * @param {Object} [options] Options object

                                                                 /**
                                                                 * @method applyTo
                                                                 * @param {Object} canvasEl Canvas element to apply filter to
                                                                 */
                                                                applyTo: function( canvasEl ) {

                                                                    var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                                 canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;

                                                                    var processfunc = [];
                                                                    var layers = [];
                                                                    var filter0 = [];

                                                                    processfunc.push( 'sharpen:40' );
                                                                    processfunc.push( fabric.imgutil.saturation( -50 ) );
                                                                    processfunc.push( fabric.imgutil.channels( {
                                                                                                                   red: 3
                                                                                                               } ) );
                                                                    processfunc.push( 0 );

                                                                    filter0.push( 'opacity:80' );
                                                                    filter0.push( 'sharpen:5' );
                                                                    filter0.push( fabric.imgutil.contrast( 50 ) );
                                                                    filter0.push( fabric.imgutil.exposure( 10 ) );
                                                                    filter0.push( fabric.imgutil.channels( {
                                                                                                               blue: 5
                                                                                                           } ) );

                                                                    layers.push( {
                                                                                     layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                     filter: [Blender.multiply, filter0]
                                                                                 } );

                                                                    processfunc.push( fabric.imgutil.brightness( 10 ) );
                                                                    fabric.imgutil.renderFilters( data, width, height, processfunc, layers );
                                                                    context.putImageData( imageData, 0, 0 );
                                                                },

                                                                /**
                                                                 * @method toJSON
                                                                 * @return {String} json representation of filter
                                                                 */
                                                                toJSON: function() {
                                                                    return {
                                                                        type: this.type
                                                                    };
                                                                }



                                                            } );
fabric.Image.filters.concentrate.fromObject = function( object ) {
    return new fabric.Image.filters.concentrate( object );
};

fabric.Image.filters.hazyDays = fabric.util.createClass( {

                                                             /**
                                                              * @param {String} type
                                                              */
                                                             type: "hazyDays",

                                                             /**
                                                              * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                              * @param {Object} [options] Options object

                                                              /**
                                                              * @method applyTo
                                                              * @param {Object} canvasEl Canvas element to apply filter to
                                                              */
                                                             applyTo: function( canvasEl ) {

                                                                 var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                              canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;

                                                                 var processfunc = [];
                                                                 var layers = [];
                                                                 var filter0 = [];

                                                                 processfunc.push( fabric.imgutil.gamma( 1.2 ) );

                                                                 processfunc.push( 0 );
                                                                 filter0.push( 'opacity:60' );
                                                                 filter0.push( fabric.imgutil.channels( {
                                                                                                            red: 5
                                                                                                        } ) );
                                                                 filter0.push( 'stackBlur:15' );
                                                                 layers.push( {
                                                                                  layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                  filter: [Blender.overlay, filter0]
                                                                              } );

                                                                 var filter1 = [];
                                                                 processfunc.push( 1 );
                                                                 filter1.push( 'opacity:40' );
                                                                 filter1.push( fabric.imgutil.fillColor( "#6899ba" ) );

                                                                 layers.push( {
                                                                                  layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                  filter: [Blender.addition, filter1]
                                                                              } );

                                                                 var filter2 = [];
                                                                 processfunc.push( 2 );
                                                                 filter2.push( 'opacity:35' );
                                                                 filter2.push( fabric.imgutil.brightness( 40 ) );
                                                                 filter2.push( fabric.imgutil.vibrance( 40 ) );
                                                                 filter2.push( fabric.imgutil.exposure( 30 ) );
                                                                 filter2.push( fabric.imgutil.contrast( 15 ) );
                                                                 filter2.push( fabric.imgutil.curves( 'r', [0, 40], [128, 128], [128, 128], [255, 215] ) );
                                                                 filter2.push( fabric.imgutil.curves( 'g', [0, 40], [128, 128], [128, 128], [255, 215] ) );
                                                                 filter2.push( fabric.imgutil.curves( 'b', [0, 40], [128, 128], [128, 128], [255, 215] ) );
                                                                 filter2.push( 'stackBlur:5' );
                                                                 layers.push( {
                                                                                  layer: fabric.imgutil.addLayer( data, width, height ),
                                                                                  filter: [Blender.multiply, filter2]
                                                                              } );

                                                                 processfunc.push( fabric.imgutil.curves( 'r', [20, 0], [128, 158], [128, 128], [235, 255] ) );
                                                                 processfunc.push( fabric.imgutil.curves( 'g', [20, 0], [128, 128], [128, 128], [235, 255] ) );
                                                                 processfunc.push( fabric.imgutil.curves( 'b', [20, 0], [128, 108], [128, 128], [235, 255] ) );
                                                                 processfunc.push( 'vignette:45%:20' );

                                                                 fabric.imgutil.renderFilters( data, width, height, processfunc, layers );
                                                                 context.putImageData( imageData, 0, 0 );
                                                             },

                                                             /**
                                                              * @method toJSON
                                                              * @return {String} json representation of filter
                                                              */
                                                             toJSON: function() {
                                                                 return {
                                                                     type: this.type
                                                                 };
                                                             }



                                                         } );
fabric.Image.filters.hazyDays.fromObject = function( object ) {
    return new fabric.Image.filters.hazyDays( object );
};

fabric.Image.filters.crossProcess = fabric.util.createClass( {

                                                                 /**
                                                                  * @param {String} type
                                                                  */
                                                                 type: "crossProcess",

                                                                 /**
                                                                  * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                                  * @param {Object} [options] Options object

                                                                  /**
                                                                  * @method applyTo
                                                                  * @param {Object} canvasEl Canvas element to apply filter to
                                                                  */
                                                                 applyTo: function( canvasEl ) {

                                                                     var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                                  canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;

                                                                     var processfunc = [];

                                                                     processfunc.push( fabric.imgutil.exposure( 5 ) );
                                                                     processfunc.push( fabric.imgutil.colorize( "#e87b22", 4 ) );
                                                                     processfunc.push( fabric.imgutil.sepia( 20 ) );
                                                                     processfunc.push( fabric.imgutil.channels( {   blue: 8, red: 3   } ) );
                                                                     processfunc.push( fabric.imgutil.curves( 'b', [0, 0], [100, 150], [180, 180], [255, 255] ) );
                                                                     processfunc.push( fabric.imgutil.contrast( 15 ) );
                                                                     processfunc.push( fabric.imgutil.vibrance( 75 ) );
                                                                     processfunc.push( fabric.imgutil.gamma( 1.6 ) );

                                                                     fabric.imgutil.renderFilters( data, width, height, processfunc );
                                                                     context.putImageData( imageData, 0, 0 );
                                                                 },

                                                                 /**
                                                                  * @method toJSON
                                                                  * @return {String} json representation of filter
                                                                  */
                                                                 toJSON: function() {
                                                                     return {
                                                                         type: this.type
                                                                     };
                                                                 }



                                                             } );
fabric.Image.filters.crossProcess.fromObject = function( object ) {
    return new fabric.Image.filters.crossProcess( object );
};

fabric.Image.filters.clarity = fabric.util.createClass( {

                                                            /**
                                                             * @param {String} type
                                                             */
                                                            type: "clarity",

                                                            /**
                                                             * @memberOf fabric.Image.filters.RemoveWhite.prototype
                                                             * @param {Object} [options] Options object

                                                             /**
                                                             * @method applyTo
                                                             * @param {Object} canvasEl Canvas element to apply filter to
                                                             */
                                                            applyTo: function( canvasEl ) {

                                                                var context = canvasEl.getContext( '2d' ), imageData = context.getImageData( 0, 0, canvasEl.width,
                                                                                                                                             canvasEl.height ), data = imageData.data, width = canvasEl.width, height = canvasEl.height;

                                                                var processfunc = [];

                                                                processfunc.push( fabric.imgutil.vibrance( 20 ) );
                                                                processfunc.push( fabric.imgutil.curves( 'rgb', [5, 0], [130, 150], [190, 220], [250, 255] ) );
                                                                processfunc.push( 'sharpen:15' );
                                                                processfunc.push( 'vignette:45%:20' );
                                                                //        processfunc.push(fabric.imgutil.greyscale());
                                                                //        processfunc.push(fabric.imgutil.contrast(4));

                                                                fabric.imgutil.renderFilters( data, width, height, processfunc );
                                                                context.putImageData( imageData, 0, 0 );
                                                            },

                                                            /**
                                                             * @method toJSON
                                                             * @return {String} json representation of filter
                                                             */
                                                            toJSON: function() {
                                                                return {
                                                                    type: this.type
                                                                };
                                                            }



                                                        } );
fabric.Image.filters.clarity.fromObject = function( object ) {
    return new fabric.Image.filters.clarity( object );
};

/**
 * END ADDITIONAL FILTERS
 **/

var f = fabric.Image.filters;




    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * ? 1999 Ray Larabie. This font is freeware. Read attached text file for details.
 * Info & updates visit www.larabiefonts.com. Donations gratefully accepted at
 * www.larabiefonts.com/donation.html. Also visit my commercial type foundry at
 * www.typodermic.com. This font was updated in 2004.
 * 
 * Description:
 * If you would like to help support Larabie Fonts please consider making a
 * donation. It costs a lot to keep the site running and free from irritating
 * pop-up or banner ads. Any amount is appreciated and goes right back into making
 * maintaining the site and developing more free fonts. Visit www.larabiefonts.com
 * for details.
 * 
 * Manufacturer:
 * Ray Larabie
 * 
 * Designer:
 * Ray Larabie
 * 
 * Vendor URL:
 * http://www.larabiefonts.com
 */
Cufon.registerFont({"w":477,"face":{"font-family":"Deftone Stylus","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"0 0 4 0 0 0 0 0 0 0","ascent":"800","descent":"-200","bbox":"-91.1283 -831 1352 248.174","underline-thickness":"20","underline-position":"-123","unicode-range":"U+0020-U+2122"},"glyphs":{" ":{"w":202},"!":{"d":"300,-74v-2,48,-61,71,-109,74v-29,2,-62,-13,-60,-39v3,-48,60,-71,110,-73v26,0,60,13,59,38xm363,-557v8,-21,-19,-35,-45,-35v-17,0,-25,-9,-25,-28v-1,-49,70,-29,111,-29v102,0,141,25,111,92r-184,414r-125,-60","w":290},"\"":{"d":"390,-612v-3,52,-74,111,-90,150v-9,20,-22,30,-39,30v-19,1,-22,-16,-14,-30v13,-25,11,-95,23,-121v17,-37,44,-56,81,-56v26,0,39,9,39,27xm511,-612v-2,52,-73,111,-89,150v-8,20,-23,30,-40,30v-18,1,-21,-16,-14,-30v14,-26,11,-95,24,-121v18,-37,43,-56,80,-56v26,0,39,9,39,27","w":253},"#":{"d":"375,-395r31,-70r-45,0r-31,70r45,0xm478,-326r-70,0r-31,69r-63,0r30,-69r-45,0r-31,69r-59,0r31,-69r-60,0r31,-69r59,0r31,-70r-59,0r31,-69r59,0r29,-64r59,0r-28,64r45,0r29,-64r63,0r-28,64r70,0r-31,69r-70,0r-31,70r70,0","w":380},"$":{"d":"422,-512v-43,-7,-92,69,-32,88v34,11,92,20,87,62v-12,96,-89,161,-176,164r-26,60r-72,0r26,-59v-91,11,-178,-49,-153,-133r59,-36v-19,71,53,110,120,110v70,0,116,-82,51,-113v-64,-30,-75,-24,-87,-73v10,-79,82,-129,175,-125r26,-58r71,0r-25,58r110,0r-69,55r-85,0","w":349},"%":{"d":"383,-323v25,-7,30,-49,42,-72v-5,-14,-21,-5,-25,7v-7,19,-18,36,-23,57v0,5,2,8,6,8xm325,-534v25,-7,31,-48,42,-72v-4,-13,-21,-3,-25,8v-6,19,-19,35,-23,57v0,5,2,7,6,7xm485,-405v-4,50,-50,115,-88,110v-32,-4,-85,10,-82,-24v4,-48,51,-121,94,-115v33,5,79,-8,76,29xm568,-644r-345,349r-46,0r346,-349r45,0xm427,-616v-4,50,-50,115,-88,110v-32,-4,-85,10,-82,-24v4,-46,51,-124,94,-114v33,1,79,-8,76,28","w":333},"&":{"d":"313,-59v1,-17,4,-31,9,-41r93,-208v-71,21,-115,49,-130,85v-20,49,-48,91,-60,147v0,11,4,16,13,16xm476,-88v42,1,126,-64,137,-97r27,36v-24,69,-157,149,-247,149v-14,0,-28,-5,-43,-14v-41,20,-84,13,-138,14v-130,2,-134,-73,-96,-169v35,-88,109,-162,207,-185v-69,-13,-92,-69,-65,-132v29,-70,46,-119,134,-146v40,-12,81,-20,122,-20v70,0,153,21,138,90r-148,54v6,-30,62,-81,-10,-81v-69,0,-76,75,-100,121v-18,35,14,102,44,107r31,-69r146,0r-31,69r40,0r-22,48r-40,0r-96,219v0,4,3,6,10,6","w":531},"'":{"d":"408,-639v33,-2,72,20,55,56v-27,57,-76,96,-151,115r-8,-20v31,-5,52,-18,61,-39v-34,7,-69,-5,-67,-36v3,-50,60,-74,110,-76","w":229,"k":{"t":5,"s":165}},"(":{"d":"217,-11v-62,18,-147,22,-147,-49v0,-13,3,-26,9,-40r200,-449v28,-66,124,-124,217,-89r-32,72v-19,-4,-34,2,-40,17r-200,449v-6,16,9,21,25,17","w":237},")":{"d":"310,-638v61,-16,148,-21,147,49v0,13,-3,27,-9,40r-200,449v-27,68,-125,126,-217,89r32,-72v19,4,33,-3,40,-17r201,-456v1,-11,-15,-13,-26,-10","w":237},"*":{"d":"400,-351v49,-30,116,-129,193,-131v21,0,31,10,31,30v-2,51,-87,92,-152,104v-36,7,-62,16,-77,25v32,24,128,26,128,86v0,32,-43,69,-75,69v-60,0,-58,-89,-73,-126v-6,19,-6,41,-6,66v1,66,-45,133,-96,133v-39,0,-34,-39,-22,-69v17,-41,80,-101,96,-132v-47,29,-113,126,-189,128v-21,0,-31,-10,-31,-30v0,-50,89,-94,150,-104v33,-6,57,-14,72,-21v-28,-28,-131,-29,-131,-90v0,-32,44,-69,76,-69v63,0,55,96,77,133v7,-18,10,-44,9,-71v-1,-70,44,-138,97,-138v39,0,34,38,22,68v-17,40,-83,107,-99,139","w":449},"+":{"d":"347,-313r-70,0r-33,73r-48,0r32,-73r-69,0r22,-48r69,0r30,-68r48,0r-30,68r71,0","w":229},",":{"d":"173,-112v34,-1,71,20,55,56v-26,57,-75,95,-150,114r-9,-19v32,-6,53,-19,62,-39v-35,7,-71,-6,-68,-37v4,-48,60,-73,110,-75","w":229},"-":{"d":"351,-313r-189,0r22,-48r188,0","w":229},".":{"d":"232,-74v-3,48,-60,72,-109,74v-28,1,-61,-12,-59,-39v3,-47,60,-71,109,-73v27,-1,60,12,59,38","w":229},"\/":{"d":"590,-567r-443,486r-86,0r443,-486r86,0","w":366},"0":{"d":"250,-85r90,-200v6,-14,4,-26,-13,-26v-17,0,-29,9,-37,26r-89,200v-6,13,-7,33,11,32v16,0,29,-11,38,-32xm408,-145v-42,97,-98,145,-163,145v-70,0,-175,24,-172,-55v2,-54,43,-129,63,-178v26,-62,93,-138,168,-138v74,0,166,-18,161,65v-3,57,-37,114,-57,161","w":371},"1":{"d":"113,-371v67,0,170,-18,173,44v0,13,-4,29,-13,49r-124,278r-125,0r123,-278v8,-24,-7,-36,-37,-36v-16,0,-24,-9,-24,-27v0,-20,9,-30,27,-30","w":172},"2":{"d":"386,-371v53,-3,87,38,65,90v-28,64,-115,89,-187,113v-64,21,-74,56,-95,108r166,0r-26,60r-292,0v38,-74,54,-173,134,-203v59,-22,153,-23,163,-91v-3,-39,-75,-16,-112,-22r-20,-55r204,0","w":331,"k":{"3":23}},"3":{"d":"373,-121v0,74,-80,121,-151,121r-205,0r69,-55r85,0v28,1,67,-35,65,-64v4,-28,-59,-17,-54,-46v-2,-28,38,-66,66,-64v29,1,67,-34,65,-63v-2,-42,-73,-18,-111,-24r-20,-55r204,0v39,-1,76,19,73,56v-6,75,-61,102,-139,129v35,14,53,36,53,65","w":331},"4":{"d":"186,-371v50,6,111,37,87,93r-37,84r57,0v33,-75,66,-116,176,-112r-49,112r53,0r-22,49r-53,0r-65,145r-126,0r64,-145r-185,0","w":412,"k":{"9":33,"3":52}},"5":{"d":"250,-229v70,0,141,-5,143,53v-24,113,-81,176,-222,176r-154,0r26,-60r126,0v48,1,84,-28,87,-76v4,-50,-116,-45,-166,-29r92,-206r308,0r-69,55r-132,0","w":343},"6":{"d":"199,-60v39,0,83,-45,86,-87v3,-30,-44,-33,-76,-26v-10,25,-33,66,-35,92v0,14,8,21,25,21xm236,-233v67,-26,167,-11,164,63v-3,69,-57,126,-99,149v-38,20,-121,21,-189,21v-64,0,-75,-48,-51,-95v55,-107,75,-276,225,-276r173,0r-69,55v-64,-5,-124,5,-139,48","w":349,"k":{"1":-19}},"7":{"d":"451,-278r-286,278r-141,0r285,-278v17,-14,16,-36,-15,-36r-103,0v-16,0,-24,-9,-24,-27v0,-20,9,-30,27,-30r205,0v92,-2,100,46,52,93","w":336},"8":{"d":"199,-60v35,0,87,-49,87,-85v0,-19,-12,-28,-37,-28v-42,0,-77,37,-77,82v0,21,9,31,27,31xm280,-242v32,0,58,-14,58,-45v0,-17,-10,-25,-31,-25v-27,-1,-53,18,-53,48v0,15,9,22,26,22xm446,-307v0,49,-27,78,-67,101v47,69,-17,133,-61,170v-54,44,-112,35,-197,36v-41,0,-61,-22,-61,-65v0,-71,37,-101,97,-139v-7,-9,-10,-19,-10,-32v23,-106,97,-135,214,-135v46,0,85,21,85,64","w":349},"9":{"d":"318,-311v-39,0,-83,47,-86,88v-3,30,44,33,76,26v10,-25,34,-66,35,-93v0,-14,-8,-21,-25,-21xm282,-138v-67,28,-168,12,-165,-62v3,-69,57,-127,99,-149v39,-21,120,-21,189,-21v64,0,75,48,51,95v-55,107,-75,276,-225,276r-165,0r70,-55v63,3,114,-8,130,-48","w":359},":":{"d":"232,-74v-3,48,-60,72,-109,74v-28,1,-61,-12,-59,-39v3,-47,60,-71,109,-73v27,-1,60,12,59,38xm305,-236v-3,47,-60,72,-110,74v-29,1,-60,-14,-59,-39v3,-47,60,-71,109,-73v27,-1,62,12,60,38","w":229},";":{"d":"173,-112v34,-1,71,20,55,56v-26,57,-75,95,-150,114r-9,-19v32,-6,53,-19,62,-39v-35,7,-71,-6,-68,-37v4,-48,60,-73,110,-75xm305,-236v-3,47,-60,72,-110,74v-29,1,-60,-14,-59,-39v3,-47,60,-71,109,-73v27,-1,62,12,60,38","w":229},"=":{"d":"315,-232r-189,0r22,-48r188,0xm387,-394r-189,0r22,-48r188,0","w":229},"?":{"d":"290,-74v-2,48,-61,72,-109,74v-28,1,-61,-12,-59,-39v3,-47,59,-71,109,-73v27,-1,60,12,59,38xm509,-651v89,4,208,17,178,104v-38,112,-131,178,-264,235v-24,10,-38,26,-44,39r-58,130r-125,-60v20,-42,34,-98,70,-122v48,-32,103,-43,164,-85v79,-54,87,-69,112,-146v-13,-71,-142,-2,-186,-3v-27,0,-53,-13,-77,-38r24,-53v25,18,48,27,69,27v16,1,100,-29,137,-28","w":484},"@":{"d":"485,-253r67,-152v-4,-16,-28,-9,-33,5v-21,56,-52,104,-69,165v0,7,3,10,8,10v9,0,18,-9,27,-28xm684,-567v65,-3,96,69,66,127v-43,83,-56,174,-136,226v-34,22,-65,34,-94,34v-15,0,-24,-8,-25,-23v-34,40,-137,29,-130,-26v10,-82,79,-231,180,-229v23,0,40,8,52,24r6,-15r65,0r-83,191v0,6,4,9,11,9v40,-1,76,-112,97,-156v24,-50,27,-117,-39,-117r-184,0v-11,0,-22,11,-31,32r-132,295v-30,55,27,67,94,61r8,51r-169,0v-66,1,-58,-60,-36,-109r110,-248v38,-85,97,-127,176,-127r194,0","w":680},"A":{"d":"227,-70v66,-14,121,-67,142,-115r131,-293v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-211,478v0,6,4,9,11,9xm485,-88v44,1,125,-62,137,-97r27,36v-24,66,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r178,-399v30,-74,120,-128,220,-129v58,0,97,16,116,49r20,-45r105,0r-246,554v0,5,3,7,10,7"},"B":{"d":"248,-70v94,-26,147,-92,166,-184v0,-31,-22,-57,-67,-77r-110,252v0,6,4,9,11,9xm363,-367v131,-51,148,-78,186,-173v11,-29,0,-53,-36,-53v-33,0,-57,18,-72,53xm450,-620v60,-54,291,-47,249,68v-34,94,-110,176,-213,198v67,17,84,76,61,142v-45,130,-170,211,-344,212r-155,0r248,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v61,0,99,10,113,29","w":472},"C":{"d":"535,-150v-21,65,-170,151,-256,150r-76,0v-130,2,-138,-75,-96,-169r147,-331v43,-97,106,-146,188,-146v79,0,213,-29,184,76r-149,54v4,-25,54,-70,-4,-71v-22,0,-36,6,-41,18r-208,466v-12,29,-16,42,24,43v102,5,224,-56,260,-125","w":362},"D":{"d":"248,-70v65,-14,121,-68,142,-115r159,-355v11,-29,0,-53,-36,-53v-33,0,-57,18,-72,53r-204,461v0,6,4,9,11,9xm450,-620v60,-54,299,-44,249,68r-173,387v-42,102,-176,165,-323,165r-155,0r248,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v61,0,99,10,113,29","w":472},"E":{"d":"256,-59v98,1,237,-58,260,-126v9,12,19,23,27,36v-20,64,-170,150,-255,149r-76,0v-130,2,-134,-74,-96,-169v35,-88,108,-162,207,-185v-38,-8,-77,-39,-77,-83v0,-19,28,-93,46,-125v-11,-20,-21,-30,-28,-30r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v23,0,41,5,54,16v76,-30,271,-43,243,63r-149,54r25,-58v0,-10,-9,-15,-27,-15v-56,2,-65,81,-89,121v-16,47,12,67,63,101r-16,36v-84,27,-137,62,-156,108v-21,49,-48,94,-62,148v0,11,11,16,33,16","w":364},"F":{"d":"87,-87r79,-178v-54,12,-91,125,-117,184v3,18,31,9,38,-6xm296,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r599,0v-44,48,-63,67,-84,117r-63,0v11,-26,25,-51,34,-60r-122,0v-23,84,-67,154,-97,231r148,0r-22,48r-148,0r-91,205v-27,62,-91,107,-176,108v-52,0,-129,-26,-103,-81r44,-98v39,-87,104,-147,196,-182","w":229},"G":{"d":"275,-17v-18,0,-82,78,-79,98v2,18,34,12,37,-4xm356,-183r73,-164r-77,-42r-81,181v-7,16,-14,43,5,43v20,0,47,-6,80,-18xm478,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-23,62,-143,131,-220,144v-24,58,-47,108,-101,141v-63,38,-191,43,-197,-39v19,-95,104,-194,202,-197r7,-15v-21,6,-47,9,-76,9v-130,2,-137,-74,-96,-168r127,-290v1,-13,-20,-29,-33,-28r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,28,-29v104,3,233,-8,321,8v53,-10,121,-3,182,-5v55,-1,73,30,60,76r-148,54v7,-20,18,-36,24,-57v-3,-21,-84,-17,-85,4r-60,135r188,104r-98,225v0,9,5,13,16,13","w":471},"H":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,66,-170,149,-263,149v-43,0,-82,-40,-62,-85r102,-228r-108,0r-139,313r-152,0r248,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,141,25,111,92r-87,196r108,0r128,-288r145,0r-246,554v0,5,3,7,10,7","w":495},"I":{"d":"304,-557v9,-17,-16,-35,-31,-35r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r244,0v102,1,140,26,110,92r-247,557r-152,0","w":229},"J":{"d":"89,75r101,-226v-31,7,-92,56,-104,85r-64,150v3,9,69,10,67,-9xm370,-557v9,-17,-16,-35,-31,-35r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r244,0v101,2,141,25,111,92r-272,611v-27,62,-92,108,-176,108v-54,0,-159,-25,-133,-81v46,-99,66,-190,158,-256v40,-29,84,-54,133,-73","w":303},"K":{"d":"575,-150v-23,68,-172,152,-264,150v-51,-1,-76,-46,-53,-98r84,-188v10,-20,-10,-28,-33,-24r-137,310r-153,0r250,-564v1,-13,-21,-29,-33,-28r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r243,0v102,1,141,25,111,92r-79,178v25,4,44,-4,53,-22v49,-98,69,-240,207,-248r116,0v11,0,16,3,16,10v0,22,-41,54,-74,47v-51,0,-49,17,-71,66r-56,125v-11,23,-38,42,-83,56v27,21,42,32,32,59v-24,61,-56,114,-76,179v0,10,5,15,16,15v42,1,116,-62,128,-93","w":388},"L":{"d":"79,10v32,-3,33,-47,47,-70v-26,17,-51,23,-61,60v0,7,5,10,14,10xm492,-540v42,20,72,16,84,-20v0,-10,-5,-15,-15,-15v-22,0,-45,12,-69,35xm651,-593v0,82,-101,148,-184,109r-153,343v85,4,118,86,205,86v39,0,81,-24,128,-72r39,10v-81,76,-108,110,-227,119v-49,4,-137,-65,-181,-62v-23,79,-95,136,-194,138v-61,1,-121,-34,-92,-95v29,-63,89,-122,171,-125r166,-371v6,-11,13,-20,20,-27v-61,-41,-113,-61,-155,-61v-19,-4,-104,26,-116,27v-10,0,-15,-7,-15,-21v0,-13,10,-24,29,-31v107,-38,214,-19,314,33v38,-35,91,-53,160,-53v57,0,85,18,85,53","w":525},"M":{"d":"765,-88v45,1,125,-62,138,-97r27,36v-24,67,-171,149,-264,149v-42,0,-81,-40,-61,-85r210,-472v8,-14,8,-31,-11,-31v-47,-1,-122,74,-138,110r-213,478r-145,0r247,-557v7,-14,9,-31,-9,-31v-44,-1,-117,74,-133,110r-213,478r-152,0r248,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v66,0,105,12,117,35v47,-27,94,-40,139,-40v43,0,119,10,120,40v52,-63,296,-53,247,57r-204,462v0,5,3,7,9,7","w":750},"N":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-43,0,-82,-40,-62,-85r210,-472v7,-13,9,-31,-9,-31v-44,-1,-117,74,-133,110r-213,478r-152,0r248,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v66,0,105,12,117,35v47,-27,94,-40,139,-40v57,0,135,34,108,97r-205,462v0,5,3,7,10,7","w":495},"O":{"d":"350,-142r150,-336v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-185,415v-12,29,3,52,39,52v31,0,54,-17,69,-52xm617,-564v16,-4,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26xm781,-583v13,0,32,17,21,31v-23,33,-74,54,-151,62r-163,365v-37,83,-122,125,-254,125v-133,0,-191,-37,-152,-125r178,-399v38,-94,171,-153,299,-115v37,-32,135,-37,132,27v0,17,-6,35,-18,55v45,16,68,-7,108,-26"},"P":{"d":"430,-273r119,-267v11,-29,0,-53,-36,-53v-33,0,-57,18,-72,53r-164,368v87,-33,138,-67,153,-101xm450,-620v60,-54,299,-44,249,68r-110,246v-48,110,-169,170,-328,170r-61,136r-152,0r248,-557v6,-44,-59,-35,-105,-35v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29v82,3,227,-12,256,29","w":472},"Q":{"d":"350,-142r150,-336v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-185,415v-12,29,3,52,39,52v31,0,54,-17,69,-52xm617,-564v16,-4,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26xm802,-552v-33,34,-83,55,-151,62r-163,365v-31,68,-92,108,-185,120r-61,139r-97,-57r35,-80v-95,-11,-130,-50,-98,-122r178,-399v38,-94,171,-153,299,-115v36,-32,132,-37,132,27v0,17,-6,35,-18,55v42,12,52,1,99,-23"},"R":{"d":"363,-367v131,-51,148,-78,186,-173v11,-29,0,-53,-36,-53v-33,0,-57,18,-72,53xm516,-92v40,1,114,-62,125,-93r27,35v-24,69,-172,150,-263,150v-47,0,-73,-53,-54,-98v22,-51,63,-95,63,-156v0,-31,-22,-57,-67,-77r-147,331r-152,0r248,-557v6,-44,-59,-35,-105,-35v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29v82,3,227,-12,256,29v60,-54,291,-47,249,68v-34,94,-110,176,-213,198v67,17,88,78,61,142v-15,36,-34,69,-45,108v0,8,5,12,14,12","w":472},"S":{"d":"221,-60v69,-3,126,-62,126,-136v0,-8,-5,-36,-15,-83v-82,30,-119,58,-153,131v-18,38,1,90,42,88xm506,-540v42,20,72,16,84,-20v0,-10,-5,-15,-15,-15v-22,0,-45,12,-69,35xm664,-593v0,83,-100,147,-183,109v-40,41,-15,82,10,113v21,11,51,14,75,5r-22,49v-9,7,-23,10,-42,11v27,53,-10,114,-32,167v-34,83,-144,142,-258,145v-111,3,-190,-72,-140,-176v44,-92,126,-167,243,-186v-20,-84,9,-128,48,-184v-25,-18,-72,-60,-101,-61v-14,-4,-83,26,-89,27v-21,-2,-18,-43,4,-48v58,-27,127,-40,182,-7r61,36v38,-35,91,-53,160,-53v56,0,84,18,84,53","w":402,"k":{"x":7,"t":-20,"s":53,"o":7,"d":20,"a":7}},"T":{"d":"365,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r599,0v-44,48,-63,67,-84,117r-63,0v11,-26,25,-51,34,-60r-122,0v-1,10,-4,22,-10,35r-239,557r-159,0","w":347,"k":{"z":14,"y":21,"w":43,"u":36,"s":28,"r":28,"q":36,"p":50,"o":28,"i":43,"e":28,"a":64}},"U":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r193,-432v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,140,25,111,92r-211,478v6,18,26,7,44,-1v54,-25,90,-61,109,-105r207,-464r145,0r-246,554v0,5,3,7,10,7","w":495},"V":{"d":"296,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,140,25,111,92r-211,478v7,18,26,6,45,-2v53,-25,89,-60,108,-104r207,-464r145,0v-90,197,-143,370,-309,513v-102,88,-193,136,-278,136v-76,0,-78,-67,-52,-125","w":495},"W":{"d":"296,-557v7,-19,-17,-35,-32,-35r-176,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r247,0v101,2,141,25,111,92r-208,467v-4,10,-3,20,10,20v45,1,118,-68,133,-101r213,-478r146,0r-252,569v0,7,4,10,12,10v48,1,131,-79,147,-115r207,-464r145,0v-91,197,-142,370,-308,513v-103,88,-194,136,-279,136v-48,1,-72,-25,-67,-69v-69,46,-133,69,-192,69v-76,0,-78,-67,-52,-125","w":753},"X":{"d":"683,-150v-25,66,-170,150,-264,150v-45,0,-89,-49,-68,-98r108,-246v-6,-18,-26,-6,-44,2v-53,25,-90,60,-109,104r-106,237r-145,0v48,-124,134,-252,234,-324v-67,-4,-65,-71,-41,-124v17,-38,36,-73,49,-115v1,-13,-20,-29,-33,-28r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,139,25,111,92v-21,52,-49,98,-66,154v6,18,26,6,44,-2v106,-45,123,-148,171,-244r145,0v-38,93,-97,162,-197,235v71,1,72,61,48,116r-79,177v-6,14,-7,29,11,29v42,1,119,-62,131,-93","w":495},"Y":{"d":"274,75v11,-27,29,-68,53,-121v-35,3,-74,77,-91,127v3,17,35,11,38,-6xm296,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,141,25,111,92r-165,369v-3,11,-4,20,9,20v36,2,122,-73,134,-100r170,-381r152,0r-313,703v-26,63,-97,111,-181,112v-54,1,-121,-27,-97,-85v43,-104,106,-184,213,-223r7,-14v-65,39,-124,58,-179,58v-75,0,-76,-67,-51,-124","w":495},"Z":{"d":"215,-132v-35,-1,-123,22,-123,52v0,9,9,13,27,13v25,0,57,-22,96,-65xm379,-621v0,-10,5,-27,14,-27r449,0v22,1,13,18,1,28r-426,431v69,17,96,134,166,134v39,0,82,-24,129,-72r38,10v-81,76,-108,119,-226,119v-83,0,-119,-92,-180,-118v-54,57,-141,113,-236,116v-72,2,-98,-36,-75,-90v35,-80,119,-122,251,-125r359,-376v4,-9,-3,-12,-17,-12r-232,0v-10,0,-15,-6,-15,-18","w":586},"\\":{"d":"377,-567r11,486r-87,0r-10,-486r86,0","w":366},"_":{"d":"327,162r-374,0r33,-74r373,0","w":434},"`":{"d":"677,-719r-82,0r-60,-110r109,0","w":509},"a":{"d":"246,-98r89,-202v-4,-21,-44,-12,-47,7r-85,190v-7,16,-14,43,5,43v14,0,27,-13,38,-38xm405,-92v42,1,119,-62,131,-93r27,35v-25,68,-170,152,-264,150v-21,0,-34,-10,-37,-30v-48,55,-198,38,-187,-40v18,-132,106,-301,248,-301v33,0,58,11,75,33r9,-20r92,0r-105,237v-6,13,-7,29,11,29","w":391,"k":{"j":19,"'":76,"\"":80}},"b":{"d":"260,-98r89,-202v-3,-21,-43,-12,-46,7r-88,195v-6,16,-13,41,5,41v15,0,28,-14,40,-41xm430,-129v50,0,105,-51,120,-89r38,29v-52,69,-133,130,-193,130v-21,0,-33,-7,-38,-21v-32,42,-107,80,-176,82v-103,3,-124,-70,-89,-148r224,-503r145,0r-132,297v53,-35,127,-15,127,53v0,25,-27,90,-48,153v0,11,7,17,22,17","w":378,"k":{"'":109,"\"":104}},"c":{"d":"197,-60v116,10,235,-52,279,-125v8,12,19,23,26,36v-20,64,-170,149,-255,149v-84,0,-184,2,-184,-71v0,-46,41,-125,60,-170v27,-63,86,-130,164,-130v75,0,188,-19,160,76r-149,54v8,-20,19,-37,25,-59v-3,-21,-43,-12,-46,7r-85,190v-7,16,-14,40,5,43","w":326,"k":{"'":76,"\"":71}},"d":{"d":"244,-84r97,-218v-12,-13,-38,-3,-45,12r-88,199v-6,13,-12,34,5,34v13,0,23,-9,31,-27xm411,-90v53,0,92,-43,134,-93v8,13,18,24,26,37v-24,66,-170,151,-263,148v-29,0,-45,-9,-46,-28v-54,55,-188,31,-178,-42v18,-131,104,-294,248,-300v13,0,25,2,36,6r128,-287r145,0r-243,548v0,7,4,11,13,11","w":390,"k":{"'":57}},"e":{"d":"285,-212v12,-30,28,-56,38,-88v-3,-21,-43,-12,-46,7r-37,81r45,0xm197,-60v117,11,235,-53,279,-125v8,12,19,23,26,36v-20,64,-170,149,-255,149v-84,0,-184,2,-184,-71v0,-46,41,-125,60,-170v27,-63,86,-130,164,-130v64,0,163,-17,163,49v0,20,-14,55,-35,109v-26,66,-112,57,-199,57v-10,25,-31,51,-31,81v0,10,4,15,12,15","w":320,"k":{"'":57,"\"":90}},"f":{"d":"174,77v18,-46,51,-94,55,-149v0,-15,-4,-23,-13,-26r-79,182v4,16,36,5,37,-7xm347,-310r115,-260v-2,-17,-34,-13,-37,4r-152,342v27,-7,51,-36,74,-86xm441,-651v52,-1,126,27,100,81v-56,116,-93,244,-167,343v-26,34,-53,55,-78,66v7,51,60,55,94,25r27,36v-24,26,-78,55,-125,43v14,17,12,21,1,45v-31,66,-39,125,-120,155v-65,24,-183,33,-181,-42v0,-14,4,-30,11,-47r266,-597v27,-62,89,-107,172,-108","w":299,"k":{"'":38}},"g":{"d":"196,-24v-47,34,-59,46,-82,105v2,18,32,12,37,-4v8,-23,24,-56,45,-101xm256,-146r67,-154v-3,-21,-43,-12,-46,7v-23,59,-56,112,-74,176v0,9,4,13,11,13v15,0,29,-14,42,-42xm394,-92v40,1,120,-62,130,-93r27,35v-23,51,-133,149,-209,121v-30,67,-51,133,-117,169v-66,36,-199,46,-207,-40v9,-74,60,-114,130,-132v-43,-8,-65,-35,-65,-80v0,-127,104,-259,228,-259v33,0,58,11,76,33r9,-20r92,0r-99,221v-7,14,-10,25,-10,32v0,9,5,13,15,13","w":372,"k":{"'":66,"\"":99}},"h":{"d":"414,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,66,-170,152,-263,149v-51,-1,-77,-47,-54,-98r88,-196v4,-11,2,-21,-11,-21v-15,0,-26,7,-33,22r-130,293r-145,0r289,-649r145,0r-128,286v58,-36,146,-31,142,52v-4,78,-53,139,-73,206v0,9,5,13,16,13","w":394,"k":{"'":71,"\"":90}},"i":{"d":"396,-150v-25,66,-170,150,-264,150v-46,0,-73,-53,-53,-98r131,-293r110,61r-93,209v-6,14,-7,29,11,29v42,1,119,-62,131,-93xm410,-515v-3,47,-59,71,-109,73v-27,1,-60,-12,-59,-38v3,-48,60,-72,109,-74v28,-1,61,12,59,39","w":218,"k":{"'":71}},"j":{"d":"83,-17v-18,0,-81,78,-78,98v2,18,34,12,37,-4xm286,-92v42,1,119,-62,131,-93v8,12,19,23,26,36v-23,62,-143,131,-220,144v-24,57,-49,107,-100,141v-73,49,-237,29,-189,-75v32,-70,105,-164,194,-161r129,-291r111,61r-93,209v-6,14,-7,29,11,29xm458,-515v-3,47,-60,71,-109,73v-28,1,-61,-13,-60,-38v2,-48,61,-72,110,-74v27,-1,61,13,59,39","w":257,"k":{"'":52}},"k":{"d":"286,-257v8,-10,98,-18,96,-48v0,-7,-4,-10,-13,-10v-22,0,-50,19,-83,58xm575,-150v-25,66,-170,152,-264,150v-32,-1,-66,-26,-63,-56v-6,-23,45,-113,45,-127v-6,-22,-37,-7,-45,11r-76,172r-146,0r289,-649r145,0r-136,306v28,-29,65,-44,111,-44v39,0,58,13,58,40v0,55,-36,81,-88,104v54,22,10,88,-1,136v0,10,5,15,16,15v42,1,116,-62,128,-93","w":388,"k":{"'":57,"\"":128}},"l":{"d":"323,-338v66,-24,103,-161,139,-232v-3,-17,-35,-11,-38,6xm254,-84v58,0,142,-55,157,-101r27,36v-27,72,-150,149,-247,149v-71,0,-139,-56,-108,-126r186,-417v27,-62,89,-107,172,-108v52,-1,125,26,100,81r-65,146v-39,87,-104,148,-196,183v-19,45,-42,86,-57,135v0,15,10,22,31,22","w":285,"k":{"'":38}},"m":{"d":"602,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,65,-171,151,-263,149v-51,-2,-77,-47,-54,-98r88,-196v4,-11,2,-21,-11,-21v-15,0,-26,7,-33,22r-130,293r-145,0r131,-294v4,-11,2,-21,-12,-21v-15,0,-25,7,-32,22r-130,293r-146,0r174,-391r92,49v38,-44,158,-69,180,4v33,-31,74,-46,121,-46v80,0,78,88,52,150r-55,129v0,9,5,13,16,13","w":590,"k":{"'":71,"\"":94}},"n":{"d":"575,-150v-25,66,-170,153,-264,150v-50,-2,-76,-46,-53,-98r88,-196v4,-11,2,-21,-12,-21v-15,0,-25,7,-32,22r-130,293r-146,0r174,-391r92,49v41,-50,188,-73,183,31v-4,79,-55,137,-73,206v0,9,5,13,15,13v42,1,119,-62,131,-93","w":399,"k":{"'":71,"\"":94}},"o":{"d":"243,-85r78,-176v-16,-2,-22,-32,-15,-50v-11,6,-18,15,-23,26r-89,200v-6,12,-7,33,10,32v16,0,29,-11,39,-32xm402,-300v15,-4,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,27,23,27xm587,-288v-33,34,-83,54,-150,61r-24,55v-51,115,-110,172,-176,172v-70,0,-175,23,-172,-55v2,-54,42,-130,64,-178v34,-73,98,-152,209,-138v34,-36,141,-45,138,22v0,17,-6,35,-18,56v44,10,52,0,99,-24","w":353,"k":{"x":-12,"s":64,"'":76,"\"":80}},"p":{"d":"260,-98r89,-202v-3,-21,-43,-12,-46,7r-88,195v-6,16,-13,41,5,41v15,0,28,-14,40,-41xm430,-129v50,0,105,-51,120,-89r38,29v-53,68,-132,130,-193,130v-21,0,-33,-7,-38,-21v-38,44,-110,100,-183,70r-76,171r-143,0r231,-519r91,0r-13,30v41,-46,197,-53,192,28v4,25,-26,91,-48,154v0,11,7,17,22,17","w":368,"k":{"'":76,"\"":118}},"q":{"d":"234,-98r89,-202v-3,-21,-43,-12,-46,7r-85,190v-7,16,-14,43,5,43v13,0,26,-13,37,-38xm394,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-23,49,-136,151,-209,120r-84,187r-137,0r71,-159v-69,12,-137,-16,-129,-69v19,-130,106,-301,248,-301v33,0,58,11,76,33r9,-20r92,0r-110,253v0,9,5,13,16,13","w":368,"k":{"'":80}},"r":{"d":"402,-91v42,1,119,-62,131,-94r27,36v-24,66,-170,149,-263,149v-60,0,-75,-50,-54,-97r71,-161v1,-9,-15,-18,-24,-18v-8,0,-16,8,-23,25v-38,84,-113,160,-214,186r148,-331r214,121v57,45,-28,113,-28,171v0,9,5,13,15,13","w":387,"k":{"'":66,"\"":104}},"s":{"d":"220,-87v63,0,105,-96,71,-154r-83,94v-6,20,-8,60,12,60xm369,-417v-16,-13,-34,10,-27,34v18,-19,27,-30,27,-34xm349,-65v73,-3,165,-65,193,-125r25,43v-50,83,-172,147,-299,147v-89,0,-133,-31,-132,-97v-23,27,-70,54,-141,82r3,-50v121,-77,211,-157,271,-240v-16,-77,48,-168,108,-168v34,0,51,11,51,32v0,49,-27,60,-62,111v96,119,101,174,-17,265","w":378,"k":{"'":52,"\"":80}},"t":{"d":"233,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-54,0,-77,-51,-55,-100r95,-213r-38,0r22,-48r37,0r129,-288r145,0r-128,288r40,0r-22,48r-40,0r-96,218v0,5,3,7,10,7","w":237,"k":{"'":76,"!":-58}},"u":{"d":"405,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,66,-170,152,-263,149v-21,0,-34,-10,-37,-30v-49,55,-197,38,-188,-40v12,-97,79,-201,112,-288r131,0r-114,255v-7,16,-14,43,5,43v14,0,26,-13,37,-38r130,-293r111,61r-92,209v-6,13,-7,29,11,29","w":380,"k":{"'":94,"\"":90}},"v":{"d":"485,-330v-51,103,-75,212,-169,279v-48,34,-92,53,-137,53v-127,0,-120,-79,-79,-171r84,-189r131,0r-114,255v-7,16,-14,43,5,43v14,0,26,-13,37,-38r131,-293","w":348,"k":{"'":76,"\"":99}},"w":{"d":"577,-300v16,-2,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,28,23,27xm479,-289v0,-59,50,-111,109,-111v72,0,77,60,45,107v45,10,51,1,99,-24r30,29v-33,33,-83,54,-150,61r-43,97v-28,71,-116,132,-217,132v-42,0,-71,-8,-88,-23v-63,41,-202,29,-193,-49v13,-111,89,-223,126,-321r104,61r-102,227v-7,16,-14,43,5,43v14,0,27,-13,38,-38r95,-212r102,61v-23,59,-56,109,-72,175v0,9,4,14,12,14v13,0,26,-13,37,-38r74,-166v-7,-5,-11,-13,-11,-25","w":519,"k":{"'":57,"\"":99}},"x":{"d":"266,-89v43,0,119,-63,130,-96r27,36v-24,67,-171,151,-264,149v-41,0,-62,-19,-63,-56r-36,23r-63,0r123,-96v24,-58,54,-110,74,-173v0,-12,-9,-18,-26,-18v-23,0,-52,19,-85,58v26,-56,77,-114,145,-115v52,-1,82,38,80,91r35,-27r63,0r-105,85v-1,3,-15,40,-47,108v-7,14,-8,31,12,31","w":255,"k":{"'":85,"\"":76}},"y":{"d":"196,-24v-47,34,-59,46,-82,105v2,18,32,12,37,-4v8,-23,24,-56,45,-101xm394,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,61,-142,131,-219,144v-25,60,-49,113,-107,145v-66,37,-199,46,-207,-40v9,-75,60,-113,130,-132v-88,-18,-77,-91,-43,-168r85,-191r103,61r-83,187v-7,15,-14,39,4,39v15,0,29,-14,42,-42r116,-261r104,77r-98,225v0,9,5,13,16,13","w":370,"k":{"'":85,"\"":113}},"z":{"d":"226,-60v91,1,228,-61,250,-125r26,35v-21,65,-170,150,-255,150v-80,0,-194,15,-194,-57v0,-61,45,-128,98,-146v60,-20,153,-23,163,-91v-3,-39,-75,-16,-112,-22r-20,-55r204,0v53,-3,92,41,65,90v-39,69,-68,72,-175,108v-52,17,-83,40,-93,87v0,17,14,26,43,26","w":331,"k":{"'":90,"\"":85}},"~":{"d":"420,-671r-33,24r-34,0r-6,-14r-16,14r-26,0r33,-24r29,0r7,14v11,-9,23,-17,46,-14","w":132},"\u00a1":{"d":"260,-328v4,-58,93,-90,150,-64v12,7,19,16,19,29v0,46,-59,73,-109,73v-28,0,-62,-14,-60,-38xm199,155v-30,83,-149,98,-278,92v-11,0,-15,-5,-10,-15v9,-20,40,-46,72,-42v17,2,58,-23,63,-35r158,-354r179,-60","w":290},"\u00a8":{"d":"619,-794v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm729,-794v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":581},"\u00b4":{"d":"742,-829r-157,110r-82,0r130,-110r109,0","w":509},"\u00b8":{"d":"307,52v0,82,-98,131,-196,115r9,-21v55,9,102,-21,109,-66v3,-18,-18,-25,-39,-21r92,-87r30,0r-42,39v25,7,37,20,37,41","w":514},"\u00bf":{"d":"313,-342v3,-48,60,-72,109,-74v28,-1,61,12,59,39v-3,47,-60,71,-109,73v-27,1,-60,-12,-59,-38xm93,234v-89,0,-207,-17,-177,-103v39,-112,132,-178,264,-235v24,-10,37,-26,43,-39r59,-131r125,61v-31,69,-49,128,-131,151v-47,13,-173,96,-188,132v-15,36,-58,102,23,102v25,0,111,-29,136,-29v27,0,53,13,77,38r-24,53v-25,-18,-48,-27,-69,-27v-16,-1,-101,27,-138,27","w":484},"\u00c0":{"d":"227,-70v66,-14,121,-67,142,-115r131,-293v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-211,478v0,6,4,9,11,9xm485,-88v44,1,125,-62,137,-97r27,36v-24,66,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r178,-399v30,-74,120,-128,220,-129v58,0,97,16,116,49r20,-45r105,0r-246,554v0,5,3,7,10,7xm707,-719r-82,0r-60,-110r109,0"},"\u00c1":{"d":"227,-70v66,-14,121,-67,142,-115r131,-293v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-211,478v0,6,4,9,11,9xm485,-88v44,1,125,-62,137,-97r27,36v-24,66,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r178,-399v30,-74,120,-128,220,-129v58,0,97,16,116,49r20,-45r105,0r-246,554v0,5,3,7,10,7xm713,-829r-157,110r-82,0r130,-110r109,0"},"\u00c2":{"d":"227,-70v66,-14,121,-67,142,-115r131,-293v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-211,478v0,6,4,9,11,9xm485,-88v44,1,125,-62,137,-97r27,36v-24,66,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r178,-399v30,-74,120,-128,220,-129v58,0,97,16,116,49r20,-45r105,0r-246,554v0,5,3,7,10,7xm679,-724r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0"},"\u00c3":{"d":"227,-70v66,-14,121,-67,142,-115r131,-293v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-211,478v0,6,4,9,11,9xm485,-88v44,1,125,-62,137,-97r27,36v-24,66,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r178,-399v30,-74,120,-128,220,-129v58,0,97,16,116,49r20,-45r105,0r-246,554v0,5,3,7,10,7xm562,-831v27,0,74,39,95,38v17,0,33,-13,50,-38r10,0v-21,49,-54,73,-97,73v-28,0,-75,-40,-95,-39v-15,0,-32,12,-49,37r-11,0v23,-47,55,-71,97,-71"},"\u00c4":{"d":"227,-70v66,-14,121,-67,142,-115r131,-293v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-211,478v0,6,4,9,11,9xm485,-88v44,1,125,-62,137,-97r27,36v-24,66,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r178,-399v30,-74,120,-128,220,-129v58,0,97,16,116,49r20,-45r105,0r-246,554v0,5,3,7,10,7xm570,-794v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm680,-794v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28"},"\u00c5":{"d":"227,-70v66,-14,121,-67,142,-115r131,-293v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-211,478v0,6,4,9,11,9xm485,-88v44,1,125,-62,137,-97r27,36v-24,66,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r178,-399v30,-74,120,-128,220,-129v58,0,97,16,116,49r20,-45r105,0r-246,554v0,5,3,7,10,7xm567,-727v35,0,83,-18,83,-52v0,-19,-16,-28,-48,-28v-37,0,-83,17,-83,52v0,19,16,28,48,28xm687,-786v-3,55,-73,80,-131,82v-33,1,-76,-16,-74,-45v4,-53,71,-79,130,-81v35,-1,76,16,75,44"},"\u00c7":{"d":"533,-150v-21,65,-170,151,-256,150r-76,0v-130,2,-138,-75,-96,-169r147,-331v43,-97,106,-146,188,-146v79,0,213,-29,184,76r-149,54v4,-25,54,-70,-4,-71v-22,0,-36,6,-41,18r-208,466v-12,29,-16,42,24,43v102,5,224,-56,260,-125xm268,52v0,82,-98,131,-196,115r9,-21v55,9,102,-21,109,-66v3,-18,-18,-25,-39,-21r92,-87r30,0r-42,39v25,7,37,20,37,41","w":360},"\u00c8":{"d":"256,-59v98,1,237,-58,260,-126v9,12,19,23,27,36v-20,64,-170,150,-255,149r-76,0v-130,2,-134,-74,-96,-169v35,-88,108,-162,207,-185v-38,-8,-77,-39,-77,-83v0,-19,28,-93,46,-125v-11,-20,-21,-30,-28,-30r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v23,0,41,5,54,16v76,-30,271,-43,243,63r-149,54r25,-58v0,-10,-9,-15,-27,-15v-56,2,-65,81,-89,121v-16,47,12,67,63,101r-16,36v-84,27,-137,62,-156,108v-21,49,-48,94,-62,148v0,11,11,16,33,16xm608,-719r-82,0r-60,-110r109,0","w":364},"\u00c9":{"d":"256,-59v98,1,237,-58,260,-126v9,12,19,23,27,36v-20,64,-170,150,-255,149r-76,0v-130,2,-134,-74,-96,-169v35,-88,108,-162,207,-185v-38,-8,-77,-39,-77,-83v0,-19,28,-93,46,-125v-11,-20,-21,-30,-28,-30r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v23,0,41,5,54,16v76,-30,271,-43,243,63r-149,54r25,-58v0,-10,-9,-15,-27,-15v-56,2,-65,81,-89,121v-16,47,12,67,63,101r-16,36v-84,27,-137,62,-156,108v-21,49,-48,94,-62,148v0,11,11,16,33,16xm683,-829r-157,110r-82,0r130,-110r109,0","w":364},"\u00ca":{"d":"256,-59v98,1,237,-58,260,-126v9,12,19,23,27,36v-20,64,-170,150,-255,149r-76,0v-130,2,-134,-74,-96,-169v35,-88,108,-162,207,-185v-38,-8,-77,-39,-77,-83v0,-19,28,-93,46,-125v-11,-20,-21,-30,-28,-30r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v23,0,41,5,54,16v76,-30,271,-43,243,63r-149,54r25,-58v0,-10,-9,-15,-27,-15v-56,2,-65,81,-89,121v-16,47,12,67,63,101r-16,36v-84,27,-137,62,-156,108v-21,49,-48,94,-62,148v0,11,11,16,33,16xm679,-724r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":364},"\u00cb":{"d":"256,-59v98,1,237,-58,260,-126v9,12,19,23,27,36v-20,64,-170,150,-255,149r-76,0v-130,2,-134,-74,-96,-169v35,-88,108,-162,207,-185v-38,-8,-77,-39,-77,-83v0,-19,28,-93,46,-125v-11,-20,-21,-30,-28,-30r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v23,0,41,5,54,16v76,-30,271,-43,243,63r-149,54r25,-58v0,-10,-9,-15,-27,-15v-56,2,-65,81,-89,121v-16,47,12,67,63,101r-16,36v-84,27,-137,62,-156,108v-21,49,-48,94,-62,148v0,11,11,16,33,16xm570,-794v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm680,-794v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":364},"\u00cc":{"d":"304,-557v9,-17,-16,-35,-31,-35r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r244,0v102,1,140,26,110,92r-247,557r-152,0xm478,-719r-82,0r-60,-110r109,0","w":229},"\u00cd":{"d":"304,-557v9,-17,-16,-35,-31,-35r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r244,0v102,1,140,26,110,92r-247,557r-152,0xm583,-829r-157,110r-82,0r130,-110r109,0","w":229},"\u00ce":{"d":"304,-557v9,-17,-16,-35,-31,-35r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r244,0v102,1,140,26,110,92r-247,557r-152,0xm559,-724r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":229},"\u00cf":{"d":"304,-557v9,-17,-16,-35,-31,-35r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r244,0v102,1,140,26,110,92r-247,557r-152,0xm440,-794v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm550,-794v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":229},"\u00d0":{"d":"283,-70v64,-14,121,-68,142,-115r158,-355v13,-28,1,-53,-35,-53v-33,0,-57,18,-73,53r-203,461v0,6,4,9,11,9xm485,-620v59,-54,298,-45,248,68r-172,387v-42,101,-177,165,-324,165r-154,0r249,-564v1,-13,-21,-29,-33,-28r-173,0v-17,0,-25,-9,-25,-28v0,-19,9,-29,27,-29r243,0v62,0,100,10,114,29xm407,-287r-244,0r33,-73r243,0","w":541},"\u00d1":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-43,0,-82,-40,-62,-85r210,-472v7,-13,9,-31,-9,-31v-44,-1,-117,74,-133,110r-213,478r-152,0r248,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v66,0,105,12,117,35v47,-27,94,-40,139,-40v57,0,135,34,108,97r-205,462v0,5,3,7,10,7xm572,-831v27,0,74,39,95,38v17,0,33,-13,50,-38r10,0v-21,49,-54,73,-97,73v-28,0,-75,-40,-95,-39v-15,0,-32,12,-49,37r-11,0v23,-47,55,-71,97,-71","w":495},"\u00d2":{"d":"350,-142r150,-336v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-185,415v-12,29,3,52,39,52v31,0,54,-17,69,-52xm617,-564v16,-4,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26xm781,-583v13,0,32,17,21,31v-23,33,-74,54,-151,62r-163,365v-37,83,-122,125,-254,125v-133,0,-191,-37,-152,-125r178,-399v38,-94,171,-153,299,-115v37,-32,135,-37,132,27v0,17,-6,35,-18,55v45,16,68,-7,108,-26xm618,-719r-82,0r-60,-110r109,0"},"\u00d3":{"d":"350,-142r150,-336v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-185,415v-12,29,3,52,39,52v31,0,54,-17,69,-52xm617,-564v16,-4,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26xm781,-583v13,0,32,17,21,31v-23,33,-74,54,-151,62r-163,365v-37,83,-122,125,-254,125v-133,0,-191,-37,-152,-125r178,-399v38,-94,171,-153,299,-115v37,-32,135,-37,132,27v0,17,-6,35,-18,55v45,16,68,-7,108,-26xm693,-829r-157,110r-82,0r130,-110r109,0"},"\u00d4":{"d":"350,-142r150,-336v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-185,415v-12,29,3,52,39,52v31,0,54,-17,69,-52xm617,-564v16,-4,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26xm781,-583v13,0,32,17,21,31v-23,33,-74,54,-151,62r-163,365v-37,83,-122,125,-254,125v-133,0,-191,-37,-152,-125r178,-399v38,-94,171,-153,299,-115v37,-32,135,-37,132,27v0,17,-6,35,-18,55v45,16,68,-7,108,-26xm679,-724r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0"},"\u00d5":{"d":"350,-142r150,-336v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-185,415v-12,29,3,52,39,52v31,0,54,-17,69,-52xm617,-564v16,-4,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26xm781,-583v13,0,32,17,21,31v-23,33,-74,54,-151,62r-163,365v-37,83,-122,125,-254,125v-133,0,-191,-37,-152,-125r178,-399v38,-94,171,-153,299,-115v37,-32,135,-37,132,27v0,17,-6,35,-18,55v45,16,68,-7,108,-26xm552,-831v27,0,74,39,95,38v17,0,33,-13,50,-38r10,0v-21,49,-54,73,-97,73v-28,0,-75,-40,-95,-39v-15,0,-32,12,-49,37r-11,0v23,-47,55,-71,97,-71"},"\u00d6":{"d":"350,-142r150,-336v17,-39,8,-110,-36,-110v-15,0,-28,10,-37,31r-185,415v-12,29,3,52,39,52v31,0,54,-17,69,-52xm617,-564v16,-4,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26xm781,-583v13,0,32,17,21,31v-23,33,-74,54,-151,62r-163,365v-37,83,-122,125,-254,125v-133,0,-191,-37,-152,-125r178,-399v38,-94,171,-153,299,-115v37,-32,135,-37,132,27v0,17,-6,35,-18,55v45,16,68,-7,108,-26xm570,-794v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm680,-794v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28"},"\u00d8":{"d":"793,-583v14,0,32,17,22,31v-23,33,-74,54,-151,62r-164,365v-37,83,-121,125,-253,125v-133,0,-191,-37,-152,-125r178,-399v36,-94,171,-153,298,-115v37,-32,137,-37,133,27v0,17,-6,35,-19,55v45,15,69,-6,108,-26xm520,-505v5,-45,-9,-83,-44,-83v-15,0,-28,10,-37,31r-122,275xm363,-142r80,-181r-191,210v5,15,18,23,41,23v31,0,55,-17,70,-52xm629,-564v16,-2,16,-47,-2,-46v-14,0,-21,7,-21,20v-1,12,11,26,23,26"},"\u00d9":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r193,-432v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,140,25,111,92r-211,478v6,18,26,7,44,-1v54,-25,90,-61,109,-105r207,-464r145,0r-246,554v0,5,3,7,10,7xm648,-719r-82,0r-60,-110r109,0","w":495},"\u00da":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r193,-432v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,140,25,111,92r-211,478v6,18,26,7,44,-1v54,-25,90,-61,109,-105r207,-464r145,0r-246,554v0,5,3,7,10,7xm703,-829r-157,110r-82,0r130,-110r109,0","w":495},"\u00db":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r193,-432v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,140,25,111,92r-211,478v6,18,26,7,44,-1v54,-25,90,-61,109,-105r207,-464r145,0r-246,554v0,5,3,7,10,7xm699,-724r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":495},"\u00dc":{"d":"506,-88v44,1,126,-62,137,-97r27,36v-24,67,-170,149,-263,149v-46,0,-64,-32,-56,-78v-53,52,-119,78,-196,78v-76,0,-78,-67,-52,-125r193,-432v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,140,25,111,92r-211,478v6,18,26,7,44,-1v54,-25,90,-61,109,-105r207,-464r145,0r-246,554v0,5,3,7,10,7xm590,-794v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm700,-794v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":495},"\u00dd":{"d":"274,75v11,-27,29,-68,53,-121v-35,3,-74,77,-91,127v3,17,35,11,38,-6xm296,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,141,25,111,92r-165,369v-3,11,-4,20,9,20v36,2,122,-73,134,-100r170,-381r152,0r-313,703v-26,63,-97,111,-181,112v-54,1,-121,-27,-97,-85v43,-104,106,-184,213,-223r7,-14v-65,39,-124,58,-179,58v-75,0,-76,-67,-51,-124xm733,-829r-157,110r-82,0r130,-110r109,0","w":475},"\u00df":{"d":"363,-367v131,-51,148,-78,186,-173v11,-29,0,-53,-36,-53v-33,0,-57,18,-72,53xm547,-212v-43,112,-114,181,-262,205r47,-107v43,-39,49,-46,75,-109v21,-52,-5,-81,-60,-108r-147,331r-152,0r246,-552v30,-68,104,-102,223,-102v126,0,189,24,189,71v0,119,-108,202,-220,229v67,17,86,77,61,142","w":364},"\u00e0":{"d":"246,-98r89,-202v-4,-21,-44,-12,-47,7r-85,190v-7,16,-14,43,5,43v14,0,27,-13,38,-38xm405,-92v42,1,119,-62,131,-93r27,35v-25,68,-170,152,-264,150v-21,0,-34,-10,-37,-30v-48,55,-198,38,-187,-40v18,-132,106,-301,248,-301v33,0,58,11,75,33r9,-20r92,0r-105,237v-6,13,-7,29,11,29xm504,-420r-82,0r-60,-110r109,0","w":391},"\u00e1":{"d":"246,-98r89,-202v-4,-21,-44,-12,-47,7r-85,190v-7,16,-14,43,5,43v14,0,27,-13,38,-38xm405,-92v42,1,119,-62,131,-93r27,35v-25,68,-170,152,-264,150v-21,0,-34,-10,-37,-30v-48,55,-198,38,-187,-40v18,-132,106,-301,248,-301v33,0,58,11,75,33r9,-20r92,0r-105,237v-6,13,-7,29,11,29xm589,-530r-157,110r-82,0r130,-110r109,0","w":391},"\u00e2":{"d":"246,-98r89,-202v-4,-21,-44,-12,-47,7r-85,190v-7,16,-14,43,5,43v14,0,27,-13,38,-38xm405,-92v42,1,119,-62,131,-93r27,35v-25,68,-170,152,-264,150v-21,0,-34,-10,-37,-30v-48,55,-198,38,-187,-40v18,-132,106,-301,248,-301v33,0,58,11,75,33r9,-20r92,0r-105,237v-6,13,-7,29,11,29xm515,-425r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":391},"\u00e3":{"d":"246,-98r89,-202v-4,-21,-44,-12,-47,7r-85,190v-7,16,-14,43,5,43v14,0,27,-13,38,-38xm405,-92v42,1,119,-62,131,-93r27,35v-25,68,-170,152,-264,150v-21,0,-34,-10,-37,-30v-48,55,-198,38,-187,-40v18,-132,106,-301,248,-301v33,0,58,11,75,33r9,-20r92,0r-105,237v-6,13,-7,29,11,29xm388,-532v27,0,74,39,95,38v17,0,33,-13,50,-38r10,0v-21,49,-54,73,-97,73v-28,0,-75,-40,-95,-39v-15,0,-32,12,-49,37r-11,0v23,-47,55,-71,97,-71","w":391},"\u00e4":{"d":"246,-98r89,-202v-4,-21,-44,-12,-47,7r-85,190v-7,16,-14,43,5,43v14,0,27,-13,38,-38xm405,-92v42,1,119,-62,131,-93r27,35v-25,68,-170,152,-264,150v-21,0,-34,-10,-37,-30v-48,55,-198,38,-187,-40v18,-132,106,-301,248,-301v33,0,58,11,75,33r9,-20r92,0r-105,237v-6,13,-7,29,11,29xm416,-495v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm526,-495v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":391},"\u00e5":{"d":"246,-98r89,-202v-4,-21,-44,-12,-47,7r-85,190v-7,16,-14,43,5,43v14,0,27,-13,38,-38xm405,-92v42,1,119,-62,131,-93r27,35v-25,68,-170,152,-264,150v-21,0,-34,-10,-37,-30v-48,55,-198,38,-187,-40v18,-132,106,-301,248,-301v33,0,58,11,75,33r9,-20r92,0r-105,237v-6,13,-7,29,11,29xm383,-428v35,0,83,-18,83,-52v0,-19,-16,-28,-48,-28v-37,0,-83,17,-83,52v0,19,16,28,48,28xm503,-487v-3,55,-73,80,-131,82v-33,1,-76,-16,-74,-45v4,-53,71,-79,130,-81v35,-1,76,16,75,44","w":391},"\u00e6":{"d":"231,-98r95,-214v-25,-1,-43,-1,-52,19r-85,190v-6,15,-14,43,4,43v14,0,27,-13,38,-38xm466,-212v12,-30,28,-56,38,-88v-3,-21,-43,-12,-46,7r-37,81r45,0xm378,-60v117,11,235,-53,279,-125v8,12,19,23,26,36v-20,64,-170,150,-255,149r-144,0v-21,0,-33,-10,-36,-30v-50,55,-198,37,-188,-40v18,-132,106,-301,248,-301r259,0v43,0,64,16,64,49v0,21,-14,56,-35,109v-26,66,-112,57,-199,57v-10,25,-31,51,-31,81v0,10,4,15,12,15","w":506},"\u00e7":{"d":"206,-60v116,10,235,-52,279,-125v8,12,19,23,26,36v-20,64,-170,149,-255,149v-84,0,-184,2,-184,-71v0,-46,41,-125,60,-170v27,-63,86,-130,164,-130v75,0,188,-19,160,76r-149,54v8,-20,19,-37,25,-59v-3,-21,-43,-12,-46,7r-85,190v-7,16,-14,40,5,43xm228,52v0,82,-98,131,-196,115r9,-21v55,9,102,-21,109,-66v3,-18,-18,-25,-39,-21r92,-87r30,0r-42,39v25,7,37,20,37,41","w":313},"\u00e8":{"d":"285,-212v12,-30,28,-56,38,-88v-3,-21,-43,-12,-46,7r-37,81r45,0xm197,-60v117,11,235,-53,279,-125v8,12,19,23,26,36v-20,64,-170,149,-255,149v-84,0,-184,2,-184,-71v0,-46,41,-125,60,-170v27,-63,86,-130,164,-130v64,0,163,-17,163,49v0,20,-14,55,-35,109v-26,66,-112,57,-199,57v-10,25,-31,51,-31,81v0,10,4,15,12,15xm434,-420r-82,0r-60,-110r109,0","w":320},"\u00e9":{"d":"285,-212v12,-30,28,-56,38,-88v-3,-21,-43,-12,-46,7r-37,81r45,0xm197,-60v117,11,235,-53,279,-125v8,12,19,23,26,36v-20,64,-170,149,-255,149v-84,0,-184,2,-184,-71v0,-46,41,-125,60,-170v27,-63,86,-130,164,-130v64,0,163,-17,163,49v0,20,-14,55,-35,109v-26,66,-112,57,-199,57v-10,25,-31,51,-31,81v0,10,4,15,12,15xm519,-530r-157,110r-82,0r130,-110r109,0","w":320},"\u00ea":{"d":"285,-212v12,-30,28,-56,38,-88v-3,-21,-43,-12,-46,7r-37,81r45,0xm197,-60v117,11,235,-53,279,-125v8,12,19,23,26,36v-20,64,-170,149,-255,149v-84,0,-184,2,-184,-71v0,-46,41,-125,60,-170v27,-63,86,-130,164,-130v64,0,163,-17,163,49v0,20,-14,55,-35,109v-26,66,-112,57,-199,57v-10,25,-31,51,-31,81v0,10,4,15,12,15xm485,-425r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":320},"\u00eb":{"d":"285,-212v12,-30,28,-56,38,-88v-3,-21,-43,-12,-46,7r-37,81r45,0xm197,-60v117,11,235,-53,279,-125v8,12,19,23,26,36v-20,64,-170,149,-255,149v-84,0,-184,2,-184,-71v0,-46,41,-125,60,-170v27,-63,86,-130,164,-130v64,0,163,-17,163,49v0,20,-14,55,-35,109v-26,66,-112,57,-199,57v-10,25,-31,51,-31,81v0,10,4,15,12,15xm376,-495v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm486,-495v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":320},"\u00ec":{"d":"234,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-25,66,-170,149,-264,149v-46,0,-73,-53,-53,-98r131,-293r111,61r-98,225v0,9,5,13,16,13xm374,-420r-82,0r-60,-110r109,0","w":218},"\u00ed":{"d":"234,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-25,66,-170,149,-264,149v-46,0,-73,-53,-53,-98r131,-293r111,61r-98,225v0,9,5,13,16,13xm439,-530r-157,110r-82,0r130,-110r109,0","w":218},"\u00ee":{"d":"234,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-25,66,-170,149,-264,149v-46,0,-73,-53,-53,-98r131,-293r111,61r-98,225v0,9,5,13,16,13xm415,-425r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":218},"\u00ef":{"d":"234,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-25,66,-170,149,-264,149v-46,0,-73,-53,-53,-98r131,-293r111,61r-98,225v0,9,5,13,16,13xm306,-495v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm416,-495v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":218},"\u00f0":{"w":305},"\u00f1":{"d":"575,-150v-25,66,-170,153,-264,150v-50,-2,-76,-46,-53,-98r88,-196v4,-11,2,-21,-12,-21v-15,0,-25,7,-32,22r-130,293r-146,0r174,-391r92,49v41,-50,188,-73,183,31v-4,79,-55,137,-73,206v0,9,5,13,15,13v42,1,119,-62,131,-93xm378,-532v27,0,74,39,95,38v17,0,33,-13,50,-38r10,0v-21,49,-54,73,-97,73v-28,0,-75,-40,-95,-39v-15,0,-32,12,-49,37r-11,0v23,-47,55,-71,97,-71","w":399},"\u00f2":{"d":"243,-85r78,-176v-16,-2,-22,-32,-15,-50v-11,6,-18,15,-23,26r-89,200v-6,12,-7,33,10,32v16,0,29,-11,39,-32xm402,-300v15,-4,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,27,23,27xm587,-288v-33,34,-83,54,-150,61r-24,55v-51,115,-110,172,-176,172v-70,0,-175,23,-172,-55v2,-54,42,-130,64,-178v34,-73,98,-152,209,-138v34,-36,141,-45,138,22v0,17,-6,35,-18,56v44,10,52,0,99,-24xm444,-420r-82,0r-60,-110r109,0","w":353},"\u00f3":{"d":"243,-85r78,-176v-16,-2,-22,-32,-15,-50v-11,6,-18,15,-23,26r-89,200v-6,12,-7,33,10,32v16,0,29,-11,39,-32xm402,-300v15,-4,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,27,23,27xm587,-288v-33,34,-83,54,-150,61r-24,55v-51,115,-110,172,-176,172v-70,0,-175,23,-172,-55v2,-54,42,-130,64,-178v34,-73,98,-152,209,-138v34,-36,141,-45,138,22v0,17,-6,35,-18,56v44,10,52,0,99,-24xm509,-530r-157,110r-82,0r130,-110r109,0","w":353},"\u00f4":{"d":"243,-85r78,-176v-16,-2,-22,-32,-15,-50v-11,6,-18,15,-23,26r-89,200v-6,12,-7,33,10,32v16,0,29,-11,39,-32xm402,-300v15,-4,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,27,23,27xm587,-288v-33,34,-83,54,-150,61r-24,55v-51,115,-110,172,-176,172v-70,0,-175,23,-172,-55v2,-54,42,-130,64,-178v34,-73,98,-152,209,-138v34,-36,141,-45,138,22v0,17,-6,35,-18,56v44,10,52,0,99,-24xm505,-425r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":353},"\u00f5":{"d":"243,-85r78,-176v-16,-2,-22,-32,-15,-50v-11,6,-18,15,-23,26r-89,200v-6,12,-7,33,10,32v16,0,29,-11,39,-32xm402,-300v15,-4,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,27,23,27xm587,-288v-33,34,-83,54,-150,61r-24,55v-51,115,-110,172,-176,172v-70,0,-175,23,-172,-55v2,-54,42,-130,64,-178v34,-73,98,-152,209,-138v34,-36,141,-45,138,22v0,17,-6,35,-18,56v44,10,52,0,99,-24xm368,-532v27,0,74,39,95,38v17,0,33,-13,50,-38r10,0v-21,49,-54,73,-97,73v-28,0,-75,-40,-95,-39v-15,0,-32,12,-49,37r-11,0v23,-47,55,-71,97,-71","w":353},"\u00f6":{"d":"243,-85r78,-176v-16,-2,-22,-32,-15,-50v-11,6,-18,15,-23,26r-89,200v-6,12,-7,33,10,32v16,0,29,-11,39,-32xm402,-300v15,-4,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,27,23,27xm587,-288v-33,34,-83,54,-150,61r-24,55v-51,115,-110,172,-176,172v-70,0,-175,23,-172,-55v2,-54,42,-130,64,-178v34,-73,98,-152,209,-138v34,-36,141,-45,138,22v0,17,-6,35,-18,56v44,10,52,0,99,-24xm386,-495v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm496,-495v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":353},"\u00f8":{"d":"257,-85r78,-176v-15,-2,-21,-32,-14,-50v-11,6,-19,15,-24,26r-89,200v-6,12,-7,33,10,32v17,0,30,-11,39,-32xm416,-300v16,-2,16,-48,-2,-47v-14,0,-21,7,-21,20v-1,12,11,28,23,27xm601,-288v-33,34,-83,54,-150,61r-24,55v-51,115,-109,172,-175,172v-70,0,-176,23,-173,-55v2,-53,43,-130,64,-178v33,-74,98,-152,209,-138v34,-36,141,-45,138,22v0,17,-6,35,-18,56v44,10,52,0,99,-24xm361,-293r-269,269r57,0r268,-269r-56,0","w":353},"\u00f9":{"d":"405,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,66,-170,152,-263,149v-21,0,-34,-10,-37,-30v-49,55,-197,38,-188,-40v12,-97,79,-201,112,-288r131,0r-114,255v-7,16,-14,43,5,43v14,0,26,-13,37,-38r130,-293r111,61r-92,209v-6,13,-7,29,11,29xm444,-420r-82,0r-60,-110r109,0","w":380},"\u00fa":{"d":"405,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,66,-170,152,-263,149v-21,0,-34,-10,-37,-30v-49,55,-197,38,-188,-40v12,-97,79,-201,112,-288r131,0r-114,255v-7,16,-14,43,5,43v14,0,26,-13,37,-38r130,-293r111,61r-92,209v-6,13,-7,29,11,29xm509,-530r-157,110r-82,0r130,-110r109,0","w":380},"\u00fb":{"d":"405,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,66,-170,152,-263,149v-21,0,-34,-10,-37,-30v-49,55,-197,38,-188,-40v12,-97,79,-201,112,-288r131,0r-114,255v-7,16,-14,43,5,43v14,0,26,-13,37,-38r130,-293r111,61r-92,209v-6,13,-7,29,11,29xm495,-425r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":380},"\u00fc":{"d":"405,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,66,-170,152,-263,149v-21,0,-34,-10,-37,-30v-49,55,-197,38,-188,-40v12,-97,79,-201,112,-288r131,0r-114,255v-7,16,-14,43,5,43v14,0,26,-13,37,-38r130,-293r111,61r-92,209v-6,13,-7,29,11,29xm386,-495v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm496,-495v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":380},"\u00fd":{"d":"196,-24v-47,34,-59,46,-82,105v2,18,32,12,37,-4v8,-23,24,-56,45,-101xm394,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,61,-142,131,-219,144v-25,60,-49,113,-107,145v-66,37,-199,46,-207,-40v9,-75,60,-113,130,-132v-88,-18,-77,-91,-43,-168r85,-191r103,61r-83,187v-7,15,-14,39,4,39v15,0,29,-14,42,-42r116,-261r104,77r-98,225v0,9,5,13,16,13xm509,-530r-157,110r-82,0r130,-110r109,0","w":385},"\u00ff":{"d":"196,-24v-47,34,-59,46,-82,105v2,18,32,12,37,-4v8,-23,24,-56,45,-101xm394,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-24,61,-142,131,-219,144v-25,60,-49,113,-107,145v-66,37,-199,46,-207,-40v9,-75,60,-113,130,-132v-88,-18,-77,-91,-43,-168r85,-191r103,61r-83,187v-7,15,-14,39,4,39v15,0,29,-14,42,-42r116,-261r104,77r-98,225v0,9,5,13,16,13xm386,-495v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm496,-495v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":370},"\u0131":{"d":"234,-92v40,1,120,-62,130,-93v9,12,19,23,27,36v-25,66,-170,149,-264,149v-46,0,-73,-53,-53,-98r131,-293r111,61r-98,225v0,9,5,13,16,13","w":218},"\u0153":{"d":"238,-85r88,-198v6,-12,7,-33,-10,-32v-17,0,-31,13,-42,40r-85,190v-7,13,-6,33,10,32v17,0,30,-11,39,-32xm472,-212v12,-30,28,-56,38,-88v-4,-21,-44,-12,-47,7r-36,81r45,0xm384,-60v116,10,235,-51,278,-125v9,12,19,23,27,36v-21,64,-170,150,-255,149v-51,-1,-116,4,-149,-12v-43,21,-107,12,-166,12v-81,0,-61,-83,-34,-145v40,-94,91,-226,207,-226r281,0v43,0,64,16,64,49v0,21,-14,56,-35,109v-26,67,-112,57,-200,57v-10,25,-31,51,-31,81v0,10,4,15,13,15","w":506},"\u0178":{"d":"208,75v11,-27,29,-68,53,-121v-35,3,-74,77,-91,127v3,17,35,11,38,-6xm230,-557v7,-19,-17,-35,-32,-35r-173,0v-16,0,-24,-9,-24,-28v0,-19,9,-29,27,-29r243,0v101,2,141,25,111,92r-165,369v-3,11,-4,20,9,20v36,2,122,-73,134,-100r170,-381r152,0r-313,703v-26,63,-97,111,-181,112v-54,1,-121,-27,-97,-85v43,-104,106,-184,213,-223r7,-14v-65,39,-124,58,-179,58v-75,0,-76,-67,-51,-124xm520,-794v-2,38,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-36,40,-60,76,-60v24,0,36,9,36,28xm630,-794v0,36,-40,60,-75,60v-25,0,-37,-9,-37,-28v0,-35,41,-60,76,-60v24,0,36,9,36,28","w":495},"\u02c6":{"d":"728,-724r-83,0r-26,-65r-82,65r-83,0r117,-102r130,0","w":589},"\u02da":{"d":"596,-727v35,0,83,-18,83,-52v0,-19,-16,-28,-48,-28v-37,0,-83,17,-83,52v0,19,16,28,48,28xm716,-786v-3,55,-73,80,-131,82v-33,1,-76,-16,-74,-45v4,-53,71,-79,130,-81v35,-1,76,16,75,44","w":571},"\u02dc":{"d":"601,-831v27,0,74,39,95,38v17,0,33,-13,50,-38r10,0v-21,49,-54,73,-97,73v-28,0,-75,-40,-95,-39v-15,0,-32,12,-49,37r-11,0v23,-47,55,-71,97,-71","w":557},"\u2018":{"d":"471,-674v-4,50,-63,81,-117,74v-7,21,4,33,27,39r-26,19v-40,-13,-60,-35,-60,-66v-1,-65,54,-105,117,-104v27,0,61,12,59,38","w":183},"\u2019":{"d":"410,-712v34,-1,71,20,55,56v-26,57,-75,95,-150,114r-9,-19v32,-6,53,-19,62,-39v-35,7,-71,-6,-68,-37v4,-48,60,-73,110,-75","w":186},"\u201c":{"d":"481,-674v-4,50,-63,81,-117,74v-7,21,4,33,27,39r-26,19v-40,-13,-60,-35,-60,-66v-1,-65,54,-105,117,-104v27,0,61,12,59,38xm651,-674v-4,50,-63,81,-117,74v-7,21,4,33,27,39r-26,19v-40,-13,-60,-35,-60,-66v-1,-65,54,-105,117,-104v27,0,61,12,59,38","w":376},"\u201d":{"d":"420,-712v34,-1,71,20,55,56v-26,57,-75,95,-150,114r-9,-19v32,-6,53,-19,62,-39v-35,7,-71,-6,-68,-37v4,-48,60,-73,110,-75xm590,-712v34,-1,71,20,55,56v-26,57,-75,95,-150,114r-9,-19v32,-6,53,-19,62,-39v-35,7,-71,-6,-68,-37v4,-48,60,-73,110,-75","w":367},"\u2022":{"d":"407,-362v-19,4,5,-20,-8,-9r-7,17v9,1,13,-2,15,-8xm428,-375v-15,-3,-14,13,-20,21v7,1,5,-11,10,-4v2,-1,4,-4,6,-8r-7,0v5,-2,9,-5,11,-9xm654,-446r-160,102r-28,149r-98,-78r-167,82r100,-150r-75,-98r160,-15r120,-143r-1,141","w":479},"\u2026":{"d":"232,-74v-3,48,-60,72,-109,74v-28,1,-61,-12,-59,-39v3,-47,60,-71,109,-73v27,-1,60,12,59,38xm663,-74v-3,48,-60,72,-109,74v-28,1,-61,-12,-59,-39v3,-47,60,-71,109,-73v27,-1,60,12,59,38xm1094,-74v-3,48,-60,72,-109,74v-28,1,-61,-12,-59,-39v3,-47,60,-71,109,-73v27,-1,60,12,59,38","w":1091},"\u00a9":{"d":"346,-21v-123,-49,-210,-200,-148,-364v46,-122,206,-210,364,-148v122,47,210,206,148,364v-47,122,-206,211,-364,148xm359,-504v-108,44,-186,178,-131,324v41,108,183,184,323,130v108,-42,186,-181,131,-322v-42,-108,-182,-189,-323,-132xm311,-273v0,-98,43,-174,139,-174v52,0,90,22,115,67r-52,34v-17,-24,-38,-36,-63,-36v-52,1,-77,50,-77,109v0,56,29,107,78,108v26,0,49,-15,62,-31r50,34v-25,41,-63,62,-113,62v-94,0,-139,-77,-139,-173","w":635},"\u00ae":{"d":"628,-353v0,-105,-83,-171,-193,-171v-108,0,-181,67,-181,171v0,105,73,172,181,172v111,0,193,-64,193,-172xm346,-548v182,-69,377,80,300,275v-38,96,-173,161,-300,113v-94,-36,-168,-152,-118,-274v22,-52,64,-93,118,-114xm411,-418r0,52v28,-1,62,7,62,-25v0,-34,-32,-26,-62,-27xm519,-391v-1,36,-14,49,-38,65r41,91r-48,0r-39,-84r-24,0r0,84r-45,0r0,-229r82,0v43,0,72,28,71,73","w":540},"\u2039":{"d":"95,-302r102,48r0,60r-156,-77r0,-59r156,-81r0,62","w":230},"\u2122":{"d":"173,-484r0,223r-59,0r0,-223r-71,0r0,-54r199,0r0,54r-69,0xm448,-414r-60,154r-66,-160r0,158r-55,0r0,-277r67,0r53,143r52,-143r65,0r0,277r-56,0r0,-152","w":561},"\u203a":{"d":"143,-304r-102,-47r0,-60r156,77r0,59r-156,81r0,-62","w":230},"\u00ab":{"d":"95,-302r102,48r0,60r-156,-77r0,-59r156,-81r0,62xm243,-302r102,48r0,60r-156,-77r0,-59r156,-81r0,62","w":374},"\u00bb":{"d":"302,-304r-102,-47r0,-60r156,77r0,59r-156,81r0,-62xm154,-304r-102,-47r0,-60r156,77r0,59r-156,81r0,-62","w":386},"^":{"d":"62,0r1,-340r67,0r0,-28r-18,0r0,-88r18,0r0,-31r-18,0r0,-37r439,0r0,46v-5,-9,-13,-13,-24,-13v-31,0,-46,26,-46,77v0,69,43,99,79,57r0,17r24,0r0,-184r374,0r0,26r34,0r0,-26r360,0r0,524r-1290,0xm938,-340v-3,-60,18,-152,-47,-148v-16,0,-26,8,-31,24v-11,-32,-44,-32,-55,0r0,-23r-32,0r0,119r-19,0r0,28r70,0r0,-28r-19,0v4,-30,-12,-83,19,-84v10,0,15,8,15,23r0,89r51,0r0,-28r-19,0v4,-29,-13,-82,19,-83v10,0,15,7,15,22r0,89r33,0xm986,-267r-56,0r0,189r32,0r0,-122r3,0r9,122r58,0r0,-189r-32,0r0,122r-3,0xm480,-267r0,189r79,0v15,-17,11,-52,11,-83v-8,-9,-9,-22,0,-31v0,-29,3,-61,-11,-75r-79,0xm826,-247r0,148r10,21r67,0r12,-21r0,-148r-11,-20r-68,0xm271,-267r0,189r38,0r0,-83r11,0r0,83r41,0r0,-76v-5,-8,-13,-13,-15,-24r15,-20v0,-27,2,-56,-11,-69r-79,0xm256,-293r33,0r0,-56v33,31,70,-1,70,-64v0,-69,-43,-99,-79,-56r0,-18r-24,0r0,194xm475,-412v0,-52,-18,-78,-55,-78v-36,0,-54,26,-54,78v0,51,18,76,54,76v37,0,55,-25,55,-76xm1184,-209r38,0v1,-24,0,-46,-10,-58r-66,0v-16,17,-10,54,-11,86r12,20r37,9r0,38r-10,0r0,-28r-39,0v-1,26,-1,51,11,64r65,0v16,-18,10,-59,11,-93r-13,-21r-35,-8r0,-33r10,0r0,24xm256,-78v5,-77,-14,-129,-26,-189r-41,0v-11,60,-27,114,-23,189r37,0r0,-36r13,0r0,36r40,0xm464,-78v5,-76,-13,-129,-24,-189r-41,0v-11,60,-27,114,-23,189r38,0r0,-36r12,0r0,36r38,0xm169,-293v101,14,72,-106,76,-194r-33,0r0,91v0,17,-7,26,-20,26v-13,0,-19,-9,-19,-26r0,-91r-32,0v-3,70,-7,181,71,141v2,21,-20,25,-43,23r0,30xm678,-159r26,0r0,-33r-26,0r0,-35r26,0r0,-40r-64,0r0,189r64,0r0,-42r-26,0r0,-39xm786,-156r24,0r0,-33r-24,0r0,-38r24,0r0,-40r-63,0r0,189r39,0r0,-78xm1064,-227r0,149r39,0r0,-149r21,0r0,-40r-81,0r0,40r21,0xm685,-487r-15,0r0,23v-13,-43,-76,-30,-76,17v0,18,7,30,22,36v-40,13,-25,79,22,75v31,-3,47,-19,47,-53r-15,0v2,22,-45,27,-45,5v-1,-16,13,-19,30,-18r0,-18v-31,9,-43,-33,-10,-33v11,0,20,7,25,20r15,0r0,-54xm1096,-485r-16,0r0,21v-8,-17,-18,-26,-30,-26v-33,0,-50,26,-50,78v0,50,17,75,51,75v24,0,39,-19,45,-58r-16,0v-2,15,-10,23,-25,23v-15,0,-23,-13,-23,-40v0,-50,45,-54,48,-14r16,0r0,-59xm151,-120r-22,0r0,-147r-38,0r0,189r60,0r0,-42xm625,-78r0,-189r-39,0r0,189r39,0xm740,-368r-14,0v3,-30,-12,-103,26,-79r11,-33v-17,-16,-40,-7,-48,16r0,-23r-19,0r0,147r44,0r0,-28xm943,-487r0,31r15,0r0,116r34,0r0,-147r-49,0xm286,-387v1,-26,-7,-65,21,-65v14,0,21,13,21,38v0,44,-28,57,-42,27xm442,-412v0,27,-7,40,-22,40v-14,0,-21,-13,-21,-40v0,-27,7,-41,21,-41v15,0,22,14,22,41xm553,-440v-1,26,7,67,-20,65v-14,0,-21,-13,-21,-38v0,-43,27,-57,41,-27xm63,-368r0,-88r19,0r0,88r-19,0xm864,-114r0,-119r11,0r0,119r-11,0xm63,-487r0,-37r19,0r0,37r-19,0xm203,-142v1,-25,0,-51,8,-69v2,23,6,44,5,69r-13,0xm414,-142v-1,-25,3,-46,5,-69r3,0r4,69r-12,0xm519,-161r11,0r0,47r-11,0r0,-47xm519,-192r0,-41r11,0r0,41r-11,0xm309,-192r0,-41r11,0r0,41r-11,0","w":1414},"\u00a0":{"w":202}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Copyright (c) Typographer Mediengestaltung, 2000. All rights reserved.
 */
Cufon.registerFont({"w":396,"face":{"font-family":"Old London","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"2 0 5 3 2 0 0 2 0 4","ascent":"800","descent":"-200","x-height":"6","cap-height":"12","bbox":"-97 -904 1415 233","underline-thickness":"20","underline-position":"-123","unicode-range":"U+001A-U+E00C"},"glyphs":{" ":{"w":322},"!":{"d":"90,-191v16,-150,32,-264,66,-378r-75,-86r-74,86v36,124,51,219,67,378r16,0xm156,-69v-37,-36,-61,-63,-74,-80r-82,76v23,31,48,57,75,78","w":180},"\"":{"d":"247,-653v3,-36,-10,-67,-42,-68v-29,0,-49,18,-43,54r38,238r14,0xm103,-653v3,-35,-12,-67,-42,-68v-31,-2,-44,29,-38,68r32,224r15,0","w":265},"#":{"d":"363,-213v50,0,81,1,94,4v1,-26,7,-50,16,-72v-29,3,-59,4,-93,4r26,-102v44,0,74,1,89,4v1,-21,7,-45,18,-72v-26,3,-57,4,-90,4v20,-75,43,-144,71,-217v-25,5,-62,5,-85,0r-46,218r-103,0v18,-74,43,-144,71,-218v-25,5,-62,5,-85,0r-46,217v-50,0,-81,-1,-94,-4v-1,27,-7,51,-16,72v29,-3,59,-4,93,-4r-26,102v-44,0,-74,-1,-89,-4v-1,21,-7,45,-18,72v26,-3,57,-4,90,-4v-19,74,-43,144,-71,216v28,-4,58,-4,85,0r46,-217r103,0v-18,72,-44,143,-71,217v28,-4,58,-4,85,0xm320,-276v-35,2,-68,2,-104,0r27,-104r104,0","w":556},"$":{"d":"181,-616v-106,17,-181,80,-181,200v0,74,37,142,84,174r96,-57r1,208r-152,-35r-29,72r181,45r0,109r48,0r0,-99v125,-70,186,-147,185,-248v0,-65,-25,-119,-75,-163v-33,23,-69,44,-109,63r0,-184r103,24r31,-75r-134,-30r0,-67r-49,0r0,63xm181,-324v-102,27,-147,-155,-93,-237r93,21r0,216xm229,-321v75,-33,107,36,107,104v0,63,-16,115,-49,154r-57,-13","w":440},"%":{"d":"513,-366v-73,47,-139,110,-139,207v0,76,50,130,151,162v83,-67,148,-107,128,-228v-13,-77,-63,-107,-140,-141xm530,-618r-51,0r-358,621r51,0xm147,-244v79,-63,147,-112,131,-231v-10,-77,-67,-110,-140,-142v-176,90,-198,304,9,373xm468,-311v110,8,187,170,96,256v-71,-11,-140,-71,-139,-153v0,-40,14,-74,43,-103xm94,-563v112,14,186,169,92,256v-71,-11,-137,-72,-136,-151v0,-37,15,-72,44,-105","w":677},"&":{"d":"306,-132v40,71,76,128,159,128v69,0,114,-37,133,-111r-6,-3v-57,65,-159,28,-186,-44r-19,-34r61,-47v57,50,109,36,151,-29v-2,-6,-13,-1,-19,-1v-32,0,-60,-12,-85,-36r-119,97r-94,-166v50,-43,120,-85,118,-164v0,-41,-24,-79,-72,-113r-188,96v-38,25,-54,47,-33,83r83,145r-185,148r126,193xm214,-501v-39,-57,42,-118,90,-70v35,35,42,113,2,146v-5,5,-16,14,-35,29xm295,-152r-93,76r-102,-159r102,-78","w":633},"'":{"d":"137,-586r-71,-69r-71,71v53,57,56,74,1,129r14,19v61,-37,103,-87,127,-150","w":158},"(":{"d":"213,-786v-115,123,-209,313,-209,527v0,148,47,275,140,382r94,-132r-13,-11r-24,23v-176,-242,-156,-542,22,-780","w":265},")":{"d":"28,124v111,-125,206,-309,206,-526v0,-150,-46,-277,-139,-382r-94,132r13,11r24,-24v171,241,153,542,-22,777","w":265},"*":{"d":"136,-531v-35,8,-48,5,-93,-7r-38,62r66,28v15,-26,43,-49,83,-70v-13,44,-29,75,-47,93r46,59r48,-50v-16,-24,-28,-55,-36,-94v33,20,58,41,75,62r63,-31r-40,-59v-22,10,-63,12,-100,11v25,-27,55,-46,88,-55r-6,-71r-71,16v1,38,-6,66,-22,96v-18,-37,-30,-68,-24,-100r-68,-16r-6,75v28,7,55,24,82,51","w":330},"+":{"d":"459,-270r0,-67r-180,0r0,-186r-69,0r0,186r-181,0r0,67r181,0r0,186r69,0r0,-186r180,0","w":483},",":{"d":"156,-77r-73,-72r-76,72v58,64,62,77,0,135r18,20v62,-40,106,-92,131,-155","w":180},"-":{"d":"256,-314r-12,0r-13,33r-187,0r-38,107r14,0r12,-26r186,0","w":286},".":{"d":"153,-69v-25,-24,-50,-49,-76,-80r-79,76v21,29,45,55,73,78","w":180},"\/":{"d":"310,-656r-52,0r-255,744r48,0","w":330},"0":{"d":"211,3v105,-86,216,-196,185,-384v-20,-124,-93,-181,-201,-236v-137,99,-201,198,-198,345v3,134,92,241,214,275xm127,-540v115,30,209,129,209,271v0,69,-21,132,-62,187v-124,-31,-213,-125,-213,-276v0,-58,22,-119,66,-182","w":418},"1":{"d":"267,-94r-12,-12r-38,33r-41,-32r0,-383v-3,-72,-24,-91,-73,-129r-107,92r10,13r38,-31v27,23,41,49,41,76r0,345v0,17,-9,32,-27,47r102,78","w":286},"2":{"d":"413,-80v-113,-57,-215,-43,-350,7v31,-43,80,-84,147,-125v72,-45,117,-77,136,-97v44,-47,63,-107,60,-190r-214,-132r-172,140r61,62r169,-134v59,53,72,124,32,199v-34,65,-108,122,-164,172v-61,55,-99,115,-112,180v120,-45,218,-46,337,0","w":440},"3":{"d":"162,3v126,-9,247,-59,247,-181v0,-65,-49,-114,-147,-147v93,-48,134,-93,122,-189r-200,-100r-139,104r55,58r118,-88v35,-27,70,-9,70,49v0,94,-56,146,-169,157r0,21v118,-7,190,46,191,152v0,51,-17,94,-51,129r-189,-161r-65,64","w":440},"4":{"d":"416,-198r-20,-73r-84,0r0,-242v0,-42,-24,-77,-72,-104r-243,334r25,84r203,0v0,64,7,94,-34,134r106,68r92,-84r-9,-13r-30,23r-39,-28r0,-99r105,0xm199,-524v11,9,24,22,24,36r0,217r-199,0r-4,-12","w":440},"5":{"d":"175,-357v74,24,149,84,150,171v0,49,-22,95,-67,140r-200,-119r-57,64r173,104v125,-25,215,-100,215,-237v0,-91,-67,-172,-145,-198r-172,116r29,-202r225,0r27,-86r-262,0r-52,337","w":418},"6":{"d":"209,3v96,-59,191,-144,191,-251v0,-75,-39,-129,-117,-163r-196,129v-11,-103,21,-189,78,-258r145,78r60,-75r-156,-80v-143,105,-214,223,-214,354v0,143,89,232,209,266xm185,-324v76,-39,141,72,142,138v0,43,-20,80,-60,111v-102,-27,-151,-80,-177,-184","w":418},"7":{"d":"184,-41v6,-248,86,-380,217,-543r0,-20r-321,0v-32,69,-57,119,-74,148r11,9v23,-27,53,-51,90,-72r215,0v-154,166,-238,340,-253,521","w":419},"8":{"d":"0,-141v0,105,90,144,207,144v122,-68,183,-144,183,-228v0,-67,-38,-114,-115,-141v49,-25,107,-68,92,-137v-14,-67,-86,-104,-205,-115v-60,53,-144,128,-144,221v0,48,26,82,87,102v-70,52,-105,103,-105,154xm259,-368v-73,-9,-189,-18,-189,-85v0,-21,12,-49,35,-82v125,0,195,27,208,80v0,50,-17,56,-54,87xm352,-169v0,139,-290,100,-290,-23v0,-33,20,-67,59,-101v109,17,130,20,191,55v28,16,40,41,40,69","w":418},"9":{"d":"188,-618v-86,55,-191,145,-190,257v0,73,39,127,116,163r194,-133v11,99,-21,202,-77,257r-146,-73r-59,73r155,78v144,-105,215,-218,214,-352v0,-135,-69,-225,-207,-270xm212,-289v-76,44,-148,-65,-147,-134v0,-47,21,-85,62,-113v102,22,154,84,179,183","w":418},":":{"d":"153,-370v-27,-26,-52,-53,-76,-82r-79,77v21,29,45,56,72,81xm153,-69v-25,-24,-50,-49,-76,-80r-79,76v21,29,45,55,73,78","w":180},";":{"d":"157,-370v-25,-27,-49,-55,-70,-82r-83,77v22,30,47,56,74,79xm150,-78v-35,-31,-58,-54,-71,-71r-77,72v54,60,58,81,0,135r18,20v65,-41,108,-93,130,-156","w":180},"<":{"d":"167,11v66,-2,109,-40,112,-105v2,-36,-25,-69,-61,-68v-26,0,-39,13,-39,40v0,36,35,49,64,34v-1,40,-20,60,-55,60v-66,0,-118,-78,-118,-146v0,-84,66,-166,151,-163v121,3,200,159,272,235v54,57,115,83,180,83v88,0,160,-74,160,-164v0,-51,-34,-108,-81,-108v-44,0,-69,55,-41,91v4,-27,16,-41,36,-41v27,0,41,21,41,64v0,59,-32,103,-90,103v-97,0,-186,-179,-250,-243v-57,-57,-117,-85,-180,-85v-135,0,-243,105,-243,241v0,89,57,175,142,172","w":852},"=":{"d":"589,-369r0,-65r-589,0r0,65r589,0xm589,-174r0,-63r-589,0r0,63r589,0","w":611},">":{"d":"685,11v85,3,142,-83,142,-172v0,-137,-108,-243,-243,-241v-63,0,-130,23,-180,85r-128,158v-45,57,-85,85,-122,85v-58,0,-85,-44,-90,-103v-6,-73,69,-88,77,-23v28,-36,4,-91,-41,-91v-47,0,-81,57,-81,108v0,90,71,164,160,164v65,0,130,-23,179,-83r125,-152v47,-55,97,-83,148,-83v85,0,151,77,151,163v0,68,-52,146,-118,146v-36,0,-54,-20,-55,-60v28,15,64,2,64,-34v0,-27,-13,-40,-39,-40v-36,-1,-63,32,-61,68v3,66,46,103,112,105","w":852},"?":{"d":"91,-569v129,8,52,181,28,255v-16,50,-14,77,-9,124r21,0v0,-61,19,-115,53,-167v49,-76,77,-95,77,-157v0,-103,-88,-157,-203,-137r-56,109v44,-18,74,-27,89,-27xm192,-69v-37,-36,-61,-63,-74,-80r-80,76v19,29,44,55,73,78","w":286},"@":{"d":"235,-248v0,98,46,184,132,185v62,0,114,-37,155,-110v11,132,130,135,216,66v81,-65,124,-155,124,-276v0,-208,-153,-334,-374,-334v-253,0,-480,202,-480,453v0,230,193,397,434,397v128,0,243,-36,344,-108r-13,-17v-95,66,-202,99,-321,99v-215,0,-385,-133,-387,-359v-2,-250,188,-442,433,-442v207,0,343,119,343,311v0,124,-59,228,-142,277v-47,28,-117,34,-109,-36v13,-122,63,-233,91,-348r-71,0r-25,86r-4,-1v-16,-62,-52,-93,-108,-93v-112,0,-238,139,-238,250xm383,-86v-55,-5,-84,-61,-73,-124v17,-102,77,-257,162,-267v60,-7,84,28,86,99v4,104,-89,300,-175,292","w":893},"A":{"d":"22,10v56,-2,-18,-88,42,-89v67,17,125,62,184,89r146,-109v12,51,36,88,73,111r114,-94r-15,-16r-32,24v-19,-18,-29,-51,-30,-98r-8,-339v-1,-66,39,-110,78,-146r-2,-2v-42,10,-80,34,-113,72v-64,-44,-131,-66,-201,-66v-134,0,-255,114,-240,248v6,55,41,113,106,174v-37,62,-124,140,-124,215v0,17,7,26,22,26xm391,-283r-197,0r169,-249v19,0,18,20,28,29r0,220xm48,-406v0,-138,163,-211,294,-145r-24,36v-82,-21,-173,10,-169,92v22,-45,89,-64,120,-21r-133,195v-59,-47,-88,-99,-88,-157xm395,-133r-84,68r-204,-94r37,-54r251,0r0,80","w":611},"B":{"d":"397,11v105,-62,138,-82,256,-110r0,-182v0,-64,-44,-101,-132,-110v44,-42,110,-120,110,-172v0,-58,-36,-105,-101,-105v-71,0,-176,53,-204,92v-45,63,-35,196,-35,304v0,86,-44,156,-131,210r-3,-3v56,-75,77,-109,79,-229v2,-101,-11,-225,31,-284v19,-27,52,-57,101,-86v-55,15,-80,22,-104,21v-14,3,-106,-27,-142,-27v-64,1,-113,54,-122,115v51,-94,140,16,222,-30r2,4v-65,52,-98,114,-98,185v-62,-1,-111,35,-121,86v63,-33,158,-13,138,70v-62,16,-90,44,-81,100v15,-18,33,-30,53,-32v22,-2,32,14,29,38v-6,56,-64,102,-95,140v-20,25,-27,50,-27,68v-8,32,49,49,51,13v1,-14,-17,-48,-9,-61v5,-39,82,-59,136,-59v66,0,141,24,197,44xm494,-371v43,15,52,36,48,86v-46,18,-62,10,-104,2r0,-49v23,-19,41,-32,56,-39xm244,-110v100,-61,135,-75,135,-218r0,-195v0,-52,26,-84,77,-95v115,64,101,197,-18,256r0,-103r-19,0r0,360v-52,-14,-110,-12,-174,-1xm438,-265v34,6,71,6,104,0r0,75v-32,-5,-70,-4,-104,0r0,-75xm438,-173v36,-6,68,-11,104,3r0,66r-50,25v-13,-4,-31,-10,-54,-18r0,-76","w":684},"C":{"d":"0,-284v0,197,147,321,361,289v87,-13,155,-71,205,-170r-5,-1v-60,46,-136,111,-240,86r0,-474r137,50r86,-94v-68,0,-133,-19,-196,-57r-194,164r0,238v0,33,-5,59,-14,76v-105,-137,-69,-314,60,-416v-115,35,-200,161,-200,309xm153,-167v63,-58,101,-85,101,-180r0,-188r43,-35r0,487v-61,-15,-109,-43,-144,-84","w":583},"D":{"d":"403,-631r-280,17v-46,0,-88,-29,-101,-64v-6,100,42,161,153,157r125,-6v-91,55,-140,114,-154,233v-78,-9,-137,20,-145,85v45,-52,129,-31,129,51v0,41,-33,93,-100,155r4,4v122,-77,216,-154,222,-285v4,-73,-14,-163,23,-205v13,-15,35,-29,68,-43v-46,71,-26,165,-26,271v0,69,-32,133,-105,179r-186,118r5,10v169,-93,320,-106,512,-39v50,-43,101,-79,160,-106v19,-267,-23,-547,-264,-532r-40,0xm589,-375v-48,54,-132,55,-179,0r0,-156v118,1,165,47,179,156xm591,-346v6,39,7,82,7,127v-58,-35,-121,-29,-188,1r0,-127v56,37,127,35,181,-1xm389,-135r-90,-1v81,-75,5,-292,66,-396r24,1r0,396xm597,-99v-61,-17,-121,-27,-188,-34r0,-57v52,-52,139,-52,190,0","w":743},"E":{"d":"0,-284v0,197,147,321,361,289v87,-13,155,-71,205,-170r-5,-1v-93,67,-147,101,-240,86r1,-273r157,0r49,-103r-106,0r137,-148v-70,8,-166,-16,-214,-51r-191,164r0,238v0,33,-5,59,-14,76v-71,-90,-81,-198,-28,-305v22,-44,51,-81,88,-111v-115,35,-200,161,-200,309xm437,-504r-116,126r0,-173xm154,-167v60,-53,100,-89,100,-180r0,-188r43,-35r0,487v-61,-16,-108,-44,-143,-84","w":580},"F":{"d":"-44,86v38,10,111,39,162,24v100,-30,242,-69,290,-132v50,-67,46,-216,47,-340r112,0r29,-92r-141,0r0,-97v106,58,230,4,241,-100v-76,32,-147,29,-224,-7v-74,53,-134,114,-263,110r0,94v-102,-2,-191,46,-190,138r5,0v40,-54,104,-52,185,-46r0,287v-3,73,-8,125,-60,135v-53,-22,-122,-92,-191,-53v-37,21,-55,66,-55,129r4,0v10,-33,26,-50,49,-50xm303,-528v22,-3,44,-7,60,-15v-4,148,14,317,-9,449v-14,82,-74,122,-150,148r-2,-4v74,-63,101,-119,101,-255r0,-323","w":616},"G":{"d":"49,-86v152,211,574,49,574,-203v0,-94,-60,-160,-179,-197r147,-115r-1,-3v-98,11,-150,3,-243,-48v-104,77,-220,134,-291,247v-69,110,-78,221,-7,319xm433,-503r-168,134r0,-199xm537,-272v-82,44,-121,43,-206,3r0,-101v95,-35,200,9,206,98xm542,-251v5,34,-2,63,-15,96v-58,-29,-127,-26,-195,-3r0,-87v93,33,121,30,210,-6xm520,-137v-46,70,-109,105,-189,105r0,-105v81,-26,119,-30,189,0xm165,-180v0,15,-5,26,-16,33v-72,-87,-68,-262,14,-334xm309,-33v-55,-10,-105,-40,-150,-91r78,-67v29,-21,28,-92,27,-149v17,-10,32,-17,45,-20r0,327","w":655},"H":{"d":"475,131v30,4,69,-49,14,-49v-16,6,-39,-4,-32,-20v4,-35,82,-84,115,-108v74,-53,96,-135,96,-265v0,-118,-50,-173,-116,-227r-166,133v2,-83,-11,-153,36,-200v18,-18,44,-40,80,-61v-129,24,-205,80,-209,218v-3,109,15,233,-34,299v-19,26,-50,56,-95,87r-3,-3v55,-73,74,-110,76,-229v2,-103,-12,-227,32,-286v19,-25,52,-54,102,-84r-98,22v-82,-9,-175,-59,-231,6v-20,24,-35,49,-42,81v25,-24,57,-53,101,-35v42,18,76,28,124,6v-69,73,-90,80,-97,188v-61,0,-111,35,-120,86v24,-11,45,-15,74,-15v44,0,72,39,64,85v-62,16,-90,44,-81,99v17,-19,36,-28,57,-28v25,0,30,21,25,43v-12,60,-122,128,-122,202v0,23,9,33,30,32v37,-2,12,-52,9,-76v12,-50,56,-65,138,-65v78,0,144,16,197,48r91,-138r-11,-12v-43,55,-135,33,-222,27v110,-92,172,-133,300,-90v-11,88,-61,147,-103,209v-20,29,-30,52,-30,68v-1,25,27,54,51,52xm557,-352v-55,23,-110,16,-170,0r0,-27r97,-82v37,19,62,56,73,109xm556,-219v-58,-19,-109,-20,-169,-3r0,-109v51,13,122,14,169,-1r0,113","w":699},"I":{"d":"275,10v136,0,180,-148,162,-302r-31,-272v-1,-53,17,-70,62,-85r0,-7v-98,0,-147,68,-147,203v0,104,36,224,36,340v0,51,-13,87,-59,87v-35,0,-73,-24,-115,-73v174,-9,79,-194,81,-359v0,-85,28,-151,83,-196r-1,-3v-98,43,-198,-39,-274,31v-21,19,-33,45,-40,75r6,1v26,-67,80,-35,150,-35v21,0,47,-7,78,-22v-61,73,-75,98,-88,208v-63,0,-113,32,-125,85v33,-12,58,-18,77,-18v69,4,76,51,81,129v4,65,-21,96,-94,88v-74,-8,-120,61,-115,127v19,-33,45,-50,76,-50v21,-5,152,48,197,48","w":492},"J":{"d":"450,-430v0,-103,35,-160,90,-209r-2,-13v-58,21,-103,32,-136,32v-70,0,-151,-34,-228,-34v-89,0,-150,48,-158,129v-3,32,26,67,59,67v26,0,39,-14,39,-42v-1,-40,-40,-30,-70,-25v-18,-5,-8,-21,-2,-41v58,-49,156,22,225,22v25,0,66,-11,121,-33r2,4v-99,64,-144,98,-165,208v-51,-20,-105,-19,-138,19v76,-1,130,44,129,120v-49,-20,-102,-25,-138,8v103,23,175,63,177,182v2,95,-106,43,-175,43v-63,0,-102,41,-117,122r4,1v24,-39,39,-58,75,-47v62,19,103,31,125,31v95,2,235,-136,264,-220v28,-82,19,-214,19,-324xm205,63v79,-38,104,-79,103,-199r0,-239v0,-96,54,-172,161,-228v-71,72,-105,125,-107,255v-2,112,12,270,-28,336v-25,42,-67,68,-128,79","w":516},"K":{"d":"284,-615v-74,58,-114,96,-118,205v-56,-25,-113,-15,-133,46v90,-36,144,25,142,115v-45,-25,-113,-27,-120,36v45,-27,83,-3,83,50v0,68,-70,118,-108,160r12,15v116,-38,218,-60,345,0r106,-121r39,64r43,56r100,-109r-14,-13r-28,26v-58,-87,-100,-191,-197,-240r82,-67v27,-21,54,-42,82,-61r-103,-115v-49,49,-103,94,-162,135v0,-79,19,-155,58,-226r-17,0v-72,109,-60,233,-60,395v0,82,-30,125,-94,160r-97,53r-11,-8r103,-91v76,-71,50,-192,50,-320v0,-55,18,-116,53,-181r0,-7v-73,36,-123,2,-193,2v-71,0,-112,44,-125,132r3,1v33,-59,90,-57,165,-49v23,2,60,-14,112,-47xm493,-397r-145,119r-13,-1r0,-130r90,-66xm482,-130r-44,50v-49,-24,-108,-29,-170,-33v38,-35,60,-80,67,-136v74,-5,115,63,147,119","w":699},"L":{"d":"59,-588v69,0,125,30,181,-11v-55,62,-89,122,-77,230v-43,-12,-88,0,-102,37v64,-10,115,22,108,83v-36,-8,-58,-8,-83,13v59,9,89,37,84,92v-4,46,-43,93,-108,144r6,10v153,-73,287,-81,408,14r110,-105r-15,-14v-28,21,-29,31,-54,13v-75,-54,-164,-54,-276,-16r-2,-4v115,-82,157,-154,152,-342r-8,-97v0,-61,31,-96,93,-105r-2,-7v-123,-2,-176,55,-173,173v3,103,21,238,-28,311v-23,33,-55,71,-104,110r-3,-3v57,-82,98,-166,83,-307v-13,-123,-12,-210,74,-278r-3,-5v-26,11,-47,21,-78,21v-28,1,-97,-25,-133,-25v-63,0,-101,35,-116,105r7,6v19,-29,38,-43,59,-43","w":612},"M":{"d":"365,-84v35,27,67,58,101,94r150,-133r-14,-16r-23,17r0,-173r52,-73r-51,0r0,-210r20,-10r72,53r1,422v0,63,24,104,73,123r88,-87r-13,-13v-25,29,-47,12,-46,-40r0,-389v-1,-35,23,-63,39,-86r-11,-8r-39,29r-104,-71r-165,106v-9,-44,-35,-80,-79,-109r-179,97v-80,43,-120,119,-120,226v-65,9,-95,29,-109,90v109,-46,197,58,155,163v-8,20,-51,36,-121,51v-54,11,-81,49,-81,114r6,0v16,-29,40,-44,72,-44v36,0,79,13,105,13v84,0,135,-68,135,-160r0,-187r110,0r1,164v0,18,-13,30,-25,39r0,8xm559,-368r-64,0r-1,-150r65,-44r0,194xm390,-541r-1,173r-71,0r-40,59v6,-112,-24,-220,49,-276v42,0,63,15,63,44xm559,-105r-32,29v-22,-9,-33,-26,-33,-51r1,-168r64,0r0,190xm277,-554v-11,24,-17,47,-17,68r0,372v1,71,-45,92,-104,69v41,-23,61,-63,61,-121r0,-268v1,-68,17,-88,57,-123","w":866},"N":{"d":"158,69v115,8,194,-94,194,-203r0,-109v69,-43,118,-48,178,0v-39,88,-98,210,-116,303r6,6v47,-73,121,-80,216,-55r67,-116r-17,-11r-17,23v-56,-7,-114,-18,-166,3v105,-129,157,-240,157,-332v0,-110,-73,-188,-218,-234r-244,148r0,82v-66,-19,-95,-22,-137,13v75,0,121,37,137,111v-50,-24,-108,-31,-137,14v73,-12,114,15,138,90v-48,-11,-91,-6,-116,30v75,-6,150,26,150,90v0,114,-179,14,-242,79v-12,12,-28,27,-45,50r1,3v22,-11,43,-16,62,-16v32,-2,135,35,149,31xm549,-427v-61,62,-127,57,-197,3r0,-132v93,8,171,56,197,129xm554,-404v9,53,4,77,-15,139v-58,-39,-126,-36,-186,0r0,-134v69,45,139,47,201,-5xm219,-13v53,-31,73,-75,72,-162r0,-359r40,-20r-1,409v1,94,-38,145,-110,136","w":727},"O":{"d":"233,10v169,9,431,-228,420,-388v-12,-173,-146,-256,-310,-279r-156,110r-160,101v-20,61,-30,122,-30,182v0,157,87,266,236,274xm518,-445v-60,68,-132,62,-201,2r0,-114v98,18,165,55,201,112xm530,-427v31,54,36,102,11,167v-71,-64,-141,-63,-223,-11r0,-143v73,46,148,43,212,-13xm532,-233v-55,106,-127,159,-215,159r0,-169v77,-67,152,-69,215,10xm154,-144v71,-83,99,-73,99,-167r0,-249r40,0r0,486v-46,0,-92,-23,-139,-70xm166,-253v0,34,-9,65,-26,92v-94,-109,-75,-251,26,-351r0,259","w":677},"P":{"d":"40,-591v76,-26,152,-8,145,83r-1,50r-163,113v87,50,144,103,161,210v-79,25,-139,66,-179,124r6,8v66,-26,124,-39,175,-39r1,178v57,-3,114,-3,171,0r1,-167v43,8,88,22,135,41r145,-119v-7,-143,25,-339,-35,-426v-26,-38,-73,-77,-138,-120r-107,73r0,-74r-23,0r0,90r-49,29v-6,-68,-46,-117,-118,-117v-43,0,-86,17,-127,50r0,13xm528,-406v-43,46,-134,48,-172,-2r0,-149r16,-12v84,-2,158,77,156,163xm527,-252v-58,-26,-117,-30,-170,0r0,-126v52,32,114,30,170,0r0,126xm527,-91v-55,-25,-103,-36,-171,-52r0,-89v53,-36,122,-33,172,6xm183,-321r-78,-64r78,-50r0,114xm334,109r-44,0r0,-626r44,-26r0,652","w":677},"Q":{"d":"692,-45r-14,-15v-21,15,-21,18,-41,1r-94,-79v65,-69,139,-163,118,-281v-24,-134,-156,-223,-307,-238r-156,110r-160,101v-17,59,-42,123,-34,198v15,149,94,258,244,258v65,0,136,-26,215,-79r133,111xm529,-445v-62,69,-129,62,-203,2r0,-114v101,18,168,55,203,112xm541,-427v31,54,36,102,11,167v-71,-63,-143,-63,-225,-11r0,-143v76,46,148,43,214,-13xm543,-233v-56,106,-128,159,-217,159r0,-169v78,-67,154,-70,217,10xm304,-74v-45,0,-92,-23,-141,-70v40,-39,101,-103,101,-167r0,-249r40,0r0,486xm177,-253v0,35,-9,65,-28,92v-91,-109,-73,-254,28,-351r0,259","w":718},"R":{"d":"277,-540v-6,-65,-46,-115,-116,-114v-46,0,-89,17,-128,50r0,13v82,-26,148,-9,146,82r-1,43r-162,121v110,54,165,124,165,210v-74,23,-134,65,-181,127r1,5v129,-50,240,-64,338,0r34,20r102,-103r-13,-13r-21,19v-29,-17,-59,-31,-92,-42r0,-173v47,0,83,20,110,61v9,14,29,57,58,129v23,56,48,95,75,116r10,0r91,-88r-12,-12r-22,17v-42,-30,-73,-161,-94,-194v-25,-40,-62,-76,-113,-107r140,-100r-137,-185xm493,-427r-144,106r0,-243r31,-21xm328,-129v-14,-4,-29,-6,-45,-6r0,-383r45,-30r0,419xm177,-329r-75,-60r75,-50r0,110","w":718},"S":{"d":"444,11v122,-58,255,-153,251,-280v-5,-134,-129,-181,-287,-183r95,-170r-18,-13r-22,39v-64,-18,-128,-40,-191,-66v-63,63,-156,108,-165,222v-53,25,-80,57,-80,96v0,98,121,141,224,132r-23,49r-81,-5v-112,-2,-168,50,-142,136v58,99,237,32,315,-8xm171,-502v0,-46,46,-74,98,-69v47,5,96,25,146,61r-34,61v-71,15,-210,30,-210,-53xm360,-361v133,-20,267,0,267,133v0,53,-31,106,-93,160r-89,-34v47,-26,125,-64,126,-121v2,-104,-137,-92,-239,-80xm298,-301v-89,21,-211,4,-211,-71v0,-15,9,-32,27,-49v22,64,120,77,214,65xm414,-225v41,1,71,1,71,33v0,26,-48,60,-69,78v-76,-24,-131,-39,-164,-45r27,-54v83,-8,128,-12,135,-12xm34,-32v-20,-38,29,-64,68,-64v49,0,111,16,185,47v-67,35,-127,52,-181,52v-37,0,-61,-12,-72,-35","w":718},"T":{"d":"47,-263v0,192,182,312,385,263v92,-22,154,-93,187,-210r-5,-3v-44,67,-101,111,-171,133r0,-440v97,14,183,-42,180,-138r-6,-1v-45,87,-170,42,-250,19v-34,-10,-75,-13,-122,-13v-141,0,-221,61,-241,184r4,0v50,-77,104,-102,217,-89v-92,68,-178,150,-178,295xm247,-123v72,-69,109,-95,109,-207r0,-204r65,13r0,445v-65,10,-127,-13,-174,-47xm258,-220v0,34,-11,61,-33,82v-124,-118,-100,-297,18,-417r15,4r0,331","w":655},"U":{"d":"295,10v117,-5,159,-41,246,-122v10,51,32,92,67,123r20,0r89,-88r-10,-14r-33,28v-12,-15,-18,-37,-18,-68r0,-399v0,-33,14,-67,41,-100r-8,-5r-48,40r-91,-60r-99,116r13,11r33,-38r45,31r0,120v-51,30,-96,29,-150,0r0,-241r-23,0v-55,54,-165,1,-236,0v-92,-2,-140,79,-138,179r8,-3v35,-88,95,-94,205,-94v28,0,54,-7,83,-14r1,4v-131,65,-251,160,-251,337v0,139,106,264,254,257xm541,-287v-52,-23,-98,-23,-148,0r0,-106v55,24,92,24,148,0r0,106xm542,-141v-49,33,-98,51,-149,56r-1,-182v59,-27,92,-29,150,0r0,126xm370,-83v-63,0,-114,-16,-154,-48v75,-48,113,-112,113,-191v0,-113,-27,-243,41,-302r0,541xm322,-584v-55,55,-82,112,-82,171v0,101,21,219,-38,270v-48,-62,-66,-126,-52,-215v15,-94,72,-169,172,-226","w":740},"V":{"d":"551,-317v37,-129,14,-240,-50,-346r-258,134v-28,-87,-75,-130,-141,-130v-63,0,-99,39,-109,116v27,-32,43,-44,82,-31v65,22,96,150,94,253v-50,-35,-126,-33,-129,41v70,-2,122,29,120,102v0,28,-16,85,-47,171r14,9v80,-35,111,-29,194,9v80,-91,196,-209,230,-328xm461,-415v-90,27,-104,31,-196,8v0,-6,-5,-39,-15,-99r156,-84v29,48,48,106,55,175xm461,-393v0,52,-8,101,-23,147v-46,-23,-126,-27,-189,-16v11,-42,16,-84,16,-127v80,20,121,19,196,-4xm432,-228r-69,140v-87,-27,-116,-7,-202,45r-9,-4v30,-57,71,-129,88,-191v73,-21,126,-19,192,10","w":590},"W":{"d":"261,10v101,0,132,-42,204,-131v41,88,103,132,187,132v69,0,147,-41,232,-123v9,66,32,96,83,123r97,-88r-12,-17r-35,28v-15,-15,-22,-36,-22,-64r0,-390v0,-32,16,-66,47,-101r-8,-4r-62,38r-74,-69r-95,100r16,15r29,-29r34,35r0,128v-56,15,-67,17,-120,0r0,-249r-21,0v-11,24,-31,36,-58,36v-37,1,-129,-43,-147,-36v-72,0,-113,69,-123,141r11,4v23,-62,84,-69,176,-66v20,0,38,-3,56,-5r1,4v-135,78,-274,239,-201,439v-21,23,-43,42,-66,57r0,-574r-24,0v-40,41,-71,52,-128,31v-69,-26,-168,-54,-210,25v-17,32,-28,67,-28,110r13,4v26,-60,47,-90,126,-86v54,3,69,8,124,-13r2,4v-140,82,-222,168,-222,343v0,135,80,248,218,248xm882,-282v-33,-11,-86,-11,-119,0r0,-103v42,15,69,12,119,0r0,103xm588,-128v74,-43,112,-86,112,-192r0,-207v0,-37,14,-67,41,-88r0,539v-61,0,-112,-17,-153,-52xm882,-138v-38,26,-78,45,-119,56r-1,-180v45,-13,75,-13,120,0r0,124xm683,-574v-85,92,-72,178,-72,327v0,43,-12,77,-37,104v-68,-94,-65,-212,-8,-314v29,-51,67,-91,114,-120xm202,-128v77,-48,108,-81,112,-192v3,-83,-14,-191,12,-254v6,-14,21,-27,41,-41r0,539v-65,10,-121,-14,-165,-52xm297,-574v-89,96,-77,175,-76,327v0,47,-11,82,-33,104v-81,-85,-79,-219,-16,-321v31,-51,72,-89,122,-113","w":1086},"X":{"d":"560,-583v-45,-23,-87,-42,-126,-73r-111,248v-37,-67,-80,-170,-123,-223v-72,-55,-153,-16,-196,70r4,4v56,-40,112,-35,144,29r74,150r-107,0r-33,71r170,0r1,19r-80,176r-118,-44r-40,92v40,15,83,40,130,74r128,-286v40,79,74,177,122,246v15,21,35,34,56,41r91,-89r-14,-19r-30,29v-21,-16,-34,-31,-41,-44r-93,-195r114,0r31,-70r-175,0r-1,-15r71,-152r113,46","w":580},"Y":{"d":"342,-104v175,0,272,-110,272,-284v0,-133,-57,-244,-180,-244v-51,0,-111,25,-180,74v-20,-79,-122,-124,-207,-74v-1,4,1,6,5,5v104,-7,101,83,95,180v-25,-10,-76,-15,-103,-3v71,32,108,64,103,153v-29,-15,-64,-19,-106,-18r0,4v65,31,120,81,107,185v-79,-1,-146,50,-146,126v0,102,116,172,217,120v58,-30,111,-61,175,-84v35,5,4,37,2,61v-2,26,16,39,40,39v23,0,35,-15,35,-45v-1,-52,-51,-82,-101,-81v-58,1,-167,49,-226,71v-68,9,-124,-20,-123,-83v2,-127,187,-102,321,-102xm492,-447v-67,49,-111,51,-175,4r0,-125v99,-39,153,6,175,121xm495,-428v4,55,8,79,-1,143v-59,-36,-119,-42,-176,-6r0,-126v61,36,118,30,177,-11xm489,-265v-26,88,-57,147,-172,143r0,-148v58,-41,117,-38,172,5xm295,-122r-45,0r0,-413r45,-21r0,434","w":633},"Z":{"d":"387,-395v42,-91,87,-173,138,-247r-4,-5v-159,49,-224,49,-373,-8r-95,113r14,13r31,-32v138,49,239,23,371,-48v-92,82,-163,154,-212,215r-130,0r-13,32r120,0r-30,47r-114,0r-14,31r111,0r-106,181r-73,101r6,5v177,-61,254,-66,426,7r98,-118r-15,-11r-32,36v-133,-71,-292,-18,-407,37r-2,-4v89,-77,169,-151,233,-235r131,0r14,-31r-123,0r29,-47r116,0r15,-32r-110,0","w":568},"[":{"d":"198,116r0,-17r-97,-1r0,-857r97,-1r0,-19r-196,0r0,895r196,0","w":224},"\\":{"d":"255,-606r-95,-23v-38,33,-75,58,-111,74r0,102r-41,0r-8,51r49,0r0,257v0,33,-9,58,-26,75v37,11,82,36,133,75r88,-80r-12,-13r-23,18r-65,-35r0,-450r91,18","w":267},"]":{"d":"195,116r0,-894r-195,0r0,17r96,1r0,857r-96,1r0,18r195,0","w":224},"^":{"d":"602,-446r-249,-277r-97,0r-249,277r42,0r254,-208r254,208r45,0","w":633},"_":{"d":"501,233r0,-68r-501,0r0,68r501,0","w":524},"`":{"d":"244,-540v-61,-49,-111,-98,-150,-147r-66,22v42,52,102,99,179,140","w":326},"a":{"d":"365,-69r-11,-9r-18,9v-14,-4,-23,-14,-28,-31r0,-262v7,-27,18,-52,34,-77r-2,-4r-28,22r-142,-47v-36,32,-69,44,-116,38r48,125v-109,102,-142,205,-28,309r5,0r136,-109v0,49,21,85,64,108xm215,-257r-103,-50r-42,-114r145,54r0,110xm216,-131r-75,64v-65,-66,-76,-140,-29,-224r104,52r0,108"},"b":{"d":"361,-69r0,-279v0,-49,-22,-88,-66,-117r-142,103v7,-105,-26,-217,45,-268v-35,0,-67,17,-96,50r-15,1v-17,-13,-37,-24,-62,-33r-3,3v44,42,41,86,37,156r-51,0r0,51r51,0r0,246v0,30,-9,55,-28,74v56,11,118,39,186,84v53,-37,101,-60,144,-71xm270,-75r-117,-52r0,-207r79,-59v23,15,38,31,38,47r0,271"},"c":{"d":"156,-467v-36,32,-76,60,-123,79r0,255v0,31,-9,55,-27,71v44,9,90,31,138,64r121,-89r-10,-11r-43,32r-88,-44r0,-284r90,51r43,-61","w":303},"d":{"d":"139,-427v-31,15,-60,29,-91,38r0,239v0,35,-9,60,-28,77v67,14,127,40,180,79v40,-32,89,-58,148,-77r0,-329v0,-14,3,-28,8,-43v-18,7,-31,18,-40,33r-304,-194r0,95xm253,-73r-112,-40r0,-273r33,-20r79,53r0,280"},"e":{"d":"167,-467v-43,30,-87,57,-135,79r0,267v0,29,-9,54,-28,73v47,9,93,25,138,50r142,-98r-11,-12r-66,42r-84,-37r0,-104v42,-36,100,-80,173,-131xm217,-305r-95,75r0,-172","w":326},"f":{"d":"272,-86r-11,-12r-34,28r-72,-46r0,-286r68,0r7,-51r-75,0r0,-102r86,18r20,-69r-96,-23v-38,34,-74,59,-109,74r0,102r-44,0r-9,51r51,0r0,257v0,31,-8,55,-25,72v60,23,108,49,144,76","w":303},"g":{"d":"394,40v2,-30,-81,-125,-71,-161r0,-240r78,12r0,-95r-75,47r-153,-70r-74,36v-26,12,-51,22,-79,28r0,328r93,66r-108,123r21,18v92,-29,145,-27,245,0v42,-20,120,-54,123,-92xm234,-136r-62,63r-64,-43r0,-284r126,36r0,228xm231,-107v13,79,45,113,103,167r-2,12v-81,-27,-164,-33,-244,-21","w":430},"h":{"d":"96,107v127,-23,265,-89,265,-211r0,-244v0,-49,-22,-88,-66,-117r-140,103v7,-103,-25,-219,43,-268v-35,0,-67,17,-96,50r-15,1v-17,-13,-37,-24,-62,-33r-2,2v37,30,38,92,36,159r-51,0r0,49r49,0r0,313r-29,34r75,61r76,-66r-26,-29r0,-247r79,-59v21,13,34,29,38,47r0,280v-1,108,-89,134,-177,169","w":403},"i":{"d":"156,-614r-74,0r-24,102r13,0xm182,-69r-10,-9r-18,12v-15,-8,-25,-19,-28,-32r0,-277r25,-28r-77,-64r-74,61r29,31r-1,279v-3,43,18,77,63,101","w":214},"j":{"d":"176,-614r-74,0r-24,102r13,0xm146,-60v0,-52,-10,-106,-10,-156v0,-59,17,-115,51,-168r-91,-82r-98,75v10,15,25,-6,38,-10r36,34v-19,45,-29,92,-29,142v-1,50,25,171,25,206v0,48,-19,89,-58,124r7,11v86,-39,129,-97,129,-176","w":214},"k":{"d":"409,-69r-12,-13r-19,10v-24,-28,-30,-103,-45,-141v-11,-28,-29,-53,-56,-72r55,-53v0,0,28,-25,37,-32r-91,-96r-130,114v8,-104,-28,-237,47,-277v-35,0,-67,16,-97,49r-14,1v-18,-15,-40,-25,-65,-31v47,40,33,85,35,157r-51,0r0,50r51,0r0,270v0,31,-8,55,-25,72v39,12,88,34,145,66r96,-101v7,47,23,80,48,98xm288,-326r-141,121r0,-115r79,-72xm265,-124r-58,60r-60,-31r0,-83r59,-47v35,29,54,63,59,101","w":443},"l":{"d":"238,-75r-12,-13r-24,18r-73,-46r0,-421v0,-37,16,-67,49,-91v-38,5,-72,22,-103,51r-11,1v-19,-15,-41,-26,-66,-32v22,23,33,45,33,64r0,399v0,29,-9,53,-26,72v63,23,111,49,142,76","w":267},"m":{"d":"632,-68r-12,-10r-19,12v-15,-9,-25,-20,-30,-32r0,-263r44,-63r-11,-11r-41,34r-68,-64v-56,46,-99,80,-130,103v-10,-41,-31,-76,-64,-105r-145,106v0,-47,-22,-83,-65,-106r-80,75r9,11r16,-11v17,13,25,28,25,46r0,257r-27,31r74,64r73,-64r-27,-34r0,-244r79,-59v27,18,40,34,40,49r0,257r-30,31r77,64r71,-64r-26,-34r0,-248r71,-52r43,39v5,101,-15,231,12,310v7,19,26,35,51,49","w":671},"n":{"d":"410,-68r-10,-10r-21,12v-14,-9,-23,-20,-28,-32r0,-263r44,-63r-10,-11r-43,34r-69,-64v-37,34,-81,69,-128,103v0,-45,-21,-80,-63,-105r-82,75r10,11r16,-11v16,13,24,29,24,46r0,257r-28,31r76,64r72,-64r-27,-34r0,-248r71,-52r45,39v5,101,-14,231,13,310v6,18,24,34,48,49","w":443},"o":{"d":"329,-71r0,-326v-43,-6,-96,-29,-159,-70v-41,39,-89,65,-142,80r0,237v0,37,-9,62,-27,77v67,14,127,40,180,79v40,-34,89,-60,148,-77xm235,-73v-35,-10,-80,-29,-115,-43r0,-276r115,44r0,275","w":387},"p":{"d":"23,111v29,-5,52,-24,73,-42v26,30,51,57,102,63v-41,-52,-53,-96,-44,-171v37,18,65,31,84,39v36,-32,80,-69,121,-92r0,-222v0,-79,-33,-130,-100,-153r-103,97v-6,-44,-29,-77,-69,-98r-84,75r11,8r24,-15v15,9,23,29,23,59r0,228v-25,7,-42,13,-53,18r0,29v18,0,39,-1,51,4v4,74,6,126,-36,173xm214,-393v25,10,56,27,56,56r0,262r-116,-36r0,-229"},"q":{"d":"344,111v-25,-33,-38,-63,-38,-90r0,-369r25,-32v-60,-12,-122,-41,-186,-87v-39,34,-85,58,-140,72r0,281v0,49,21,88,63,116r142,-102v1,100,17,165,-40,232v47,-5,73,-35,99,-63v21,16,45,38,75,42xm212,-127r-80,58v-24,-13,-36,-29,-36,-48r0,-269r116,50r0,209","w":373},"r":{"d":"315,-395r-65,-71r-101,77v-8,-46,-24,-57,-63,-78r-85,75r11,11r17,-11v16,13,24,29,24,46r0,201v0,33,-9,57,-27,72v48,19,91,44,128,76r91,-78r-12,-12r-29,21r-54,-42r0,-259r39,-30r60,59","w":329},"s":{"d":"340,-467v-1,29,-34,37,-64,38v-29,0,-72,-14,-128,-41v-37,35,-78,63,-123,83r0,154r96,53r-119,170r13,9v73,-31,132,-31,202,3v39,-24,77,-54,124,-68r0,-184r-94,-58r91,-123v19,-27,29,-47,29,-62v0,-25,-10,-37,-30,-37v-22,0,-29,13,-19,25v15,19,22,31,22,38xm270,-374r-97,128r-60,-31r1,-115v54,22,97,26,156,18xm258,-207r-1,133v-55,-28,-111,-33,-173,-21r111,-144","w":403},"t":{"d":"229,-402r0,-51r-102,0r-1,-127r-130,163r-1,14r35,0r0,258v0,29,-9,53,-27,72v37,13,79,38,126,76r90,-78r-11,-14r-28,22r-53,-44r0,-291r102,0","w":261},"u":{"d":"411,-68r-10,-10r-18,12v-20,-11,-30,-21,-30,-32r0,-285r29,-25r-74,-59r-71,59r24,30r0,251r-81,58v-24,-13,-36,-29,-36,-48r0,-266r30,-24r-76,-59r-96,74r10,11r23,-14r18,17r0,264v0,51,21,89,63,116r143,-102v0,42,21,77,63,106","w":443},"v":{"d":"130,-365v11,-41,-73,-131,-73,-154v0,-20,13,-42,40,-66r-5,-8v-105,58,-127,120,-56,210r0,233v0,35,-9,60,-28,77v67,14,127,40,180,79v37,-32,86,-58,148,-77r0,-296v0,-26,-21,-59,-64,-100xm242,-73r-114,-43r0,-220r80,-59v23,25,34,44,34,57r0,265","w":383},"w":{"d":"140,-365v11,-41,-73,-131,-73,-154v0,-20,13,-42,40,-66r-5,-8v-107,60,-131,120,-55,210r0,233v0,35,-9,60,-28,77v71,19,130,46,175,79v76,-56,113,-45,209,0v43,-37,90,-63,141,-77r0,-288v0,-33,-23,-69,-68,-108r-136,105v-3,-38,-24,-73,-65,-104xm459,-68r-118,-35r0,-233r80,-59v13,14,38,36,38,57r0,270xm212,-395v28,35,36,24,36,57r0,270v-46,-15,-83,-29,-110,-42r0,-226","w":586},"x":{"d":"410,-69r-9,-10r-27,16v-63,-50,-96,-146,-141,-217r47,-99r77,35r31,-72r-92,-50r-71,161v-38,-59,-66,-129,-131,-161r-92,71r8,9r33,-20v71,40,88,122,131,187r-58,125r-79,-28r-31,74r93,53r86,-201v43,68,78,159,143,202","w":443},"y":{"d":"86,114v-41,0,-80,-18,-79,-57v1,-49,110,-102,160,-128v94,-48,189,-120,189,-237v0,-63,-20,-115,-61,-158r-135,106v0,-49,-21,-84,-64,-107r-96,84r11,13r32,-23v16,15,24,31,24,47r0,265v1,23,-93,117,-79,156v0,57,107,70,173,46v32,-11,48,-21,41,-43v-31,-26,-63,49,-116,36xm225,-387v61,53,60,144,11,215v-22,32,-48,60,-79,83r0,-245","w":382},"z":{"d":"123,113v0,-21,-37,-5,-53,-5v-48,-12,-36,-70,1,-92v67,-40,179,-74,179,-172v0,-69,-62,-110,-134,-109r122,-122v-39,-5,-87,-54,-115,-80r-123,83r9,14r55,-36r85,80r-140,137v70,-17,147,-12,147,64v0,95,-123,96,-127,189v-2,38,30,69,68,68v17,-5,26,-12,26,-19","w":281},"{":{"d":"-2,-302v103,15,135,35,135,149v0,92,-4,204,45,237v27,18,74,30,145,30r0,-22v-129,9,-116,-88,-116,-212v0,-136,-30,-160,-135,-194r0,-4v135,-25,139,-109,134,-270v-3,-99,20,-138,117,-139r0,-21v-141,1,-187,32,-191,165r1,105v-1,114,-34,133,-135,149r0,27","w":352},"|":{"d":"70,233r0,-1004r-68,0r0,1004r68,0","w":93},"}":{"d":"187,-153v-3,-108,33,-138,136,-149r0,-27v-101,-14,-137,-35,-137,-141v0,-94,6,-212,-45,-247v-27,-18,-73,-31,-144,-31r0,21v124,-9,115,90,113,211v-2,134,29,168,137,198r0,4v-133,24,-136,115,-136,270v0,105,-17,132,-114,136r0,22v144,-2,186,-29,190,-167r0,-100","w":352},"~":{"d":"253,-419r-12,4r-2,35r-197,64r-3,114r13,-5r4,-28r196,-64xm296,-286r-12,4r-2,35r-197,64r-3,114r14,-4r3,-29r196,-63","w":335},"\u201a":{"d":"156,-77r-73,-72r-76,72v58,64,62,77,0,135r18,20v62,-40,106,-92,131,-155","w":180},"\u0192":{"d":"82,126v-22,-18,-39,-52,-57,-77r-87,67v36,31,54,113,113,81r76,-41v105,-69,118,-278,155,-426r76,0r54,-59r-30,-20r-14,14r-72,0v21,-88,45,-240,76,-300v19,23,45,50,59,76r88,-62v-28,-30,-64,-105,-107,-93v-102,28,-163,123,-190,245r-30,134r-66,0r-64,63r35,18r18,-16r64,0r-64,299v-10,47,-21,79,-33,97","w":456},"\u201e":{"d":"336,-77r-73,-72r-76,72v58,64,62,77,0,135r18,20v62,-40,106,-92,131,-155xm156,-77r-73,-72r-76,72v58,64,62,77,0,135r18,20v62,-40,106,-92,131,-155","w":351},"\u2026":{"d":"583,-69v-25,-24,-50,-49,-76,-80r-80,76v22,30,45,56,74,78xm363,-69v-25,-24,-50,-49,-76,-80r-80,76v22,30,45,56,74,78xm153,-69v-25,-24,-50,-49,-76,-80r-79,76v21,29,45,55,73,78","w":631},"\u2020":{"d":"335,-385r0,-91r-142,29r27,-224r-85,0r27,224r-144,-29r0,91r143,-29r-34,583r98,0r-32,-583","w":351},"\u2021":{"d":"335,-24r0,-91r-142,29r19,-164r-19,-164r142,29r0,-91r-142,29r27,-224r-85,0r27,224r-144,-29r0,91r143,-29r-19,164r19,164r-143,-29r0,91r144,-29r-27,222r85,0r-27,-222","w":351},"\u02c6":{"d":"286,-536v-39,-44,-76,-94,-112,-150r-50,0v-23,35,-40,60,-52,76r-60,74r12,10v53,-29,95,-62,125,-100v34,39,75,72,124,99","w":326},"\u2030":{"d":"833,-366v-73,47,-139,110,-139,207v0,76,50,130,151,162v83,-67,148,-107,128,-228v-13,-77,-63,-107,-140,-141xm513,-366v-73,47,-139,110,-139,207v0,76,50,130,151,162v83,-67,148,-107,128,-228v-13,-77,-63,-107,-140,-141xm530,-618r-51,0r-358,621r51,0xm147,-244v79,-63,147,-112,131,-231v-10,-77,-67,-110,-140,-142v-176,90,-198,304,9,373xm788,-311v110,8,187,170,96,256v-71,-11,-140,-71,-139,-153v0,-40,14,-74,43,-103xm468,-311v110,8,187,170,96,256v-71,-11,-140,-71,-139,-153v0,-40,14,-74,43,-103xm94,-563v112,14,186,169,92,256v-71,-11,-137,-72,-136,-151v0,-37,15,-72,44,-105","w":1008},"\u0160":{"d":"422,-857r-15,-11v-41,23,-80,56,-117,101v-30,-39,-70,-73,-119,-102r-13,12v43,51,79,103,108,154r50,0v29,-50,65,-101,106,-154xm444,11v122,-58,255,-153,251,-280v-5,-134,-129,-181,-287,-183r95,-170r-18,-13r-22,39v-64,-18,-128,-40,-191,-66v-63,63,-156,108,-165,222v-53,25,-80,57,-80,96v0,98,121,141,224,132r-23,49r-81,-5v-112,-2,-168,50,-142,136v58,99,237,32,315,-8xm171,-502v0,-46,46,-74,98,-69v47,5,96,25,146,61r-34,61v-71,15,-210,30,-210,-53xm360,-361v133,-20,267,0,267,133v0,53,-31,106,-93,160r-89,-34v47,-26,125,-64,126,-121v2,-104,-137,-92,-239,-80xm298,-301v-89,21,-211,4,-211,-71v0,-15,9,-32,27,-49v22,64,120,77,214,65xm414,-225v41,1,71,1,71,33v0,26,-48,60,-69,78v-76,-24,-131,-39,-164,-45r27,-54v83,-8,128,-12,135,-12xm34,-32v-20,-38,29,-64,68,-64v49,0,111,16,185,47v-67,35,-127,52,-181,52v-37,0,-61,-12,-72,-35","w":718},"\u2039":{"d":"131,-402v-38,55,-82,110,-131,168r93,118r36,49r59,-36r-106,-131r106,-134","w":222},"\u0152":{"d":"553,-370v0,-120,40,-162,114,-228r-2,-5v-63,31,-108,69,-137,112v-58,-97,-137,-152,-238,-166v-77,69,-179,144,-265,210v-44,140,-52,306,33,397v37,40,83,61,139,61v105,0,201,-68,288,-205v47,136,131,204,254,204v107,0,186,-56,239,-169r-5,-5v-70,57,-98,85,-197,90r0,-279r128,-1r48,-100r-89,-2r113,-148v-77,4,-142,-16,-184,-52r-170,168r0,252v0,27,-8,48,-23,62v-31,-53,-46,-118,-46,-196xm873,-504r-98,135r1,-179xm751,-76v-66,-11,-113,-39,-140,-83v64,-51,96,-111,96,-180r0,-193r43,-39xm441,-445v-45,59,-119,63,-166,7r1,-118v79,17,134,54,165,111xm448,-426v27,65,23,101,10,165v-53,-58,-120,-64,-182,-16r0,-132v54,43,125,33,172,-17xm450,-233v-29,73,-93,150,-174,159r-1,-175v53,-62,133,-55,175,16xm254,-74v-50,0,-94,-22,-131,-65v56,-60,84,-117,84,-172r1,-246r46,0r0,483xm135,-509v-7,120,20,268,-23,354v-70,-121,-53,-239,23,-354","w":999},"\u2018":{"d":"163,-519v-58,-62,-62,-79,0,-136r-18,-20v-62,41,-106,93,-131,156r73,72","w":180},"\u2019":{"d":"156,-587r-73,-72r-76,72v58,63,62,78,0,136r18,20v62,-41,106,-93,131,-156","w":180},"\u201c":{"d":"343,-519v-58,-62,-62,-79,0,-136r-18,-20v-62,41,-106,93,-131,156r73,72xm163,-519v-58,-62,-62,-79,0,-136r-18,-20v-62,41,-106,93,-131,156r73,72","w":351},"\u201d":{"d":"336,-587r-73,-72r-76,72v58,63,62,78,0,136r18,20v62,-41,106,-93,131,-156xm156,-587r-73,-72r-76,72v58,63,62,78,0,136r18,20v62,-41,106,-93,131,-156","w":351},"\u2022":{"d":"439,-321v-57,-48,-115,-118,-167,-176r-176,167v46,67,101,124,163,174","w":532},"\u2013":{"d":"509,-270r0,-67r-480,0r0,67r480,0","w":547},"\u2014":{"d":"609,-270r0,-67r-580,0r0,67r580,0","w":650},"\u02dc":{"d":"95,-591v76,-7,180,66,232,0r30,-52r-18,-6r-15,24v-77,34,-191,-80,-240,17r-20,40r17,5","w":443},"\u2122":{"d":"63,-587v-91,105,5,273,155,231v46,-13,77,-47,94,-106r-2,-1v-22,33,-51,55,-86,66r0,-220v47,8,92,-21,90,-69r-3,0v-44,59,-116,3,-186,3v-70,0,-110,31,-120,92r2,0v30,-41,55,-50,108,-45v-17,15,-38,33,-52,49xm213,-395v-32,6,-65,-7,-87,-23v27,-26,55,-53,55,-104r0,-102r32,7r0,222xm132,-467v0,17,-6,31,-17,41v-62,-58,-50,-148,9,-208r8,2r0,165xm473,-399v18,13,34,29,50,47r75,-67r-7,-8r-11,9r0,-87r26,-36r-26,0r0,-105r10,-5r36,26r1,211v0,33,12,53,36,62r44,-44r-6,-6v-13,14,-23,6,-23,-20r0,-195v0,-11,6,-26,19,-43v-8,-9,-17,7,-25,11r-52,-36r-82,53v-5,-22,-19,-40,-40,-54r-89,48v-40,22,-60,60,-60,113v-31,4,-49,19,-55,45v55,-22,100,29,78,82v-4,11,-26,18,-61,25v-27,6,-41,25,-41,58r3,0v14,-32,54,-16,89,-16v44,0,69,-35,68,-80r0,-94r55,0v-5,36,12,83,-12,102r0,4xm570,-541r-32,0r-1,-75r33,-22r0,97xm454,-650v54,-2,23,67,31,109r-36,0r-20,29v3,-57,-12,-109,25,-138xm570,-410r-16,15v-32,-13,-11,-72,-16,-110r32,0r0,95xm427,-636v3,9,-10,25,-7,36r0,186v0,36,-22,46,-52,34v72,-35,-9,-202,59,-256","w":718},"\u0161":{"d":"334,-684r-15,-11v-41,23,-80,56,-117,101v-30,-39,-70,-73,-119,-102r-13,12v43,51,79,103,108,154r50,0v29,-50,65,-101,106,-154xm350,-467v-1,29,-34,37,-64,38v-29,0,-72,-14,-128,-41v-37,35,-78,63,-123,83r0,154r96,53r-119,170r13,9v73,-31,132,-31,202,3v39,-24,77,-54,124,-68r0,-184r-94,-58r91,-123v19,-27,29,-47,29,-62v0,-25,-10,-37,-30,-37v-22,0,-29,13,-19,25v15,19,22,31,22,38xm280,-374r-97,128r-60,-31r1,-115v54,22,97,26,156,18xm268,-207r-1,133v-55,-28,-111,-33,-173,-21r111,-144","w":420},"\u203a":{"d":"218,-234r-102,-125v-10,-14,-20,-28,-29,-43r-57,34r106,134r-106,131r59,36r69,-92","w":222},"\u0153":{"d":"493,-339r-125,-128r-85,51r-17,0v-42,-22,-73,-39,-93,-51v-43,38,-90,65,-143,80r0,237v0,35,-9,60,-28,77v68,15,127,41,178,78r60,-40v46,0,66,27,101,38r140,-98r-9,-12r-66,41r-85,-37r0,-104xm413,-302r-90,67r0,-157xm236,-348r-1,275r-114,-43r1,-276","w":532},"\u0178":{"d":"476,-811r-59,-63r-62,60r57,62xm305,-811v-21,-18,-39,-41,-58,-63r-61,60v17,22,38,42,56,62xm342,-104v175,0,272,-110,272,-284v0,-133,-57,-244,-180,-244v-51,0,-111,25,-180,74v-20,-79,-122,-124,-207,-74v-1,4,1,6,5,5v104,-7,101,83,95,180v-25,-10,-76,-15,-103,-3v71,32,108,64,103,153v-29,-15,-64,-19,-106,-18r0,4v65,31,120,81,107,185v-79,-1,-146,50,-146,126v0,102,116,172,217,120v58,-30,111,-61,175,-84v35,5,4,37,2,61v-2,26,16,39,40,39v23,0,35,-15,35,-45v-1,-52,-51,-82,-101,-81v-58,1,-167,49,-226,71v-68,9,-124,-20,-123,-83v2,-127,187,-102,321,-102xm492,-447v-67,49,-111,51,-175,4r0,-125v99,-39,153,6,175,121xm495,-428v4,55,8,79,-1,143v-59,-36,-119,-42,-176,-6r0,-126v61,36,118,30,177,-11xm489,-265v-26,88,-57,147,-171,143r-1,-148v58,-41,117,-38,172,5xm296,-122r-45,0r-1,-413r45,-21","w":633},"\u00a1":{"d":"66,-458v-16,150,-32,264,-66,378r75,85r74,-85v-36,-125,-51,-218,-67,-378r-16,0xm0,-580v36,37,61,63,74,80r82,-76v-22,-29,-47,-57,-75,-79","w":180},"\u00a2":{"d":"299,-67r86,-96r-19,-17r-35,38r-32,-13r0,-298v53,-2,90,-28,109,-77r-2,-5v-37,25,-78,9,-107,-21r0,-94r-28,0r0,83v-53,45,-104,65,-183,54v14,23,21,54,21,91r0,266v-22,15,-37,32,-46,52r3,5v70,-27,123,6,205,49r0,89r28,0r0,-106xm271,-167r-52,-13r0,-322v19,22,37,36,52,43r0,292","w":426},"\u00a3":{"d":"122,-142v1,82,-45,96,-95,131r12,25v139,-56,305,-35,412,35r102,-128r-21,-17r-21,25v-92,-41,-206,-51,-312,-15v40,-46,43,-107,41,-187v44,1,106,-3,139,5v-16,-31,11,-79,17,-110v-36,21,-100,14,-156,15r0,-165v0,-45,20,-67,60,-67v35,0,72,19,111,56r-26,31r17,14r106,-119v-82,-61,-170,-64,-259,4v-60,46,-126,91,-127,182r0,64v-27,0,-66,0,-81,-5v15,32,-10,77,-17,110v23,-13,59,-16,98,-15r0,131","w":556},"\u00a4":{"d":"573,-115r-94,-95v52,-76,52,-171,0,-248r94,-93r-54,-56r-95,96v-73,-52,-174,-52,-248,0r-93,-96r-56,56r96,94v-52,73,-52,173,0,247r-96,95r56,54r93,-94v76,52,171,52,248,0r95,94xm300,-483v78,0,149,73,149,149v0,78,-70,151,-149,151v-79,0,-147,-71,-147,-151v0,-78,69,-149,147,-149","w":600},"\u00a5":{"d":"494,-68r-17,-17r-26,22v-21,-16,-43,-27,-64,-32r0,-200r122,0r0,-36r-122,0r0,-42r122,0r0,-36r-116,0r51,-119v90,36,170,-32,184,-113r-8,-5v-43,44,-116,34,-159,-14r-51,135v0,0,-36,86,-55,127v-41,-105,-77,-176,-108,-213v-26,-31,-61,-47,-104,-49v-18,37,-44,78,-77,123r8,8v79,-57,135,53,163,120r-102,0r0,36r118,0r19,42r-137,0r0,36r142,0r0,205v-47,15,-88,46,-122,92r8,10v74,-35,151,-14,210,37","w":648},"\u00a6":{"d":"70,-335r0,-372r-68,0r0,372r68,0xm70,167r0,-368r-68,0r0,368r68,0","w":93},"\u00a7":{"d":"198,133v120,-8,241,-189,128,-291v48,-79,66,-131,41,-213v-50,-13,-90,-23,-121,-32v-83,-25,-160,-41,-160,-120v0,-21,9,-46,26,-73r228,59r32,-82r-174,-37v-118,11,-229,167,-129,273v-47,92,-67,115,-42,208v80,24,217,64,257,96v39,31,31,109,3,152r-253,-61r-29,80xm249,-323v89,11,79,88,49,151r-100,-30v-56,-24,-130,-22,-130,-84v0,-15,8,-44,25,-85v48,19,100,41,156,48","w":418},"\u00a8":{"d":"296,-617r-58,-63r-63,60r58,62xm126,-617r-58,-63r-61,60r56,62","w":330},"\u00a9":{"d":"342,11v189,0,350,-159,350,-349v0,-186,-163,-349,-348,-349v-188,0,-349,165,-349,353v0,186,162,345,347,345xm652,-336v0,161,-147,317,-305,310v-167,-7,-311,-127,-311,-307v0,-169,140,-314,308,-314v162,0,308,146,308,311xm134,-317v1,139,106,228,253,202v61,-10,109,-50,144,-119r-4,-1v-61,48,-85,70,-168,60r0,-331v34,11,65,21,96,35r60,-66v-47,0,-92,-13,-137,-40r-136,115v-3,71,9,163,-9,219v-74,-95,-48,-220,42,-291v-81,26,-142,113,-141,217xm242,-236v43,-38,70,-61,70,-126r0,-131r30,-25r0,341v-42,-11,-75,-31,-100,-59","w":718},"\u00aa":{"d":"260,-384r-8,-9r-14,11v-11,-8,-18,-16,-21,-24r0,-187v5,-19,14,-37,25,-54v-7,-4,-15,9,-23,11r-100,-34v-22,22,-49,34,-82,28r33,89v-77,78,-101,144,-20,223r7,0r93,-77v0,33,15,58,45,76xm151,-595r-1,79r-69,-36r-31,-82xm151,-428r-49,46v-48,-43,-56,-98,-22,-161r71,37r0,78","w":286},"\u00ab":{"d":"176,-234v45,52,88,106,128,167r60,-36r-108,-131r105,-134r-57,-34v-40,59,-84,113,-128,168xm131,-402v-38,55,-82,110,-131,168r93,118r36,49r59,-36r-106,-131r106,-134"},"\u00ac":{"d":"300,88r-255,-744r-49,0r256,744r48,0","w":330},"\u00ae":{"d":"342,11v184,0,350,-162,350,-347v0,-186,-161,-351,-348,-351v-192,0,-364,174,-349,384v12,166,169,314,347,314xm349,-321v108,-1,106,171,170,215r7,0r64,-62r-8,-9r-16,12v-30,-22,-52,-114,-66,-136v-18,-29,-44,-54,-79,-75r98,-70r-96,-129r-124,82v-5,-96,-115,-97,-171,-44r0,9v57,-19,105,-6,102,57r0,30r-114,85v77,38,116,87,116,147v-48,15,-87,41,-118,78v-48,-56,-76,-112,-78,-202v-5,-169,140,-314,308,-314v164,0,306,147,306,311v0,159,-147,308,-308,308v-83,0,-157,-32,-220,-95v96,-37,180,-30,244,21r71,-73r-9,-9r-14,13r-65,-29r0,-121xm450,-413r-101,74r0,-170r22,-15xm335,-205v-9,-3,-19,-4,-32,-4r0,-268r32,-21r0,293xm229,-345r-53,-42r53,-35r0,77","w":718},"\u00af":{"d":"501,-705r0,-66r-501,0r0,66r501,0","w":524},"\u00b0":{"d":"142,-438v74,2,140,-67,140,-140v0,-75,-67,-139,-143,-139v-73,0,-142,65,-137,139v6,80,54,137,140,140xm142,-675v55,0,96,43,96,98v0,55,-41,98,-96,98v-60,0,-94,-39,-94,-98v0,-55,39,-98,94,-98","w":308},"\u00b1":{"d":"589,-355r0,-65r-260,-1r-1,-168r-67,0r-1,168r-260,1r0,65r260,1r1,166r67,0r1,-166xm589,-18r0,-64r-589,0r0,64r589,0","w":611},"\u00b2":{"d":"263,-291v-75,-33,-141,-24,-231,4v17,-20,66,-54,146,-103v57,-35,83,-77,81,-143r-139,-78r-113,81r40,35r111,-77v60,55,40,116,-21,168v-55,47,-82,70,-83,70v-31,31,-49,61,-55,90v74,-26,144,-25,220,1","w":286},"\u00b3":{"d":"72,-432v72,-6,123,30,125,93v0,29,-11,54,-33,76r-126,-96r-40,38r101,78v77,1,162,-35,162,-105v0,-43,-32,-73,-97,-90v63,-30,89,-54,81,-110r-131,-63r-89,64r34,32v33,-18,59,-48,99,-59v17,0,25,11,25,33v0,59,-37,92,-111,99r0,10","w":286},"\u00b4":{"d":"291,-665r-68,-22v-39,49,-88,98,-147,147r35,15v80,-43,140,-90,180,-140","w":326},"\u00b5":{"d":"372,-374v-1,-16,17,-38,28,-41r0,-7v-31,-8,-54,-34,-71,-79r-8,0v-15,43,-38,69,-71,79r0,7v19,7,29,21,29,41r0,221r-82,86v-20,-23,-34,-38,-42,-43r0,-285v0,-43,-21,-77,-64,-102r-9,0r-81,103r9,9r28,-31v17,6,25,19,25,40r2,299v2,81,14,153,32,230r7,0v27,-95,41,-143,41,-144r134,-139v0,94,18,95,69,139r8,0r86,-110r-10,-10r-35,38v-17,0,-25,-13,-25,-39r0,-262","w":448},"\u00b6":{"d":"0,-561v0,97,84,173,185,171r1,386r51,0r1,-686r90,0r1,686r49,0r1,-686r60,-1r0,-40r-245,0v-109,-1,-194,64,-194,170","w":461},"\u00b7":{"d":"197,-329v-25,-24,-50,-49,-76,-80r-80,76v22,30,45,57,74,79","w":242},"\u2219":{"d":"197,-329v-25,-24,-50,-49,-76,-80r-80,76v22,30,45,57,74,79","w":242},"\u00b8":{"d":"60,88v57,1,103,6,103,50v0,15,-7,29,-22,41r-124,-23r-17,45r160,29v38,-30,57,-60,57,-90v0,-53,-68,-83,-127,-81r-1,-76r-23,0v0,36,0,82,-6,105","w":246},"\u00b9":{"d":"174,-300v-11,-11,-20,9,-30,14r-29,-21r0,-227v0,-31,-15,-56,-46,-77r-70,56v8,13,19,-10,29,-14v19,13,29,27,29,42r0,214v0,9,-5,17,-14,25r63,44","w":202},"\u00ba":{"d":"237,-385r0,-233v-35,-5,-73,-23,-112,-52v-31,30,-64,49,-101,58v-6,76,17,180,-19,227v44,9,86,27,126,54v30,-23,65,-41,106,-54xm171,-584r-1,197r-80,-28r1,-200","w":265},"\u00bb":{"d":"366,-234v-43,-53,-85,-109,-126,-168r-59,36r105,132r-105,133r57,34v43,-68,70,-101,128,-167xm62,-67v38,-59,83,-113,131,-166r-128,-169r-60,36r106,132r-106,133"},"\u00bc":{"d":"507,-112v2,35,10,50,-18,73r64,39r58,-45v-5,-14,-16,2,-25,6r-24,-16r1,-57r64,-1r-12,-38r-52,-1r-1,-136v0,-20,-15,-39,-44,-56r-153,185r15,46xm513,-618r-43,0r-453,621r40,0xm164,-321v-9,-11,-19,10,-28,14r-29,-20r0,-214v1,-35,-21,-55,-44,-70r-65,50r4,8r23,-18v18,11,27,25,27,41r0,194v0,9,-5,17,-15,26r63,43xm508,-273r-1,121r-125,0r-3,-6r114,-135v10,10,15,17,15,20","w":655},"\u00bd":{"d":"608,-46v-63,-30,-145,-22,-215,4r-3,-3v15,-17,61,-47,137,-93v55,-33,80,-71,77,-133r-132,-73r-107,78r37,32r107,-74v58,50,39,109,-20,157v-48,39,-123,89,-133,151v86,-26,121,-25,210,0xm513,-618r-43,0r-453,621r40,0xm164,-321v-9,-11,-19,10,-28,14r-29,-20r0,-214v1,-35,-21,-55,-44,-70r-65,50r4,8r23,-18v18,11,27,25,27,41r0,194v0,9,-5,17,-15,26r63,43","w":633},"\u00be":{"d":"731,-113r-10,-38r-52,-1r-1,-136v0,-20,-15,-39,-45,-56r-152,185r15,46r128,1v1,36,6,52,-20,73r64,39r58,-45v-5,-13,-16,2,-24,6r-24,-16r1,-57xm621,-618r-43,0r-454,621r41,0xm96,-266v72,2,155,-34,155,-97v0,-37,-31,-66,-94,-87v62,-29,87,-50,79,-103r-127,-57r-86,58r32,31v32,-17,54,-47,95,-56v17,0,25,11,25,32v0,53,-35,83,-106,91r0,10v113,-12,156,93,87,159r-118,-89r-40,35xm597,-294v8,6,18,10,18,21r-1,121r-127,0r-3,-6","w":761},"\u00bf":{"d":"69,-580v28,28,51,53,74,82r80,-77v-23,-31,-47,-58,-73,-81xm2,-158v-17,119,78,180,202,160r54,-108v-42,19,-59,32,-102,27v-43,-4,-59,-38,-61,-84v21,-96,61,-173,58,-294r-24,0v0,62,-18,118,-53,169v-42,60,-70,103,-74,130","w":286},"\u00c0":{"d":"474,-745v-54,-45,-100,-93,-140,-150r-67,23v41,54,98,102,172,143xm22,10v56,-2,-18,-88,42,-89v67,17,125,62,184,89r146,-109v12,51,36,88,73,111r114,-94r-15,-16r-32,24v-19,-18,-29,-51,-30,-98r-8,-339v-1,-66,39,-110,78,-146r-2,-2v-42,10,-80,34,-113,72v-64,-44,-131,-66,-201,-66v-134,0,-255,114,-240,248v6,55,41,113,106,174v-37,62,-124,140,-124,215v0,17,7,26,22,26xm391,-283r-197,0r169,-249v19,0,18,20,28,29r0,220xm48,-406v0,-138,163,-211,294,-145r-24,36v-82,-21,-173,10,-169,92v22,-45,89,-64,120,-21r-133,195v-59,-47,-88,-99,-88,-157xm395,-133r-84,68r-204,-94r37,-54r251,0r0,80","w":611},"\u00c1":{"d":"490,-872r-69,-23v-39,57,-86,106,-139,150r35,16v70,-41,128,-85,173,-143xm22,10v56,-2,-18,-88,42,-89v67,17,125,62,184,89r146,-109v12,51,36,88,73,111r114,-94r-15,-16r-32,24v-19,-18,-29,-51,-30,-98r-8,-339v-1,-66,39,-110,78,-146r-2,-2v-42,10,-80,34,-113,72v-64,-44,-131,-66,-201,-66v-134,0,-255,114,-240,248v6,55,41,113,106,174v-37,62,-124,140,-124,215v0,17,7,26,22,26xm391,-283r-197,0r169,-249v19,0,18,20,28,29r0,220xm48,-406v0,-138,163,-211,294,-145r-24,36v-82,-21,-173,10,-169,92v22,-45,89,-64,120,-21r-133,195v-59,-47,-88,-99,-88,-157xm395,-133r-84,68r-204,-94r37,-54r251,0r0,80","w":611},"\u00c2":{"d":"512,-741v-43,-53,-78,-104,-106,-154r-50,0v-29,51,-65,103,-108,154r13,12v49,-29,89,-63,119,-102v37,45,76,78,117,101xm22,10v56,-2,-18,-88,42,-89v67,17,125,62,184,89r146,-109v12,51,36,88,73,111r114,-94r-15,-16r-32,24v-19,-18,-29,-51,-30,-98r-8,-339v-1,-66,39,-110,78,-146r-2,-2v-42,10,-80,34,-113,72v-64,-44,-131,-66,-201,-66v-134,0,-255,114,-240,248v6,55,41,113,106,174v-37,62,-124,140,-124,215v0,17,7,26,22,26xm391,-283r-197,0r169,-249v19,0,18,20,28,29r0,220xm48,-406v0,-138,163,-211,294,-145r-24,36v-82,-21,-173,10,-169,92v22,-45,89,-64,120,-21r-133,195v-59,-47,-88,-99,-88,-157xm395,-133r-84,68r-204,-94r37,-54r251,0r0,80","w":611},"\u00c3":{"d":"246,-796v49,-12,177,68,219,0v4,-6,13,-24,27,-55r-18,-5r-14,24r-29,6v-6,4,-105,-28,-139,-28v-46,0,-60,49,-78,81r16,6xm22,10v56,-2,-18,-88,42,-89v67,17,125,62,184,89r146,-109v12,51,36,88,73,111r114,-94r-15,-16r-32,24v-19,-18,-29,-51,-30,-98r-8,-339v-1,-66,39,-110,78,-146r-2,-2v-42,10,-80,34,-113,72v-64,-44,-131,-66,-201,-66v-134,0,-255,114,-240,248v6,55,41,113,106,174v-37,62,-124,140,-124,215v0,17,7,26,22,26xm391,-283r-197,0r169,-249v19,0,18,20,28,29r0,220xm48,-406v0,-138,163,-211,294,-145r-24,36v-82,-21,-173,10,-169,92v22,-45,89,-64,120,-21r-133,195v-59,-47,-88,-99,-88,-157xm395,-133r-84,68r-204,-94r37,-54r251,0r0,80","w":611},"\u00c4":{"d":"481,-806r-66,-53v-25,14,-48,25,-68,32v-5,47,14,112,-14,137v23,4,47,11,70,21r72,-40v-11,-13,-27,7,-40,11r-40,-15r0,-41xm22,10v56,-2,-18,-88,42,-89v67,17,125,62,184,89r146,-109v12,51,36,88,73,111r114,-94r-15,-16r-32,24v-19,-18,-29,-51,-30,-98r-8,-339v-1,-66,39,-110,78,-146r-2,-2v-42,10,-80,34,-113,72v-64,-44,-131,-66,-201,-66v-134,0,-255,114,-240,248v6,55,41,113,106,174v-37,62,-124,140,-124,215v0,17,7,26,22,26xm438,-793r-43,27r0,-63xm391,-283r-197,0r169,-249v19,0,18,20,28,29r0,220xm48,-406v0,-138,163,-211,294,-145r-24,36v-82,-21,-173,10,-169,92v22,-45,89,-64,120,-21r-133,195v-59,-47,-88,-99,-88,-157xm395,-133r-84,68r-204,-94r37,-54r251,0r0,80","w":611},"\u00c5":{"d":"391,-666v71,0,121,-49,121,-120v0,-71,-50,-118,-121,-118v-71,0,-120,46,-120,117v0,71,49,121,120,121xm22,10v56,-2,-18,-88,42,-89v67,17,125,62,184,89r146,-109v12,51,36,88,73,111r114,-94r-15,-16r-32,24v-19,-18,-29,-51,-30,-98r-8,-339v-1,-66,39,-110,78,-146r-2,-2v-42,10,-80,34,-113,72v-64,-44,-131,-66,-201,-66v-134,0,-255,114,-240,248v6,55,41,113,106,174v-37,62,-124,140,-124,215v0,17,7,26,22,26xm391,-860v43,0,75,31,75,74v0,43,-32,76,-75,76v-45,0,-76,-31,-76,-76v0,-45,31,-74,76,-74xm391,-283r-197,0r169,-249v19,0,18,20,28,29r0,220xm48,-406v0,-138,163,-211,294,-145r-24,36v-82,-21,-173,10,-169,92v22,-45,89,-64,120,-21r-133,195v-59,-47,-88,-99,-88,-157xm395,-133r-84,68r-204,-94r37,-54r251,0r0,80","w":611},"\u00c6":{"d":"23,10v59,-3,-21,-90,43,-90v68,16,124,63,184,90r170,-132v57,90,133,135,230,135v105,0,184,-57,239,-172r-4,-4v-55,48,-107,90,-206,89r0,-279r133,0r48,-103r-92,0r116,-148v-76,4,-140,-16,-184,-52r-170,168r0,241v0,31,-8,56,-23,73v-32,-61,-48,-145,-48,-254v1,-126,32,-176,113,-228r-1,-3v-53,0,-99,24,-140,72v-69,-47,-133,-70,-190,-70v-112,0,-224,104,-217,224v6,92,43,143,99,206v-36,61,-121,137,-121,211v0,17,7,26,21,26xm781,-504r-102,137r0,-182xm658,-76v-67,-12,-114,-39,-141,-81v65,-55,98,-115,98,-179r0,-192r43,-50r0,502xm355,-523r25,34v-17,64,-19,129,-15,203r-172,0xm57,-411v0,-90,69,-169,160,-169v39,0,79,12,118,37r-16,24v-39,-11,-110,-6,-136,18v-20,19,-33,42,-33,74v31,-44,91,-70,121,-21r-138,202v-51,-55,-76,-110,-76,-165xm409,-144r-96,77r-206,-94r39,-57r235,0v7,31,17,56,28,74","w":915},"\u00c7":{"d":"409,120v0,-53,-67,-83,-126,-81r-1,-29v152,0,216,-51,284,-175r-5,-1v-60,46,-136,111,-240,86r0,-474r137,50r86,-94v-68,0,-133,-19,-196,-57r-194,164r0,238v0,33,-5,59,-14,76v-105,-137,-69,-314,60,-416v-115,35,-201,161,-200,309v1,167,104,278,256,292v0,22,1,41,-4,60v57,1,103,6,103,50v0,15,-7,29,-22,41r-123,-23r-18,45r160,29v38,-30,57,-60,57,-90xm153,-167v63,-58,101,-85,101,-180r0,-188r43,-35r0,487v-61,-15,-109,-43,-144,-84","w":590},"\u00c8":{"d":"393,-745v-53,-44,-101,-94,-142,-150r-66,23v39,54,96,102,171,143xm0,-284v0,197,147,321,361,289v87,-13,155,-71,205,-170r-5,-1v-93,67,-147,101,-240,86r1,-273r157,0r49,-103r-106,0r137,-148v-70,8,-166,-16,-214,-51r-191,164r0,238v0,33,-5,59,-14,76v-71,-90,-81,-198,-28,-305v22,-44,51,-81,88,-111v-115,35,-200,161,-200,309xm437,-504r-116,126r0,-173xm154,-167v60,-53,100,-89,100,-180r0,-188r43,-35r0,487v-61,-16,-108,-44,-143,-84","w":590},"\u00c9":{"d":"438,-872r-68,-23v-41,55,-88,106,-139,150r35,16v74,-41,131,-89,172,-143xm0,-284v0,197,147,321,361,289v87,-13,155,-71,205,-170r-5,-1v-93,67,-147,101,-240,86r1,-273r157,0r49,-103r-106,0r137,-148v-70,8,-166,-16,-214,-51r-191,164r0,238v0,33,-5,59,-14,76v-71,-90,-81,-198,-28,-305v22,-44,51,-81,88,-111v-115,35,-200,161,-200,309xm437,-504r-116,126r0,-173xm154,-167v60,-53,100,-89,100,-180r0,-188r43,-35r0,487v-61,-16,-108,-44,-143,-84","w":590},"\u00ca":{"d":"303,-831v30,42,69,75,116,101r14,-11v-39,-47,-74,-99,-107,-154r-48,0v-33,56,-69,107,-108,154r13,11v47,-27,87,-61,120,-101xm0,-284v0,197,147,321,361,289v87,-13,155,-71,205,-170r-5,-1v-93,67,-147,101,-240,86r1,-273r157,0r49,-103r-106,0r137,-148v-70,8,-166,-16,-214,-51r-191,164r0,238v0,33,-5,59,-14,76v-71,-90,-81,-198,-28,-305v22,-44,51,-81,88,-111v-115,35,-200,161,-200,309xm437,-504r-116,126r0,-173xm154,-167v60,-53,100,-89,100,-180r0,-188r43,-35r0,487v-61,-16,-108,-44,-143,-84","w":590},"\u00cb":{"d":"443,-811v-21,-18,-39,-41,-58,-63r-61,60v18,22,37,43,57,62xm275,-811r-59,-63r-62,60v18,22,37,43,57,62xm0,-284v0,197,147,321,361,289v87,-13,155,-71,205,-170r-5,-1v-93,67,-147,101,-240,86r1,-273r157,0r49,-103r-106,0r137,-148v-70,8,-166,-16,-214,-51r-191,164r0,238v0,33,-5,59,-14,76v-71,-90,-81,-198,-28,-305v22,-44,51,-81,88,-111v-115,35,-200,161,-200,309xm437,-504r-116,126r0,-173xm154,-167v60,-53,100,-89,100,-180r0,-188r43,-35r0,487v-61,-16,-108,-44,-143,-84","w":590},"\u00cc":{"d":"384,-745v-53,-45,-100,-95,-141,-150r-66,23v39,54,96,102,171,143xm275,10v136,0,180,-148,162,-302r-31,-272v-1,-53,17,-70,62,-85r0,-7v-98,0,-147,68,-147,203v0,104,36,224,36,340v0,51,-13,87,-59,87v-35,0,-73,-24,-115,-73v174,-9,79,-194,81,-359v0,-85,28,-151,83,-196r-1,-3v-98,43,-198,-39,-274,31v-21,19,-33,45,-40,75r6,1v26,-67,80,-35,150,-35v21,0,47,-7,78,-22v-61,73,-75,98,-88,208v-63,0,-113,32,-125,85v33,-12,58,-18,77,-18v69,4,76,51,81,129v4,65,-21,96,-94,88v-74,-8,-120,61,-115,127v19,-33,45,-50,76,-50v21,-5,152,48,197,48","w":502},"\u00cd":{"d":"429,-872r-67,-23v-41,55,-88,106,-139,150r35,16v74,-41,131,-89,171,-143xm275,10v136,0,180,-148,162,-302r-31,-272v-1,-53,17,-70,62,-85r0,-7v-98,0,-147,68,-147,203v0,104,36,224,36,340v0,51,-13,87,-59,87v-35,0,-73,-24,-115,-73v174,-9,79,-194,81,-359v0,-85,28,-151,83,-196r-1,-3v-98,43,-198,-39,-274,31v-21,19,-33,45,-40,75r6,1v26,-67,80,-35,150,-35v21,0,47,-7,78,-22v-61,73,-75,98,-88,208v-63,0,-113,32,-125,85v33,-12,58,-18,77,-18v69,4,76,51,81,129v4,65,-21,96,-94,88v-74,-8,-120,61,-115,127v19,-33,45,-50,76,-50v21,-5,152,48,197,48","w":502},"\u00ce":{"d":"425,-741v-42,-51,-78,-102,-107,-154r-50,0v-25,45,-61,97,-106,154r13,11v47,-27,87,-61,120,-101v33,43,71,77,114,101xm275,10v136,0,180,-148,162,-302r-31,-272v-1,-53,17,-70,62,-85r0,-7v-98,0,-147,68,-147,203v0,104,36,224,36,340v0,51,-13,87,-59,87v-35,0,-73,-24,-115,-73v174,-9,79,-194,81,-359v0,-85,28,-151,83,-196r-1,-3v-98,43,-198,-39,-274,31v-21,19,-33,45,-40,75r6,1v26,-67,80,-35,150,-35v21,0,47,-7,78,-22v-61,73,-75,98,-88,208v-63,0,-113,32,-125,85v33,-12,58,-18,77,-18v69,4,76,51,81,129v4,65,-21,96,-94,88v-74,-8,-120,61,-115,127v19,-33,45,-50,76,-50v21,-5,152,48,197,48","w":502},"\u00cf":{"d":"436,-811r-59,-63r-62,60r57,62xm265,-811v-21,-18,-39,-41,-58,-63r-61,60v17,22,38,42,56,62xm275,10v136,0,180,-148,162,-302r-31,-272v-1,-53,17,-70,62,-85r0,-7v-98,0,-147,68,-147,203v0,104,36,224,36,340v0,51,-13,87,-59,87v-35,0,-73,-24,-115,-73v174,-9,79,-194,81,-359v0,-85,28,-151,83,-196r-1,-3v-98,43,-198,-39,-274,31v-21,19,-33,45,-40,75r6,1v26,-67,80,-35,150,-35v21,0,47,-7,78,-22v-61,73,-75,98,-88,208v-63,0,-113,32,-125,85v33,-12,58,-18,77,-18v69,4,76,51,81,129v4,65,-21,96,-94,88v-74,-8,-120,61,-115,127v19,-33,45,-50,76,-50v21,-5,152,48,197,48","w":502},"\u00d0":{"d":"233,-65v42,15,80,42,118,70r88,-80r-12,-13r-23,18r-65,-35r0,-450r91,18r20,-69r-95,-23v-38,33,-75,58,-111,74r0,102r-41,0r-8,51r49,0r0,257v0,41,-12,66,-35,75r-65,-35r0,-450r91,18r20,-69r-95,-23v-38,33,-75,58,-111,74r0,102r-41,0r-8,51r49,0r0,257v0,33,-9,58,-26,75v37,11,82,36,133,75","w":464},"\u00d1":{"d":"349,-796v54,-11,192,76,226,-13r20,-42r-17,-5v-28,88,-180,-53,-234,29v-3,3,-12,21,-27,54r16,6xm207,69v115,8,194,-94,194,-203r0,-109v69,-43,118,-48,178,0v-39,88,-98,210,-116,303r6,6v47,-73,121,-80,216,-55r67,-116r-17,-11r-17,23v-56,-7,-114,-18,-166,3v105,-129,157,-240,157,-332v0,-110,-73,-188,-218,-234r-242,148r-2,82v-66,-19,-95,-22,-137,13v75,0,121,37,137,111v-50,-24,-108,-31,-137,14v73,-12,114,15,138,90v-48,-11,-91,-6,-116,30v75,-6,150,26,150,90v0,114,-179,13,-243,79v-13,13,-29,28,-44,50r1,3v22,-11,43,-16,62,-16v32,-2,135,35,149,31xm598,-427v-61,62,-127,57,-197,3r1,-132v94,8,170,56,196,129xm603,-404v9,53,4,77,-15,139v-58,-39,-126,-36,-186,0r0,-134v69,45,139,47,201,-5xm268,-13v53,-31,73,-75,72,-162r0,-359r38,-20r1,409v1,94,-38,145,-110,136","w":783},"\u00d2":{"d":"391,-745v-54,-45,-100,-93,-140,-150r-67,23v41,54,98,102,172,143xm233,10v169,9,431,-228,420,-388v-12,-173,-146,-256,-310,-279r-156,110r-160,101v-20,61,-30,122,-30,182v0,157,87,266,236,274xm518,-445v-60,68,-132,62,-201,2r1,-114v102,19,153,45,200,112xm530,-427v31,54,36,102,11,167v-71,-64,-141,-63,-223,-11r0,-143v73,46,148,43,212,-13xm532,-233v-54,106,-125,159,-214,159r-1,-169v77,-67,152,-69,215,10xm154,-144v71,-83,99,-73,99,-167r1,-249r39,0r0,486v-46,0,-92,-23,-139,-70xm166,-253v0,34,-9,65,-26,92v-94,-107,-75,-255,24,-351","w":677},"\u00d3":{"d":"437,-872r-69,-23v-39,57,-86,106,-139,150r35,16v70,-41,128,-85,173,-143xm233,10v169,9,431,-228,420,-388v-12,-173,-146,-256,-310,-279r-156,110r-160,101v-20,61,-30,122,-30,182v0,157,87,266,236,274xm518,-445v-60,68,-132,62,-201,2r1,-114v102,19,153,45,200,112xm530,-427v31,54,36,102,11,167v-71,-64,-141,-63,-223,-11r0,-143v73,46,148,43,212,-13xm532,-233v-54,106,-125,159,-214,159r-1,-169v77,-67,152,-69,215,10xm154,-144v71,-83,99,-73,99,-167r1,-249r39,0r0,486v-46,0,-92,-23,-139,-70xm166,-253v0,34,-9,65,-26,92v-94,-107,-75,-255,24,-351","w":677},"\u00d4":{"d":"431,-741v-44,-56,-79,-107,-105,-154r-50,0v-29,51,-65,103,-108,154r13,12v49,-29,89,-63,119,-102v35,43,74,77,117,101xm233,10v169,9,431,-228,420,-388v-12,-173,-146,-256,-310,-279r-156,110r-160,101v-20,61,-30,122,-30,182v0,157,87,266,236,274xm518,-445v-60,68,-132,62,-201,2r1,-114v102,19,153,45,200,112xm530,-427v31,54,36,102,11,167v-71,-64,-141,-63,-223,-11r0,-143v73,46,148,43,212,-13xm532,-233v-54,106,-125,159,-214,159r-1,-169v77,-67,152,-69,215,10xm154,-144v71,-83,99,-73,99,-167r1,-249r39,0r0,486v-46,0,-92,-23,-139,-70xm166,-253v0,34,-9,65,-26,92v-94,-107,-75,-255,24,-351","w":677},"\u00d5":{"d":"193,-796v52,-10,197,75,227,-16v3,-10,10,-22,19,-39r-18,-5r-14,24v-49,31,-173,-67,-219,6r-27,53r16,6xm233,10v169,9,431,-228,420,-388v-12,-173,-146,-256,-310,-279r-156,110r-160,101v-20,61,-30,122,-30,182v0,157,87,266,236,274xm518,-445v-60,68,-132,62,-201,2r1,-114v102,19,153,45,200,112xm530,-427v31,54,36,102,11,167v-71,-64,-141,-63,-223,-11r0,-143v73,46,148,43,212,-13xm532,-233v-54,106,-125,159,-214,159r-1,-169v77,-67,152,-69,215,10xm154,-144v71,-83,99,-73,99,-167r1,-249r39,0r0,486v-46,0,-92,-23,-139,-70xm166,-253v0,34,-9,65,-26,92v-94,-107,-75,-255,24,-351","w":677},"\u00d6":{"d":"461,-806r-66,-53v-25,14,-48,25,-68,32v-5,47,14,112,-14,137v23,4,47,11,70,21r72,-40v-11,-13,-27,7,-40,11r-40,-15r0,-41xm233,10v169,9,431,-228,420,-388v-12,-173,-146,-256,-310,-279r-156,110r-160,101v-20,61,-30,122,-30,182v0,157,87,266,236,274xm418,-793r-43,27r0,-63xm518,-445v-60,68,-132,62,-201,2r0,-114v98,18,165,55,201,112xm530,-427v31,54,36,102,11,167v-71,-64,-141,-63,-223,-11r0,-143v73,46,148,43,212,-13xm532,-233v-55,106,-127,159,-215,159r0,-169v77,-67,152,-69,215,10xm154,-144v71,-83,99,-73,99,-167r0,-249r40,0r0,486v-46,0,-92,-23,-139,-70xm166,-253v0,34,-9,65,-26,92v-94,-109,-75,-251,26,-351r0,259","w":677},"\u00d7":{"d":"424,-173r-132,-131r127,-128r-47,-47r-127,127r-132,-131r-49,48r132,132r-128,128r47,47r128,-128r132,132","w":483},"\u00d8":{"d":"582,-149v141,-151,153,-300,-1,-439r78,-90r-51,0r-63,70v-41,-23,-95,-40,-161,-49r-155,110r-160,101v-46,126,-52,272,22,365r-88,105r44,0r72,-77v147,144,373,1,463,-96xm508,-503v21,18,39,37,52,58v-36,41,-79,56,-136,40xm478,-524r-121,141r1,-174v46,7,86,18,120,33xm570,-426v33,56,38,99,13,166v-71,-63,-143,-63,-225,-11r-1,-60r53,-60v66,18,115,5,160,-35xm338,-363r-54,63r1,-257r52,-3xm572,-233v-38,83,-111,156,-214,159r-1,-169v77,-67,154,-69,215,10xm208,-266v0,33,-13,63,-39,92v-72,-118,-59,-248,37,-338xm337,-74v-49,0,-97,-23,-144,-70r143,-159","w":718},"\u00d9":{"d":"499,-745v-50,-43,-97,-93,-141,-150r-65,23v41,55,98,103,171,143xm295,10v117,-5,159,-41,246,-122v10,51,32,92,67,123r20,0r89,-88r-10,-14r-33,28v-12,-15,-18,-37,-18,-68r0,-399v0,-33,14,-67,41,-100r-8,-5r-48,40r-91,-60r-99,116r13,11r33,-38r45,31r0,120v-51,30,-96,29,-150,0r0,-241r-23,0v-55,54,-165,1,-236,0v-92,-2,-140,79,-138,179r8,-3v35,-88,95,-94,205,-94v28,0,54,-7,83,-14r1,4v-131,65,-251,160,-251,337v0,139,106,264,254,257xm541,-287v-52,-23,-98,-23,-148,0r0,-106v55,24,92,24,148,0r0,106xm542,-141v-49,33,-98,51,-149,56r-1,-182v59,-27,92,-29,150,0r0,126xm370,-83v-63,0,-114,-16,-154,-48v75,-48,113,-112,113,-191v0,-112,-27,-243,40,-302xm322,-584v-55,55,-82,112,-82,171v0,101,21,219,-38,270v-48,-62,-66,-126,-52,-215v15,-94,72,-169,172,-226","w":740},"\u00da":{"d":"546,-872r-68,-23v-44,55,-88,105,-140,150r35,16v76,-43,134,-91,173,-143xm295,10v117,-5,159,-41,246,-122v10,51,32,92,67,123r20,0r89,-88r-10,-14r-33,28v-12,-15,-18,-37,-18,-68r0,-399v0,-33,14,-67,41,-100r-8,-5r-48,40r-91,-60r-99,116r13,11r33,-38r45,31r0,120v-51,30,-96,29,-150,0r0,-241r-23,0v-55,54,-165,1,-236,0v-92,-2,-140,79,-138,179r8,-3v35,-88,95,-94,205,-94v28,0,54,-7,83,-14r1,4v-131,65,-251,160,-251,337v0,139,106,264,254,257xm541,-287v-52,-23,-98,-23,-148,0r0,-106v55,24,92,24,148,0r0,106xm542,-141v-49,33,-98,51,-149,56r-1,-182v59,-27,92,-29,150,0r0,126xm370,-83v-63,0,-114,-16,-154,-48v75,-48,113,-112,113,-191v0,-112,-27,-243,40,-302xm322,-584v-55,55,-82,112,-82,171v0,101,21,219,-38,270v-48,-62,-66,-126,-52,-215v15,-94,72,-169,172,-226","w":740},"\u00db":{"d":"541,-741v-42,-51,-78,-102,-108,-154r-49,0v-25,45,-61,97,-106,154r13,11v49,-30,89,-64,119,-101v31,42,70,76,115,101xm295,10v117,-5,159,-41,246,-122v10,51,32,92,67,123r20,0r89,-88r-10,-14r-33,28v-12,-15,-18,-37,-18,-68r0,-399v0,-33,14,-67,41,-100r-8,-5r-48,40r-91,-60r-99,116r13,11r33,-38r45,31r0,120v-51,30,-96,29,-150,0r0,-241r-23,0v-55,54,-165,1,-236,0v-92,-2,-140,79,-138,179r8,-3v35,-88,95,-94,205,-94v28,0,54,-7,83,-14r1,4v-131,65,-251,160,-251,337v0,139,106,264,254,257xm541,-287v-52,-23,-98,-23,-148,0r0,-106v55,24,92,24,148,0r0,106xm542,-141v-49,33,-98,51,-149,56r-1,-182v59,-27,92,-29,150,0r0,126xm370,-83v-63,0,-114,-16,-154,-48v75,-48,113,-112,113,-191v0,-112,-27,-243,40,-302xm322,-584v-55,55,-82,112,-82,171v0,101,21,219,-38,270v-48,-62,-66,-126,-52,-215v15,-94,72,-169,172,-226","w":740},"\u00dc":{"d":"511,-806r-66,-53v-25,14,-48,25,-68,32v-5,47,14,112,-14,137v23,4,47,11,70,21r72,-40v-11,-13,-27,7,-40,11r-40,-15r0,-41xm295,10v117,-5,159,-41,246,-122v10,51,32,92,67,123r20,0r89,-88r-10,-14r-33,28v-12,-15,-18,-37,-18,-68r0,-399v0,-33,14,-67,41,-100r-8,-5r-48,40r-91,-60r-99,116r13,11r33,-38r45,31r0,120v-51,30,-96,29,-150,0r0,-241r-23,0v-55,54,-165,1,-236,0v-92,-2,-140,79,-138,179r8,-3v35,-88,95,-94,205,-94v28,0,54,-7,83,-14r1,4v-131,65,-251,160,-251,337v0,139,106,264,254,257xm468,-793r-43,27r0,-63xm541,-287v-52,-23,-98,-23,-148,0r0,-106v55,24,92,24,148,0r0,106xm542,-141v-49,33,-98,51,-149,56r-1,-182v59,-27,92,-29,150,0r0,126xm370,-83v-63,0,-114,-16,-154,-48v75,-48,113,-112,113,-191v0,-113,-27,-243,41,-302r0,541xm322,-584v-55,55,-82,112,-82,171v0,101,21,219,-38,270v-48,-62,-66,-126,-52,-215v15,-94,72,-169,172,-226","w":740},"\u00dd":{"d":"342,-104v173,0,272,-109,272,-284v0,-133,-57,-244,-180,-244v-51,0,-111,25,-180,74v-20,-79,-122,-124,-207,-74v-1,4,1,6,5,5v104,-7,101,83,95,180v-25,-10,-76,-15,-103,-3v71,32,108,64,103,153v-29,-15,-64,-19,-106,-18r0,4v65,31,120,81,107,185v-79,-1,-146,50,-146,126v0,102,116,172,217,120v58,-30,111,-61,175,-84v35,5,4,37,2,61v-2,26,16,39,40,39v23,0,35,-15,35,-45v-1,-52,-51,-82,-101,-81v-58,1,-167,49,-226,71v-68,9,-124,-20,-123,-83v2,-127,187,-102,321,-102xm492,-447v-67,49,-111,51,-175,4r0,-125v99,-39,153,6,175,121xm495,-428v4,55,8,79,-1,143v-59,-36,-119,-42,-176,-6r0,-126v61,36,118,30,177,-11xm489,-265v-26,88,-57,147,-172,143r0,-148v58,-41,117,-38,172,5xm295,-122r-45,0r0,-413r45,-21r0,434xm526,-872r-68,-23v-44,55,-88,105,-140,150r35,16v76,-43,134,-91,173,-143","w":633},"\u00de":{"d":"286,107v127,-23,265,-89,265,-211r0,-244v0,-49,-22,-88,-66,-117r-140,103v7,-103,-25,-219,43,-268v-35,0,-67,17,-96,50r-15,1v-17,-13,-37,-24,-62,-33r-2,2v43,33,33,124,34,200r-91,-57v-36,32,-76,60,-123,79r0,255v0,31,-9,55,-27,71v44,9,90,31,138,64v22,-13,53,-38,76,-55r73,59r76,-66r-26,-29r0,-247r79,-59v21,13,34,29,38,47r0,280v-1,108,-89,134,-177,169xm247,-92r-35,26r-88,-44r0,-284r90,51r33,-47r0,298","w":584},"\u00df":{"d":"306,116v2,-23,-30,-8,-44,-8v-51,0,-47,-68,-17,-85v79,-46,193,-78,193,-194v0,-75,-62,-124,-139,-123r109,-106v-39,-4,-75,-44,-102,-67r-160,108r-1,-196r90,18r20,-69r-95,-23v-39,35,-76,59,-109,74r-2,102r-41,2r-8,48r49,1r2,257v0,31,-9,56,-28,75v37,11,82,36,133,75r88,-80r-12,-13r-23,18r-65,-35r0,-234r103,-67r71,65r-128,124v72,-16,154,-7,154,73v0,25,-6,47,-18,67r-94,86v-17,15,-25,33,-25,55v0,35,43,68,75,67v16,0,24,-5,24,-15","w":466},"\u00e0":{"d":"287,-540v-62,-49,-112,-98,-150,-147r-66,22v42,52,102,99,179,140xm365,-69r-11,-9r-18,9v-14,-4,-23,-14,-28,-31r0,-262v7,-27,18,-52,34,-77r-2,-4r-28,22r-142,-47v-36,32,-69,44,-116,38r48,125v-109,102,-142,205,-28,309r5,0r136,-109v0,49,21,85,64,108xm216,-367r-1,110r-103,-50r-42,-114xm217,-131r-76,64v-65,-66,-76,-140,-29,-224r104,52"},"\u00e1":{"d":"335,-665r-70,-22v-37,47,-86,96,-146,147r35,15v72,-39,134,-82,181,-140xm365,-69r-11,-9r-18,9v-14,-4,-23,-14,-28,-31r0,-262v7,-27,18,-52,34,-77r-2,-4r-28,22r-142,-47v-36,32,-69,44,-116,38r48,125v-109,102,-142,205,-28,309r5,0r136,-109v0,49,21,85,64,108xm216,-367r-1,110r-103,-50r-42,-114xm217,-131r-76,64v-65,-66,-76,-140,-29,-224r104,52"},"\u00e2":{"d":"330,-536v-39,-42,-77,-92,-114,-150r-51,0v-36,58,-73,108,-110,150r12,9v53,-29,95,-62,126,-99v31,40,71,73,122,99xm365,-69r-11,-9r-18,9v-14,-4,-23,-14,-28,-31r0,-262v7,-27,18,-52,34,-77r-2,-4r-28,22r-142,-47v-36,32,-69,44,-116,38r48,125v-109,102,-142,205,-28,309r5,0r136,-109v0,49,21,85,64,108xm216,-367r-1,110r-103,-50r-42,-114xm217,-131r-76,64v-65,-66,-76,-140,-29,-224r104,52"},"\u00e3":{"d":"77,-591v76,-7,183,68,232,0v12,-16,19,-35,29,-52r-17,-6r-15,24v-72,35,-178,-71,-232,5v-2,2,-11,19,-28,52r13,5xm365,-69r-11,-9r-18,9v-14,-4,-23,-14,-28,-31r0,-262v7,-27,18,-52,34,-77r-2,-4r-28,22r-142,-47v-36,32,-69,44,-116,38r48,125v-109,102,-142,205,-28,309r5,0r136,-109v0,49,21,85,64,108xm216,-367r-1,110r-103,-50r-42,-114xm217,-131r-76,64v-65,-66,-76,-140,-29,-224r104,52"},"\u00e4":{"d":"285,-622r-66,-53v-25,14,-48,25,-68,32v-5,47,14,112,-14,137v23,4,47,11,70,21r72,-40v-11,-13,-27,7,-40,11r-40,-15r0,-41xm365,-69r-11,-9r-18,9v-14,-4,-23,-14,-28,-31r0,-262v7,-27,18,-52,34,-77r-2,-4r-28,22r-142,-47v-36,32,-69,44,-116,38r48,125v-109,102,-142,205,-28,309r5,0r136,-109v0,49,21,85,64,108xm242,-609r-43,27r0,-63xm215,-257r-103,-50r-42,-114r145,54r0,110xm216,-131r-75,64v-65,-66,-76,-140,-29,-224r104,52r0,108"},"\u00e5":{"d":"199,-510v74,-2,125,-42,127,-116v2,-70,-54,-114,-126,-114v-72,0,-126,44,-126,114v0,71,55,118,125,116xm365,-69r-11,-9r-18,9v-14,-4,-23,-14,-28,-31r0,-262v7,-27,18,-52,34,-77r-2,-4r-28,22r-142,-47v-36,32,-69,44,-116,38r48,125v-109,102,-142,205,-28,309r5,0r136,-109v0,49,21,85,64,108xm199,-700v44,0,83,30,83,74v0,47,-36,76,-83,76v-43,0,-79,-33,-79,-76v0,-43,36,-74,79,-74xm216,-367r-1,110r-103,-50r-42,-114xm217,-131r-76,64v-65,-66,-76,-140,-29,-224r104,52"},"\u00e6":{"d":"483,-339r-127,-128v-23,16,-47,29,-70,38r-109,-39v-35,32,-70,44,-117,38r46,127v-107,100,-138,206,-25,307r5,0r136,-109v0,23,4,44,11,64r96,44r141,-98r-10,-12r-66,41r-82,-37r0,-104r84,-67xm411,-305r-97,75r0,-172xm223,-369r-1,112r-101,-50r-46,-116xm224,-133r-75,66v-66,-60,-76,-144,-28,-224r102,52","w":512},"\u00e7":{"d":"252,137v1,-53,-71,-81,-134,-79r-1,-73r27,17r121,-89r-10,-11r-43,32r-88,-44r2,-284r88,51r43,-61r-101,-63v-36,32,-76,60,-123,79r0,255v0,31,-9,55,-27,71v29,6,59,17,88,33v0,41,1,76,-6,114v86,-4,142,40,85,90r-131,-21r-18,42r168,28v40,-29,60,-58,60,-87","w":303},"\u00e8":{"d":"244,-540v-61,-49,-111,-98,-150,-147r-66,22v42,52,102,99,179,140xm167,-467v-43,30,-87,57,-135,79r0,267v0,29,-9,54,-28,73v47,9,93,25,138,50r142,-98r-11,-12r-66,42r-84,-37r0,-104v42,-36,100,-80,173,-131xm217,-305r-95,75r0,-172","w":326},"\u00e9":{"d":"291,-665r-68,-22v-39,49,-88,98,-147,147r35,15v80,-43,140,-90,180,-140xm167,-467v-43,30,-87,57,-135,79r0,267v0,29,-9,54,-28,73v47,9,93,25,138,50r142,-98r-11,-12r-66,42r-84,-37r0,-104v42,-36,100,-80,173,-131xm217,-305r-95,75r0,-172","w":326},"\u00ea":{"d":"286,-536v-39,-44,-76,-94,-112,-150r-50,0v-23,35,-40,60,-52,76r-60,74r12,10v53,-29,95,-62,125,-100v34,39,75,72,124,99xm167,-467v-43,30,-87,57,-135,79r0,267v0,29,-9,54,-28,73v47,9,93,25,138,50r142,-98r-11,-12r-66,42r-84,-37r0,-104v42,-36,100,-80,173,-131xm217,-305r-95,75r0,-172","w":326},"\u00eb":{"d":"304,-605v-20,-17,-41,-40,-60,-59r-64,56r58,59xm123,-605r-59,-59r-64,56r58,59xm174,-467v-44,30,-90,56,-138,79r0,267v0,29,-9,54,-26,73v45,9,91,25,139,50r140,-98r-10,-11r-65,41r-87,-37r0,-104r87,-67r89,-64xm224,-305r-98,75r0,-172","w":326},"\u00ec":{"d":"219,-540v-62,-49,-112,-98,-150,-147r-66,22v42,52,102,99,179,140xm228,-69r-13,-9r-16,11v-13,-7,-23,-18,-28,-31r0,-277r27,-28r-78,-64r-74,61r28,31r-1,272v0,51,21,87,62,109","w":261},"\u00ed":{"d":"223,-665r-70,-22v-39,51,-88,100,-147,147r37,15v80,-43,140,-90,180,-140xm184,-68r-11,-10r-17,12v-14,-7,-24,-18,-29,-32r0,-277r25,-28r-76,-64r-75,61r30,31r-1,279v0,45,21,79,63,102","w":261},"\u00ee":{"d":"278,-536v-45,-50,-83,-100,-112,-150r-53,0v-25,43,-61,93,-110,150r12,9v51,-27,93,-60,127,-99v33,41,74,74,121,99xm244,-68r-12,-10r-17,12v-13,-6,-22,-17,-27,-32r0,-277r25,-28r-77,-64r-76,61r30,31r-1,272v0,53,21,89,63,110","w":303},"\u00ef":{"d":"301,-605r-60,-59r-63,56r58,59xm122,-605r-61,-59r-62,56v15,20,37,40,57,59xm257,-69r-12,-9r-16,11v-15,-8,-25,-18,-30,-31r0,-277r26,-28r-76,-64r-74,61r28,31r-2,272v0,52,21,88,63,109","w":326},"\u00f0":{"d":"276,113v0,-21,-37,-5,-53,-5v-48,-12,-36,-70,1,-92v67,-40,179,-74,179,-172v0,-69,-62,-110,-134,-109r122,-122v-42,-8,-69,-37,-99,-66r-165,0r5,-130r-136,166r-1,14r35,0r0,258v0,29,-9,53,-27,72v37,13,79,38,126,76r90,-78r-11,-14r-28,22r-53,-44r0,-291r94,0r81,76r-140,137v70,-17,147,-12,147,64v0,95,-123,96,-127,189v-2,38,30,69,68,68v17,-5,26,-12,26,-19","w":430},"\u00f1":{"d":"95,-591v76,-7,180,66,232,0r30,-52r-18,-6r-15,24v-77,34,-191,-80,-240,17r-20,40r17,5xm410,-68r-10,-10r-21,12v-14,-9,-23,-20,-28,-32r0,-263r44,-63r-10,-11r-43,34r-69,-64v-37,34,-81,69,-128,103v0,-45,-21,-80,-63,-105r-82,75r10,11r16,-11v16,13,24,29,24,46r0,257r-28,31r76,64r72,-64r-27,-34r0,-248r71,-52r45,39v5,101,-13,227,12,309v6,20,25,35,49,50","w":443},"\u00f2":{"d":"277,-540v-59,-47,-109,-96,-150,-147r-66,22v41,53,101,99,180,140xm336,-71r0,-326v-43,-6,-96,-29,-159,-70v-41,39,-89,65,-142,80r0,237v0,37,-9,62,-27,77v67,14,127,40,180,79v40,-34,89,-60,148,-77xm242,-348r-1,275v-35,-10,-80,-29,-115,-43r1,-276","w":373},"\u00f3":{"d":"325,-665r-70,-22v-37,47,-86,96,-146,147r35,15v79,-43,139,-89,181,-140xm336,-71r0,-326v-43,-6,-96,-29,-159,-70v-41,39,-89,65,-142,80r0,237v0,37,-9,62,-27,77v67,14,127,40,180,79v40,-34,89,-60,148,-77xm242,-348r-1,275v-35,-10,-80,-29,-115,-43r1,-276","w":373},"\u00f4":{"d":"56,-526v51,-28,92,-61,127,-100v28,37,69,71,122,100r14,-10v-40,-46,-77,-96,-112,-150r-50,0v-35,54,-72,103,-112,150xm336,-71r0,-326v-43,-6,-96,-29,-159,-70v-41,39,-89,65,-142,80r0,237v0,37,-9,62,-27,77v67,14,127,40,180,79v40,-34,89,-60,148,-77xm242,-348r-1,275v-35,-10,-80,-29,-115,-43r1,-276","w":373},"\u00f5":{"d":"68,-591v76,-7,183,68,232,0v12,-16,19,-35,29,-52r-18,-6r-15,24r-31,7v-14,4,-110,-30,-147,-30v-44,0,-67,45,-82,80r16,5xm336,-71r0,-326v-43,-6,-96,-29,-159,-70v-41,39,-89,65,-142,80r0,237v0,37,-9,62,-27,77v67,14,127,40,180,79v40,-34,89,-60,148,-77xm242,-348r-1,275v-35,-10,-80,-29,-115,-43r1,-276","w":373},"\u00f6":{"d":"275,-622r-66,-53v-25,14,-48,25,-68,32v-5,47,14,112,-14,137v23,4,47,11,70,21r72,-40v-11,-13,-27,7,-40,11r-40,-15r0,-41xm336,-71r0,-326v-43,-6,-96,-29,-159,-70v-41,39,-89,65,-142,80r0,237v0,37,-9,62,-27,77v67,14,127,40,180,79v40,-34,89,-60,148,-77xm232,-609r-43,27r0,-63xm242,-73v-35,-10,-80,-29,-115,-43r0,-276r115,44r0,275","w":373},"\u00f7":{"d":"312,-453v-25,-24,-50,-49,-76,-80r-80,76v22,30,45,57,74,79xm459,-270r0,-67r-430,0r0,67r430,0xm312,-147v-25,-24,-50,-49,-76,-80r-80,76v22,30,45,57,74,79","w":483},"\u00f8":{"d":"144,-20v16,7,31,16,44,26v40,-34,89,-60,148,-77r0,-326v-33,-6,-57,-18,-84,-29r27,-99r-39,0r-25,77r-38,-19v-41,39,-89,65,-142,80r0,237v0,37,-9,62,-27,77v36,10,70,19,97,34r-24,109r37,0xm246,-353r-1,285r-81,-27r64,-263xm200,-367r-64,259r-13,-3r1,-286v27,9,52,19,76,30","w":373},"\u00f9":{"d":"302,-540v-58,-46,-107,-95,-148,-147r-66,22v41,52,101,99,179,140xm411,-68r-10,-10r-18,12v-20,-11,-30,-21,-30,-32r0,-285r29,-25r-74,-59r-71,59r25,30r-1,251r-81,58v-24,-13,-36,-29,-36,-48r0,-266r30,-24r-76,-59r-96,74r10,11r23,-14r18,17r0,264v0,51,21,89,63,116r143,-102v0,42,21,77,63,106","w":443},"\u00fa":{"d":"350,-665r-68,-22v-41,52,-90,101,-146,147r35,15v79,-43,138,-89,179,-140xm411,-68r-10,-10r-18,12v-20,-11,-30,-21,-30,-32r0,-285r29,-25r-74,-59r-71,59r25,30r-1,251r-81,58v-24,-13,-36,-29,-36,-48r0,-266r30,-24r-76,-59r-96,74r10,11r23,-14r18,17r0,264v0,51,21,89,63,116r143,-102v0,42,21,77,63,106","w":443},"\u00fb":{"d":"346,-536v-45,-50,-83,-100,-112,-150r-53,0v-23,40,-59,90,-110,150r12,10v55,-32,97,-65,127,-100v30,38,70,71,121,100xm411,-68r-10,-10r-18,12v-20,-11,-30,-21,-30,-32r0,-285r29,-25r-74,-59r-71,59r25,30r-1,251r-81,58v-24,-13,-36,-29,-36,-48r0,-266r30,-24r-76,-59r-96,74r10,11r23,-14r18,17r0,264v0,51,21,89,63,116r143,-102v0,42,21,77,63,106","w":443},"\u00fc":{"d":"288,-622r-66,-53v-25,14,-48,25,-68,32v-5,47,14,112,-14,137v23,4,47,11,70,21r72,-40v-11,-13,-27,7,-40,11r-40,-15r0,-41xm411,-68r-10,-10r-18,12v-20,-11,-30,-21,-30,-32r0,-285r29,-25r-74,-59r-71,59r24,30r0,251r-81,58v-24,-13,-36,-29,-36,-48r0,-266r30,-24r-76,-59r-96,74r10,11r23,-14r18,17r0,264v0,51,21,89,63,116r143,-102v0,42,21,77,63,106xm245,-609r-43,27r0,-63","w":443},"\u00fd":{"d":"86,114v-41,0,-80,-18,-79,-57v1,-49,110,-102,160,-128v94,-48,189,-120,189,-237v0,-63,-20,-115,-61,-158r-135,106v0,-49,-21,-84,-64,-107r-96,84r11,13r32,-23v16,15,24,31,24,47r0,265v1,23,-93,117,-79,156v0,57,107,70,173,46v32,-11,48,-21,41,-43v-31,-26,-63,49,-116,36xm225,-387v61,53,60,144,11,215v-22,32,-48,60,-79,83r0,-245xm370,-665r-68,-22v-41,52,-90,101,-146,147r35,15v79,-43,138,-89,179,-140","w":382},"\u00fe":{"d":"156,-467v-36,32,-76,60,-123,79r0,255v0,31,-9,55,-27,71v44,9,90,31,138,64r84,-61v52,15,94,41,139,64r96,-101v7,47,23,80,48,98r91,-71r-12,-13r-19,10v-24,-28,-30,-103,-45,-141v-11,-28,-29,-53,-56,-72r55,-53v0,0,28,-25,37,-32r-91,-96r-130,114v8,-106,-28,-228,45,-277v-39,4,-70,20,-95,49r-14,1v-18,-15,-40,-25,-65,-31v55,44,29,117,35,200xm481,-326r-141,121r0,-115r79,-72xm458,-124r-58,60r-60,-31r0,-83r59,-47v35,29,54,63,59,101xm247,-133v0,21,-2,37,-7,47r-28,20r-88,-44r0,-284r90,51r33,-47r0,257","w":637},"\u00ff":{"d":"340,-605r-59,-59r-65,56r60,58xm160,-605r-60,-59r-63,56v15,19,40,41,59,59xm96,114v-41,0,-80,-18,-79,-57v1,-49,110,-102,160,-128v94,-48,189,-120,189,-237v0,-63,-20,-115,-61,-158r-135,106v0,-49,-21,-84,-64,-107r-96,84r11,13r32,-23v16,15,24,31,24,47r0,265v1,23,-93,117,-79,156v-3,57,108,70,173,46v32,-11,48,-21,41,-43v-31,-26,-63,49,-116,36xm235,-387v61,54,60,141,12,214v-22,34,-47,62,-77,84r-3,-245"},"\ue000":{"w":0},"\ue001":{"w":322},"\ue002":{"w":500},"\ue003":{"d":"256,-314r-12,0r-13,32r-187,1r-38,107r14,0r12,-26r186,0","w":286},"\ue004":{"d":"255,-606r-95,-23v-38,33,-75,58,-111,74r0,102r-41,0r-8,51r49,0r0,257v0,33,-9,58,-26,75v37,11,82,36,133,75r88,-80r-12,-13r-23,18r-65,-35r0,-450r91,18","w":267},"\ue005":{"d":"248,-64v46,18,86,40,122,67r99,-89r-11,-12r-34,28r-72,-46r0,-286r68,0r7,-51r-75,0r0,-102r86,18r20,-69r-96,-23v-38,34,-74,59,-109,74r0,102r-98,0r0,-102r86,18r20,-69r-96,-23v-38,34,-74,59,-109,74r0,102r-44,0r-9,51r51,0r0,257v0,31,-8,55,-25,72v60,23,108,49,144,76xm251,-145v0,37,-8,62,-25,75r-71,-46r0,-286r96,0r0,257","w":496},"\ue006":{"d":"486,107v127,-23,265,-89,265,-211r0,-244v0,-49,-22,-88,-66,-117r-140,103v7,-103,-25,-219,43,-268v-35,0,-67,17,-96,50r-15,1v-17,-13,-37,-24,-62,-33r-2,2v43,33,33,124,34,200r-91,-57v-36,32,-76,60,-123,79r0,255v0,35,-8,56,-24,63r-65,-35r0,-450r91,18r20,-69r-95,-23v-38,33,-75,58,-111,74r0,102r-41,0r-8,51r49,0r0,257v0,33,-9,58,-26,75v37,11,82,36,133,75v30,-29,53,-50,69,-63v35,10,75,30,119,60v22,-13,53,-38,76,-55r73,59r76,-66r-26,-29r0,-247r79,-59v21,13,34,29,38,47r0,280v-1,108,-89,134,-177,169xm447,-92r-35,26r-88,-44r0,-284r90,51r33,-47r0,298","w":785},"\ue007":{"d":"613,-627v-71,8,-147,68,-147,143r0,339v0,37,-14,62,-42,75r-72,-46r0,-286r68,0r7,-51r-75,0r0,-102r86,18r20,-69r-96,-23v-38,34,-74,59,-109,74r0,102r-98,0r0,-102r86,18r20,-69r-96,-23v-38,34,-74,59,-109,74r0,102r-44,0r-9,51r51,0r0,257v0,31,-8,55,-25,72v60,23,108,49,144,76r75,-67v51,21,91,43,122,67r81,-72v56,21,100,45,131,72r91,-78r-12,-13r-24,18r-73,-46r0,-421v0,-36,16,-66,49,-90xm251,-145v0,37,-8,62,-25,75r-71,-46r0,-286r96,0r0,257","w":689},"\ue008":{"d":"248,-64v37,16,72,41,105,67r90,-78r-11,-14r-28,22r-53,-44r0,-291r102,0r0,-51r-102,0r-1,-127r-98,127r-97,0r0,-102r86,18r20,-69r-96,-23v-38,34,-74,59,-109,74r0,102r-44,0r-9,51r51,0r0,257v0,31,-8,55,-25,72v60,23,108,49,144,76xm254,-145v0,40,-9,65,-27,75r-72,-46r0,-286r99,0r0,257","w":492},"\ue009":{"d":"243,111v29,-5,52,-24,73,-42v26,30,51,57,102,63v-41,-52,-53,-96,-44,-171v37,18,65,31,84,39v36,-32,80,-69,121,-92r0,-222v0,-79,-33,-130,-100,-153r-103,97v-6,-44,-29,-77,-69,-98r-84,75r11,8r24,-15v15,9,23,29,23,59r0,228v-32,0,-60,16,-80,38r-57,-30r0,-450r91,18r20,-69r-95,-23v-38,33,-75,58,-111,74r0,102r-41,0r-8,51r49,0r0,257v0,33,-9,58,-26,75v37,11,82,36,133,75v30,-30,80,-85,123,-67v4,74,6,126,-36,173xm434,-393v25,10,56,27,56,56r0,262r-116,-36r0,-229","w":618},"\ue00a":{"d":"445,-402r0,-51r-102,0r-1,-127r-131,163r-1,14r36,0r0,258v0,38,-12,63,-37,75r-65,-35r0,-450r91,18r20,-69r-95,-23v-38,33,-75,58,-111,74r0,102r-41,0r-8,51r49,0r0,257v0,33,-9,58,-26,75v37,11,82,36,133,75r79,-72v33,14,69,37,110,70r90,-78r-11,-14r-28,22r-53,-44r0,-291r102,0","w":470},"\ue00b":{"d":"429,-402r0,-51r-102,0r-1,-127r-102,127r-97,0r-1,-127r-130,163r-1,14r35,0r0,258v0,29,-9,53,-27,72v37,13,79,38,126,76r88,-71v37,15,74,39,112,71r90,-78r-11,-14r-28,22r-53,-44r0,-291r102,0xm230,-145v0,22,-4,39,-12,52r-38,26r-53,-44r0,-291r103,0r0,257","w":461},"\ue00c":{"d":"1415,37r0,-837r-1404,0r0,837r1404,0xm1325,-634v36,-1,65,34,65,72v0,38,-36,71,-73,71r-146,0v-23,0,-35,15,-35,45r0,302v0,20,6,34,19,42r0,56v-48,-11,-72,-39,-72,-86r0,-322v0,-64,38,-100,115,-96r97,5v27,0,40,-7,40,-21v0,-13,-14,-20,-41,-19r-95,4v-77,0,-116,-29,-116,-88r0,-131r57,0r0,131v0,23,12,35,37,35r148,0xm907,-318v58,0,96,31,96,88r0,94v1,51,-35,89,-86,88r-282,0v-39,1,-70,-31,-70,-70v0,-39,26,-74,65,-73r279,0r0,53r-270,0v-13,0,-20,6,-20,18v0,14,7,21,22,21r250,0v75,5,60,-57,61,-121v0,-30,-15,-45,-45,-45r-250,0v-55,1,-93,-37,-92,-92r0,-89v-1,-59,39,-102,98,-102r246,0v51,0,80,25,89,76r-50,0v-13,-14,-28,-21,-43,-21r-244,0v-61,-3,-41,84,-41,138v0,25,14,37,41,37r246,0xm424,-97v7,1,19,-14,18,-21r-2,-682r56,0r-1,684v1,39,-34,74,-73,74v-42,0,-71,-34,-72,-77r-2,-169v-9,-20,-142,-147,-182,-186v-14,-14,-29,-19,-44,-8v-5,18,-8,29,-8,32r0,310v-4,62,65,39,116,43v9,-4,17,-11,25,-21r53,0v-11,80,-76,72,-159,72v-59,0,-88,-32,-88,-96r0,-330v-4,-60,92,-90,134,-49r179,177v51,45,31,141,31,226v0,14,6,21,19,21","w":1426},"\u00a0":{"w":322}}});
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Copyright (c) Typographer Mediengestaltung, 2002. All rights reserved.
 * 
 * Trademark:
 * Please refer to the Copyright section for the font trademark attribution
 * notices.
 * 
 * Full name:
 * Helmut
 * 
 * Designer:
 * Dieter Steffmann
 * 
 * Vendor URL:
 * http://www.steffmann.de
 * 
 * License information:
 * http://www.steffmann.de
 */
Cufon.registerFont({"w":396,"face":{"font-family":"Old London","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"0 0 0 0 0 0 0 0 0 0","ascent":"800","descent":"-200","x-height":"6","cap-height":"12","bbox":"-97 -904 1064 233","underline-thickness":"20","underline-position":"-113","stemh":"103","stemv":"91","unicode-range":"U+000D-U+FB02"},"glyphs":{" ":{"w":322},"\ufb01":{"d":"396,-614r-85,102r-13,0r24,-102r74,0xm412,-69r-91,74v-36,-20,-56,-47,-61,-80r-87,78v-37,-28,-85,-53,-144,-76v17,-17,25,-41,25,-72r0,-257r-51,0r9,-51r44,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r166,0r60,50r-25,28r0,277v3,13,12,24,28,32r18,-12xm258,-95r1,-307r-104,0r0,286r72,46","w":439},"\ufb02":{"d":"476,-75r-91,78v-31,-27,-74,-51,-131,-72r-81,72v-37,-28,-85,-53,-144,-76v17,-17,25,-41,25,-72r0,-257r-51,0r9,-51r44,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r75,0r-7,51r-68,0r0,286r72,46v28,-13,42,-38,42,-75r0,-339v-1,-75,76,-136,147,-143v-33,24,-49,54,-49,90r0,421r73,46r24,-18","w":487},"\u0141":{"d":"287,-198r-57,21v-13,30,-34,68,-64,115r3,3v60,-47,99,-94,118,-139xm383,-541v0,64,14,154,3,221r75,-27r18,-41r27,-10r-47,138r-104,38v-22,41,-61,81,-116,120r2,4v61,-19,109,-28,146,-28v66,0,103,31,150,53v6,0,17,-7,34,-22r15,14r-110,105v-120,-96,-257,-86,-408,-14r-6,-10v67,-58,105,-94,108,-155r-130,48r-19,34r-30,11r48,-131r87,-32v-11,-5,-25,-9,-40,-11v23,-21,49,-21,83,-13v6,-60,-42,-94,-108,-83v14,-36,57,-49,102,-37v-12,-106,22,-170,77,-230v-53,41,-119,11,-181,11v-20,0,-40,14,-59,43r-7,-6v17,-73,55,-105,124,-105v27,0,102,26,125,25v36,-2,40,-5,78,-21r3,5v-116,84,-70,215,-73,377r57,-21v6,-107,-33,-269,37,-325v29,-23,71,-37,130,-37r2,7v-62,9,-93,44,-93,105","w":612},"\u0142":{"d":"216,-392r1,124r-56,27r0,125r73,46r24,-18r12,13r-91,78v-32,-28,-79,-53,-142,-76v28,-28,27,-70,26,-122r-46,23r0,30r-14,3r1,-121r59,-25r0,-259v0,-20,-11,-41,-34,-64v25,6,48,17,67,32r11,-1v31,-29,66,-46,103,-51v-33,24,-49,54,-49,91r0,207r42,-20r0,-36","w":299},"\u017d":{"d":"84,-46v127,-59,268,-105,407,-37r32,-36r15,11r-98,118v-169,-72,-248,-68,-426,-7r-6,-5v66,-77,124,-190,179,-282r-111,0r14,-31r114,0r30,-47r-120,0r13,-32r130,0v49,-61,120,-133,212,-215v-134,72,-231,97,-371,48r-31,32r-14,-13v33,-34,64,-76,95,-113v146,57,216,58,373,8r4,5v-45,65,-91,148,-138,247r110,0r-15,32r-116,0r-29,47r123,0r-14,31r-131,0v-51,68,-129,146,-233,235xm422,-857v-42,53,-77,104,-106,154r-50,0v-29,-52,-65,-103,-108,-154r13,-12v49,29,89,63,119,102v36,-44,75,-78,117,-101","w":568},"\u017e":{"d":"116,-265v73,-1,134,40,134,109v0,98,-112,133,-179,172v-37,22,-49,79,-1,92v0,0,51,-16,53,5v0,7,-9,14,-26,19v-64,3,-89,-82,-47,-123v41,-39,103,-64,106,-134v3,-74,-79,-82,-147,-64r140,-137r-85,-80r-55,36r-9,-14r123,-83v20,19,78,77,115,80xm274,-684v-42,53,-77,104,-106,154r-50,0v-29,-52,-65,-103,-108,-154r13,-12v49,29,89,63,119,102v36,-44,75,-78,117,-101","w":281},"!":{"d":"74,-191v-16,-160,-32,-253,-67,-378r74,-86r75,86v-35,114,-50,227,-66,378r-16,0xm156,-69r-81,74v-27,-21,-52,-47,-75,-78r82,-76v13,17,38,44,74,80","w":180},"\"":{"d":"247,-667v0,84,-23,157,-33,238r-14,0r-38,-238v0,-36,14,-54,43,-54v27,0,42,26,42,54xm103,-667v0,84,-23,157,-33,238r-15,0r-32,-224v-3,-38,7,-68,38,-68v25,0,42,27,42,54","w":265},"#":{"d":"363,-213v-23,100,-38,172,-46,216v-27,-4,-57,-4,-85,0v32,-85,56,-157,71,-217v-43,-3,-62,-2,-103,0v-22,97,-37,170,-46,217v-27,-4,-57,-4,-85,0v30,-78,54,-150,71,-216v-39,0,-69,1,-90,4v11,-27,17,-51,18,-72v17,3,46,4,89,4r26,-102v-36,0,-67,1,-93,4v9,-23,15,-47,16,-72v14,3,45,4,94,4v23,-99,38,-172,46,-217v27,6,57,5,85,0v-32,85,-56,157,-71,218v43,3,62,2,103,0v22,-97,37,-170,46,-218v27,6,57,5,85,0v-30,79,-54,151,-71,217v39,0,69,-1,90,-4v-11,27,-17,51,-18,72v-17,-3,-46,-4,-89,-4r-26,102v37,0,68,-1,93,-4v-10,23,-15,47,-16,72v-14,-3,-45,-4,-94,-4xm216,-276v46,3,57,2,104,0r27,-104v-46,-3,-57,-2,-104,0","w":556},"$":{"d":"0,-416v1,-117,80,-185,181,-200r0,-63r49,0r0,67r134,30r-31,75r-103,-24r0,184v41,-20,77,-41,109,-63v51,46,76,98,75,168v0,95,-62,176,-185,243r0,99r-48,0r0,-109r-181,-45r29,-72r152,35r-1,-208r-96,57v-52,-37,-84,-107,-84,-174xm181,-324r0,-216r-93,-21v-54,78,-8,268,93,237xm336,-217v0,-69,-35,-136,-107,-104r1,245r57,13v33,-40,49,-91,49,-154","w":440},"%":{"d":"602,-314v53,45,75,138,31,211v-19,31,-55,67,-108,106v-154,-42,-195,-171,-109,-286v22,-30,56,-57,97,-83v41,18,70,35,89,52xm530,-618r-358,621r-51,0r358,-621r51,0xm227,-565v64,52,71,164,12,235v-20,24,-50,54,-92,86v-205,-68,-186,-281,-9,-373v39,17,69,35,89,52xm564,-55v40,-44,55,-89,30,-155v-22,-58,-66,-90,-126,-101v-56,53,-58,148,-3,203v27,28,60,46,99,53xm186,-307v94,-86,21,-244,-92,-256v-56,58,-59,146,-5,204v26,28,58,45,97,52","w":677},"&":{"d":"465,-4v-83,0,-119,-56,-159,-128r-175,142r-126,-193r185,-148r-83,-145v-23,-35,-8,-62,33,-83r188,-96v97,63,91,166,7,234v-9,8,-26,22,-53,43r94,166r119,-97v30,27,60,41,102,34r2,3v-42,64,-94,79,-151,29r-61,47v29,60,63,112,126,112v31,0,58,-11,79,-34r6,3v-19,74,-64,111,-133,111xm306,-425v52,-45,27,-164,-48,-163v-42,0,-66,47,-44,87r57,105v19,-15,31,-25,35,-29xm295,-152r-93,-161r-102,78r102,159","w":633},"'":{"d":"137,-586v-24,63,-66,113,-127,150r-14,-19v56,-55,51,-73,-1,-129r71,-71v11,13,35,36,71,69","w":158},"(":{"d":"238,-9r-94,132v-154,-168,-179,-428,-84,-663v37,-93,88,-175,153,-246r10,9v-178,237,-198,540,-22,780r24,-23","w":265},")":{"d":"95,-784v153,166,178,428,84,662v-37,92,-87,174,-151,246r-12,-12v175,-235,192,-536,22,-777r-24,24r-13,-11","w":265},"*":{"d":"303,-479r-63,31v-17,-21,-42,-42,-75,-62v8,39,20,70,36,94r-48,50r-46,-59v19,-19,34,-50,47,-93v-39,20,-67,43,-83,70r-66,-28r38,-62v45,12,58,15,93,7v-27,-27,-55,-44,-82,-51r6,-75r68,16v-6,32,7,63,24,100v16,-30,23,-59,22,-96r71,-16r6,71v-33,9,-63,28,-88,55v37,1,80,-1,100,-11","w":330},"+":{"d":"459,-270r-180,0r0,186r-69,0r0,-186r-181,0r0,-67r181,0r0,-186r69,0r0,186r180,0r0,67","w":483},",":{"d":"156,-77v-25,62,-68,114,-131,155r-18,-20v62,-57,58,-72,0,-135r76,-72","w":180},"-":{"d":"256,-314r-38,114r-186,0r-12,26r-14,0r38,-107r187,0r13,-33r12,0","w":286},"\u00ad":{"d":"256,-314r-38,114r-186,0r-12,26r-14,0r38,-107r187,0r13,-33r12,0","w":286},".":{"d":"153,-69r-82,74v-29,-23,-53,-49,-73,-78r79,-76v32,37,57,63,76,80","w":180},"\/":{"d":"310,-656r-259,744r-48,0r255,-744r52,0","w":330},"0":{"d":"211,3v-129,-39,-214,-143,-214,-294v0,-127,66,-235,198,-326v127,65,206,129,206,301v0,153,-86,231,-190,319xm274,-82v88,-110,83,-301,-20,-389v-38,-32,-79,-56,-127,-69v-141,171,-34,424,147,458","w":418},"1":{"d":"103,-617v49,37,73,58,73,129r0,383r41,32r38,-33r12,12r-107,97r-102,-78v18,-15,27,-30,27,-47r0,-345v0,-27,-14,-53,-41,-76r-38,31r-10,-13","w":286},"2":{"d":"413,-80r-70,82v-121,-46,-214,-45,-337,0v21,-147,212,-233,276,-352v40,-74,28,-146,-32,-199r-169,134r-61,-62r172,-140r214,132v3,83,-16,142,-60,190v-19,20,-64,52,-136,97v-67,41,-116,83,-147,125v135,-50,236,-65,350,-7","w":440},"3":{"d":"310,-161v-2,-105,-72,-160,-191,-152r0,-21v114,-12,169,-64,169,-161v0,-56,-36,-70,-70,-45r-118,88r-55,-58r139,-104r200,100v12,95,-29,141,-122,189v100,35,149,80,147,152v-2,116,-119,168,-247,176r-157,-132r65,-64r189,161v34,-35,51,-78,51,-129","w":440},"4":{"d":"416,-198r-105,0r0,99r39,28r30,-23r9,13r-92,84r-106,-68v41,-41,34,-69,34,-134r-203,0r-25,-84r243,-334v48,27,72,61,72,104r0,242r84,0xm223,-271r0,-217v-3,-16,-9,-22,-24,-36r-179,241r4,12r199,0","w":440},"5":{"d":"244,-432v88,32,158,118,142,235v-15,106,-101,180,-212,200r-173,-104r57,-64r200,119v77,-74,93,-172,20,-248v-27,-28,-61,-49,-103,-63r-136,90r52,-337r262,0r-27,86r-225,0r-29,202","w":418},"6":{"d":"209,3v-120,-34,-209,-123,-209,-266v0,-131,71,-249,214,-354r156,80r-60,75r-145,-78v-57,68,-89,155,-78,258r196,-129v155,66,148,234,24,340v-22,19,-54,45,-98,74xm327,-186v0,-67,-72,-186,-142,-138r-95,65v25,103,77,159,177,184v40,-31,60,-68,60,-111","w":418},"7":{"d":"401,-584v-133,167,-210,291,-217,543r-115,43v15,-183,100,-356,253,-521r-215,0v-37,21,-67,45,-90,72r-11,-9v17,-29,42,-79,74,-148r321,0r0,20","w":419},"8":{"d":"207,3v-117,0,-207,-39,-207,-144v0,-51,35,-102,105,-154v-119,-39,-105,-145,-32,-233v24,-28,52,-59,89,-90v119,11,191,48,205,115v15,69,-43,112,-92,137v77,27,115,74,115,141v0,84,-61,160,-183,228xm259,-368v36,-30,54,-36,54,-87v-13,-53,-82,-80,-208,-80v-56,77,-50,136,61,154v27,4,58,8,93,13xm225,-81v60,0,129,-29,127,-88v-2,-65,-67,-89,-132,-106v-9,-3,-42,-9,-99,-18v-39,34,-59,68,-59,101v0,67,92,111,163,111","w":418},"9":{"d":"395,-348v1,135,-70,246,-214,352r-155,-78r59,-73r146,73v57,-58,88,-157,77,-257r-194,133v-146,-63,-148,-223,-39,-330v25,-25,62,-55,113,-90v138,45,207,135,207,270xm65,-423v-1,69,74,183,147,134r94,-64v-28,-107,-75,-158,-179,-183v-41,28,-62,66,-62,113","w":418},":":{"d":"153,-370r-83,76v-27,-25,-51,-52,-72,-81r79,-77v24,29,49,56,76,82xm153,-69r-82,74v-29,-23,-53,-49,-73,-78r79,-76v32,37,57,63,76,80","w":180},";":{"d":"157,-370r-79,74v-27,-22,-52,-48,-74,-79r83,-77v21,27,44,54,70,82xm150,-78v-22,63,-65,115,-130,156r-18,-20v58,-55,54,-74,0,-135r77,-72v13,17,36,40,71,71","w":180},"\u037e":{"d":"157,-370r-79,74v-27,-22,-52,-48,-74,-79r83,-77v21,27,44,54,70,82xm150,-78v-22,63,-65,115,-130,156r-18,-20v58,-55,54,-74,0,-135r77,-72v13,17,36,40,71,71","w":180},"<":{"d":"70,-174v0,68,52,146,118,146v35,0,54,-20,55,-60v-28,15,-64,2,-64,-34v0,-27,13,-40,39,-40v36,0,61,31,61,68v0,61,-51,105,-112,105v-84,0,-142,-83,-142,-172v0,-136,109,-241,243,-241v63,0,123,28,180,85v3,3,45,55,127,158v45,57,86,85,123,85v53,0,90,-48,90,-103v0,-74,-69,-87,-77,-23v-28,-36,-4,-91,41,-91v48,0,81,57,81,108v0,89,-71,164,-160,164v-65,0,-131,-23,-180,-83r-124,-152v-47,-55,-96,-83,-148,-83v-84,0,-151,80,-151,163","w":852},"=":{"d":"589,-369r-589,0r0,-65r589,0r0,65xm589,-174r-589,0r0,-63r589,0r0,63","w":611},">":{"d":"584,-402v135,0,243,106,243,241v0,89,-58,172,-142,172v-61,0,-112,-44,-112,-105v0,-37,25,-68,61,-68v26,0,39,13,39,40v0,36,-35,49,-64,34v1,40,20,60,55,60v66,0,118,-78,118,-146v0,-85,-67,-163,-151,-163v-52,0,-101,28,-148,83v-7,9,-46,62,-125,152v-51,58,-114,83,-179,83v-90,0,-160,-74,-160,-164v0,-51,33,-108,81,-108v45,0,69,55,41,91v-4,-27,-16,-41,-36,-41v-27,0,-41,21,-41,64v0,55,37,103,90,103v36,0,77,-28,122,-85r128,-158v57,-57,117,-85,180,-85","w":852},"?":{"d":"106,-654v84,-9,173,67,153,165v-6,29,-33,72,-75,132v-35,50,-53,106,-53,167r-21,0v-22,-105,56,-199,56,-302v0,-45,-30,-77,-75,-77v-15,0,-45,9,-89,27r56,-109xm192,-69r-81,74v-30,-23,-54,-49,-73,-78r80,-76v13,17,38,44,74,80","w":286},"@":{"d":"488,-717v221,0,374,125,374,334v0,121,-42,211,-124,276v-88,70,-203,67,-216,-66v-43,73,-95,108,-161,108v-83,0,-126,-90,-126,-183v0,-111,126,-250,238,-250v56,0,92,31,108,93r4,1r25,-86r71,0r-83,300v-15,46,-11,109,38,104v200,-22,274,-360,128,-505v-67,-66,-138,-103,-266,-103v-245,0,-433,192,-433,442v0,225,174,359,387,359v119,0,226,-33,321,-99r13,17v-101,72,-216,108,-344,108v-240,0,-434,-166,-434,-397v0,-251,227,-453,480,-453xm383,-86v87,9,179,-189,175,-292v-3,-71,-27,-107,-86,-99v-90,13,-158,177,-165,294v-3,51,30,92,76,97","w":893},"A":{"d":"18,-405v-15,-136,107,-248,240,-248v70,0,137,22,201,66v33,-38,70,-62,113,-72r2,2v-47,46,-80,74,-78,146r8,339v1,47,11,80,30,98r32,-24r15,16r-114,94v-37,-23,-61,-60,-73,-111r-146,109r-142,-75v-30,-19,-65,-22,-70,15v4,20,24,62,-14,60v-15,0,-22,-9,-22,-26v0,-74,88,-153,124,-215v-66,-61,-100,-119,-106,-174xm391,-283r0,-220v-10,-9,-10,-28,-28,-29r-169,249r197,0xm149,-423v-4,-82,86,-113,169,-92r24,-36v-132,-65,-296,7,-294,145v0,58,29,110,88,157r133,-195v-30,-43,-99,-23,-120,21xm395,-133r0,-80r-251,0r-37,54r204,94","w":611},"B":{"d":"448,-651v92,-37,183,-4,183,88v0,52,-66,130,-110,172v88,9,132,45,132,110r0,182v-116,27,-152,48,-256,110v-75,-25,-119,-43,-197,-44v-58,-1,-138,20,-138,66v0,25,31,79,-17,75v-40,-20,-23,-64,4,-102v22,-30,99,-88,95,-148v-3,-51,-62,-26,-82,2v-9,-56,19,-84,81,-100v20,-81,-73,-103,-138,-70v10,-51,59,-87,121,-86v0,-71,33,-133,98,-185r-2,-4v-63,32,-97,-12,-158,-12v-25,0,-46,14,-64,42v10,-62,57,-114,122,-115v42,-1,127,32,147,27v16,0,49,-7,99,-21v-89,56,-132,88,-132,214r0,156v-1,119,-23,154,-79,229r3,3v87,-54,131,-124,131,-210v0,-108,-13,-244,35,-304v24,-30,66,-52,122,-75xm542,-285v4,-49,-5,-71,-48,-86v-14,7,-33,20,-56,39r0,49v68,13,46,14,104,-2xm379,-328v-4,142,-35,157,-135,218r1,4v66,-11,119,-13,174,1r0,-360r19,0r0,103v119,-59,133,-192,18,-256v-51,11,-77,43,-77,95r0,195xm542,-190r0,-75v-39,6,-62,7,-104,0r0,75v33,-4,71,-5,104,0xm542,-104r0,-66v-57,-13,-33,-13,-104,-3r0,76v23,8,41,14,54,18v11,-5,28,-14,50,-25","w":684},"C":{"d":"295,10v-181,0,-293,-117,-295,-294v-1,-147,85,-274,200,-309v-129,103,-165,277,-60,416v28,-77,8,-213,14,-314r194,-164v63,38,129,57,196,57r-86,94v-43,-17,-89,-34,-137,-50r0,474v103,24,180,-38,240,-86r5,1v-66,119,-128,175,-271,175xm254,-347v-4,94,-40,124,-101,180v35,41,83,69,144,84r0,-487r-43,35r0,188","w":583},"D":{"d":"403,-631v283,0,323,243,304,532v-51,23,-105,58,-160,106v-192,-67,-342,-54,-512,39r-5,-10v42,-25,105,-63,186,-118v71,-49,105,-110,105,-179v0,-102,-20,-200,26,-271v-60,27,-91,45,-91,118r0,130v-4,129,-103,210,-222,285r-4,-4v67,-62,100,-114,100,-155v0,-82,-84,-103,-129,-51v8,-64,68,-95,145,-85v14,-120,63,-178,154,-233r-125,6v-111,4,-158,-55,-153,-157v17,40,60,63,106,63v54,0,221,-16,275,-16xm589,-375v-13,-112,-66,-156,-179,-156r0,156v46,55,131,54,179,0xm598,-219v0,-45,-1,-87,-7,-127v-55,37,-124,38,-181,1r0,127v68,-30,130,-36,188,-1xm389,-135r0,-396r-24,-1v-61,91,17,313,-66,396xm599,-190v-50,-52,-138,-52,-190,0r0,57v62,6,125,17,188,34","w":743},"E":{"d":"295,10v-181,0,-293,-117,-295,-294v-1,-147,85,-274,200,-309v-121,99,-171,282,-60,416v28,-77,8,-213,14,-314r191,-164v50,36,142,59,214,51r-137,148r106,0r-49,103r-157,0r-1,273v94,15,146,-19,240,-86r5,1v-66,119,-128,175,-271,175xm437,-504r-116,-47r0,173xm254,-347v-4,90,-40,128,-100,180v35,40,83,68,143,84r0,-487r-43,35r0,188","w":580},"F":{"d":"696,-651v-14,108,-137,157,-241,100r0,97r141,0r-29,92r-112,0v-2,124,5,273,-47,340v-50,65,-191,98,-290,132v-44,15,-148,-24,-162,-24v-23,0,-39,17,-49,50r-4,0v0,-80,29,-133,100,-140v43,-4,131,66,152,64v42,-15,54,-64,54,-135r0,-287v-81,-6,-144,-8,-185,46r-5,0v-1,-92,89,-140,190,-138r0,-94v141,-6,157,-33,263,-110v76,35,146,39,224,7xm303,-205v0,138,-26,190,-101,255r2,4v116,-39,159,-107,159,-232r0,-365v-26,11,-21,9,-60,15r0,323","w":616},"G":{"d":"623,-289v0,251,-420,415,-574,203v-71,-97,-62,-210,7,-319v72,-113,187,-169,291,-247v93,51,145,59,243,48r1,3r-147,115v119,37,179,102,179,197xm433,-503r-168,-65r0,199xm537,-272v-12,-94,-112,-132,-206,-98r0,101v86,40,123,41,206,-3xm527,-155v13,-31,20,-61,15,-96v-87,36,-119,39,-210,6r0,87v68,-23,138,-26,195,3xm520,-137v-70,-30,-108,-26,-189,0r0,105v80,0,143,-35,189,-105xm165,-180r-2,-301v-82,73,-86,247,-14,334v11,-7,16,-18,16,-33xm309,-33r0,-327v-14,4,-29,11,-45,20v1,57,0,126,-27,149r-78,67v45,51,95,81,150,91","w":655},"H":{"d":"552,-538v83,67,118,117,116,255v-1,117,-29,187,-96,237v-36,27,-110,72,-116,111v-5,32,66,5,61,34v-9,57,-93,29,-93,-20v0,-40,99,-160,95,-164v18,-33,31,-70,38,-113v-128,-43,-191,-2,-300,90v80,4,181,29,222,-27r11,12r-91,138v-53,-32,-119,-48,-197,-48v-82,0,-126,15,-138,65v2,23,32,76,-14,76v-17,0,-25,-11,-25,-32v2,-83,124,-139,124,-218v0,-46,-64,-26,-84,1v-9,-55,20,-83,81,-99v7,-49,-19,-85,-74,-85v-21,0,-43,5,-64,15v8,-50,61,-87,120,-86v5,-105,30,-118,97,-188v-41,13,-56,19,-95,3v-63,-26,-88,-16,-130,26v13,-64,60,-115,123,-115v31,0,117,32,160,27v22,-3,63,-15,88,-21v-92,58,-134,86,-134,214r0,156v-2,119,-20,154,-76,229r3,3v81,-58,126,-95,129,-210v4,-129,-17,-265,58,-328v35,-29,83,-53,151,-66v-65,39,-116,73,-116,152r0,109xm557,-352v-11,-53,-36,-90,-73,-109r-97,82r0,27v86,20,101,22,170,0xm556,-219r0,-113v-46,14,-117,15,-169,1r0,109v62,-17,110,-16,169,3","w":699},"I":{"d":"298,-26v81,0,60,-117,51,-185v-15,-117,-28,-198,-28,-242v0,-135,49,-203,147,-203r0,7v-52,15,-64,42,-61,102v3,67,41,310,36,331v1,123,-56,226,-168,226v-47,0,-176,-53,-197,-48v-32,0,-57,17,-76,50v-7,-70,46,-138,137,-126v61,8,74,-34,72,-89v-3,-78,-13,-125,-81,-129v-18,0,-44,6,-77,18v15,-55,66,-85,125,-85v12,-110,29,-136,88,-208v-61,36,-105,11,-172,11v-22,0,-41,15,-56,46r-6,-1v15,-62,57,-108,123,-105v86,3,110,26,191,-1r1,3v-55,45,-83,111,-83,196v0,158,94,354,-81,359v42,49,80,73,115,73","w":492},"J":{"d":"174,-654v67,0,160,34,228,34v33,0,79,-11,136,-32r2,13v-67,61,-91,118,-90,209v0,111,10,240,-19,324v-29,86,-169,220,-264,220v-20,0,-84,-20,-142,-34v-21,0,-40,17,-58,50r-4,-1v15,-81,54,-122,117,-122v58,0,179,54,175,-43v-5,-119,-73,-158,-177,-182v37,-33,88,-29,138,-8v0,-76,-52,-120,-129,-120v32,-37,86,-40,138,-19v20,-109,67,-145,165,-208r-2,-4v-101,46,-150,36,-237,5v-22,-7,-43,-11,-63,-11v-37,0,-54,21,-54,47v0,23,37,5,51,5v17,0,29,10,29,31v0,28,-13,42,-39,42v-33,0,-59,-34,-59,-67v0,-82,70,-129,158,-129xm206,67v117,-24,156,-85,156,-231v0,-111,-11,-247,23,-324v16,-37,44,-76,84,-115v-107,56,-161,132,-161,228r0,239v0,121,-23,159,-103,199","w":516},"K":{"d":"127,-656v22,0,95,17,114,17v17,0,43,-6,79,-19r0,7v-70,115,-51,222,-53,381v0,43,-17,83,-50,120v-11,11,-45,42,-103,91r11,8v85,-46,130,-70,133,-73v80,-53,58,-196,58,-321v0,-75,20,-147,60,-214r17,0v-39,72,-58,147,-58,226v59,-41,113,-86,162,-135r103,115v-55,39,-109,81,-164,128v97,49,139,152,197,240r28,-26r14,13r-100,109v-32,-39,-51,-65,-82,-120r-106,121v-132,-57,-219,-43,-345,0r-12,-15v42,-49,127,-99,105,-187v-10,-40,-45,-41,-80,-23v8,-63,74,-61,120,-36v2,-89,-51,-152,-142,-115v20,-61,76,-72,133,-46v3,-106,45,-149,118,-205r-2,-4v-85,52,-96,42,-185,42v-38,0,-69,18,-92,54r-3,-1v13,-88,55,-132,125,-132xm493,-397r-68,-78r-90,66r0,130r13,1r71,-60v21,-18,46,-38,74,-59xm482,-130v-42,-69,-67,-117,-147,-119v-7,56,-29,101,-67,136v61,4,120,8,170,33","w":699},"L":{"d":"387,-126v66,0,103,31,150,53v6,0,17,-7,34,-22r15,14r-110,105v-120,-96,-257,-86,-408,-14r-6,-10v67,-57,108,-94,108,-153v0,-48,-28,-76,-84,-83v23,-21,49,-21,83,-13v6,-60,-42,-94,-108,-83v14,-36,57,-49,102,-37v-12,-106,22,-170,77,-230v-53,41,-119,11,-181,11v-20,0,-40,14,-59,43r-7,-6v17,-73,55,-105,124,-105v27,0,102,26,125,25v36,-2,40,-5,78,-21r3,5v-106,79,-72,194,-72,342v0,119,-29,153,-85,243r3,3v87,-71,139,-122,139,-255v0,-107,-29,-247,36,-302v29,-24,71,-37,130,-37r2,7v-62,9,-93,44,-93,105v0,40,9,98,8,144v-5,161,-49,218,-152,295r2,4v61,-19,109,-28,146,-28","w":612},"M":{"d":"814,-605v-23,32,-39,46,-39,86r0,389v-1,52,21,69,46,40r13,13r-88,87v-49,-19,-73,-60,-73,-123r-1,-422r-72,-53r-20,10r0,210r51,0r-52,73r0,173r23,-17r14,16r-150,133v-38,-41,-72,-72,-101,-94r0,-8v16,-13,25,-18,25,-39r-1,-164r-110,0r0,187v2,91,-50,160,-135,160v-69,0,-148,-34,-177,31r-6,0v0,-65,28,-101,81,-114v96,-24,132,-24,132,-99v0,-81,-74,-157,-166,-115v13,-59,46,-82,109,-90v0,-107,40,-183,120,-226r179,-97v43,28,70,64,79,109r165,-106r104,71r39,-29xm559,-368r0,-194r-65,44r1,150r64,0xm390,-541v0,-29,-21,-44,-63,-44v-73,57,-43,163,-49,276r40,-59r71,0xm559,-105r0,-190r-64,0r-1,168v0,25,11,42,33,51xm277,-554r-3,-3v-44,36,-57,64,-57,123r0,268v0,58,-20,98,-61,121v60,23,105,2,104,-69r0,-372v0,-23,6,-45,17,-68","w":866},"N":{"d":"233,-78v0,-63,-75,-97,-150,-90v24,-35,69,-41,116,-30v-24,-74,-65,-102,-138,-90v30,-45,86,-39,137,-14v-16,-74,-62,-111,-137,-111v42,-35,74,-32,137,-13r0,-82r244,-148v145,46,218,124,218,234v0,91,-52,202,-157,332v61,-18,90,-16,166,-3r17,-23r17,11r-67,116v-97,-25,-168,-18,-216,55r-6,-6v19,-93,77,-215,116,-303v-60,-48,-108,-43,-178,0r0,109v0,109,-80,211,-194,203v-17,3,-114,-32,-149,-31v-18,0,-39,5,-62,16r-1,-3v32,-42,61,-76,124,-76v11,0,75,11,98,5v37,0,65,-22,65,-58xm549,-427v-25,-72,-105,-122,-197,-129r0,132v71,54,136,59,197,-3xm539,-265v18,-66,26,-78,15,-139v-63,52,-131,50,-201,5r0,134v62,-36,126,-39,186,0xm219,-13v0,5,5,5,9,6v72,2,102,-54,103,-146r0,-401r-40,20r0,359v0,87,-18,131,-72,162","w":727},"O":{"d":"343,-657v165,23,298,106,310,279v11,160,-251,397,-420,388v-149,-8,-237,-117,-236,-274v0,-61,10,-121,30,-182v113,-67,202,-128,316,-211xm518,-445v-36,-57,-103,-94,-201,-112r0,114v68,60,141,66,201,-2xm541,-260v26,-66,20,-112,-11,-167v-64,56,-140,59,-212,13r0,143v82,-51,151,-53,223,11xm532,-233v-62,-80,-140,-77,-215,-10r0,169v89,0,160,-53,215,-159xm253,-311v-10,93,-28,83,-99,167v47,47,93,70,139,70r0,-486r-40,0r0,249xm166,-253r0,-259v-101,100,-120,241,-26,351v17,-27,26,-58,26,-92","w":677},"P":{"d":"182,-135v-18,-108,-72,-159,-161,-210r163,-113v6,-78,-2,-144,-79,-144v-20,0,-42,4,-65,11r0,-13v41,-33,83,-50,127,-50v69,0,111,46,118,117r49,-29r0,-90r23,0r0,74r107,-73v65,43,112,82,138,120v60,85,27,285,35,426r-145,119v-46,-19,-91,-33,-135,-41r-1,167v-57,-3,-114,-3,-171,0r-1,-178v-51,0,-109,13,-175,39r-6,-8v39,-57,98,-99,179,-124xm528,-406v2,-84,-72,-166,-156,-163r-16,12r0,149v39,50,130,48,172,2xm527,-252r0,-126v-56,29,-118,32,-170,0r0,126v54,-30,111,-26,170,0xm528,-226v-51,-39,-117,-42,-172,-6r0,89v95,22,101,23,171,52xm183,-321r0,-114r-78,50xm334,109r0,-652r-44,26r0,626r44,0","w":677},"Q":{"d":"692,-45r-96,87r-133,-111v-102,63,-165,95,-269,72v-138,-30,-223,-185,-181,-365v6,-26,14,-54,25,-84v113,-67,202,-128,316,-211v153,17,283,103,307,238v22,119,-52,211,-118,281v37,29,71,66,113,90v5,0,12,-4,22,-12xm529,-445v-35,-57,-103,-94,-203,-112r0,114v73,59,141,67,203,-2xm552,-260v26,-66,20,-112,-11,-167v-65,56,-138,59,-214,13r0,143v82,-52,153,-53,225,11xm543,-233v-62,-80,-141,-76,-217,-10r0,169v89,0,161,-53,217,-159xm264,-311v-7,75,-40,107,-101,167v49,47,96,70,141,70r0,-486r-40,0r0,249xm177,-253r0,-259v-101,97,-119,242,-28,351v19,-27,28,-58,28,-92","w":718},"R":{"d":"373,17v-109,-79,-222,-79,-372,-20r-1,-5v47,-62,107,-104,181,-127v0,-86,-55,-156,-165,-210r162,-121v7,-77,-8,-136,-81,-136v-16,0,-37,4,-64,11r0,-13v39,-33,82,-50,128,-50v67,0,109,46,116,114r178,-118r137,185r-140,100v92,62,116,89,155,212v13,38,30,68,52,89r22,-17r12,12r-91,88r-10,0v-27,-21,-52,-59,-75,-116v-29,-71,-48,-114,-58,-129v-27,-41,-64,-61,-110,-61r0,173v32,11,63,25,92,42r21,-19r13,13xm493,-427r-113,-158r-31,21r0,243xm328,-129r0,-419r-45,30r0,383v16,0,31,2,45,6xm177,-329r0,-110r-75,50","w":718},"S":{"d":"695,-269v5,126,-131,223,-251,280r-124,-51v-94,40,-138,65,-234,57v-47,-3,-88,-36,-88,-81v0,-69,50,-104,149,-104v29,0,56,2,81,5r23,-49v-103,8,-224,-32,-224,-132v0,-39,27,-71,80,-96v2,-102,105,-165,165,-222v64,26,128,48,191,66r22,-39r18,13r-95,170v157,2,282,48,287,183xm415,-510v-68,-45,-144,-90,-218,-44v-60,38,-23,125,75,118v36,-3,75,-9,109,-13xm571,-223v-9,60,-62,86,-126,121r89,34v65,-60,93,-104,93,-172v0,-119,-136,-142,-267,-121r-28,58v119,-13,231,-23,239,80xm114,-421v-75,65,29,128,109,128v18,0,43,-3,75,-8r30,-55v-100,13,-188,0,-214,-65xm485,-192v0,-31,-31,-33,-71,-33v-7,0,-52,4,-135,12r-27,54v35,6,89,21,164,45v22,-18,69,-51,69,-78xm287,-49v-95,-35,-155,-63,-232,-36v-53,32,-12,88,51,88v54,0,114,-17,181,-52","w":718},"T":{"d":"245,-653v107,0,180,47,275,47v44,0,76,-18,97,-53r6,1v3,96,-82,152,-180,138r0,440v70,-22,127,-66,171,-133r5,3v-46,144,-113,216,-269,220v-166,5,-303,-108,-303,-273v0,-149,78,-218,178,-295v-55,-3,-104,-9,-145,16v-23,13,-47,38,-72,73r-4,0v20,-123,100,-184,241,-184xm356,-330v-4,110,-39,140,-109,207v46,34,109,57,174,47r0,-445r-65,-13r0,204xm258,-220r0,-331r-15,-4v-118,121,-142,298,-18,417v22,-21,33,-48,33,-82","w":655},"U":{"d":"133,-656v68,1,182,55,236,0r23,0r0,241v56,29,97,30,150,0r0,-120r-45,-31r-33,38r-13,-11r99,-116r91,60r48,-40r8,5v-27,33,-41,66,-41,100r0,399v0,30,6,53,18,68r33,-28r10,14r-89,88r-20,0v-35,-32,-57,-73,-67,-123v-87,81,-130,117,-246,122v-148,7,-254,-118,-254,-257v0,-179,113,-267,251,-337r-1,-4v-73,20,-98,11,-172,11v-52,0,-91,37,-116,97r-8,3v-2,-100,46,-180,138,-179xm541,-287r0,-106v-56,24,-92,24,-148,0r0,106v49,-22,98,-23,148,0xm542,-141r0,-126v-58,-29,-91,-27,-150,0r1,182v51,-5,101,-24,149,-56xm370,-83r0,-541v-68,60,-41,189,-41,302v0,79,-38,143,-113,191v40,32,91,48,154,48xm322,-584v-114,69,-177,140,-177,278v0,61,19,115,57,163v59,-52,38,-169,38,-270v0,-59,27,-116,82,-171","w":740},"V":{"d":"169,-321v-3,-115,-24,-258,-120,-258v-18,0,-37,12,-56,36v10,-77,46,-116,109,-116v66,0,113,43,141,130r258,-134v64,105,94,220,50,346v-50,144,-97,179,-230,328v-80,-38,-116,-44,-194,-9r-14,-9v35,-110,58,-135,44,-204v-10,-49,-58,-72,-117,-69v4,-74,78,-76,129,-41xm461,-415v-7,-68,-26,-126,-55,-175r-156,84v10,60,15,93,15,99v91,23,107,19,196,-8xm461,-393v-74,23,-119,24,-196,4v0,42,-5,84,-16,127v63,-11,141,-7,189,16v15,-45,23,-94,23,-147xm432,-228v-65,-29,-121,-31,-192,-10v-26,78,-40,100,-88,191r9,4v86,-52,116,-72,202,-45v17,-30,40,-77,69,-140","w":590},"W":{"d":"536,-656v20,-7,108,37,147,36v27,0,47,-12,58,-36r21,0r0,249v53,17,65,15,120,0r0,-128r-34,-35r-29,29r-16,-15r95,-100r74,69r62,-38r8,4v-31,35,-47,69,-47,101r0,390v0,27,7,49,22,64r35,-28r12,17r-97,88v-53,-28,-75,-62,-83,-123v-85,82,-162,123,-232,123v-83,0,-146,-44,-187,-132v-69,87,-103,128,-204,131v-126,4,-223,-116,-218,-248v7,-176,83,-261,222,-343r-2,-4v-58,25,-84,11,-149,13v-60,2,-77,34,-101,86r-13,-4v0,-93,49,-181,150,-163v5,1,34,10,88,28v58,20,87,10,128,-31r24,0r0,574v23,-15,45,-34,66,-57v-74,-199,67,-362,201,-439r-1,-4v-31,6,-62,5,-98,5v-78,-1,-111,16,-134,66r-11,-4v10,-73,51,-140,123,-141xm882,-282r0,-103v-53,12,-75,15,-119,0r0,103v30,-11,89,-10,119,0xm741,-76r0,-539v-27,21,-41,50,-41,88r0,207v0,93,-31,147,-112,192v42,35,93,52,153,52xm882,-138r0,-124v-48,-14,-72,-13,-120,0r1,180v41,-11,80,-29,119,-56xm680,-577v-124,68,-219,287,-106,434v55,-52,37,-162,37,-260v0,-57,24,-114,72,-171xm314,-320v-2,110,-36,144,-112,192v45,39,101,62,165,52r0,-539v-40,28,-53,49,-53,96r0,199xm294,-577v-138,54,-237,301,-106,434v49,-46,33,-168,33,-260v0,-54,25,-111,76,-171","w":1086},"X":{"d":"434,-656v50,36,55,37,126,73r-39,85r-113,-46r-71,152r1,15r175,0r-31,70r-114,0r93,195v7,15,21,29,41,44r30,-29r14,19r-91,89v-45,-17,-70,-54,-92,-103r-86,-184r-128,286v-48,-35,-91,-59,-130,-74r40,-92r118,44r80,-176r-1,-19r-170,0r33,-71r107,0r-74,-150v-30,-65,-89,-69,-144,-29r-4,-4v44,-86,122,-125,196,-70v43,52,86,157,123,223","w":580},"Y":{"d":"434,-632v122,1,180,115,180,244v0,176,-96,284,-272,284v-134,0,-321,-26,-321,102v0,62,54,92,123,83v59,-23,168,-70,226,-71v51,0,99,29,101,81v1,37,-21,49,-51,42v-37,-9,-18,-61,-9,-81v-4,-11,-4,-15,-17,-16v-65,15,-148,96,-253,102v-74,4,-139,-65,-139,-138v0,-76,67,-127,146,-126v12,-105,-42,-154,-107,-185r0,-4v42,-1,77,3,106,18v7,-87,-34,-123,-103,-153v29,-13,77,-7,103,3v7,-98,7,-190,-100,-180r0,-5v87,-47,182,-11,207,74v69,-49,129,-74,180,-74xm492,-447v-20,-116,-77,-160,-175,-121r0,125v65,48,109,44,175,-4xm494,-285v9,-63,5,-88,1,-143v-58,41,-116,48,-177,11r0,126v56,-36,118,-30,176,6xm489,-265v-57,-44,-115,-45,-172,-5r0,148v115,5,146,-56,172,-143xm295,-122r0,-434r-45,21r0,413r45,0","w":633},"Z":{"d":"84,-46v127,-59,268,-105,407,-37r32,-36r15,11r-98,118v-169,-72,-248,-68,-426,-7r-6,-5v66,-77,124,-190,179,-282r-111,0r14,-31r114,0r30,-47r-120,0r13,-32r130,0v49,-61,120,-133,212,-215v-134,72,-231,97,-371,48r-31,32r-14,-13v33,-34,64,-76,95,-113v146,57,216,58,373,8r4,5v-45,65,-91,148,-138,247r110,0r-15,32r-116,0r-29,47r123,0r-14,31r-131,0v-51,68,-129,146,-233,235","w":568},"[":{"d":"198,116r-196,0r0,-895r196,0r0,19r-97,1r0,857r97,1r0,17","w":224},"\\":{"d":"255,-606r-20,69r-91,-18r0,450r65,35r23,-18r12,13r-88,80v-51,-39,-95,-64,-133,-75v17,-17,26,-42,26,-75r0,-257r-49,0r8,-51r41,0r0,-102v37,-16,74,-41,111,-74","w":267},"]":{"d":"195,116r-195,0r0,-18r96,-1r0,-857r-96,-1r0,-17r195,0r0,894","w":224},"^":{"d":"602,-446r-45,0r-254,-208r-254,208r-42,0r249,-277r97,0","w":633},"_":{"d":"501,233r-501,0r0,-68r501,0r0,68","w":524},"`":{"d":"244,-540r-37,15v-79,-42,-138,-89,-179,-140r66,-22v39,49,89,98,150,147","w":326},"a":{"d":"365,-69r-86,72v-43,-23,-64,-59,-64,-108r-136,109r-5,0v-114,-104,-81,-207,28,-309r-48,-125v47,6,80,-6,116,-38r142,47r28,-22r2,4v-16,25,-27,50,-34,77r0,262v7,25,27,38,46,22xm215,-257r0,-110r-145,-54r42,114xm216,-131r0,-108r-104,-52v-47,84,-37,158,29,224"},"b":{"d":"361,-69v-44,11,-92,35,-144,71v-68,-45,-130,-73,-186,-84v19,-20,28,-45,28,-74r0,-246r-51,0r0,-51r51,0v4,-69,7,-114,-37,-156r3,-3v24,9,45,20,62,33r15,-1v29,-33,61,-50,96,-50v-71,51,-37,162,-45,268r142,-103v44,29,66,68,66,117r0,279xm270,-75r0,-271v-3,-17,-16,-32,-38,-47r-79,59r0,207"},"c":{"d":"265,-87r-121,89v-49,-34,-95,-55,-138,-64v18,-16,27,-40,27,-71r0,-255v45,-19,86,-46,123,-79r101,63r-43,61r-90,-51r0,284r88,44r43,-32","w":303},"d":{"d":"348,-400r0,329v-58,19,-107,44,-148,77v-54,-39,-114,-65,-180,-79v19,-17,28,-42,28,-77r0,-239v24,-6,54,-19,91,-38r-127,-82r0,-95r304,194v9,-15,23,-26,40,-33v-5,14,-8,28,-8,43xm253,-73r0,-280r-79,-53r-33,20r0,273"},"e":{"d":"296,-338v-73,51,-130,94,-173,131r0,104r84,37r66,-42r11,12r-142,98v-44,-24,-90,-41,-138,-50v19,-20,28,-44,28,-73r0,-267v46,-21,91,-48,135,-79xm217,-305r-95,-97r0,172","w":326},"f":{"d":"272,-86r-99,89v-37,-28,-85,-53,-144,-76v17,-17,25,-41,25,-72r0,-257r-51,0r9,-51r44,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r75,0r-7,51r-68,0r0,286r72,46r34,-28","w":303},"g":{"d":"323,-121v-9,38,71,130,71,161v0,37,-82,73,-123,92v-99,-27,-153,-29,-245,0r-21,-18r108,-123r-93,-66r0,-328v50,-11,108,-42,153,-64r153,70r75,-47r0,95r-78,-12r0,240xm234,-136r0,-228r-126,-36r0,284r64,43xm334,60v-60,-57,-89,-86,-103,-167r-143,158v78,-12,165,-6,244,21","w":430},"h":{"d":"361,-104v-3,121,-140,189,-265,211r-3,-6v65,-25,106,-45,124,-58v35,-26,53,-63,53,-111r0,-280v-4,-19,-17,-34,-38,-47r-79,59r0,247r26,29r-76,66r-75,-61r29,-34r0,-313r-49,0r0,-49r51,0v2,-67,1,-130,-36,-159r2,-2v24,9,45,20,62,33r15,-1v29,-33,61,-50,96,-50v-69,50,-35,164,-43,268r140,-103v44,29,66,68,66,117r0,244","w":403},"i":{"d":"156,-614r-85,102r-13,0r24,-102r74,0xm182,-69r-91,74v-51,-28,-62,-61,-62,-119r0,-261r-29,-31r74,-61r77,64r-25,28r0,277v3,13,12,24,28,32r18,-12","w":214},"j":{"d":"176,-614r-85,102r-13,0r24,-102r74,0xm68,-19v1,-23,-25,-183,-25,-206v0,-51,10,-98,29,-142r-36,-34v-13,4,-28,25,-38,10r98,-75v29,27,59,55,91,82v-34,53,-51,109,-51,168v0,34,10,114,10,132v0,102,-35,154,-129,200r-7,-11v39,-35,58,-76,58,-124","w":214},"k":{"d":"409,-69r-91,71v-25,-18,-41,-51,-48,-98r-96,101v-57,-32,-105,-54,-145,-66v17,-17,25,-41,25,-72r0,-270r-51,0r0,-50r51,0v-2,-71,12,-118,-35,-157v24,6,46,16,65,31r14,-1v30,-33,62,-49,97,-49v-75,40,-39,174,-47,277r130,-114r91,96v-19,15,-50,43,-92,85v48,40,59,64,75,145v6,30,15,53,26,68r19,-10xm288,-326r-62,-66r-79,72r0,115xm265,-124v-5,-39,-25,-72,-59,-101r-59,47r0,83r60,31","w":443},"l":{"d":"238,-75r-91,78v-32,-28,-79,-53,-142,-76v17,-19,26,-43,26,-72r0,-399v0,-20,-11,-41,-33,-64v25,6,47,17,66,32r11,-1v31,-29,66,-46,103,-51v-33,24,-49,54,-49,91r0,421r73,46r24,-18","w":267},"m":{"d":"615,-424r-44,63r0,263v6,13,16,23,30,32r19,-12r12,10r-90,74v-46,-27,-62,-51,-63,-120r0,-239r-43,-39r-71,52r0,248r26,34r-71,64r-77,-64r30,-31r0,-257v0,-15,-13,-31,-40,-49r-79,59r0,244r27,34r-73,64r-74,-64r27,-31r0,-257v0,-17,-8,-33,-25,-46r-16,11r-9,-11r80,-75v43,23,65,58,65,106r145,-106v33,30,54,65,64,105v30,-22,73,-56,130,-103r68,64r41,-34","w":671},"n":{"d":"410,-68r-90,74v-48,-31,-61,-60,-61,-120r0,-239r-45,-39r-71,52r0,248r27,34r-72,64r-76,-64r28,-31r0,-257v0,-17,-8,-33,-24,-46r-16,11r-10,-11r82,-75v42,25,63,60,63,105v56,-41,99,-76,128,-103r69,64r43,-34r10,11v-15,19,-30,40,-44,63r0,263v5,12,15,23,28,32r21,-12","w":443},"o":{"d":"329,-71v-60,18,-109,44,-148,77v-53,-39,-113,-65,-180,-79v18,-15,27,-40,27,-77r0,-237v54,-15,101,-42,142,-80v63,41,116,64,159,70r0,326xm235,-73r0,-275r-115,-44r0,276","w":387},"p":{"d":"198,132v-55,-11,-66,-21,-102,-63v-27,23,-40,35,-73,42v42,-49,40,-98,36,-173v-13,-5,-33,-4,-51,-4r0,-29v11,-5,29,-11,53,-18r0,-228v0,-30,-8,-50,-23,-59r-24,15r-11,-8r84,-75v40,21,63,53,69,98r103,-97v67,23,100,74,100,153r0,222v-47,29,-68,44,-121,92v-19,-8,-47,-21,-84,-39v-9,75,3,120,44,171xm270,-75r0,-262v0,-21,-32,-48,-56,-56r-60,53r0,229v41,11,79,23,116,36"},"q":{"d":"344,111v-34,-7,-46,-19,-75,-42v-26,28,-51,58,-99,63v56,-66,41,-132,40,-232r-142,102v-42,-28,-63,-67,-63,-116r0,-281v54,-14,101,-38,140,-72v64,46,126,75,186,87r-25,32r0,369v0,27,13,57,38,90xm212,-127r0,-209r-116,-50r0,269v0,19,12,35,36,48","w":373},"r":{"d":"86,-467v40,22,54,31,63,78r101,-77r65,71r-66,57r-60,-59r-39,30r0,259r54,42r29,-21r12,12r-91,78v-38,-33,-81,-58,-128,-76v18,-15,27,-39,27,-72r0,-201v0,-17,-8,-33,-24,-46r-17,11r-11,-11","w":329},"s":{"d":"341,-66v-52,18,-71,34,-124,68v-68,-34,-131,-34,-202,-3r-13,-9r119,-170r-96,-53r0,-154v45,-20,86,-48,123,-83v70,31,97,38,154,38v19,0,38,-16,38,-35v3,-6,-18,-31,-27,-47v0,-11,8,-16,24,-16v20,0,30,12,30,37v-16,66,-85,130,-120,185r94,58r0,184xm270,-374v-57,8,-102,5,-156,-18r-1,115r60,31xm258,-207r-63,-32r-111,144v61,-12,119,-7,173,21","w":403},"t":{"d":"229,-402r-102,0r0,291r53,44r28,-22r11,14r-90,78v-46,-37,-88,-63,-126,-76v18,-19,27,-43,27,-72r0,-258r-35,0r1,-14r130,-163r1,127r102,0r0,51","w":261},"u":{"d":"411,-68r-89,74v-42,-29,-63,-64,-63,-106r-143,102v-42,-27,-63,-66,-63,-116r0,-264r-18,-17r-23,14r-10,-11r96,-74r76,59r-30,24r0,266v0,19,12,35,36,48r81,-58r0,-251r-24,-30r71,-59r74,59r-29,25r0,285v0,11,10,21,30,32r18,-12","w":443},"v":{"d":"336,-71v-61,19,-110,44,-148,77v-54,-39,-114,-65,-180,-79v19,-17,28,-43,28,-77r0,-233v-71,-89,-49,-152,56,-210r5,8v-51,56,-54,60,-4,128v25,33,37,64,37,92r142,-102v43,41,64,74,64,100r0,296xm242,-73r0,-265v0,-13,-11,-32,-34,-57r-80,59r0,220v29,14,77,30,114,43","w":383},"w":{"d":"544,-71v-51,14,-98,40,-141,77v-94,-45,-134,-56,-209,0v-46,-34,-104,-60,-175,-79v19,-17,28,-43,28,-77r0,-233v-75,-90,-52,-151,55,-210r5,8v-51,56,-54,60,-4,128v25,33,37,64,37,92r135,-101v40,31,62,65,65,104r136,-105v45,39,68,75,68,108r0,288xm459,-68r0,-270v0,-21,-21,-40,-38,-57r-80,59r0,233v39,14,70,22,118,35xm248,-68r0,-270v-5,-31,-9,-24,-36,-57r-74,59r0,226v28,13,65,27,110,42","w":586},"x":{"d":"410,-69r-82,75v-78,-64,-60,-65,-143,-202r-86,201r-93,-53r31,-74r79,28r58,-125v-43,-65,-61,-148,-131,-187r-33,20r-8,-9r92,-71v65,32,93,102,131,161r71,-161r92,50r-31,72r-77,-35r-47,99v45,72,77,166,141,217r27,-16","w":443},"y":{"d":"-12,75v-14,-43,79,-131,79,-156r0,-265v0,-17,-8,-32,-24,-47r-32,23r-11,-13r96,-84v43,23,64,58,64,107r135,-106v78,81,82,214,2,300v-52,56,-148,100,-222,145v-48,29,-67,53,-67,83v0,35,39,52,78,52v47,0,81,-40,104,-43v8,1,13,4,14,15v0,29,-75,46,-114,46v-64,0,-98,-19,-102,-57xm157,-89v85,-53,169,-210,68,-298r-68,53r0,245","w":382},"z":{"d":"116,-265v73,-1,134,40,134,109v0,98,-112,133,-179,172v-37,22,-49,79,-1,92v0,0,51,-16,53,5v0,7,-9,14,-26,19v-64,3,-89,-82,-47,-123v41,-39,103,-64,106,-134v3,-74,-79,-82,-147,-64r140,-137r-85,-80r-55,36r-9,-14r123,-83v20,19,78,77,115,80","w":281},"{":{"d":"72,-314v131,24,140,111,134,270v-4,102,19,133,117,136r0,22v-145,-1,-186,-31,-190,-167r0,-100v-2,-113,-31,-135,-135,-149r0,-27v103,-17,135,-36,135,-149v0,-93,-7,-206,47,-240v28,-18,74,-30,143,-30r0,21v-127,-8,-118,90,-116,211v2,141,-26,164,-135,198r0,4","w":352},"|":{"d":"70,233r-68,0r0,-1004r68,0r0,1004","w":93},"}":{"d":"186,-470v3,106,37,126,137,141r0,27v-104,11,-138,41,-136,149v2,92,4,205,-46,237v-28,18,-74,30,-144,30r0,-22v127,10,115,-91,113,-212v-1,-129,31,-164,137,-194r0,-4v-134,-23,-141,-112,-136,-270v3,-107,-19,-134,-114,-139r0,-21v144,1,186,32,190,170","w":352},"~":{"d":"253,-419r-1,120r-196,64r-4,28r-13,5r3,-114r197,-64r2,-35xm296,-286r-1,121r-196,63r-3,29r-14,4r3,-114r197,-64r2,-35","w":335},"\u20ac":{"d":"544,-676v-54,57,-103,118,-160,135v-49,-16,-93,-51,-161,-31v-72,52,-97,85,-119,169r207,0r0,34r-212,0v1,23,0,46,4,66r208,0r0,34r-198,0v30,93,126,159,245,156v70,-3,132,-12,185,-29r-60,148v-61,9,-105,13,-134,13v-174,3,-295,-122,-303,-288r-47,0r0,-34r47,0v-1,-15,-1,-38,0,-67r-47,1r0,-34r58,0v13,-55,40,-100,82,-137v84,-75,121,-95,201,-157v16,2,94,40,126,40v8,0,24,-4,47,-13v23,-9,29,-14,18,-14v-1,0,4,3,13,8","w":598},"\u201a":{"d":"156,-77v-25,62,-68,114,-131,155r-18,-20v62,-57,58,-72,0,-135r76,-72","w":180},"\u0192":{"d":"431,-559v-12,-21,-32,-46,-59,-76v-32,61,-55,213,-76,300r72,0r14,-14r30,20r-54,59r-76,0v-37,148,-50,356,-155,426v-11,2,-98,76,-134,30r-55,-70r87,-67v15,22,40,66,57,77v12,-18,23,-50,33,-97r64,-299r-64,0r-18,16r-35,-18r64,-63r66,0v22,-95,45,-233,91,-289v27,-32,88,-85,137,-90v38,5,65,51,99,93","w":456},"\u201e":{"d":"336,-77v-25,62,-68,114,-131,155r-18,-20v62,-57,58,-72,0,-135r76,-72xm156,-77v-25,62,-68,114,-131,155r-18,-20v62,-57,58,-72,0,-135r76,-72","w":351},"\u2026":{"d":"583,-69r-82,74v-29,-23,-53,-49,-74,-78r80,-76v32,37,57,63,76,80xm363,-69r-82,74v-29,-23,-53,-49,-74,-78r80,-76v32,37,57,63,76,80xm153,-69r-82,74v-29,-23,-53,-49,-73,-78r79,-76v32,37,57,63,76,80","w":631},"\u2020":{"d":"335,-385r-142,-29r32,583r-98,0r34,-583r-143,29r0,-91r144,29r-27,-224r85,0r-27,224r142,-29r0,91","w":351},"\u2021":{"d":"335,-24r-142,-29r27,222r-85,0r27,-222r-144,29r0,-91r143,29r-19,-164r19,-164r-143,29r0,-91r144,29r-27,-224r85,0r-27,224r142,-29r0,91r-142,-29r19,164r-19,164r142,-29r0,91","w":351},"\u02c6":{"d":"12,-536v49,-57,67,-81,112,-150r50,0v35,55,72,105,112,150r-13,9v-49,-27,-90,-60,-124,-99v-31,39,-73,72,-125,100","w":326},"\u2030":{"d":"922,-314v53,45,75,138,31,211v-19,31,-55,67,-108,106v-154,-42,-195,-171,-109,-286v22,-30,56,-57,97,-83v41,18,70,35,89,52xm602,-314v53,45,75,138,31,211v-19,31,-55,67,-108,106v-154,-42,-195,-171,-109,-286v22,-30,56,-57,97,-83v41,18,70,35,89,52xm530,-618r-358,621r-51,0r358,-621r51,0xm227,-565v64,52,71,164,12,235v-20,24,-50,54,-92,86v-205,-68,-186,-281,-9,-373v39,17,69,35,89,52xm884,-55v40,-44,55,-89,30,-155v-22,-58,-66,-90,-126,-101v-56,53,-58,148,-3,203v27,28,60,46,99,53xm564,-55v40,-44,55,-89,30,-155v-22,-58,-66,-90,-126,-101v-56,53,-58,148,-3,203v27,28,60,46,99,53xm186,-307v94,-86,21,-244,-92,-256v-56,58,-59,146,-5,204v26,28,58,45,97,52","w":1008},"\u0160":{"d":"422,-857v-42,53,-77,104,-106,154r-50,0v-29,-52,-65,-103,-108,-154r13,-12v49,29,89,63,119,102v36,-44,75,-78,117,-101xm695,-269v5,126,-131,223,-251,280r-124,-51v-94,40,-138,65,-234,57v-47,-3,-88,-36,-88,-81v0,-69,50,-104,149,-104v29,0,56,2,81,5r23,-49v-103,8,-224,-32,-224,-132v0,-39,27,-71,80,-96v2,-102,105,-165,165,-222v64,26,128,48,191,66r22,-39r18,13r-95,170v157,2,282,48,287,183xm415,-510v-68,-45,-144,-90,-218,-44v-60,38,-23,125,75,118v36,-3,75,-9,109,-13xm571,-223v-9,60,-62,86,-126,121r89,34v65,-60,93,-104,93,-172v0,-119,-136,-142,-267,-121r-28,58v119,-13,231,-23,239,80xm114,-421v-75,65,29,128,109,128v18,0,43,-3,75,-8r30,-55v-100,13,-188,0,-214,-65xm485,-192v0,-31,-31,-33,-71,-33v-7,0,-52,4,-135,12r-27,54v35,6,89,21,164,45v22,-18,69,-51,69,-78xm287,-49v-95,-35,-155,-63,-232,-36v-53,32,-12,88,51,88v54,0,114,-17,181,-52","w":718},"\u2039":{"d":"188,-103r-59,36r-63,-86r-66,-81v58,-69,102,-125,131,-168r57,34r-106,134","w":222},"\u0152":{"d":"776,-74v98,-5,127,-32,197,-90r5,5v-53,113,-132,169,-239,169v-123,0,-207,-68,-254,-204v-87,137,-183,205,-288,205v-156,0,-229,-160,-199,-337v5,-29,13,-70,27,-121v110,-81,198,-151,265,-210v101,14,180,69,238,166v29,-44,75,-81,137,-112r2,5v-74,65,-114,109,-114,228v0,78,15,143,46,196v15,-14,23,-35,23,-62r0,-252r170,-168v42,36,107,56,184,52r-113,148r89,2r-48,100r-128,1r0,279xm873,-504r-97,-44r-1,179xm751,-76r-1,-495r-43,39r0,193v0,69,-32,129,-96,180v28,45,75,72,140,83xm441,-445v-31,-57,-86,-94,-165,-111r-1,118v48,57,122,52,166,-7xm458,-261v17,-90,15,-87,-10,-165v-47,50,-118,60,-172,17r0,132v62,-47,130,-42,182,16xm450,-233v-43,-71,-121,-78,-175,-16r1,175v82,-10,144,-85,174,-159xm254,-74r0,-483r-46,0r-1,246v0,55,-28,112,-84,172v37,43,81,65,131,65xm112,-155v43,-85,16,-234,23,-354v-77,115,-92,234,-23,354","w":999},"\u2018":{"d":"163,-519r-76,72v-20,-23,-50,-50,-73,-72v25,-63,68,-115,131,-156r18,20v-62,57,-58,73,0,136","w":180},"\u2019":{"d":"156,-587v-25,63,-68,115,-131,156r-18,-20v62,-57,58,-73,0,-136r76,-72","w":180},"\u201c":{"d":"343,-519r-76,72v-20,-23,-50,-50,-73,-72v25,-63,68,-115,131,-156r18,20v-62,57,-58,73,0,136xm163,-519r-76,72v-20,-23,-50,-50,-73,-72v25,-63,68,-115,131,-156r18,20v-62,57,-58,73,0,136","w":351},"\u201d":{"d":"336,-587v-25,63,-68,115,-131,156r-18,-20v62,-57,58,-73,0,-136r76,-72xm156,-587v-25,63,-68,115,-131,156r-18,-20v62,-57,58,-73,0,-136r76,-72","w":351},"\u2022":{"d":"439,-321r-180,165v-61,-49,-116,-107,-163,-174r176,-167v63,74,118,133,167,176","w":532},"\u2013":{"d":"509,-270r-480,0r0,-67r480,0r0,67","w":547},"\u2014":{"d":"609,-270r-580,0r0,-67r580,0r0,67","w":650},"\u02dc":{"d":"146,-648v46,-3,131,49,178,23r15,-24r18,6v-19,31,-37,81,-84,80v-57,-1,-143,-35,-178,-28r-14,28r-17,-5v12,-27,40,-87,82,-80","w":443},"\u2122":{"d":"125,-683v71,0,143,56,186,-3r3,0v0,50,-43,77,-90,69r0,220v35,-11,64,-33,86,-66r2,1v-23,72,-56,108,-134,111v-84,3,-152,-55,-152,-137v0,-66,40,-112,89,-148v-53,-5,-78,3,-108,45r-2,0v10,-61,50,-92,120,-92xm181,-522v-2,54,-21,71,-55,104v23,17,55,29,87,23r0,-222r-32,-7r0,102xm132,-467r0,-165r-8,-2v-59,60,-71,149,-9,208v11,-10,17,-24,17,-41xm372,-398v21,-51,-22,-105,-78,-82v6,-26,24,-41,55,-45v0,-53,20,-91,60,-113r89,-48v22,14,35,32,40,54r82,-53r52,36v8,-4,17,-20,25,-11v-13,18,-19,32,-19,43r0,195v0,26,10,35,23,20r6,6r-44,44v-24,-9,-36,-30,-36,-62r-1,-211r-36,-26r-10,5r0,105r26,0r-26,36r0,87v7,-7,13,-11,18,-1r-75,67v-19,-21,-36,-36,-50,-47v2,-11,14,-16,12,-24r0,-82r-55,0r0,94v4,68,-55,91,-120,74v-17,0,-29,7,-37,22r-3,0v0,-33,14,-52,41,-58v35,-7,57,-14,61,-25xm570,-541r0,-97r-33,22r1,75r32,0xm485,-541v-7,-42,23,-112,-31,-109v-37,30,-22,81,-25,138r20,-29r36,0xm570,-410r0,-95r-32,0v4,38,-15,97,16,110xm420,-414v0,-74,-7,-167,7,-222v-47,34,-28,124,-28,196v0,29,-10,49,-31,60v29,12,52,2,52,-34","w":718},"\u0161":{"d":"334,-684v-42,53,-77,104,-106,154r-50,0v-29,-52,-65,-103,-108,-154r13,-12v49,29,89,63,119,102v36,-44,75,-78,117,-101xm351,-66v-52,18,-71,34,-124,68v-68,-34,-131,-34,-202,-3r-13,-9r119,-170r-96,-53r0,-154v45,-20,86,-48,123,-83v70,31,97,38,154,38v19,0,38,-16,38,-35v3,-6,-18,-31,-27,-47v0,-11,8,-16,24,-16v20,0,30,12,30,37v-16,66,-85,130,-120,185r94,58r0,184xm280,-374v-57,8,-102,5,-156,-18r-1,115r60,31xm268,-207r-63,-32r-111,144v61,-12,119,-7,173,21","w":420},"\u203a":{"d":"87,-402v50,73,59,81,131,168v-37,45,-80,100,-129,167r-59,-36r106,-131r-106,-134","w":222},"\u0153":{"d":"493,-339r-172,132r0,104r85,37r66,-41r9,12r-140,98r-81,-38v-40,-1,-43,19,-80,40v-51,-37,-111,-63,-178,-78v19,-17,28,-43,28,-77r0,-237v51,-15,99,-41,143,-80v20,12,51,29,93,51v30,2,38,-10,61,-25r41,-26xm413,-302r-90,-90r0,157xm236,-348r-114,-44r-1,276v29,14,77,30,114,43","w":532},"\u0178":{"d":"476,-811r-64,59r-57,-62r62,-60v13,15,32,36,59,63xm247,-874r58,63r-63,59r-56,-62xm434,-632v122,1,180,115,180,244v0,176,-96,284,-272,284v-134,0,-321,-26,-321,102v0,62,54,92,123,83v59,-23,168,-70,226,-71v51,0,99,29,101,81v1,37,-21,49,-51,42v-37,-9,-18,-61,-9,-81v-4,-11,-4,-15,-17,-16v-65,15,-148,96,-253,102v-74,4,-139,-65,-139,-138v0,-76,67,-127,146,-126v12,-105,-42,-154,-107,-185r0,-4v42,-1,77,3,106,18v7,-87,-34,-123,-103,-153v29,-13,77,-7,103,3v7,-98,7,-190,-100,-180r0,-5v87,-47,182,-11,207,74v69,-49,129,-74,180,-74xm492,-447v-20,-116,-77,-160,-175,-121r0,125v65,48,109,44,175,-4xm494,-285v9,-63,5,-88,1,-143v-58,41,-116,48,-177,11r0,126v56,-36,118,-30,176,6xm489,-265v-57,-44,-115,-45,-172,-5r1,148v113,5,145,-56,171,-143xm296,-122r-1,-434r-45,21r1,413r45,0","w":633},"\u00a1":{"d":"82,-458v16,160,32,253,67,378r-74,85r-75,-85v35,-114,50,-227,66,-378r16,0xm0,-580r81,-75v27,21,52,48,75,79r-82,76v-13,-17,-38,-44,-74,-80","w":180},"\u00a2":{"d":"299,-67r0,106r-28,0r0,-89v-65,-39,-121,-59,-168,-59v-14,0,-26,3,-37,10r-3,-5v9,-21,25,-38,46,-52r0,-266v0,-38,-7,-68,-21,-91v81,11,129,-9,183,-54r0,-83r28,0r0,94v29,30,70,45,107,21r2,5v-19,49,-55,75,-109,77r0,298v7,3,18,7,32,13r35,-38r19,17xm271,-167r0,-292v-17,-7,-34,-22,-52,-43r0,322v11,1,29,6,52,13","w":426},"\u00a3":{"d":"396,-378v-1,12,-35,86,-17,110v-30,-8,-97,-4,-139,-5v2,80,-1,142,-41,187v109,-36,217,-26,312,15r21,-25r21,17r-102,128v-107,-71,-274,-91,-412,-35r-12,-25v66,-47,95,-45,95,-131r0,-131v-39,-1,-75,2,-98,15v7,-33,32,-77,17,-110v13,5,55,5,81,5v-8,-139,37,-180,127,-246v91,-67,177,-64,259,-4r-106,119r-17,-14r26,-31v-39,-37,-76,-56,-111,-56v-40,0,-60,22,-60,67r0,165v56,-1,121,6,156,-15","w":556},"\u00a4":{"d":"573,-115r-54,54r-95,-94v-76,52,-172,52,-248,0r-93,94r-56,-54r96,-95v-52,-73,-52,-174,0,-247r-96,-94r56,-56r93,96v73,-52,175,-52,248,0r95,-96r54,56r-94,93v52,76,52,172,0,248xm300,-183v80,0,149,-72,149,-151v0,-76,-70,-149,-149,-149v-77,0,-147,72,-147,149v0,79,69,151,147,151","w":600},"\u00a5":{"d":"628,-641v-16,81,-92,150,-184,113v-15,39,-32,78,-51,119r116,0r0,36r-122,0r0,42r122,0r0,36r-122,0r0,200v21,5,43,16,64,32r26,-22r17,17r-121,117v-59,-51,-136,-71,-210,-37r-8,-10v35,-47,76,-77,122,-92r0,-205r-142,0r0,-36r137,0r-19,-42r-118,0r0,-36r102,0v-36,-77,-53,-136,-121,-136v-15,0,-29,5,-42,16r-8,-8v32,-44,58,-85,77,-123v43,2,77,18,104,49v31,37,67,108,108,213v38,-82,73,-169,106,-262v44,48,115,58,159,14","w":648},"\u00a6":{"d":"70,-335r-68,0r0,-372r68,0r0,372xm70,167r-68,0r0,-368r68,0r0,368","w":93},"\u00a7":{"d":"367,-371v24,80,7,135,-41,213v66,65,55,161,-8,226v-36,37,-75,60,-120,65r-193,-41r29,-80r253,61v28,-43,36,-121,-3,-152v-41,-32,-177,-72,-257,-96v-25,-93,-5,-116,42,-208v-58,-66,-49,-153,13,-214v33,-32,72,-52,116,-59r174,37r-32,82r-228,-59v-53,80,-16,142,67,172v27,10,89,28,188,53xm298,-172v17,-47,42,-101,2,-133v-55,-25,-154,-39,-207,-66v-17,42,-25,70,-25,85v0,62,71,66,130,84","w":418},"\u00a8":{"d":"296,-617r-63,59r-58,-62r63,-60xm68,-680r58,63r-63,59r-56,-62","w":330},"\u00a9":{"d":"344,-687v185,0,348,163,348,349v0,189,-160,349,-350,349v-186,0,-347,-159,-347,-345v0,-189,161,-353,349,-353xm36,-333v0,181,144,300,311,307v159,7,305,-150,305,-310v0,-165,-145,-311,-308,-311v-168,0,-308,145,-308,314xm359,-175v82,10,107,-11,168,-60r4,1v-46,83,-90,121,-190,123v-121,3,-206,-82,-207,-206v-1,-104,60,-192,141,-217v-91,72,-116,195,-42,291v18,-55,5,-149,9,-219r136,-115v45,27,90,40,137,40r-60,66v-30,-13,-62,-24,-96,-35r0,331xm312,-362v-2,64,-27,88,-70,126v25,29,58,48,100,59r0,-341r-30,25r0,131","w":718},"\u00aa":{"d":"260,-384r-65,53v-30,-18,-45,-43,-45,-76r-93,77r-7,0v-80,-79,-57,-144,20,-223r-33,-89v33,6,61,-6,82,-28r100,34v8,-3,16,-14,23,-11v-12,18,-20,36,-25,54r0,187v3,8,10,16,21,24r14,-11xm151,-595r-101,-39r31,82r69,36xm151,-428r0,-78r-71,-37v-34,62,-27,117,22,161","w":286},"\u00ab":{"d":"364,-103r-60,36v-43,-63,-86,-118,-128,-167r82,-103v13,-17,28,-39,46,-65r57,34r-105,134xm188,-103r-59,36r-63,-86r-66,-81v58,-69,102,-125,131,-168r57,34r-106,134"},"\u00ac":{"d":"300,88r-48,0r-256,-744r49,0","w":330},"\u2212":{"d":"256,-314r-38,114r-186,0r-12,26r-14,0r38,-107r187,-1r13,-32r12,0","w":286},"\u00ae":{"d":"344,-687v187,0,348,164,348,351v0,185,-165,351,-350,347v-185,-4,-347,-148,-347,-342v0,-184,165,-356,349,-356xm344,-647v-186,0,-342,169,-302,374v11,54,35,101,72,142v31,-37,71,-63,118,-78v0,-60,-39,-109,-116,-147r114,-85v4,-55,-6,-98,-57,-95v-11,0,-26,3,-45,8r0,-9v56,-52,166,-52,171,44r124,-82r96,129r-98,70v65,43,81,64,109,149v9,27,21,47,36,62r16,-12r8,9r-64,62r-7,0v-66,-47,-64,-222,-170,-215r0,121v23,8,44,18,65,29r14,-13r9,9r-71,73v-72,-55,-143,-56,-244,-21v64,66,140,94,225,97v159,6,303,-150,303,-310v0,-165,-142,-311,-306,-311xm450,-413r-79,-111r-22,15r0,170xm335,-205r0,-293r-32,21r0,268v11,0,22,1,32,4xm229,-345r0,-77r-53,35","w":718},"\u00af":{"d":"501,-705r-501,0r0,-66r501,0r0,66","w":524},"\u02c9":{"d":"501,-705r-501,0r0,-66r501,0r0,66","w":524},"\u00b0":{"d":"139,-717v78,0,143,63,143,139v0,73,-66,141,-140,140v-78,-1,-136,-59,-140,-140v-4,-73,65,-139,137,-139xm238,-577v0,-56,-40,-98,-96,-98v-56,0,-94,42,-94,98v0,59,35,98,94,98v56,0,96,-42,96,-98","w":308},"\u00b1":{"d":"589,-355r-260,1r-1,166r-67,0r-1,-166r-260,-1r0,-65r260,-1r1,-168r67,0r1,168r260,1r0,65xm589,-18r-589,0r0,-64r589,0r0,64","w":611},"\u00b2":{"d":"263,-291r-44,48v-75,-26,-145,-27,-220,-1v6,-29,24,-59,55,-90v1,0,28,-23,83,-70v62,-52,81,-114,21,-168r-111,77r-40,-35r113,-81r139,78v2,66,-23,107,-81,143v-80,50,-130,84,-146,103v93,-28,154,-37,231,-4","w":286},"\u00b3":{"d":"164,-263v70,-66,20,-187,-92,-169r0,-10v74,-7,111,-40,111,-99v0,-34,-26,-40,-48,-25r-76,51r-34,-32r89,-64r131,63v7,57,-17,79,-81,110v113,21,129,126,40,172v-30,15,-65,23,-105,23r-101,-78r40,-38","w":286},"\u00b4":{"d":"291,-665v-41,51,-101,97,-180,140r-35,-15v59,-49,108,-98,147,-147","w":326},"\u00b5":{"d":"348,9v-50,-44,-69,-45,-69,-139r-134,139v0,2,-14,50,-41,144r-7,0v-47,-183,-29,-326,-34,-529v0,-21,-8,-34,-25,-40r-28,31r-9,-9r81,-103r9,0v43,25,64,59,64,102r0,285v7,5,21,19,42,43r82,-86r0,-221v0,-20,-10,-34,-29,-41r0,-7v33,-10,56,-36,71,-79r8,0v17,45,41,71,71,79r0,7v-12,4,-28,24,-28,41r0,262v0,26,8,39,25,39r35,-38r10,10r-86,110r-8,0","w":448},"\u03bc":{"d":"348,9v-50,-44,-69,-45,-69,-139r-134,139v0,2,-14,50,-41,144r-7,0v-47,-183,-29,-326,-34,-529v0,-21,-8,-34,-25,-40r-28,31r-9,-9r81,-103r9,0v43,25,64,59,64,102r0,285v7,5,21,19,42,43r82,-86r0,-221v0,-20,-10,-34,-29,-41r0,-7v33,-10,56,-36,71,-79r8,0v17,45,41,71,71,79r0,7v-12,4,-28,24,-28,41r0,262v0,26,8,39,25,39r35,-38r10,10r-86,110r-8,0","w":448},"\u00b6":{"d":"0,-561v0,-104,86,-170,194,-170r245,0r0,40r-60,1r-1,686r-49,0r-1,-686r-90,0r-1,686r-51,0r-1,-386v-101,2,-185,-74,-185,-171","w":461},"\u00b7":{"d":"197,-329r-82,75v-29,-23,-53,-50,-74,-79r80,-76v32,37,57,63,76,80","w":242},"\u2219":{"d":"197,-329r-82,75v-29,-23,-53,-50,-74,-79r80,-76v32,37,57,63,76,80","w":242},"\u00b8":{"d":"90,59v61,-1,128,27,127,81v0,30,-19,60,-57,90r-160,-29r17,-45r124,23v17,-14,23,-26,22,-48v-13,-34,-47,-44,-103,-43v6,-24,6,-69,6,-105r23,0","w":246},"\u00b9":{"d":"174,-300r-68,56r-63,-44v9,-8,14,-16,14,-25r0,-214v0,-15,-10,-29,-29,-42v-10,5,-21,27,-29,14r70,-56v31,21,46,46,46,77r0,227r29,21v10,-5,19,-25,30,-14","w":202},"\u00ba":{"d":"237,-385v-41,13,-76,31,-106,54v-40,-27,-82,-45,-126,-54v37,-47,12,-151,19,-227v37,-9,70,-28,101,-58v40,30,77,47,112,52r0,233xm171,-584r-80,-31r-1,200r80,28","w":265},"\u00bb":{"d":"366,-234v-60,69,-81,94,-128,167r-57,-34r105,-133r-105,-132r59,-36v41,59,83,115,126,168xm193,-233v-51,56,-95,111,-131,166r-57,-34r106,-133r-106,-132r60,-36v27,38,69,94,128,169"},"\u00bc":{"d":"627,-113r-64,1r-1,57r24,16v9,-4,20,-20,25,-6r-58,45r-64,-39v28,-23,20,-37,18,-73r-127,-1r-15,-46r153,-185v71,29,36,111,45,192r52,1xm513,-618r-456,621r-40,0r453,-621r43,0xm63,-611v28,19,44,31,44,70r0,214r29,20v9,-4,19,-25,28,-14r-64,54r-63,-43v10,-9,15,-17,15,-26r0,-194v0,-16,-9,-30,-27,-41r-23,18r-4,-8xm508,-273v0,-3,-5,-10,-15,-20r-114,135r3,6r125,0","w":655},"\u00bd":{"d":"608,-46r-42,46v-92,-25,-121,-26,-210,0v10,-60,86,-113,133,-151v60,-48,78,-107,20,-157r-107,74r-37,-32r107,-78r132,73v2,63,-22,100,-77,133v-75,46,-122,76,-137,93r3,3v69,-26,151,-34,215,-4xm513,-618r-456,621r-40,0r453,-621r43,0xm63,-611v28,19,44,31,44,70r0,214r29,20v9,-4,19,-25,28,-14r-64,54r-63,-43v10,-9,15,-17,15,-26r0,-194v0,-16,-9,-30,-27,-41r-23,18r-4,-8","w":633},"\u00be":{"d":"731,-113r-62,1r-1,57r24,16v8,-4,19,-20,24,-6r-58,45r-64,-39v26,-22,21,-36,20,-73r-128,-1r-15,-46r152,-185v72,29,37,110,46,192r52,1xm621,-618r-456,621r-41,0r454,-621r43,0xm156,-285v70,-66,25,-171,-87,-159r0,-10v71,-8,106,-38,106,-91v0,-32,-25,-39,-46,-26r-74,50r-32,-31r86,-58r127,57v7,54,-18,74,-79,103v108,29,127,117,38,163v-29,15,-62,21,-99,21r-98,-73r40,-35xm615,-273v-2,-12,-6,-13,-18,-21r-113,136r3,6r127,0","w":761},"\u00bf":{"d":"223,-575r-80,77v-21,-26,-45,-53,-74,-82r81,-76v27,24,51,51,73,81xm258,-106r-54,108r-51,3v-79,7,-172,-64,-151,-163v6,-26,31,-69,74,-130v35,-50,53,-106,53,-169r24,0v6,119,-46,201,-57,298v-7,65,54,97,116,72v7,-2,22,-8,46,-19","w":286},"\u00c0":{"d":"474,-745r-35,16v-74,-41,-131,-88,-172,-143r67,-23v39,54,85,104,140,150xm18,-405v-15,-136,107,-248,240,-248v70,0,137,22,201,66v33,-38,70,-62,113,-72r2,2v-47,46,-80,74,-78,146r8,339v1,47,11,80,30,98r32,-24r15,16r-114,94v-37,-23,-61,-60,-73,-111r-146,109r-142,-75v-30,-19,-65,-22,-70,15v4,20,24,62,-14,60v-15,0,-22,-9,-22,-26v0,-74,88,-153,124,-215v-66,-61,-100,-119,-106,-174xm391,-283r0,-220v-10,-9,-10,-28,-28,-29r-169,249r197,0xm149,-423v-4,-82,86,-113,169,-92r24,-36v-132,-65,-296,7,-294,145v0,58,29,110,88,157r133,-195v-30,-43,-99,-23,-120,21xm395,-133r0,-80r-251,0r-37,54r204,94","w":611},"\u00c1":{"d":"490,-872v-38,51,-96,98,-173,143r-35,-16v53,-44,100,-94,139,-150xm18,-405v-15,-136,107,-248,240,-248v70,0,137,22,201,66v33,-38,70,-62,113,-72r2,2v-47,46,-80,74,-78,146r8,339v1,47,11,80,30,98r32,-24r15,16r-114,94v-37,-23,-61,-60,-73,-111r-146,109r-142,-75v-30,-19,-65,-22,-70,15v4,20,24,62,-14,60v-15,0,-22,-9,-22,-26v0,-74,88,-153,124,-215v-66,-61,-100,-119,-106,-174xm391,-283r0,-220v-10,-9,-10,-28,-28,-29r-169,249r197,0xm149,-423v-4,-82,86,-113,169,-92r24,-36v-132,-65,-296,7,-294,145v0,58,29,110,88,157r133,-195v-30,-43,-99,-23,-120,21xm395,-133r0,-80r-251,0r-37,54r204,94","w":611},"\u00c2":{"d":"512,-741r-15,11v-42,-23,-81,-57,-117,-101v-30,39,-70,73,-119,102r-13,-12v43,-51,79,-102,108,-154r50,0v28,50,63,101,106,154xm18,-405v-15,-136,107,-248,240,-248v70,0,137,22,201,66v33,-38,70,-62,113,-72r2,2v-47,46,-80,74,-78,146r8,339v1,47,11,80,30,98r32,-24r15,16r-114,94v-37,-23,-61,-60,-73,-111r-146,109r-142,-75v-30,-19,-65,-22,-70,15v4,20,24,62,-14,60v-15,0,-22,-9,-22,-26v0,-74,88,-153,124,-215v-66,-61,-100,-119,-106,-174xm391,-283r0,-220v-10,-9,-10,-28,-28,-29r-169,249r197,0xm149,-423v-4,-82,86,-113,169,-92r24,-36v-132,-65,-296,7,-294,145v0,58,29,110,88,157r133,-195v-30,-43,-99,-23,-120,21xm395,-133r0,-80r-251,0r-37,54r204,94","w":611},"\u00c3":{"d":"292,-854v36,0,129,30,139,28r29,-6r14,-24r18,5v-27,57,-27,83,-79,83v-53,0,-134,-35,-167,-28r-16,29r-16,-6v17,-32,32,-81,78,-81xm18,-405v-15,-136,107,-248,240,-248v70,0,137,22,201,66v33,-38,70,-62,113,-72r2,2v-47,46,-80,74,-78,146r8,339v1,47,11,80,30,98r32,-24r15,16r-114,94v-37,-23,-61,-60,-73,-111r-146,109r-142,-75v-30,-19,-65,-22,-70,15v4,20,24,62,-14,60v-15,0,-22,-9,-22,-26v0,-74,88,-153,124,-215v-66,-61,-100,-119,-106,-174xm391,-283r0,-220v-10,-9,-10,-28,-28,-29r-169,249r197,0xm149,-423v-4,-82,86,-113,169,-92r24,-36v-132,-65,-296,7,-294,145v0,58,29,110,88,157r133,-195v-30,-43,-99,-23,-120,21xm395,-133r0,-80r-251,0r-37,54r204,94","w":611},"\u00c4":{"d":"481,-806v-49,26,-22,12,-86,52r0,41r40,15v13,-4,29,-24,40,-11r-72,40v-23,-10,-46,-17,-70,-21v28,-25,8,-91,14,-137v21,-8,44,-19,68,-32xm18,-405v-15,-136,107,-248,240,-248v70,0,137,22,201,66v33,-38,70,-62,113,-72r2,2v-47,46,-80,74,-78,146r8,339v1,47,11,80,30,98r32,-24r15,16r-114,94v-37,-23,-61,-60,-73,-111r-146,109r-142,-75v-30,-19,-65,-22,-70,15v4,20,24,62,-14,60v-15,0,-22,-9,-22,-26v0,-74,88,-153,124,-215v-66,-61,-100,-119,-106,-174xm438,-793r-43,-36r0,63xm391,-283r0,-220v-10,-9,-10,-28,-28,-29r-169,249r197,0xm149,-423v-4,-82,86,-113,169,-92r24,-36v-132,-65,-296,7,-294,145v0,58,29,110,88,157r133,-195v-30,-43,-99,-23,-120,21xm395,-133r0,-80r-251,0r-37,54r204,94","w":611},"\u00c5":{"d":"512,-786v0,71,-50,120,-121,120v-71,0,-120,-50,-120,-121v0,-71,49,-117,120,-117v72,0,121,47,121,118xm18,-405v-15,-136,107,-248,240,-248v70,0,137,22,201,66v33,-38,70,-62,113,-72r2,2v-47,46,-80,74,-78,146r8,339v1,47,11,80,30,98r32,-24r15,16r-114,94v-37,-23,-61,-60,-73,-111r-146,109r-142,-75v-30,-19,-65,-22,-70,15v4,20,24,62,-14,60v-15,0,-22,-9,-22,-26v0,-74,88,-153,124,-215v-66,-61,-100,-119,-106,-174xm466,-786v0,-44,-31,-74,-75,-74v-45,0,-76,29,-76,74v0,45,31,76,76,76v44,0,75,-32,75,-76xm391,-283r0,-220v-10,-9,-10,-28,-28,-29r-169,249r197,0xm149,-423v-4,-82,86,-113,169,-92r24,-36v-132,-65,-296,7,-294,145v0,58,29,110,88,157r133,-195v-30,-43,-99,-23,-120,21xm395,-133r0,-80r-251,0r-37,54r204,94","w":611},"\u00c6":{"d":"679,-74v102,-2,142,-34,206,-89r4,4v-55,115,-134,172,-239,172v-96,0,-173,-45,-230,-135r-170,132r-141,-76v-29,-20,-69,-19,-72,14v-2,3,11,33,11,41v0,14,-8,21,-25,21v-14,0,-21,-9,-21,-26v0,-72,86,-151,121,-211v-57,-64,-93,-113,-99,-206v-8,-120,106,-224,217,-224v57,0,120,23,190,70v41,-48,87,-72,140,-72r1,3v-79,50,-113,104,-113,228v0,109,16,193,48,254v15,-17,23,-41,23,-73r0,-241r170,-168v44,36,108,56,184,52r-116,148r92,0r-48,103r-133,0r0,279xm781,-504r-102,-45r0,182xm658,-76r0,-502r-43,50r0,192v0,65,-33,124,-98,179v27,42,74,69,141,81xm380,-489v-5,-7,-13,-19,-25,-34r-162,237r172,0v-3,-77,-4,-120,15,-203xm150,-427v-6,-85,91,-112,169,-92r16,-24v-40,-25,-79,-37,-118,-37v-91,-2,-162,78,-160,169v0,55,25,110,76,165r138,-202v-29,-49,-91,-23,-121,21xm409,-144v-12,-19,-21,-44,-28,-74r-235,0r-39,57r206,94","w":915},"\u00c7":{"d":"256,8v-152,-14,-255,-125,-256,-292v-1,-147,85,-274,200,-309v-129,103,-165,277,-60,416v28,-77,8,-213,14,-314r194,-164v63,38,129,57,196,57r-86,94v-43,-17,-89,-34,-137,-50r0,474v103,24,180,-38,240,-86r5,1v-68,122,-131,177,-284,175r1,29v61,-1,127,27,126,81v0,30,-19,60,-57,90r-160,-29r18,-45r123,23v17,-14,23,-26,22,-48v-13,-34,-47,-44,-103,-43v6,-21,4,-37,4,-60xm254,-347v-4,94,-40,124,-101,180v35,41,83,69,144,84r0,-487r-43,35r0,188","w":590},"\u00c8":{"d":"393,-745r-37,16v-74,-41,-131,-88,-171,-143r66,-23v41,56,89,106,142,150xm295,10v-181,0,-293,-117,-295,-294v-1,-147,85,-274,200,-309v-121,99,-171,282,-60,416v28,-77,8,-213,14,-314r191,-164v50,36,142,59,214,51r-137,148r106,0r-49,103r-157,0r-1,273v94,15,146,-19,240,-86r5,1v-66,119,-128,175,-271,175xm437,-504r-116,-47r0,173xm254,-347v-4,90,-40,128,-100,180v35,40,83,68,143,84r0,-487r-43,35r0,188","w":590},"\u00c9":{"d":"438,-872v-41,54,-99,102,-172,143r-35,-16v51,-44,98,-94,139,-150xm295,10v-181,0,-293,-117,-295,-294v-1,-147,85,-274,200,-309v-121,99,-171,282,-60,416v28,-77,8,-213,14,-314r191,-164v50,36,142,59,214,51r-137,148r106,0r-49,103r-157,0r-1,273v94,15,146,-19,240,-86r5,1v-66,119,-128,175,-271,175xm437,-504r-116,-47r0,173xm254,-347v-4,90,-40,128,-100,180v35,40,83,68,143,84r0,-487r-43,35r0,188","w":590},"\u00ca":{"d":"433,-741r-14,11v-46,-25,-85,-58,-116,-101v-34,41,-74,74,-120,101r-13,-11v38,-46,74,-97,108,-154r48,0v33,55,68,107,107,154xm295,10v-181,0,-293,-117,-295,-294v-1,-147,85,-274,200,-309v-121,99,-171,282,-60,416v28,-77,8,-213,14,-314r191,-164v50,36,142,59,214,51r-137,148r106,0r-49,103r-157,0r-1,273v94,15,146,-19,240,-86r5,1v-66,119,-128,175,-271,175xm437,-504r-116,-47r0,173xm254,-347v-4,90,-40,128,-100,180v35,40,83,68,143,84r0,-487r-43,35r0,188","w":590},"\u00cb":{"d":"385,-874r58,63r-62,59v-25,-25,-29,-26,-57,-62xm275,-811r-64,59v-25,-25,-29,-26,-57,-62r62,-60v13,15,32,36,59,63xm295,10v-181,0,-293,-117,-295,-294v-1,-147,85,-274,200,-309v-121,99,-171,282,-60,416v28,-77,8,-213,14,-314r191,-164v50,36,142,59,214,51r-137,148r106,0r-49,103r-157,0r-1,273v94,15,146,-19,240,-86r5,1v-66,119,-128,175,-271,175xm437,-504r-116,-47r0,173xm254,-347v-4,90,-40,128,-100,180v35,40,83,68,143,84r0,-487r-43,35r0,188","w":590},"\u00cc":{"d":"384,-745r-36,16v-74,-41,-131,-88,-171,-143r66,-23v41,55,88,105,141,150xm298,-26v81,0,60,-117,51,-185v-15,-117,-28,-198,-28,-242v0,-135,49,-203,147,-203r0,7v-52,15,-64,42,-61,102v3,67,41,310,36,331v1,123,-56,226,-168,226v-47,0,-176,-53,-197,-48v-32,0,-57,17,-76,50v-7,-70,46,-138,137,-126v61,8,74,-34,72,-89v-3,-78,-13,-125,-81,-129v-18,0,-44,6,-77,18v15,-55,66,-85,125,-85v12,-110,29,-136,88,-208v-61,36,-105,11,-172,11v-22,0,-41,15,-56,46r-6,-1v15,-62,57,-108,123,-105v86,3,110,26,191,-1r1,3v-55,45,-83,111,-83,196v0,158,94,354,-81,359v42,49,80,73,115,73","w":502},"\u00cd":{"d":"429,-872v-41,55,-98,102,-171,143r-35,-16v51,-44,98,-94,139,-150xm298,-26v81,0,60,-117,51,-185v-15,-117,-28,-198,-28,-242v0,-135,49,-203,147,-203r0,7v-52,15,-64,42,-61,102v3,67,41,310,36,331v1,123,-56,226,-168,226v-47,0,-176,-53,-197,-48v-32,0,-57,17,-76,50v-7,-70,46,-138,137,-126v61,8,74,-34,72,-89v-3,-78,-13,-125,-81,-129v-18,0,-44,6,-77,18v15,-55,66,-85,125,-85v12,-110,29,-136,88,-208v-61,36,-105,11,-172,11v-22,0,-41,15,-56,46r-6,-1v15,-62,57,-108,123,-105v86,3,110,26,191,-1r1,3v-55,45,-83,111,-83,196v0,158,94,354,-81,359v42,49,80,73,115,73","w":502},"\u00ce":{"d":"425,-741r-16,11v-44,-24,-82,-58,-114,-101v-34,41,-74,74,-120,101r-13,-11v46,-58,81,-109,106,-154r50,0v29,51,65,103,107,154xm298,-26v81,0,60,-117,51,-185v-15,-117,-28,-198,-28,-242v0,-135,49,-203,147,-203r0,7v-52,15,-64,42,-61,102v3,67,41,310,36,331v1,123,-56,226,-168,226v-47,0,-176,-53,-197,-48v-32,0,-57,17,-76,50v-7,-70,46,-138,137,-126v61,8,74,-34,72,-89v-3,-78,-13,-125,-81,-129v-18,0,-44,6,-77,18v15,-55,66,-85,125,-85v12,-110,29,-136,88,-208v-61,36,-105,11,-172,11v-22,0,-41,15,-56,46r-6,-1v15,-62,57,-108,123,-105v86,3,110,26,191,-1r1,3v-55,45,-83,111,-83,196v0,158,94,354,-81,359v42,49,80,73,115,73","w":502},"\u00cf":{"d":"436,-811r-64,59r-57,-62r62,-60v13,15,32,36,59,63xm207,-874r58,63r-63,59r-56,-62xm298,-26v81,0,60,-117,51,-185v-15,-117,-28,-198,-28,-242v0,-135,49,-203,147,-203r0,7v-52,15,-64,42,-61,102v3,67,41,310,36,331v1,123,-56,226,-168,226v-47,0,-176,-53,-197,-48v-32,0,-57,17,-76,50v-7,-70,46,-138,137,-126v61,8,74,-34,72,-89v-3,-78,-13,-125,-81,-129v-18,0,-44,6,-77,18v15,-55,66,-85,125,-85v12,-110,29,-136,88,-208v-61,36,-105,11,-172,11v-22,0,-41,15,-56,46r-6,-1v15,-62,57,-108,123,-105v86,3,110,26,191,-1r1,3v-55,45,-83,111,-83,196v0,158,94,354,-81,359v42,49,80,73,115,73","w":502},"\u00d0":{"d":"450,-606r-20,69r-91,-18r0,450r65,35r23,-18r12,13r-88,80v-47,-35,-86,-59,-118,-70v-33,28,-58,51,-77,70v-51,-39,-95,-64,-133,-75v17,-17,26,-42,26,-75r0,-257r-49,0r8,-51r41,0r0,-102v37,-16,74,-41,111,-74r95,23r-20,69r-91,-18r0,450r65,35v23,-9,35,-34,35,-75r0,-257r-49,0r8,-51r41,0r0,-102v37,-16,74,-41,111,-74","w":464},"\u00d1":{"d":"395,-854v49,-6,129,40,155,25v18,0,21,-16,28,-27r17,5v-11,26,-38,86,-79,83v-53,-5,-134,-35,-167,-28r-16,29r-16,-6v28,-59,26,-75,78,-81xm282,-78v0,-63,-75,-97,-150,-90v24,-35,69,-41,116,-30v-24,-74,-65,-102,-138,-90v30,-45,86,-39,137,-14v-16,-74,-62,-111,-137,-111v42,-35,74,-32,137,-13r2,-82r242,-148v145,46,218,124,218,234v0,91,-52,202,-157,332v61,-18,90,-16,166,-3r17,-23r17,11r-67,116v-97,-25,-168,-18,-216,55r-6,-6v19,-93,77,-215,116,-303v-60,-48,-108,-43,-178,0r0,109v0,109,-80,211,-194,203v-17,3,-114,-32,-149,-31v-19,0,-39,5,-62,16r-1,-3v30,-43,62,-76,124,-76v11,0,75,11,98,5v37,0,65,-22,65,-58xm598,-427v-26,-73,-103,-121,-196,-129r-1,132v71,54,136,59,197,-3xm588,-265v18,-66,26,-78,15,-139v-63,52,-131,50,-201,5r0,134v62,-36,126,-39,186,0xm268,-13v0,5,5,5,9,6v72,2,103,-54,103,-146r-2,-401r-38,20r0,359v0,87,-18,131,-72,162","w":783},"\u00d2":{"d":"391,-745r-35,16v-74,-41,-131,-88,-172,-143r67,-23v39,54,85,104,140,150xm343,-657v165,23,298,106,310,279v11,160,-251,397,-420,388v-149,-8,-237,-117,-236,-274v0,-61,10,-121,30,-182v113,-67,202,-128,316,-211xm518,-445v-45,-67,-100,-94,-200,-112r-1,114v68,60,141,66,201,-2xm541,-260v26,-66,20,-112,-11,-167v-64,56,-140,59,-212,13r0,143v82,-51,151,-53,223,11xm532,-233v-62,-80,-140,-77,-215,-10r1,169v89,0,160,-53,214,-159xm253,-311v-10,93,-28,83,-99,167v47,47,93,70,139,70r0,-486r-39,0xm166,-253r-2,-259v-99,97,-118,243,-24,351v17,-27,26,-58,26,-92","w":677},"\u00d3":{"d":"437,-872v-38,51,-96,98,-173,143r-35,-16v53,-44,100,-94,139,-150xm343,-657v165,23,298,106,310,279v11,160,-251,397,-420,388v-149,-8,-237,-117,-236,-274v0,-61,10,-121,30,-182v113,-67,202,-128,316,-211xm518,-445v-45,-67,-100,-94,-200,-112r-1,114v68,60,141,66,201,-2xm541,-260v26,-66,20,-112,-11,-167v-64,56,-140,59,-212,13r0,143v82,-51,151,-53,223,11xm532,-233v-62,-80,-140,-77,-215,-10r1,169v89,0,160,-53,214,-159xm253,-311v-10,93,-28,83,-99,167v47,47,93,70,139,70r0,-486r-39,0xm166,-253r-2,-259v-99,97,-118,243,-24,351v17,-27,26,-58,26,-92","w":677},"\u00d4":{"d":"431,-741r-14,11v-44,-24,-83,-58,-117,-101v-30,39,-70,73,-119,102r-13,-12v43,-51,79,-102,108,-154r50,0v27,48,62,99,105,154xm343,-657v165,23,298,106,310,279v11,160,-251,397,-420,388v-149,-8,-237,-117,-236,-274v0,-61,10,-121,30,-182v113,-67,202,-128,316,-211xm518,-445v-45,-67,-100,-94,-200,-112r-1,114v68,60,141,66,201,-2xm541,-260v26,-66,20,-112,-11,-167v-64,56,-140,59,-212,13r0,143v82,-51,151,-53,223,11xm532,-233v-62,-80,-140,-77,-215,-10r1,169v89,0,160,-53,214,-159xm253,-311v-10,93,-28,83,-99,167v47,47,93,70,139,70r0,-486r-39,0xm166,-253r-2,-259v-99,97,-118,243,-24,351v17,-27,26,-58,26,-92","w":677},"\u00d5":{"d":"239,-854v37,0,128,30,139,28r29,-6r14,-24r18,5v-31,59,-26,83,-80,83v-52,0,-134,-35,-166,-28r-16,29r-16,-6v17,-32,32,-81,78,-81xm343,-657v165,23,298,106,310,279v11,160,-251,397,-420,388v-149,-8,-237,-117,-236,-274v0,-61,10,-121,30,-182v113,-67,202,-128,316,-211xm518,-445v-45,-67,-100,-94,-200,-112r-1,114v68,60,141,66,201,-2xm541,-260v26,-66,20,-112,-11,-167v-64,56,-140,59,-212,13r0,143v82,-51,151,-53,223,11xm532,-233v-62,-80,-140,-77,-215,-10r1,169v89,0,160,-53,214,-159xm253,-311v-10,93,-28,83,-99,167v47,47,93,70,139,70r0,-486r-39,0xm166,-253r-2,-259v-99,97,-118,243,-24,351v17,-27,26,-58,26,-92","w":677},"\u00d6":{"d":"461,-806v-49,26,-22,12,-86,52r0,41r40,15v13,-4,29,-24,40,-11r-72,40v-23,-10,-46,-17,-70,-21v28,-25,8,-91,14,-137v21,-8,44,-19,68,-32xm343,-657v165,23,298,106,310,279v11,160,-251,397,-420,388v-149,-8,-237,-117,-236,-274v0,-61,10,-121,30,-182v113,-67,202,-128,316,-211xm418,-793r-43,-36r0,63xm518,-445v-36,-57,-103,-94,-201,-112r0,114v68,60,141,66,201,-2xm541,-260v26,-66,20,-112,-11,-167v-64,56,-140,59,-212,13r0,143v82,-51,151,-53,223,11xm532,-233v-62,-80,-140,-77,-215,-10r0,169v89,0,160,-53,215,-159xm253,-311v-10,93,-28,83,-99,167v47,47,93,70,139,70r0,-486r-40,0r0,249xm166,-253r0,-259v-101,100,-120,241,-26,351v17,-27,26,-58,26,-92","w":677},"\u00d7":{"d":"424,-173r-49,49r-132,-132r-128,128r-47,-47r128,-128r-132,-132r49,-48r132,131r127,-127r47,47r-127,128","w":483},"\u00d8":{"d":"581,-588v154,139,143,288,1,439v-101,107,-319,237,-463,96r-72,77r-44,0r88,-105v-73,-92,-68,-238,-22,-365v109,-65,204,-129,315,-211v65,9,119,25,161,49r63,-70r51,0xm560,-445v-11,-17,-28,-37,-52,-58r-84,98v56,16,100,1,136,-40xm478,-524v-34,-15,-74,-26,-120,-33r-1,174xm583,-260v26,-68,20,-110,-13,-166v-45,41,-95,53,-160,35r-53,60r1,60v82,-52,153,-53,225,11xm338,-363r-1,-197r-52,3r-1,257xm572,-233v-60,-80,-139,-77,-215,-10r1,169v103,-2,176,-78,214,-159xm208,-266r-2,-246v-96,90,-109,220,-37,338v26,-29,39,-59,39,-92xm337,-74r-1,-229r-143,159v47,47,95,70,144,70","w":718},"\u00d9":{"d":"499,-745r-35,16v-73,-40,-130,-88,-171,-143r65,-23v44,57,91,107,141,150xm133,-656v68,1,182,55,236,0r23,0r0,241v56,29,97,30,150,0r0,-120r-45,-31r-33,38r-13,-11r99,-116r91,60r48,-40r8,5v-27,33,-41,66,-41,100r0,399v0,30,6,53,18,68r33,-28r10,14r-89,88r-20,0v-35,-32,-57,-73,-67,-123v-87,81,-130,117,-246,122v-148,7,-254,-118,-254,-257v0,-179,113,-267,251,-337r-1,-4v-73,20,-98,11,-172,11v-52,0,-91,37,-116,97r-8,3v-2,-100,46,-180,138,-179xm541,-287r0,-106v-56,24,-92,24,-148,0r0,106v49,-22,98,-23,148,0xm542,-141r0,-126v-58,-29,-91,-27,-150,0r1,182v51,-5,101,-24,149,-56xm370,-83r-1,-541v-67,60,-40,189,-40,302v0,79,-38,143,-113,191v40,32,91,48,154,48xm322,-584v-114,69,-177,140,-177,278v0,61,19,115,57,163v59,-52,38,-169,38,-270v0,-59,27,-116,82,-171","w":740},"\u00da":{"d":"546,-872v-39,52,-97,100,-173,143r-35,-16v49,-43,95,-93,140,-150xm133,-656v68,1,182,55,236,0r23,0r0,241v56,29,97,30,150,0r0,-120r-45,-31r-33,38r-13,-11r99,-116r91,60r48,-40r8,5v-27,33,-41,66,-41,100r0,399v0,30,6,53,18,68r33,-28r10,14r-89,88r-20,0v-35,-32,-57,-73,-67,-123v-87,81,-130,117,-246,122v-148,7,-254,-118,-254,-257v0,-179,113,-267,251,-337r-1,-4v-73,20,-98,11,-172,11v-52,0,-91,37,-116,97r-8,3v-2,-100,46,-180,138,-179xm541,-287r0,-106v-56,24,-92,24,-148,0r0,106v49,-22,98,-23,148,0xm542,-141r0,-126v-58,-29,-91,-27,-150,0r1,182v51,-5,101,-24,149,-56xm370,-83r-1,-541v-67,60,-40,189,-40,302v0,79,-38,143,-113,191v40,32,91,48,154,48xm322,-584v-114,69,-177,140,-177,278v0,61,19,115,57,163v59,-52,38,-169,38,-270v0,-59,27,-116,82,-171","w":740},"\u00db":{"d":"541,-741r-16,11v-45,-25,-83,-58,-115,-101v-30,37,-70,71,-119,101r-13,-11v46,-58,81,-109,106,-154r49,0v31,53,67,104,108,154xm133,-656v68,1,182,55,236,0r23,0r0,241v56,29,97,30,150,0r0,-120r-45,-31r-33,38r-13,-11r99,-116r91,60r48,-40r8,5v-27,33,-41,66,-41,100r0,399v0,30,6,53,18,68r33,-28r10,14r-89,88r-20,0v-35,-32,-57,-73,-67,-123v-87,81,-130,117,-246,122v-148,7,-254,-118,-254,-257v0,-179,113,-267,251,-337r-1,-4v-73,20,-98,11,-172,11v-52,0,-91,37,-116,97r-8,3v-2,-100,46,-180,138,-179xm541,-287r0,-106v-56,24,-92,24,-148,0r0,106v49,-22,98,-23,148,0xm542,-141r0,-126v-58,-29,-91,-27,-150,0r1,182v51,-5,101,-24,149,-56xm370,-83r-1,-541v-67,60,-40,189,-40,302v0,79,-38,143,-113,191v40,32,91,48,154,48xm322,-584v-114,69,-177,140,-177,278v0,61,19,115,57,163v59,-52,38,-169,38,-270v0,-59,27,-116,82,-171","w":740},"\u00dc":{"d":"511,-806v-49,26,-22,12,-86,52r0,41r40,15v13,-4,29,-24,40,-11r-72,40v-23,-10,-46,-17,-70,-21v28,-25,8,-91,14,-137v21,-8,44,-19,68,-32xm133,-656v68,1,182,55,236,0r23,0r0,241v56,29,97,30,150,0r0,-120r-45,-31r-33,38r-13,-11r99,-116r91,60r48,-40r8,5v-27,33,-41,66,-41,100r0,399v0,30,6,53,18,68r33,-28r10,14r-89,88r-20,0v-35,-32,-57,-73,-67,-123v-87,81,-130,117,-246,122v-148,7,-254,-118,-254,-257v0,-179,113,-267,251,-337r-1,-4v-73,20,-98,11,-172,11v-52,0,-91,37,-116,97r-8,3v-2,-100,46,-180,138,-179xm468,-793r-43,-36r0,63xm541,-287r0,-106v-56,24,-92,24,-148,0r0,106v49,-22,98,-23,148,0xm542,-141r0,-126v-58,-29,-91,-27,-150,0r1,182v51,-5,101,-24,149,-56xm370,-83r0,-541v-68,60,-41,189,-41,302v0,79,-38,143,-113,191v40,32,91,48,154,48xm322,-584v-114,69,-177,140,-177,278v0,61,19,115,57,163v59,-52,38,-169,38,-270v0,-59,27,-116,82,-171","w":740},"\u00dd":{"d":"434,-632v122,1,180,115,180,244v0,176,-99,284,-272,284v-134,0,-321,-26,-321,102v0,62,54,92,123,83v59,-23,168,-70,226,-71v51,0,99,29,101,81v1,37,-21,49,-51,42v-37,-9,-18,-61,-9,-81v-4,-11,-4,-15,-17,-16v-65,15,-148,96,-253,102v-74,4,-139,-65,-139,-138v0,-76,67,-127,146,-126v12,-105,-42,-154,-107,-185r0,-4v42,-1,77,3,106,18v7,-87,-34,-123,-103,-153v29,-13,77,-7,103,3v7,-98,7,-190,-100,-180r0,-5v87,-47,182,-11,207,74v69,-49,129,-74,180,-74xm492,-447v-20,-116,-77,-160,-175,-121r0,125v65,48,109,44,175,-4xm494,-285v9,-63,5,-88,1,-143v-58,41,-116,48,-177,11r0,126v56,-36,118,-30,176,6xm489,-265v-57,-44,-115,-45,-172,-5r0,148v115,5,146,-56,172,-143xm295,-122r0,-434r-45,21r0,413r45,0xm526,-872v-39,52,-97,100,-173,143r-35,-16v49,-43,95,-93,140,-150","w":633},"\u00de":{"d":"551,-104v-3,121,-140,189,-265,211r-3,-6v65,-25,106,-45,124,-58v35,-26,53,-63,53,-111r0,-280v-4,-19,-17,-34,-38,-47r-79,59r0,247r26,29r-76,66r-73,-59r-76,55v-49,-34,-95,-55,-138,-64v18,-16,27,-40,27,-71r0,-255v45,-19,86,-46,123,-79r91,57v-1,-76,9,-167,-34,-200r2,-2v24,9,45,20,62,33r15,-1v29,-33,61,-50,96,-50v-69,50,-35,164,-43,268r140,-103v44,29,66,68,66,117r0,244xm247,-92r0,-298r-33,47r-90,-51r0,284r88,44","w":584},"\u00df":{"d":"299,-294v84,1,155,53,139,144v-17,97,-99,124,-193,173v-31,17,-33,85,17,85v13,0,44,-16,44,8v0,10,-8,15,-24,15v-32,1,-75,-33,-75,-67v0,-21,8,-40,25,-55r94,-86v12,-20,18,-42,18,-67v0,-53,-36,-80,-87,-81v-2,0,-24,3,-67,8r128,-124r-71,-65r-103,67r0,234r65,35r23,-18r12,13r-88,80v-51,-39,-95,-64,-133,-75v19,-19,28,-44,28,-75r-2,-257r-49,-1r8,-48r41,-2r2,-102v35,-15,71,-40,109,-74r95,23r-20,69r-90,-18r1,196r160,-108v28,23,61,63,102,67","w":466},"\u00e0":{"d":"287,-540r-37,15v-79,-42,-138,-89,-179,-140r66,-22v38,49,88,98,150,147xm365,-69r-86,72v-43,-23,-64,-59,-64,-108r-136,109r-5,0v-114,-104,-81,-207,28,-309r-48,-125v47,6,80,-6,116,-38r142,47r28,-22r2,4v-16,25,-27,50,-34,77r0,262v7,25,27,38,46,22xm216,-367r-146,-54r42,114r103,50xm217,-131r-1,-108r-104,-52v-47,84,-37,158,29,224"},"\u00e1":{"d":"335,-665v-43,53,-104,99,-181,140r-35,-15v59,-50,108,-99,146,-147xm365,-69r-86,72v-43,-23,-64,-59,-64,-108r-136,109r-5,0v-114,-104,-81,-207,28,-309r-48,-125v47,6,80,-6,116,-38r142,47r28,-22r2,4v-16,25,-27,50,-34,77r0,262v7,25,27,38,46,22xm216,-367r-146,-54r42,114r103,50xm217,-131r-1,-108r-104,-52v-47,84,-37,158,29,224"},"\u00e2":{"d":"330,-536r-15,9v-50,-26,-91,-59,-122,-99v-31,37,-73,70,-126,99r-12,-9v36,-41,73,-91,110,-150r51,0v37,58,75,108,114,150xm365,-69r-86,72v-43,-23,-64,-59,-64,-108r-136,109r-5,0v-114,-104,-81,-207,28,-309r-48,-125v47,6,80,-6,116,-38r142,47r28,-22r2,4v-16,25,-27,50,-34,77r0,262v7,25,27,38,46,22xm216,-367r-146,-54r42,114r103,50xm217,-131r-1,-108r-104,-52v-47,84,-37,158,29,224"},"\u00e3":{"d":"127,-648v46,-6,131,49,179,23r15,-24r17,6v-19,32,-36,81,-83,80v-57,-1,-143,-35,-178,-28r-18,28r-13,-5v32,-60,27,-72,81,-80xm365,-69r-86,72v-43,-23,-64,-59,-64,-108r-136,109r-5,0v-114,-104,-81,-207,28,-309r-48,-125v47,6,80,-6,116,-38r142,47r28,-22r2,4v-16,25,-27,50,-34,77r0,262v7,25,27,38,46,22xm216,-367r-146,-54r42,114r103,50xm217,-131r-1,-108r-104,-52v-47,84,-37,158,29,224"},"\u00e4":{"d":"285,-622v-49,26,-22,12,-86,52r0,41r40,15v13,-4,29,-24,40,-11r-72,40v-23,-10,-46,-17,-70,-21v28,-25,8,-91,14,-137v21,-8,44,-19,68,-32xm365,-69r-86,72v-43,-23,-64,-59,-64,-108r-136,109r-5,0v-114,-104,-81,-207,28,-309r-48,-125v47,6,80,-6,116,-38r142,47r28,-22r2,4v-16,25,-27,50,-34,77r0,262v7,25,27,38,46,22xm242,-609r-43,-36r0,63xm215,-257r0,-110r-145,-54r42,114xm216,-131r0,-108r-104,-52v-47,84,-37,158,29,224"},"\u00e5":{"d":"200,-740v72,0,126,45,126,114v0,69,-58,116,-127,116v-71,0,-125,-45,-125,-116v0,-69,54,-114,126,-114xm365,-69r-86,72v-43,-23,-64,-59,-64,-108r-136,109r-5,0v-114,-104,-81,-207,28,-309r-48,-125v47,6,80,-6,116,-38r142,47r28,-22r2,4v-16,25,-27,50,-34,77r0,262v7,25,27,38,46,22xm282,-626v0,-44,-38,-74,-83,-74v-44,0,-79,30,-79,74v0,44,35,76,79,76v48,0,83,-29,83,-76xm216,-367r-146,-54r42,114r103,50xm217,-131r-1,-108r-104,-52v-47,84,-37,158,29,224"},"\u00e6":{"d":"483,-339r-87,65v-29,22,-57,44,-84,67r0,104r82,37r66,-41r10,12r-141,98v-29,-15,-61,-30,-96,-44v-7,-19,-11,-41,-11,-64r-136,109r-5,0v-113,-100,-82,-207,25,-307r-46,-127v48,6,82,-6,117,-38r109,39v23,-9,47,-22,70,-38xm411,-305r-97,-97r0,172xm223,-369r-148,-54r46,116r101,50xm224,-133r-1,-106r-102,-52v-48,79,-39,164,28,224","w":512},"\u00e7":{"d":"118,58v61,-2,134,27,134,79v0,29,-20,58,-60,87r-168,-28r18,-42r131,21v55,-53,3,-93,-85,-90v7,-39,6,-72,6,-114v-29,-16,-58,-27,-88,-33v18,-16,27,-40,27,-71r0,-255v45,-19,86,-46,123,-79r101,63r-43,61r-88,-51r-2,284r88,44r43,-32r10,11r-121,89r-27,-17","w":303},"\u00e8":{"d":"244,-540r-37,15v-79,-42,-138,-89,-179,-140r66,-22v39,49,89,98,150,147xm296,-338v-73,51,-130,94,-173,131r0,104r84,37r66,-42r11,12r-142,98v-44,-24,-90,-41,-138,-50v19,-20,28,-44,28,-73r0,-267v46,-21,91,-48,135,-79xm217,-305r-95,-97r0,172","w":326},"\u00e9":{"d":"291,-665v-41,51,-101,97,-180,140r-35,-15v59,-49,108,-98,147,-147xm296,-338v-73,51,-130,94,-173,131r0,104r84,37r66,-42r11,12r-142,98v-44,-24,-90,-41,-138,-50v19,-20,28,-44,28,-73r0,-267v46,-21,91,-48,135,-79xm217,-305r-95,-97r0,172","w":326},"\u00ea":{"d":"12,-536v49,-57,67,-81,112,-150r50,0v35,55,72,105,112,150r-13,9v-49,-27,-90,-60,-124,-99v-31,39,-73,72,-125,100xm296,-338v-73,51,-130,94,-173,131r0,104r84,37r66,-42r11,12r-142,98v-44,-24,-90,-41,-138,-50v19,-20,28,-44,28,-73r0,-267v46,-21,91,-48,135,-79xm217,-305r-95,-97r0,172","w":326},"\u00eb":{"d":"304,-605r-66,56r-58,-59r64,-56v22,23,42,43,60,59xm123,-605r-65,56r-58,-59r64,-56v21,22,40,42,59,59xm303,-338v-59,41,-118,84,-176,131r0,104r87,37r65,-41r10,11r-140,98v-47,-24,-93,-41,-139,-50v17,-19,26,-43,26,-73r0,-267v45,-21,91,-47,138,-79xm224,-305r-98,-97r0,172","w":326},"\u00ec":{"d":"219,-540r-37,15v-79,-42,-138,-89,-179,-140r66,-22v38,49,88,98,150,147xm228,-69r-93,75v-43,-24,-61,-63,-61,-120r0,-261r-28,-31r74,-61r78,64r-27,28r0,277v5,13,15,24,28,31r16,-11","w":261},"\u00ed":{"d":"223,-665v-41,51,-101,97,-180,140r-37,-15v59,-47,108,-96,147,-147xm184,-68r-91,74v-46,-26,-61,-63,-61,-120r-1,-261r-30,-31r75,-61r76,64r-25,28r0,277v5,13,14,24,29,32r17,-12","w":261},"\u00ee":{"d":"278,-536r-15,9v-48,-25,-88,-58,-121,-99v-34,39,-76,72,-127,99r-12,-9v48,-56,85,-106,110,-150r53,0v29,49,66,99,112,150xm244,-68r-92,75v-44,-22,-61,-65,-61,-121r-1,-261r-30,-31r76,-61r77,64r-25,28r0,277v5,15,14,26,27,32r17,-12","w":303},"\u00ef":{"d":"301,-605r-65,56r-58,-59r63,-56xm122,-605r-66,56r-30,-29v-11,-11,-20,-21,-27,-30r62,-56xm257,-69r-93,75v-44,-22,-61,-64,-61,-120r0,-261r-28,-31r74,-61r76,64r-26,28r0,277v5,13,15,23,30,31r16,-11","w":326},"\u00f0":{"d":"269,-265v73,-1,134,40,134,109v0,98,-112,133,-179,172v-37,22,-49,79,-1,92v0,0,51,-16,53,5v0,7,-9,14,-26,19v-64,3,-89,-82,-47,-123v41,-39,103,-64,106,-134v3,-74,-79,-82,-147,-64r140,-137r-81,-76r-94,0r0,291r53,44r28,-22r11,14r-90,78v-46,-37,-88,-63,-126,-76v18,-19,27,-43,27,-72r0,-258r-35,0r1,-14r136,-166r-5,130r165,0v43,39,51,53,99,66","w":430},"\u00f1":{"d":"146,-648v46,-3,131,49,178,23r15,-24r18,6v-19,31,-37,81,-84,80v-57,-1,-143,-35,-178,-28r-14,28r-17,-5v12,-27,40,-87,82,-80xm320,6v-44,-28,-59,-51,-60,-120r-1,-239r-45,-39r-71,52r0,248r27,34r-72,64r-76,-64r28,-31r0,-257v0,-17,-8,-33,-24,-46r-16,11r-10,-11r82,-75v42,25,63,60,63,105v56,-41,99,-76,128,-103r69,64r43,-34r10,11v-15,19,-30,40,-44,63r0,263v5,12,15,23,28,32r21,-12r10,10","w":443},"\u00f2":{"d":"277,-540r-36,15v-80,-41,-140,-88,-180,-140r66,-22v41,51,91,100,150,147xm336,-71v-60,18,-109,44,-148,77v-53,-39,-113,-65,-180,-79v18,-15,27,-40,27,-77r0,-237v54,-15,101,-42,142,-80v63,41,116,64,159,70r0,326xm242,-348r-115,-44r-1,276r115,43","w":373},"\u00f3":{"d":"325,-665v-41,50,-101,97,-181,140r-35,-15v59,-50,108,-99,146,-147xm336,-71v-60,18,-109,44,-148,77v-53,-39,-113,-65,-180,-79v18,-15,27,-40,27,-77r0,-237v54,-15,101,-42,142,-80v63,41,116,64,159,70r0,326xm242,-348r-115,-44r-1,276r115,43","w":373},"\u00f4":{"d":"319,-536r-14,10v-52,-29,-93,-62,-122,-100v-30,35,-72,69,-127,100r-11,-10v39,-45,76,-95,112,-150r50,0v37,57,75,107,112,150xm336,-71v-60,18,-109,44,-148,77v-53,-39,-113,-65,-180,-79v18,-15,27,-40,27,-77r0,-237v54,-15,101,-42,142,-80v63,41,116,64,159,70r0,326xm242,-348r-115,-44r-1,276r115,43","w":373},"\u00f5":{"d":"118,-648v38,0,134,34,147,30v7,0,24,-7,31,-7r15,-24r18,6v-20,32,-35,81,-84,80v-56,-2,-142,-35,-177,-28r-16,28r-16,-5v12,-27,39,-80,82,-80xm336,-71v-60,18,-109,44,-148,77v-53,-39,-113,-65,-180,-79v18,-15,27,-40,27,-77r0,-237v54,-15,101,-42,142,-80v63,41,116,64,159,70r0,326xm242,-348r-115,-44r-1,276r115,43","w":373},"\u00f6":{"d":"275,-622v-49,26,-22,12,-86,52r0,41r40,15v13,-4,29,-24,40,-11r-72,40v-23,-10,-46,-17,-70,-21v28,-25,8,-91,14,-137v21,-8,44,-19,68,-32xm336,-71v-60,18,-109,44,-148,77v-53,-39,-113,-65,-180,-79v18,-15,27,-40,27,-77r0,-237v54,-15,101,-42,142,-80v63,41,116,64,159,70r0,326xm232,-609r-43,-36r0,63xm242,-73r0,-275r-115,-44r0,276","w":373},"\u00f7":{"d":"312,-453r-82,75v-29,-23,-53,-50,-74,-79r80,-76v32,37,57,63,76,80xm459,-270r-430,0r0,-67r430,0r0,67xm312,-147r-82,75v-29,-23,-53,-50,-74,-79r80,-76v32,37,57,63,76,80","w":483},"\u00f8":{"d":"336,-71v-60,18,-109,44,-148,77v-13,-11,-28,-19,-44,-26r-26,90r-37,0r24,-109v-23,-13,-56,-24,-97,-34v18,-15,27,-40,27,-77r0,-237v54,-15,101,-42,142,-80r38,19r25,-77r39,0r-27,99v26,11,54,24,84,29r0,326xm246,-353r-18,-5r-64,263r81,27xm200,-367v-25,-12,-51,-22,-76,-30r-1,286r13,3","w":373},"\u00f9":{"d":"302,-540r-35,15v-78,-41,-138,-88,-179,-140r66,-22v40,51,89,100,148,147xm411,-68r-89,74v-42,-29,-63,-64,-63,-106r-143,102v-42,-27,-63,-66,-63,-116r0,-264r-18,-17r-23,14r-10,-11r96,-74r76,59r-30,24r0,266v0,19,12,35,36,48r81,-58r1,-251r-25,-30r71,-59r74,59r-29,25r0,285v0,11,10,21,30,32r18,-12","w":443},"\u00fa":{"d":"350,-665v-41,51,-100,97,-179,140r-35,-15v55,-45,104,-94,146,-147xm411,-68r-89,74v-42,-29,-63,-64,-63,-106r-143,102v-42,-27,-63,-66,-63,-116r0,-264r-18,-17r-23,14r-10,-11r96,-74r76,59r-30,24r0,266v0,19,12,35,36,48r81,-58r1,-251r-25,-30r71,-59r74,59r-29,25r0,285v0,11,10,21,30,32r18,-12","w":443},"\u00fb":{"d":"346,-536r-15,10v-51,-29,-91,-62,-121,-100v-30,35,-72,68,-127,100r-12,-10v50,-59,87,-109,110,-150r53,0v29,49,66,99,112,150xm411,-68r-89,74v-42,-29,-63,-64,-63,-106r-143,102v-42,-27,-63,-66,-63,-116r0,-264r-18,-17r-23,14r-10,-11r96,-74r76,59r-30,24r0,266v0,19,12,35,36,48r81,-58r1,-251r-25,-30r71,-59r74,59r-29,25r0,285v0,11,10,21,30,32r18,-12","w":443},"\u00fc":{"d":"288,-622v-49,26,-22,12,-86,52r0,41r40,15v13,-4,29,-24,40,-11r-72,40v-23,-10,-46,-17,-70,-21v28,-25,8,-91,14,-137v21,-8,44,-19,68,-32xm411,-68r-89,74v-42,-29,-63,-64,-63,-106r-143,102v-42,-27,-63,-66,-63,-116r0,-264r-18,-17r-23,14r-10,-11r96,-74r76,59r-30,24r0,266v0,19,12,35,36,48r81,-58r0,-251r-24,-30r71,-59r74,59r-29,25r0,285v0,11,10,21,30,32r18,-12xm245,-609r-43,-36r0,63","w":443},"\u00fd":{"d":"-12,75v-14,-43,79,-131,79,-156r0,-265v0,-17,-8,-32,-24,-47r-32,23r-11,-13r96,-84v43,23,64,58,64,107r135,-106v78,81,82,214,2,300v-52,56,-148,100,-222,145v-48,29,-67,53,-67,83v0,35,39,52,78,52v47,0,81,-40,104,-43v8,1,13,4,14,15v0,29,-75,46,-114,46v-64,0,-98,-19,-102,-57xm157,-89v85,-53,169,-210,68,-298r-68,53r0,245xm370,-665v-41,51,-100,97,-179,140r-35,-15v55,-45,104,-94,146,-147","w":382},"\u00fe":{"d":"602,-69r-91,71v-25,-18,-41,-51,-48,-98r-96,101v-44,-22,-89,-49,-139,-64r-84,61v-49,-34,-95,-55,-138,-64v18,-16,27,-40,27,-71r0,-255v45,-19,86,-46,123,-79r91,57v-5,-82,20,-157,-35,-200v24,6,46,16,65,31r14,-1v25,-29,56,-45,95,-49v-73,49,-37,171,-45,277r130,-114r91,96v-19,15,-50,43,-92,85v48,40,59,64,75,145v6,30,15,53,26,68r19,-10xm481,-326r-62,-66r-79,72r0,115xm458,-124v-5,-39,-25,-72,-59,-101r-59,47r0,83r60,31xm247,-133r0,-257r-33,47r-90,-51r0,284r88,44r28,-20v5,-11,7,-27,7,-47","w":637},"\u00ff":{"d":"340,-605r-64,55r-60,-58r65,-56v21,22,40,42,59,59xm160,-605r-64,56v-27,-25,-47,-44,-59,-59r63,-56xm-2,75v-14,-43,79,-131,79,-156r0,-265v0,-17,-8,-32,-24,-47r-32,23r-11,-13r96,-84v43,23,64,58,64,107r135,-106v78,81,82,214,2,300v-52,56,-148,100,-222,145v-48,29,-67,53,-67,83v0,35,39,52,78,52v47,0,81,-40,104,-43v8,1,13,4,14,15v0,29,-75,46,-114,46v-65,0,-99,-19,-102,-57xm170,-89v82,-52,165,-212,65,-298r-68,53"},"\r":{"w":322},"\u00a0":{"w":500},"\u017f":{"d":"255,-606r-20,69r-91,-18r0,450r65,35r23,-18r12,13r-88,80v-51,-39,-95,-64,-133,-75v17,-17,26,-42,26,-75r0,-257r-49,0r8,-51r41,0r0,-102v37,-16,74,-41,111,-74","w":267},"\u222b":{"d":"469,-86r-99,89v-35,-26,-76,-48,-122,-67r-75,67v-37,-28,-85,-53,-144,-76v17,-17,25,-41,25,-72r0,-257r-51,0r9,-51r44,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r98,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r75,0r-7,51r-68,0r0,286r72,46r34,-28xm251,-145r0,-257r-96,0r0,286r71,46v17,-13,25,-38,25,-75","w":496},"\u2248":{"d":"751,-104v-3,121,-140,189,-265,211r-3,-6v65,-25,106,-45,124,-58v35,-26,53,-63,53,-111r0,-280v-4,-19,-17,-34,-38,-47r-79,59r0,247r26,29r-76,66r-73,-59r-76,55v-44,-30,-84,-50,-119,-60v-16,13,-39,34,-69,63v-51,-39,-95,-64,-133,-75v17,-17,26,-42,26,-75r0,-257r-49,0r8,-51r41,0r0,-102v37,-16,74,-41,111,-74r95,23r-20,69r-91,-18r0,450r65,35v16,-7,24,-28,24,-63r0,-255v45,-19,86,-46,123,-79r91,57v-1,-76,9,-167,-34,-200r2,-2v24,9,45,20,62,33r15,-1v29,-33,61,-50,96,-50v-69,50,-35,164,-43,268r140,-103v44,29,66,68,66,117r0,244xm447,-92r0,-298r-33,47r-90,-51r0,284r88,44","w":785},"\u2260":{"d":"673,-75r-91,78v-31,-27,-74,-51,-131,-72r-81,72v-31,-24,-71,-46,-122,-67r-75,67v-37,-28,-85,-53,-144,-76v17,-17,25,-41,25,-72r0,-257r-51,0r9,-51r44,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r98,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r75,0r-7,51r-68,0r0,286r72,46v28,-13,42,-38,42,-75r0,-339v-1,-75,76,-136,147,-143v-33,24,-49,54,-49,90r0,421r73,46r24,-18xm251,-145r0,-257r-96,0r0,286r71,46v17,-13,25,-38,25,-75","w":689},"\u2261":{"d":"453,-402r-102,0r0,291r53,44r28,-22r11,14r-90,78v-39,-31,-74,-54,-105,-67r-75,67v-37,-28,-85,-53,-144,-76v17,-17,25,-41,25,-72r0,-257r-51,0r9,-51r44,0r0,-102v34,-15,70,-39,109,-74r96,23r-20,69r-86,-18r0,102r97,0r98,-127r1,127r102,0r0,51xm254,-145r0,-257r-99,0r0,286r72,46v18,-10,27,-35,27,-75","w":492},"\u2264":{"d":"201,-75v20,-22,48,-38,80,-38r0,-228v0,-30,-8,-50,-23,-59r-24,15r-11,-8r84,-75v40,21,63,53,69,98r103,-97v67,23,100,74,100,153r0,222v-47,29,-68,44,-121,92v-19,-8,-47,-21,-84,-39v-9,75,3,120,44,171v-55,-11,-66,-21,-102,-63v-27,23,-40,35,-73,42v42,-49,40,-98,36,-173v-44,-18,-90,36,-123,67v-51,-39,-95,-64,-133,-75v17,-17,26,-42,26,-75r0,-257r-49,0r8,-51r41,0r0,-102v37,-16,74,-41,111,-74r95,23r-20,69r-91,-18r0,450xm490,-75r0,-262v0,-21,-32,-48,-56,-56r-60,53r0,229v41,11,79,23,116,36","w":618},"\u2265":{"d":"235,-67r-79,72v-51,-39,-95,-64,-133,-75v17,-17,26,-42,26,-75r0,-257r-49,0r8,-51r41,0r0,-102v37,-16,74,-41,111,-74r95,23r-20,69r-91,-18r0,450r65,35v25,-12,37,-37,37,-75r0,-258r-36,0r1,-14r131,-163r1,127r102,0r0,51r-102,0r0,291r53,44r28,-22r11,14r-90,78v-41,-33,-77,-56,-110,-70","w":470},"\u2302":{"d":"429,-402r-102,0r0,291r53,44r28,-22r11,14r-90,78v-39,-33,-76,-56,-112,-71r-88,71v-46,-37,-88,-63,-126,-76v18,-19,27,-43,27,-72r0,-258r-35,0r1,-14r130,-163r1,127r97,0r102,-127r1,127r102,0r0,51xm230,-145r0,-257r-103,0r0,291r53,44r38,-26v8,-13,12,-31,12,-52","w":461}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Copyright (c) Typographer Mediengestaltung, 2000. All rights reserved. Full
 * character set added by Dieter Steffmann, Kreuztal. (aka Polonaise)
 */
Cufon.registerFont({"w":426,"face":{"font-family":"Chopin Script","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"2 0 5 5 2 0 0 2 0 2","ascent":"800","descent":"-200","x-height":"13","cap-height":"26","bbox":"-447 -930 1611 425","underline-thickness":"50","underline-position":"-125","unicode-range":"U+000D-U+E001"},"glyphs":{" ":{"w":303},"\r":{"d":"93,-282v-20,-8,-48,-17,-61,12v-29,63,-98,151,-98,225v0,39,21,58,62,58v43,0,131,-77,262,-231r-8,-7v-31,40,-198,218,-232,219v-30,1,-24,-44,-14,-64r127,-242v-5,-1,-33,31,-38,30","w":236},"!":{"d":"133,-180v85,-142,278,-407,278,-461v0,-26,-9,-39,-26,-39v-31,0,-60,32,-87,95r-158,373v-5,10,-11,21,-18,32r11,0xm39,8v30,0,58,-28,58,-58v0,-33,-14,-50,-42,-50v-57,0,-82,108,-16,108","w":328},"\"":{"d":"237,-485v47,-8,97,-94,97,-139v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,49v30,24,-33,54,-44,68v0,4,3,6,9,7xm136,-485v47,-8,97,-94,97,-139v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,49v30,24,-33,54,-44,68v0,4,3,6,9,7","w":218},"#":{"d":"443,-414r-102,0r89,-162r-22,0r-89,162r-119,0r89,-162r-22,0r-89,162r-96,0r-33,60r96,0r-61,111r-95,0r-33,60r95,0r-99,183r21,0r99,-183r120,0r-101,183r21,0r101,-183r101,0r34,-60r-102,0r62,-111r101,0xm286,-354r-62,111r-119,0r62,-111r119,0","w":495},"$":{"d":"282,-367v30,1,55,-29,54,-59v0,-39,-31,-70,-63,-79r31,-59r-14,-6r-33,61v-99,-13,-170,67,-133,165v16,42,44,108,49,149v-3,46,-37,75,-83,78v-44,2,-84,-32,-82,-76v2,-37,18,-72,54,-72v17,0,25,7,25,21v0,13,-12,22,-35,25v15,23,30,35,44,35v26,1,49,-29,49,-54v0,-36,-32,-63,-68,-62v-99,3,-115,147,-35,192r-51,99r15,6r52,-97v97,24,188,-21,188,-119v0,-86,-63,-134,-64,-214v-1,-34,28,-61,62,-61v30,0,57,20,56,50v-1,36,-29,34,-55,18v-5,27,3,65,37,59","w":370},"%":{"d":"58,-403v0,36,30,70,65,70v58,-1,120,-85,137,-139r73,-13r-95,121r-139,160v-68,66,-128,148,-157,241r12,1v11,-36,29,-22,55,-34v78,-138,151,-208,237,-324v47,-62,89,-121,127,-178v79,-43,118,-76,118,-101v0,-11,-7,-17,-20,-17v-30,0,-70,36,-120,107v-25,11,-55,17,-88,20v11,-45,7,-104,-43,-104v-74,0,-162,116,-162,190xm234,-9v74,0,147,-124,147,-200v0,-41,-18,-61,-54,-61v-66,0,-157,121,-157,187v0,37,27,74,64,74xm474,-594v0,13,-29,36,-87,70v35,-52,61,-78,78,-78v6,0,9,3,9,8xm194,-532v-1,-18,14,-37,31,-36v33,1,29,45,18,77v-33,-2,-49,-16,-49,-41xm172,-527v17,36,25,41,68,52v-7,36,-63,121,-98,119v-17,0,-25,-9,-25,-27v0,-33,18,-81,55,-144xm228,-60v0,-48,62,-187,108,-187v17,0,26,16,26,49v0,47,-67,168,-113,168v-14,0,-21,-10,-21,-30","w":504},"&":{"d":"690,-191v-3,-79,-48,-127,-123,-135r178,-81v109,-51,164,-129,85,-213r-7,7v98,127,-101,184,-218,219v-128,39,-195,94,-201,163v-29,11,-53,23,-76,38v-9,-124,74,-243,210,-212r-3,-11v-118,-73,-27,-252,99,-252v45,0,88,24,88,70v0,35,-31,68,-66,67v-24,0,-44,-12,-61,-37r-16,2v35,82,157,56,159,-32v2,-66,-83,-109,-154,-109v-141,0,-245,143,-152,257v-153,-2,-253,140,-212,304v-112,27,-185,-55,-166,-172v-31,2,-47,35,-47,68v1,99,114,161,223,127v29,75,125,131,230,131v123,0,233,-81,230,-199xm454,-228v59,-31,126,-16,130,46v2,32,-30,59,-62,59v-55,0,-87,-48,-68,-105xm551,-306v70,0,115,46,118,116v6,136,-172,225,-278,124v-33,-31,-54,-64,-59,-104r73,-42v0,61,55,105,116,105v43,0,90,-27,86,-71v-6,-69,-69,-97,-145,-71v27,-37,39,-57,89,-57","w":854},"'":{"d":"40,-485v47,-8,97,-94,97,-139v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,49v30,24,-33,54,-44,68v0,4,3,6,9,7","w":0},"(":{"d":"596,-776v0,-5,-7,-8,-20,-8v-14,0,-51,22,-112,67v-164,122,-351,308,-351,571v0,125,42,233,126,325v29,32,51,48,67,48v7,0,11,-5,11,-16v0,-3,-17,-24,-51,-64v-58,-69,-85,-128,-85,-249v0,-237,140,-461,295,-576v26,-19,120,-72,120,-98","w":340},")":{"d":"190,-47v164,-192,181,-504,4,-689v-29,-32,-52,-48,-67,-48v-7,0,-11,5,-11,16v0,3,17,24,51,64v168,193,56,544,-81,700v-58,66,-119,122,-197,174v-34,23,-50,40,-50,49v0,5,7,8,20,8v14,0,51,-22,112,-67v82,-61,154,-131,219,-207","w":340},"*":{"d":"278,-490v39,11,106,22,111,-26v-14,-64,-91,21,-112,9v0,-9,76,-63,66,-74v-1,-35,-58,-29,-68,-2v-8,22,-9,64,-23,76v-21,-5,-16,-63,-49,-58v-36,-5,-63,48,-24,60v12,4,45,8,47,14v7,20,-112,20,-100,61v0,17,9,25,27,25v22,7,72,-69,90,-65v9,14,-12,43,-12,54v0,18,9,27,28,27v21,1,46,-17,45,-38v0,-5,-9,-19,-29,-39v-8,-8,-10,-24,3,-24","w":268},"+":{"d":"262,-276r-99,0r69,-122r-70,0r-69,122r-81,0r-13,15r86,0r-69,123r70,0r69,-123r92,0","w":336},",":{"d":"30,83v46,-8,97,-94,97,-137v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,21,13,36,39,47v30,24,-33,54,-44,68v0,4,3,6,9,7","w":244},"-":{"d":"54,-152v57,7,175,29,180,-38v-15,-15,-59,11,-94,-2v-45,-16,-105,11,-122,41v4,14,25,-1,36,-1","w":268},".":{"d":"60,8v30,0,58,-28,58,-58v0,-33,-14,-50,-42,-50v-58,0,-86,108,-16,108","w":244},"\/":{"d":"-83,42v1,1,22,-38,29,-33v23,0,41,-15,53,-45v49,-120,304,-483,417,-620r-17,-2v-160,181,-299,355,-417,545v-47,75,-70,125,-70,149v0,4,2,6,5,6","w":360},"0":{"d":"-33,-123v0,79,50,129,128,129v150,0,270,-148,329,-272v38,-80,59,-154,59,-223v1,-76,-51,-118,-126,-116v-145,5,-264,144,-327,267v-42,79,-63,151,-63,215xm92,-6v-31,0,-64,-32,-63,-63v8,-113,108,-291,177,-387v66,-91,116,-138,155,-138v35,0,53,26,53,78v0,120,-111,321,-183,409v-54,67,-100,101,-139,101","w":522},"1":{"d":"319,-531v0,-3,-2,-5,-5,-5v-21,-12,-250,213,-263,236r23,-11v59,-55,92,-83,99,-83v-20,30,-50,68,-73,99v-90,115,-150,209,-190,359v11,-12,27,-26,35,-39v21,0,44,3,63,-1v44,-83,85,-216,141,-300","w":299},"2":{"d":"22,-74v-21,0,-82,14,-102,13v6,-26,106,-93,129,-103v145,-61,358,-108,367,-280v4,-79,-50,-131,-129,-131v-82,0,-184,70,-184,149v0,43,29,76,72,76v33,0,63,-24,63,-57v0,-37,-22,-53,-56,-45r8,32v1,11,-15,24,-26,24v-24,0,-40,-25,-40,-48v0,-57,63,-110,121,-110v47,0,94,33,92,81v-3,70,-73,154,-123,202v-45,44,-211,113,-268,165v-68,63,-102,94,-101,118v1,3,3,6,7,7v8,-11,95,-18,121,-18v38,0,106,22,135,21v59,0,169,-65,155,-133v-45,37,-80,55,-105,55v-27,0,-109,-18,-136,-18","w":453},"3":{"d":"330,-195v0,-73,-48,-133,-117,-137r306,-217v-35,16,-63,24,-84,24v-30,0,-124,-24,-154,-24v-63,0,-114,34,-155,102v92,-35,124,-50,242,-11r-263,182v18,21,53,-24,77,-18v36,0,70,23,70,60v0,92,-111,230,-205,230v-54,0,-93,-31,-93,-83v-1,-36,25,-75,61,-74v20,0,30,11,30,32v0,10,-11,18,-34,24v20,54,91,21,91,-29v0,-33,-33,-66,-66,-66v-48,0,-96,62,-94,110v4,77,52,120,129,123v125,5,259,-108,259,-228","w":486},"4":{"d":"57,43v15,-12,27,-24,37,-37v60,17,60,20,88,-46r37,-87r116,5v7,-14,18,-33,23,-47r-129,10v113,-193,170,-292,170,-295v-5,0,-14,7,-26,20v-97,105,-148,177,-216,281v-44,1,-82,9,-127,1v-28,-4,-42,-11,-42,-22v0,-23,42,-64,125,-123r249,-176v50,-45,80,-59,83,-112r-28,25r-56,-3v-67,70,-109,125,-187,193v-53,46,-211,164,-215,205v-5,42,128,31,183,35v-27,47,-79,124,-85,173","w":473},"5":{"d":"384,-497v29,-7,90,-57,95,-87v-1,-8,-8,-1,-12,0v-16,8,-71,31,-84,30v-47,-5,-106,-38,-153,-6v-18,12,-32,23,-41,38v-39,73,-88,140,-120,219v0,2,1,3,2,3v-1,-8,77,-79,97,-71v50,-1,84,42,84,92v0,90,-125,280,-216,280v-58,0,-105,-31,-102,-87v2,-37,23,-69,60,-69v22,0,33,10,33,29v0,16,-9,25,-28,28v7,19,17,29,30,29v29,1,52,-26,52,-54v0,-35,-32,-66,-67,-66v-49,0,-93,53,-93,102v0,64,61,109,127,109v142,0,284,-126,284,-267v0,-69,-57,-144,-122,-144v-30,0,-61,7,-93,20r62,-107v53,-49,126,-21,205,-21","w":451},"6":{"d":"423,-458v33,0,66,-30,66,-64v0,-45,-56,-77,-105,-77v-189,0,-403,297,-403,486v0,75,62,135,136,135v120,0,246,-149,246,-271v0,-65,-49,-129,-111,-129v-31,0,-63,10,-94,29v81,-159,157,-239,226,-239v44,0,66,15,66,45v1,44,-38,52,-58,18v-35,18,-2,67,31,67xm294,-291v0,72,-117,309,-187,295v-37,0,-56,-19,-56,-57v0,-28,7,-65,22,-111v40,-129,93,-193,158,-193v42,0,63,22,63,66","w":481},"7":{"d":"-99,33v33,-40,58,-52,99,-33v42,-63,84,-151,131,-203r233,-257v71,-77,106,-121,106,-131v-17,-22,-53,24,-81,18v-26,2,-129,-25,-155,-23v-86,5,-106,45,-145,116v51,-28,67,-45,120,-45v51,0,104,14,152,1v24,-6,42,-8,53,-8v-65,82,-160,153,-252,211v-55,35,-117,94,-176,183v-65,98,-85,112,-85,171","w":436},"8":{"d":"314,-327v89,-17,185,-64,187,-152v2,-68,-71,-112,-144,-112v-140,0,-241,140,-162,270v-150,35,-225,97,-225,184v0,87,85,149,174,149v120,0,229,-82,227,-197v0,-41,-19,-89,-57,-142xm239,-465v0,-52,64,-116,118,-116v104,0,95,130,38,181v-27,24,-56,46,-94,59v-32,-13,-62,-78,-62,-124xm144,0v-59,0,-99,-66,-99,-129v0,-85,80,-174,161,-176v57,63,85,111,85,144v0,74,-72,161,-147,161","w":520},"9":{"d":"-87,-71v0,47,62,82,114,80v151,-6,272,-142,337,-265v42,-80,65,-152,65,-217v0,-80,-46,-129,-126,-132v-128,-6,-255,138,-255,266v0,63,39,126,98,126v33,0,64,-6,91,-18v-37,68,-67,116,-90,144v-45,56,-91,84,-138,84v-37,0,-55,-17,-55,-50v1,-43,40,-44,58,-10r14,-32v0,-26,-15,-39,-44,-39v-29,0,-69,34,-69,63xm317,-594v30,-1,46,32,46,61v0,102,-97,305,-186,305v-35,0,-63,-31,-63,-66v0,-75,129,-314,203,-300","w":490},":":{"d":"132,-193v58,8,85,-110,16,-110v-58,-8,-85,110,-16,110xm16,13v30,0,58,-28,58,-58v0,-33,-14,-50,-42,-50v-57,0,-82,108,-16,108","w":244},";":{"d":"122,-193v58,8,85,-110,16,-110v-58,-8,-85,110,-16,110xm-12,83v44,-9,95,-95,95,-137v0,-25,-20,-46,-45,-46v-30,0,-55,32,-54,61v0,21,12,36,37,47v22,19,-11,48,-36,60v-9,4,-8,14,3,15","w":244},"<":{"d":"850,-112v37,0,68,-23,68,-60v0,-41,-38,-65,-81,-65v-38,0,-89,11,-153,34v-50,-46,-104,-96,-175,-117v-2,-35,51,-77,86,-75v95,6,136,53,193,125r18,2v-73,-102,-144,-153,-211,-153v-56,0,-115,41,-113,96v-22,-2,-37,-3,-45,-3v-43,0,-89,33,-151,84v-53,43,-75,56,-143,59v-67,3,-117,-59,-117,-126v0,-56,66,-110,122,-110v65,0,108,40,107,105v0,49,-27,74,-80,74v-43,0,-70,-71,-22,-80v15,-3,32,14,42,7v0,-39,-16,-59,-49,-59v-35,0,-65,35,-65,70v0,46,45,80,93,80v51,0,91,-40,91,-91v0,-64,-56,-119,-119,-119v-72,0,-136,52,-136,122v0,72,59,140,133,140v44,0,89,-17,136,-52v-55,97,13,219,118,219v71,0,139,-49,136,-122v-3,-64,-39,-110,-104,-112v-48,-2,-91,34,-91,83v0,38,34,78,73,78v30,0,53,-31,52,-60v0,-17,-6,-26,-18,-26v-8,12,-18,30,-34,31v-21,1,-31,-11,-31,-36v0,-30,19,-55,49,-55v57,0,95,41,94,97v0,67,-42,101,-126,101v-50,0,-121,-65,-121,-114v0,-85,33,-118,83,-151v41,-27,74,-31,124,-21v1,89,85,163,186,127v67,49,128,73,181,73xm837,-224v36,-1,70,18,70,52v0,29,-28,47,-57,47v-35,0,-86,-22,-155,-67v51,-21,98,-32,142,-32xm658,-195v-54,8,-91,7,-121,-34v-19,-25,-29,-51,-29,-78v67,22,106,69,150,112","w":954},"=":{"d":"5,-285v87,-9,181,4,274,4v39,0,75,-13,110,-38v9,-7,14,-13,14,-17v0,-6,-4,-9,-11,-9v-78,0,-189,0,-261,-3v-30,-1,-132,23,-131,58v0,3,2,5,5,5xm5,-149v87,-9,181,4,274,4v39,0,75,-13,110,-38v9,-7,14,-13,14,-17v0,-6,-4,-9,-11,-9v-78,0,-189,0,-261,-3v-30,-1,-132,23,-131,58v0,3,2,5,5,5","w":481},">":{"d":"799,-172v74,0,133,-67,133,-140v0,-70,-65,-122,-136,-122v-64,0,-119,53,-119,119v0,51,40,93,91,91v52,-2,90,-29,93,-80v2,-35,-30,-70,-65,-70v-33,0,-49,20,-49,59v0,2,1,3,3,3v24,-14,65,-17,65,26v0,23,-25,45,-48,44v-53,0,-80,-25,-80,-74v-1,-65,42,-105,107,-105v56,0,122,54,122,110v0,98,-101,159,-193,109v-13,-7,-37,-18,-67,-42v-82,-65,-105,-94,-196,-81v2,-55,-59,-96,-113,-96v-68,0,-138,51,-211,153r18,-2v58,-73,97,-118,193,-125v34,-2,89,40,86,75v-82,24,-118,68,-175,117v-64,-23,-115,-34,-153,-34v-43,0,-81,24,-81,65v0,37,31,60,68,60v53,0,114,-24,181,-73v102,35,184,-37,186,-127v81,-22,149,30,184,77v15,21,23,53,23,95v0,49,-71,114,-121,114v-84,0,-126,-34,-126,-101v-1,-56,37,-97,94,-97v30,0,49,25,49,55v0,39,-38,48,-54,20r-11,-15v-12,0,-18,9,-18,26v-1,29,22,60,52,60v39,0,73,-40,73,-78v0,-49,-43,-85,-91,-83v-66,2,-101,48,-104,112v-3,73,63,122,136,122v104,0,173,-122,118,-219v47,35,92,52,136,52xm434,-307v-1,59,-51,131,-122,115v-8,-1,-18,-2,-28,-3v51,-43,74,-88,150,-112xm35,-172v0,-34,33,-53,70,-52v44,0,91,11,142,32v-69,45,-120,67,-155,67v-29,0,-57,-18,-57,-47","w":954},"?":{"d":"326,-647v58,0,107,33,107,91v0,61,-116,169,-161,198r-148,95v-38,23,-44,96,13,95v9,0,25,-3,46,-8v-9,-10,-20,-3,-36,-3v-60,3,-34,-61,-6,-76v109,-57,232,-94,311,-183v36,-40,54,-78,54,-115v2,-72,-74,-126,-149,-126v-122,0,-265,100,-260,217v3,66,76,75,124,33r-10,-3v-43,30,-100,23,-103,-31v-6,-85,129,-184,218,-184xm53,8v30,0,58,-28,58,-58v0,-33,-14,-50,-42,-50v-58,0,-86,108,-16,108","w":522},"@":{"d":"367,-83v135,-11,254,-200,257,-331v3,-110,-83,-170,-197,-170v-200,0,-386,172,-423,343v-7,27,-10,57,-10,88v-2,137,98,220,233,220v146,0,297,-97,361,-213r-20,0v-90,128,-201,192,-333,192v-168,0,-248,-119,-203,-285v45,-165,200,-327,393,-327v105,0,177,55,178,153v1,84,-68,196,-124,251v-36,35,-64,54,-86,54v-29,0,-44,-13,-44,-38v42,-109,102,-197,152,-298v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24v-107,-4,-224,108,-224,216v0,130,112,120,163,40v-14,56,3,99,74,93xm189,-165v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33","w":691},"A":{"d":"-6,-178v0,218,177,369,398,369v112,0,272,-64,376,-128r91,59v99,49,222,68,308,0v41,-32,62,-68,62,-109v-1,-106,-146,-141,-241,-90v-27,14,-98,54,-212,123r-30,-28v88,-42,178,-146,217,-242v10,-27,17,-61,21,-101v140,-55,210,-142,210,-262v0,-160,-175,-269,-343,-269v-161,0,-353,122,-353,273v0,98,39,163,116,195r3,-13v-70,-31,-105,-91,-105,-182v0,-144,187,-259,339,-259v163,0,329,103,329,255v0,111,-65,193,-194,244v8,-110,45,-196,111,-257v23,-21,34,-35,34,-42v0,-11,-3,-16,-10,-16v-146,33,-301,199,-368,342r-249,0v-135,-3,-265,88,-265,215v0,84,70,128,157,128v97,0,193,-69,287,-208r79,-120v51,0,92,-3,122,-9v1,60,-55,180,-81,242v-1,8,-66,70,-78,68v-32,-15,-59,-22,-80,-22v-17,0,-25,7,-25,20v0,34,65,33,102,25r36,32v-142,84,-264,126,-366,126v-216,0,-389,-146,-389,-359v0,-202,140,-353,344,-349v17,0,37,4,58,13r0,-12v-22,-8,-41,-12,-58,-12v-213,-4,-353,148,-353,360xm876,-475v39,-44,140,-139,181,-141v-3,5,-16,21,-39,48v-77,89,-121,170,-133,243v-32,6,-69,9,-112,9v17,-46,50,-100,103,-159xm986,-61v91,-46,224,-33,229,75v4,73,-94,138,-169,138v-97,0,-183,-32,-260,-97v110,-67,177,-104,200,-116xm696,8v-23,5,-51,11,-55,-8v0,-4,3,-6,9,-6v9,0,24,5,46,14xm286,-101v0,-112,135,-198,254,-198r201,0v-62,96,-107,159,-135,190v-73,81,-143,122,-210,122v-73,0,-110,-38,-110,-114","w":1061},"B":{"d":"1220,-474v37,-5,86,-33,84,-70v-4,-90,-194,-135,-293,-97r-61,23v-58,-30,-117,-55,-202,-52v-131,4,-155,16,-260,80v-244,-110,-478,107,-478,335v0,170,123,282,297,279v228,-4,319,-90,425,-246v25,-37,70,-214,100,-252v52,-65,87,-107,112,-120v27,15,40,55,40,120v0,43,-27,90,-80,140v-17,-15,-33,-22,-48,-22v-21,0,-32,7,-32,22v0,24,37,33,66,27v13,62,6,147,-27,172v-95,-2,-225,32,-225,113v0,57,102,50,152,36v84,-24,144,-78,174,-156v45,-19,85,-44,122,-76r-8,-8v-37,33,-73,55,-108,67v0,-63,-16,-115,-48,-154v103,-41,168,-165,79,-258r-32,-36v57,-23,103,-35,140,-35v65,0,180,41,180,98v0,29,-50,56,-79,60xm887,-324v-14,6,-44,8,-43,-10v8,-19,31,-6,43,10xm530,-268v-121,0,-168,-146,-105,-237v10,-15,31,-38,63,-70v94,52,141,126,141,223v0,11,-5,28,-15,51v-24,22,-52,33,-84,33xm860,-120r-52,68v-39,39,-78,59,-116,58v-28,-1,-42,-10,-42,-28v-1,-73,119,-100,210,-98xm498,-582v107,-88,303,-109,433,-25v-105,40,-212,156,-251,270v-47,137,-119,249,-237,311v-191,99,-422,-17,-422,-229v0,-214,234,-435,456,-325v-60,52,-88,89,-91,168v-5,117,99,191,215,142v-17,61,-84,110,-162,112r0,14v101,-4,157,-65,187,-142v57,-54,71,-110,31,-171r-11,3v37,59,17,94,-10,137v19,-119,-35,-196,-138,-265","w":1064},"C":{"d":"876,104v120,0,322,70,250,196r5,6v89,-133,-117,-213,-255,-213v-196,0,-363,148,-552,154v-182,5,-310,-150,-310,-334v0,-243,219,-459,486,-434v31,3,144,7,138,16v-105,59,-229,213,-229,342v0,85,32,144,95,175v27,37,60,56,97,56v70,0,141,-48,212,-143r-8,-9v-73,92,-141,138,-204,138v-25,0,-46,-10,-63,-31v144,23,295,-158,294,-288v0,-61,-26,-92,-79,-92v-137,0,-277,176,-265,322v-43,-53,-17,-116,14,-186v50,-111,145,-200,222,-268v46,7,84,11,116,15v107,14,237,-2,237,-87v0,-39,-34,-58,-101,-58v-95,0,-203,34,-325,102r-65,-7v-51,-6,-95,-9,-132,-9v-238,-6,-451,206,-451,446v0,196,130,348,321,345v196,-3,351,-155,552,-154xm1066,-561v0,53,-50,80,-150,80v-33,0,-90,-6,-171,-18v97,-73,174,-109,231,-109v60,0,90,16,90,47xm504,-58v-6,-107,124,-281,228,-281v44,0,66,22,66,67v0,101,-142,278,-242,278v-15,0,-28,-4,-41,-12v-7,-21,-11,-38,-11,-52","w":933},"D":{"d":"725,-641v119,-23,184,-13,252,36r4,-8v-45,-57,-181,-64,-265,-36v-76,-91,-179,-136,-309,-136v-198,-1,-351,121,-335,324v-63,84,-91,180,-33,292r9,-6v-49,-117,-34,-179,27,-269v24,95,97,178,201,178v72,0,146,-61,146,-134v0,-90,-89,-149,-182,-149v-50,0,-102,25,-157,75v-9,-182,141,-299,324,-299v99,0,183,30,252,89v22,19,33,31,34,37v-163,79,-263,252,-346,481v-20,55,-37,86,-52,95v-43,-31,-98,-66,-158,-66v-48,0,-95,26,-95,73v0,63,61,89,129,89v51,0,100,-16,147,-47v147,92,283,45,384,-98v112,-158,124,-362,23,-521xm704,-628v19,7,39,113,39,152v0,191,-150,486,-327,474v-13,0,-40,-12,-81,-35v123,-85,143,-192,192,-341v42,-130,100,-213,177,-250xm240,-537v89,-1,170,52,170,137v0,66,-68,123,-134,122v-108,-2,-170,-80,-191,-179v51,-53,103,-80,155,-80xm59,-64v10,-111,181,-42,220,6v-51,44,-95,66,-132,66v-46,0,-92,-29,-88,-72","w":852},"E":{"d":"766,-436v65,2,134,-46,134,-107v0,-66,-67,-120,-134,-120v-105,0,-168,52,-189,155v-85,-10,-147,-15,-186,-15v-196,-3,-456,93,-375,291r12,-8v-78,-184,182,-273,363,-270v55,0,117,6,186,18v11,31,20,61,38,86v-147,-12,-248,77,-248,216v0,143,108,220,256,220v127,0,241,-110,241,-237v0,-64,-39,-120,-102,-120v-84,0,-181,86,-177,172v2,54,31,94,84,94v80,0,121,-79,117,-179r-12,0v1,85,-31,164,-105,165v-41,1,-70,-39,-70,-80v0,-75,90,-158,163,-158v56,0,88,47,88,106v0,117,-108,219,-227,219v-94,0,-161,-96,-161,-195v0,-100,97,-222,207,-173v12,15,25,23,40,23v20,-4,13,-25,-5,-31v-40,-13,-33,-50,-41,-95v43,15,77,23,103,23xm798,-628v46,0,90,38,90,85v0,102,-150,119,-224,65v-23,-75,67,-150,134,-150","w":973},"F":{"d":"686,-332v0,-87,-64,-211,-114,-243v97,-80,294,-70,453,-19v35,11,198,103,277,103v49,0,125,-44,122,-88v-67,107,-164,90,-274,30v-102,-56,-204,-137,-356,-137v-84,0,-165,33,-242,98v-263,-136,-544,76,-544,346v0,224,160,389,382,387v132,-1,288,-73,348,-151v40,-51,86,-165,135,-344r60,9v-5,61,-8,94,-9,101v-8,47,-24,57,-59,41r-7,7v11,11,22,16,34,16v66,0,93,-71,85,-163v25,-3,60,-28,59,-55v0,-23,-11,-34,-32,-34v-30,0,-52,23,-66,68r-59,-11v49,-97,52,-120,158,-137v34,-5,51,-5,51,-17v-118,4,-151,15,-219,66r-62,75r-40,-8r-5,15r38,8r-81,213v-42,103,-47,132,-110,196v-64,64,-138,95,-219,95v-204,0,-350,-168,-350,-377v0,-252,262,-476,504,-336v-48,53,-110,140,-110,225v0,92,53,162,150,146r0,-11v-88,14,-139,-50,-139,-135v0,-64,68,-201,115,-216v58,43,115,144,115,237v0,133,-114,289,-241,289v-100,0,-186,-99,-137,-206v0,-5,-2,-9,-7,-14v-11,38,-17,67,-17,87v-3,75,84,144,161,144v134,0,252,-164,252,-300xm977,-362v-9,-12,17,-49,27,-48v10,0,15,4,15,11v1,19,-23,38,-42,37","w":1026},"G":{"d":"126,184v-11,106,65,186,165,186v149,0,287,-154,339,-294r73,-90v90,38,243,144,344,195v136,69,292,34,320,-123r-10,0v-16,88,-76,147,-176,147v-51,0,-110,-21,-179,-63v-145,-89,-242,-144,-290,-165v33,-35,107,-72,167,-70r-2,-10v-65,0,-123,25,-174,76r-23,-13v45,-87,125,-212,179,-303r-10,-4r-30,42v-22,-9,-37,-14,-45,-14v-30,0,-78,88,-144,264v-85,-16,-107,-19,-189,-12v4,-87,12,-108,45,-172v46,-88,107,-160,181,-216v100,12,192,-10,271,-35v76,-25,114,-53,114,-84v1,-38,-55,-60,-101,-60v-117,0,-244,51,-383,153v-73,-14,-130,-21,-171,-21v-225,-4,-397,173,-397,399v0,121,42,216,126,287xm975,-613v28,-1,63,14,63,39v0,50,-192,101,-250,104v-23,1,-61,3,-113,3v125,-97,225,-146,300,-146xm694,-18r-53,66r34,-76xm444,-53r82,-5v41,5,71,10,89,15v-45,32,-82,48,-110,48v-32,0,-52,-19,-61,-58xm9,-103v0,-237,196,-427,453,-384v26,4,57,10,93,17v-90,102,-230,229,-165,415v-130,42,-220,109,-262,227v-64,-54,-119,-164,-119,-275xm630,-37v-23,94,-15,123,-66,163v-58,45,-171,104,-249,104v-55,0,-114,-17,-177,-50v26,-104,137,-199,256,-226v82,84,126,78,236,9xm136,193v24,21,130,47,179,47v87,0,182,-44,283,-131v0,11,-11,35,-34,72v-74,120,-165,180,-273,180v-94,0,-157,-71,-155,-168","w":913},"H":{"d":"369,416v-189,2,-313,-225,-230,-416v19,11,42,17,69,17v149,0,296,-100,353,-221v6,-11,20,-46,42,-105r172,-34v-40,96,-84,251,-147,296r-36,30v-23,-13,-41,-20,-54,-20v-22,0,-33,9,-33,28v0,41,59,27,89,9v90,54,134,29,210,-40r0,-12v-82,66,-110,98,-195,47v34,-11,80,-46,139,-105v34,-34,80,-117,137,-248v73,-19,140,-44,199,-77v77,-43,116,-87,116,-130v0,-26,-20,-39,-60,-39v-103,1,-223,63,-273,125v-35,43,-65,81,-89,124r-172,33v29,-114,74,-193,163,-223v31,20,55,30,72,30v24,0,36,-9,36,-27v0,-31,-74,-29,-109,-20v-65,-45,-148,-175,-276,-168v-106,5,-205,74,-243,149v-12,22,-18,57,-18,106v-124,26,-234,122,-229,261v4,104,48,165,127,209v-17,56,-26,100,-26,132v-4,158,114,298,266,298v99,0,164,-46,193,-138r-10,3v-29,84,-90,126,-183,126xm888,-372v18,-73,164,-223,252,-223v34,0,51,10,51,30v0,59,-126,134,-196,160v-34,12,-69,24,-107,33xm839,-559v32,0,38,32,11,33v-15,0,-36,-8,-64,-24v21,-6,38,-9,53,-9xm428,-383v-52,-66,-81,-90,-187,-92v-2,-119,30,-141,105,-178v151,-76,278,-11,404,96v-56,27,-81,37,-132,84v-68,63,-83,101,-122,175r-42,9v0,-33,-7,-62,-20,-85v35,-19,67,-40,98,-65r-4,-7v-28,24,-64,45,-100,63xm418,-377v-105,29,-155,6,-177,-89v97,1,135,26,177,89xm579,-8v-5,10,-64,28,-63,0v6,-32,37,-13,63,0xm442,-272v-35,121,-102,181,-203,181v-13,0,-26,-4,-41,-13v50,-81,159,-140,244,-168xm181,-103v-9,5,-44,70,-49,88v-70,-37,-121,-107,-121,-199v0,-127,73,-211,220,-252v15,103,90,129,193,98v12,25,18,54,18,85v-104,40,-193,84,-253,173v-18,2,-36,-50,-36,-71v0,-69,37,-119,111,-148r-2,-6v-79,27,-119,79,-119,154v0,35,13,61,38,78xm493,-286v-46,139,-117,289,-285,294v-23,0,-45,-6,-66,-19v14,-31,28,-62,48,-86v15,10,30,15,47,15v107,0,180,-65,217,-195v21,-6,34,-9,39,-9","w":940},"I":{"d":"12,-259v-5,169,123,286,291,285v206,-2,303,-94,359,-259v95,-15,155,-93,177,-186r-9,-4v-33,90,-39,112,-108,151v-27,16,-46,24,-56,24v0,-16,7,-44,22,-83v51,-142,126,-229,224,-260v33,-11,73,-17,120,-18v-1,-31,-51,-34,-84,-41v-216,-45,-424,27,-479,188v-48,-36,-101,-54,-159,-54v-149,0,-256,92,-290,222r-8,-72v-4,-187,193,-368,390,-281r2,-9v-201,-87,-401,96,-401,290v0,41,3,76,9,107xm479,-453v44,-153,242,-228,448,-192v51,8,80,18,87,30v-62,3,-107,9,-137,15v-139,28,-248,192,-298,356v-22,-11,-38,-20,-49,-27v-5,-89,-16,-138,-51,-182xm519,-288v-35,-44,-38,-100,-43,-152v34,48,38,86,43,152xm519,-266v-44,126,-114,203,-255,203v-111,0,-191,-68,-240,-203v38,-161,133,-241,286,-241v60,0,112,19,155,56v3,93,12,130,54,185xm528,-258v17,11,31,20,47,26v-30,89,-169,247,-272,247v-160,0,-272,-100,-280,-255v52,114,111,186,241,186v131,0,219,-69,264,-204","w":789},"J":{"d":"853,-408v67,-126,170,-162,315,-162v8,0,12,-6,12,-18v0,-11,-9,-18,-26,-20v-71,-28,-142,-54,-243,-54v-127,0,-246,45,-324,117v-53,-49,-118,-73,-195,-73v-175,0,-286,139,-316,304v-35,59,-67,109,-67,209v0,177,128,310,303,307v181,-2,319,-117,380,-256v69,12,107,-3,150,-58v35,-45,55,-76,42,-122v-41,128,-85,190,-186,166xm911,-651v61,0,189,28,219,49r0,8v-26,1,-49,1,-68,2v-190,14,-284,120,-353,273r-101,223v-6,0,-14,-5,-25,-15v34,-124,-8,-214,-77,-278v26,-67,54,-113,83,-138v21,23,37,49,49,79r8,-8v-15,-33,-31,-59,-50,-80v80,-64,192,-115,315,-115xm92,-327v44,-205,212,-345,425,-251v31,14,52,29,63,42v-33,31,-64,92,-86,140v-143,-104,-336,-52,-402,69xm502,-374v68,64,97,149,67,251v-72,-76,-86,-139,-67,-251xm94,-308v65,-131,257,-180,396,-75v-22,135,-7,187,72,275v-32,68,-126,127,-213,127v-161,0,-258,-155,-255,-327xm82,-300v-18,173,109,331,267,331v96,0,171,-43,226,-130v12,7,21,13,26,18v-39,115,-158,270,-289,270v-164,0,-291,-133,-291,-294v0,-67,20,-132,61,-195","w":940},"K":{"d":"752,-214v13,-97,-68,-132,-157,-134r5,-18v91,18,189,10,231,-44v18,-23,77,-170,87,-187v55,-93,126,-135,231,-89r0,-7v-98,-50,-183,-4,-249,75v-81,96,-120,237,-297,237v23,-111,64,-182,121,-213v32,13,57,23,89,26v23,2,35,-9,35,-31v0,-17,-12,-26,-35,-27v-20,-1,-47,5,-81,17r-152,-111v-176,-92,-407,54,-381,254v-121,27,-199,114,-199,262v0,129,107,225,238,225v194,0,315,-177,356,-359v29,-1,61,42,64,70v11,97,-11,215,57,263v109,77,269,-14,269,-135v0,-59,-39,-101,-98,-100v-9,0,-13,3,-13,10v58,0,97,32,97,90v0,66,-66,146,-130,146v-58,0,-104,-88,-89,-182v2,-14,0,-27,1,-38xm837,-599v0,36,-83,1,-92,-1v25,-7,47,-12,66,-13v17,-1,26,3,26,14xm213,-456v82,-16,146,10,194,65v-42,21,-118,22,-152,-8v-17,-15,-35,-33,-42,-57xm211,-469v-22,-136,116,-230,240,-230v81,0,220,53,266,96v-75,30,-192,156,-212,235v-29,112,-57,192,-81,238v-48,93,-111,139,-186,139v-120,0,-228,-95,-228,-213v0,-138,70,-223,192,-249v18,59,91,106,174,85v25,-6,38,-8,38,-13v15,19,22,51,22,97v0,105,-86,192,-192,192v-56,0,-85,-41,-85,-96v0,-62,31,-108,93,-138r-2,-9v-53,22,-103,77,-103,147v-1,59,37,109,97,108v109,-1,204,-90,204,-204v0,-42,-8,-77,-23,-104v31,-19,62,-47,88,-77r-7,-8v-26,31,-55,56,-88,76v-55,-60,-117,-86,-207,-72","w":1052},"L":{"d":"433,26v212,81,475,-48,477,-243v0,-57,-29,-103,-87,-137r-6,11v51,38,77,80,77,126v1,139,-136,200,-291,200v-74,0,-157,-16,-249,-47v82,-109,113,-157,138,-300v119,-47,248,-153,250,-294v1,-86,-110,-87,-163,-34v-47,31,-108,120,-126,156v-19,39,-40,103,-61,192v-139,88,-297,-30,-297,-182v0,-155,138,-267,304,-250v15,1,35,3,60,6v-21,-12,-50,-18,-87,-18v-156,-4,-287,110,-287,262v0,118,87,225,204,222v24,0,57,-8,99,-24v-23,89,-59,166,-100,240v-69,-37,-124,-55,-165,-55v-54,-1,-120,30,-119,79v4,99,181,107,254,56r43,-24r75,35v22,10,41,17,57,23xm491,-381v-4,-111,72,-337,172,-337v44,0,66,20,66,60v0,102,-152,251,-238,277xm17,-64v0,-33,48,-63,85,-63v39,0,95,24,169,72v-36,32,-84,60,-147,63v-50,2,-107,-27,-107,-72","w":978},"M":{"d":"1045,-94v-24,5,-20,36,-39,51v-22,30,-42,45,-60,45v-21,0,-32,-15,-32,-46v0,-41,21,-110,68,-205v123,-252,153,-303,328,-369v45,-17,95,-25,149,-29r1,-11v-144,13,-167,25,-285,92v-147,83,-289,224,-426,423v36,-126,42,-86,39,-211v-3,-103,21,-191,56,-238v17,9,45,7,43,-12v-3,-25,-41,-15,-60,-3v-110,-36,-175,-54,-196,-54v-138,-2,-245,56,-245,183v0,104,129,178,186,80r-6,0v-63,59,-148,-15,-148,-95v0,-109,93,-162,213,-160v23,0,86,17,187,52v-116,74,-204,270,-282,405v-79,137,-163,208,-258,208v-139,0,-269,-99,-271,-227v-3,-127,99,-249,226,-249v94,0,184,70,184,163v0,88,-82,179,-166,178v-102,-2,-135,-117,-88,-209r-12,-3v-47,107,-11,220,100,223v91,3,177,-95,177,-189v0,-100,-94,-174,-195,-174v-133,0,-235,127,-235,260v0,182,235,292,422,206v104,-48,123,-123,166,-214v45,-94,109,-230,157,-277v-65,142,-66,163,-66,378v0,71,-16,87,-33,134v0,3,2,8,5,13v57,-65,177,-250,244,-333v49,-61,105,-116,170,-165v-141,179,-212,309,-212,390v-1,57,29,100,81,100v40,0,78,-37,113,-111","w":1121},"N":{"d":"1247,-618v47,1,108,-22,108,-66v0,-29,-22,-44,-66,-44v-45,0,-92,27,-141,81v-92,-40,-308,-107,-395,-106v-178,1,-239,25,-309,125v-32,45,-48,92,-51,139r-67,-5v-175,-6,-326,153,-326,327v0,159,121,254,284,254v140,0,259,-94,357,-282r159,-315v-28,142,-6,242,0,378v2,31,-26,100,-39,132v0,7,4,10,13,10v8,0,22,-15,41,-45r72,-115v37,-59,76,-127,117,-204r129,-246v7,-12,14,-24,21,-35v33,11,64,17,93,17xm1289,-719v21,0,57,13,57,35v0,38,-58,56,-99,55v-18,0,-47,-5,-87,-15v39,-50,82,-75,129,-75xm542,-321v-23,-88,-54,-127,-131,-162v18,-101,70,-172,156,-213v67,-32,129,-48,186,-48v70,0,200,35,390,106v-51,81,-135,259,-150,287r-57,102v0,0,-52,86,-85,138v23,-63,38,-110,34,-138r-40,-254v1,-88,60,-134,115,-180v-61,-21,-113,-31,-154,-31v-102,0,-279,64,-279,151v0,23,13,41,40,53r2,-9v-21,-13,-32,-28,-32,-44v0,-79,181,-142,269,-142v32,0,76,9,132,27v-152,123,-166,209,-247,362r-61,121v-93,183,-208,274,-346,274v-158,0,-276,-93,-276,-246v0,-195,171,-356,385,-312v-2,87,63,162,142,170v2,174,-108,290,-265,301v-83,6,-144,-68,-144,-153v0,-105,90,-217,191,-217v65,0,128,58,126,123v0,17,-8,43,-23,78r11,-2v61,-97,-12,-208,-114,-208v-110,0,-204,115,-201,226v3,98,56,161,154,161v165,0,281,-142,274,-308v125,-15,176,-110,128,-228r-9,2v45,111,-1,201,-121,213xm533,-321v-67,-12,-122,-76,-122,-152v75,32,96,63,122,152","w":1041},"O":{"d":"0,-158v-3,97,61,183,158,180v143,-3,269,-136,333,-248v28,-49,78,-182,79,-250v1,-66,-49,-144,-111,-144v-104,0,-228,180,-228,286v0,46,27,86,74,86v85,0,168,-109,168,-198v0,-29,-18,-71,-48,-69v-17,0,-39,13,-65,39r7,7v21,-24,40,-36,58,-36v23,-1,37,35,37,59v1,71,-84,193,-157,187v-40,-3,-63,-31,-63,-75v0,-101,119,-277,217,-277v37,0,56,27,56,81v0,113,-124,372,-210,461v-53,55,-101,85,-147,85v-51,0,-84,-45,-84,-98v0,-131,124,-385,243,-493v24,-22,59,-42,103,-63v-100,-4,-135,29,-214,95v-99,83,-202,236,-206,385","w":600},"P":{"d":"741,-264v188,33,389,-103,290,-276v-19,-34,-46,-54,-71,-81v95,-48,200,-42,297,-3r2,-6v-105,-44,-201,-44,-318,-1v-134,-79,-376,-73,-471,41v-238,-101,-470,116,-470,340v0,177,132,284,312,282v211,-2,383,-125,429,-296xm984,-487v-2,116,-101,220,-237,201v52,-124,70,-258,191,-321v31,23,46,63,46,120xm612,-318v-95,49,-188,-38,-188,-132v0,-33,16,-75,49,-126v90,47,142,106,139,258xm624,-325v0,-138,-49,-219,-145,-260v61,-61,141,-91,240,-91v85,0,151,18,198,55v-98,59,-169,109,-221,218r-69,144v-43,90,-72,143,-88,159v-77,77,-163,115,-258,115v-159,0,-273,-104,-273,-265v0,-213,228,-434,456,-331v-34,49,-51,93,-51,131v-1,109,89,179,197,145v-28,115,-136,220,-266,220v-153,0,-285,-141,-218,-299r-10,3v-67,158,67,305,228,305v136,0,229,-78,280,-235v20,-29,43,-33,35,-62v-15,24,-27,40,-35,48","w":1046},"Q":{"d":"493,-151v68,23,37,127,-34,127v-35,0,-88,-13,-161,-38v228,-157,342,-302,342,-435v0,-92,-92,-180,-183,-180v-115,0,-261,124,-261,236v0,61,35,106,90,106v74,0,141,-113,141,-190v0,-39,-16,-59,-49,-59v-59,0,-99,49,-122,147v1,7,3,13,8,17v9,-68,51,-152,114,-153v27,0,40,16,40,48v0,70,-66,180,-132,180v-36,0,-63,-42,-62,-81v0,-69,78,-168,115,-201v72,-64,228,-58,228,57v0,59,-62,214,-90,241v-50,73,-146,173,-224,242v-31,-7,-90,-27,-130,-27v-52,0,-119,27,-119,76v0,33,36,54,72,53v48,0,99,-15,152,-45v85,57,314,83,315,-63v0,-32,-16,-56,-48,-71xm17,-38v0,-24,27,-43,50,-42v29,0,75,12,140,35v-45,35,-88,53,-131,53v-26,1,-59,-19,-59,-46","w":664},"R":{"d":"1049,-496v3,-57,-57,-123,-106,-156v79,-46,201,-49,289,-10r2,-6v-99,-46,-224,-35,-311,7v-131,-81,-384,-58,-463,53v-245,-84,-459,127,-460,346v-1,171,125,285,302,285v154,0,339,-82,386,-187r61,-137v70,36,36,119,36,201v0,75,74,123,152,123v69,0,128,-37,127,-102v0,-33,-13,-68,-40,-105r-8,6v60,83,44,181,-58,187v-48,3,-85,-37,-84,-85r0,-92v1,-68,-31,-93,-67,-130v125,-14,236,-77,242,-198xm976,-511v0,109,-100,212,-223,194v25,-133,86,-280,170,-326v35,25,53,69,53,132xm461,-593v88,42,168,132,144,259v-101,42,-188,3,-188,-133v0,-39,15,-81,44,-126xm619,-340v18,-126,-55,-213,-150,-264v57,-65,143,-97,259,-97v77,0,136,16,179,49v-102,58,-174,134,-215,227r-109,252v-55,121,-149,182,-281,182v-174,0,-294,-101,-294,-271v0,-208,214,-426,444,-337v-31,35,-46,79,-46,132v0,143,92,189,199,145v-30,136,-123,250,-275,251v-107,0,-185,-55,-233,-165v-9,0,-14,-3,-14,-8v47,121,130,182,247,182v153,0,263,-126,287,-264v26,-17,53,-40,40,-70v-3,20,-15,39,-38,56","w":1139},"S":{"d":"346,9v133,0,256,-107,252,-240v0,-35,-8,-104,-24,-205v5,0,26,-22,62,-65v40,-48,60,-86,60,-115v0,-55,-54,-65,-83,-42v-27,-35,-74,-53,-141,-53v-145,0,-317,112,-311,252v-99,61,-156,150,-159,287v-4,176,153,330,328,330v84,0,157,-30,219,-90r0,-8v-70,58,-143,87,-219,87v-171,0,-317,-148,-317,-319v0,-125,60,-229,150,-275v7,26,16,47,29,62v-46,57,-69,116,-69,175v0,122,100,219,223,219xm610,-642v21,36,-9,98,-39,101v0,-34,13,-68,39,-101xm619,-648v18,-13,50,-16,50,24v0,55,-32,112,-96,171r-2,-75v43,-11,74,-72,48,-120xm172,-462v-5,-129,166,-241,300,-241v59,0,103,16,132,49v-28,11,-55,75,-54,116v-145,1,-297,14,-378,76xm457,-381v-32,-34,-61,-61,-124,-60v-48,0,-92,16,-132,48v-12,-14,-21,-34,-28,-59v84,-64,233,-73,376,-76r-5,96v-35,24,-64,41,-87,51xm445,-375v-71,45,-190,43,-237,-9v61,-62,185,-69,237,9xm346,-165v61,0,137,-60,137,-120v0,-31,-7,-60,-20,-85v35,-19,62,-34,80,-47r0,48v5,146,-101,351,-236,351v-97,0,-171,-100,-174,-192v-2,-55,21,-111,65,-166v48,54,177,56,255,12v43,74,-5,175,-86,175v-30,0,-45,-14,-45,-42v0,-21,19,-33,56,-36v-30,-69,-108,-29,-108,32v0,40,36,70,76,70","w":710},"T":{"d":"859,-702v78,0,387,123,460,123v27,0,55,-3,84,-10r13,-14v-223,59,-332,-153,-557,-150v-53,0,-114,16,-183,47v-68,-75,-157,-112,-266,-112v-207,0,-398,195,-408,388r9,1v35,-194,175,-379,399,-379v103,0,186,36,250,108v-25,11,-61,47,-106,106v-247,-94,-456,103,-456,335v0,193,155,350,349,348v224,-3,393,-143,438,-332v26,-107,43,-179,51,-216v16,-76,83,-121,201,-136r2,-11v-158,13,-246,57,-284,172r-93,283v-39,124,-164,228,-315,231v-182,4,-340,-158,-340,-339v0,-223,208,-415,441,-323v-34,51,-51,99,-51,144v-2,121,84,225,211,192v-32,99,-57,134,-132,212r8,6v73,-63,121,-140,143,-231v51,-51,69,-82,73,-155v5,-79,-64,-220,-108,-270v48,-12,104,-18,167,-18xm677,-679v35,38,109,194,109,265v0,55,-19,100,-57,135v12,-166,-45,-250,-159,-308v31,-38,67,-69,107,-92xm712,-263v-141,55,-247,-119,-181,-256v12,-25,22,-45,33,-57v117,63,167,162,148,313","w":990},"U":{"d":"1392,-308v73,0,151,-56,151,-115v0,-122,-136,-195,-265,-192v-145,3,-147,18,-279,64v-76,-62,-154,-99,-298,-91r0,6v118,-6,149,19,270,97v-179,113,-290,261,-393,437v-44,75,-93,109,-140,109v-25,0,-37,-15,-37,-45v0,-110,135,-209,185,-298v11,-21,17,-46,17,-73v1,-143,-88,-227,-231,-227v-185,0,-363,128,-367,291v-3,91,76,163,165,163v67,0,123,-14,166,-42r-3,-6v-46,26,-100,39,-163,39v-84,0,-158,-69,-156,-154v4,-155,184,-282,358,-282v105,0,192,59,182,160v-12,124,-196,237,-198,380v-1,50,35,105,82,105v41,0,88,-32,142,-97v0,65,20,97,59,97v49,0,91,-23,126,-68r0,-18v-37,45,-74,68,-111,68v-10,0,-15,-5,-15,-15v0,-28,37,-105,111,-230v55,-94,137,-184,245,-270v130,138,262,207,397,207xm1278,-605v126,0,255,67,255,182v0,59,-79,105,-141,105v-102,0,-227,-72,-375,-216v98,-47,185,-71,261,-71","w":865},"V":{"d":"944,-170v131,0,242,-140,242,-273v0,-129,-107,-221,-234,-218v-164,4,-243,80,-319,204v-117,193,-226,335,-319,429v72,-113,108,-197,108,-252v0,-95,-66,-272,18,-325v29,5,66,-1,66,-24v0,-9,-5,-14,-16,-14v-15,0,-33,9,-54,26v-60,-21,-154,-54,-216,-54v-147,0,-277,126,-192,254v16,24,41,39,70,46v-27,-29,-64,-71,-64,-119v0,-104,82,-174,186,-173v51,0,120,18,207,55v-62,41,-91,131,-102,238v-10,95,15,220,-18,295r-42,95v5,2,11,3,18,3v150,-154,256,-294,363,-474v51,-86,186,-183,307,-183v124,0,224,72,224,191v0,126,-110,262,-233,262v-95,0,-171,-74,-171,-168v0,-84,41,-140,122,-168r0,-7v-76,21,-132,91,-132,175v0,101,81,179,181,179xm493,-626v3,14,-27,18,-45,13v13,-13,24,-19,35,-19v7,0,10,2,10,6","w":597},"W":{"d":"1266,-167v125,0,234,-138,234,-268v0,-133,-107,-225,-241,-224v-120,1,-262,98,-308,182v-102,186,-201,298,-325,441v37,-68,102,-154,101,-245v-1,-66,-21,-141,-22,-207v0,-35,13,-75,39,-120v-33,29,-55,54,-66,75v-123,238,-206,356,-372,510v78,-125,117,-211,117,-258v0,-46,-26,-199,-24,-246v0,-17,16,-43,48,-76v24,0,63,-9,63,-26v0,-9,-8,-13,-24,-13v-12,0,-26,8,-43,24v-19,-11,-168,-68,-209,-59v-126,-2,-232,60,-231,176v0,56,31,96,93,120r0,-6v-39,-32,-62,-49,-63,-105v-3,-110,86,-179,201,-179v56,0,124,20,203,60v-75,91,-104,123,-110,228v-11,179,11,276,-66,394v0,7,4,11,11,11v127,-84,281,-299,357,-429v-4,119,12,261,-27,347v-21,46,-32,71,-32,75v0,4,3,6,9,6v26,7,203,-224,255,-291v133,-171,190,-363,446,-365v119,-2,207,81,207,200v0,119,-107,256,-221,256v-103,0,-187,-69,-187,-174v0,-74,43,-129,130,-166r-3,-9v-93,36,-139,94,-139,175v0,108,92,186,199,186xm497,-627v0,8,-14,12,-41,12v9,-11,19,-18,30,-19v7,-1,11,1,11,7","w":897},"X":{"d":"559,-69v0,-48,45,-211,42,-257r184,-222v47,-54,95,-85,165,-100v-19,-14,-40,0,-76,13v-64,24,-148,93,-255,204v-15,-111,-48,-173,-100,-188r-41,-1v-45,-42,-112,-26,-162,4v-22,13,-51,41,-88,82r5,6v51,-52,94,-107,183,-109v19,0,36,7,51,22v-137,59,-223,147,-259,264v-102,32,-205,131,-205,252v0,82,54,129,137,129v125,0,257,-137,338,-218r11,95v9,101,92,143,181,103r-3,-9v-61,30,-108,18,-108,-70xm473,-606v40,122,-57,244,-132,301v-23,-40,-66,-56,-123,-48v34,-112,142,-211,255,-253xm332,-299v-27,17,-51,26,-70,26v-37,0,-54,-30,-46,-70v53,-7,97,6,116,44xm346,-296v84,-53,171,-178,138,-311v27,27,43,58,40,95r-19,203r-131,156v-67,85,-155,167,-234,169v-70,2,-129,-48,-128,-115v1,-114,98,-211,195,-241v-9,41,17,77,55,77v24,0,49,-9,75,-27v21,93,-111,221,-188,222v-30,1,-54,-23,-53,-53v0,-25,18,-59,53,-100r-6,-4v-37,35,-56,70,-56,104v0,31,31,62,62,62v81,0,208,-131,202,-210v0,-8,-2,-17,-5,-27","w":734},"Y":{"d":"1280,411v179,0,331,-138,331,-317v0,-136,-107,-260,-244,-260v-94,0,-179,62,-179,156v0,81,60,143,141,141v7,0,10,-4,10,-11v-91,-12,-137,-55,-137,-130v0,-86,76,-140,165,-140v121,0,232,119,232,244v0,173,-147,306,-319,306v-175,0,-403,-133,-502,-247v94,-210,176,-448,308,-613v102,-127,200,-193,299,-193v95,0,149,40,160,120r11,6v-4,-106,-73,-134,-189,-134v-157,0,-299,112,-438,327v-51,78,-117,324,-227,334v-52,5,-48,-83,-32,-125v33,-85,142,-187,143,-308v1,-145,-144,-242,-299,-194r-71,26v-31,-98,-86,-144,-207,-144v-156,0,-234,45,-234,134v0,75,87,132,167,129v119,-5,176,-58,266,-104v5,72,-24,123,-39,156r8,2v30,-53,45,-99,40,-162v132,-70,314,-56,314,108v0,140,-155,216,-155,369v0,65,29,125,89,124v55,0,108,-71,142,-111v-31,137,-29,176,-69,238r-77,-70v-91,-78,-188,-117,-291,-117v-155,0,-314,89,-314,234v0,144,159,231,314,231v166,0,291,-84,376,-253v175,165,344,248,507,248xm169,-491v-78,0,-160,-48,-160,-120v0,-85,76,-128,227,-128v107,0,172,47,197,142v-123,71,-211,106,-264,106xm102,185v0,-141,142,-224,295,-224v156,0,274,95,362,187v-62,124,-199,221,-362,221v-127,0,-295,-70,-295,-184","w":1049},"Z":{"d":"77,363v149,0,325,-155,337,-289r67,13r1,-9r-69,-16v-2,-63,-26,-103,-72,-120v146,-101,359,-260,366,-441v3,-93,-90,-162,-187,-162v-50,-1,-105,15,-165,48v-52,-9,-71,-1,-138,21v-99,33,-177,135,-213,240r7,4v52,-140,146,-260,333,-256v-19,12,-45,32,-65,46v-125,95,-187,186,-187,275v0,74,43,120,116,124v123,8,235,-201,235,-334v0,-50,-24,-89,-72,-116v22,-17,93,-42,128,-42v67,-1,109,49,108,116v0,73,-41,162,-122,267v-35,45,-96,111,-183,198v-112,1,-168,20,-168,56v0,17,13,26,39,26v23,0,74,-20,153,-60v31,9,48,61,26,99r-96,2v-123,-5,-324,97,-324,213v0,66,70,97,145,97xm208,-168v-57,0,-107,-56,-107,-115v0,-99,86,-206,257,-320v51,21,76,57,76,110v0,125,-108,325,-226,325xm152,-13v-1,-32,82,-45,126,-39v-53,35,-88,52,-107,52v-13,0,-19,-4,-19,-13xm-61,266v0,-125,203,-221,367,-204v13,1,27,0,42,1v-19,122,-215,254,-356,251v-35,0,-53,-16,-53,-48","w":676},"[":{"d":"702,-930r-198,0r-585,1049r196,0r12,-22r-110,0r563,-1005r110,0","w":300},"\\":{"d":"252,-225v-67,104,-133,160,-244,229r6,11v111,-63,193,-141,246,-233","w":237},"]":{"d":"601,-930r-198,0r-12,22r110,0r-561,1005r-110,0r-12,22r196,0","w":300},"^":{"d":"299,-493r0,-40r-114,-37r-114,37r0,40r114,-38","w":265},"_":{"d":"503,123r0,-50r-511,0r0,50r511,0","w":500},"`":{"d":"158,-499v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":300},"a":{"d":"171,-300v-108,-4,-222,106,-222,216v0,128,110,116,161,40v18,38,43,57,76,57v48,0,136,-77,263,-231r-8,-7v-52,62,-192,217,-249,225v-37,-6,-21,-35,-5,-66r131,-246v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24xm6,-33v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33"},"b":{"d":"-33,-62v0,42,22,75,65,75v71,0,178,-82,204,-135v77,-1,139,-33,186,-96r-8,-7v-45,59,-102,89,-172,91v36,-51,41,-172,-51,-166v-63,4,-77,145,-20,168v-16,38,-85,134,-124,132v-21,0,-32,-10,-32,-30v0,-52,91,-199,120,-258v37,-15,85,-51,144,-106v76,-73,114,-139,114,-200v0,-18,-12,-43,-31,-42v-59,0,-143,76,-254,229v-60,82,-140,229,-141,345xm351,-584v-1,25,-21,68,-58,127v-45,72,-96,123,-152,152v37,-89,79,-160,128,-234v35,-51,58,-76,71,-76v8,0,12,10,11,31xm149,-208v-1,-31,12,-77,36,-76v13,0,19,12,19,36v0,25,-9,60,-27,104v-19,-14,-28,-35,-28,-64","w":399},"c":{"d":"173,-300v-123,0,-224,103,-224,225v0,59,33,88,99,88v157,0,284,-117,363,-231r-8,-7v-75,107,-207,221,-355,226v-30,0,-45,-12,-45,-36v0,-60,114,-255,170,-255v23,0,34,7,34,21v0,25,-36,48,-60,20v-16,22,-17,60,26,60v29,0,60,-29,60,-59v0,-30,-31,-52,-60,-52","w":389},"d":{"d":"114,-51v17,46,29,65,80,67v96,-22,189,-162,261,-234r-8,-7r-93,102v-43,48,-114,123,-156,123v-14,0,-21,-8,-21,-24v0,-15,38,-92,113,-231v83,-30,301,-239,297,-339v0,-23,-10,-35,-29,-35v-45,0,-106,49,-183,148v-47,59,-93,129,-139,208v-18,-18,-35,-27,-51,-27v-125,-3,-234,100,-234,223v0,45,33,93,72,90v56,-4,49,-19,91,-64xm545,-587v-1,101,-156,254,-238,301v122,-215,195,-323,220,-323v12,0,18,7,18,22xm185,-287v12,-1,31,14,30,27v7,29,-96,175,-136,229v-16,21,-33,31,-52,31v-15,0,-22,-11,-22,-33v0,-54,126,-267,180,-254","w":432},"e":{"d":"-51,-75v0,49,37,88,86,88v90,0,257,-161,295,-231r-8,-7v-38,71,-200,227,-287,224v-18,0,-27,-12,-27,-37v0,-21,6,-44,18,-70v31,0,69,-11,116,-32v61,-28,91,-63,91,-105v1,-30,-27,-55,-57,-55v-102,0,-227,116,-227,225xm183,-264v0,42,-106,138,-147,132v52,-103,94,-155,126,-155v14,0,21,8,21,23","w":308},"f":{"d":"122,-264v94,-44,248,-189,249,-302v1,-18,-21,-38,-39,-37v-59,-11,-186,153,-236,231v-22,34,-44,69,-67,108r-59,0r-10,18r58,0r-62,120r-82,172v-50,107,-86,176,-109,209v-37,53,-75,80,-113,80v-41,0,-85,-29,-85,-70v0,-26,26,-84,52,-84v14,0,21,9,21,26v0,8,-10,13,-31,16v20,49,87,22,88,-21v1,-26,-23,-51,-49,-51v-50,0,-95,53,-95,105v0,53,45,90,99,90v52,0,103,-27,152,-80v96,-102,212,-356,292,-512r71,0r10,-18r-55,0xm332,-558v0,31,-16,70,-48,117v-41,61,-100,120,-177,177v27,-60,68,-130,102,-188v54,-91,90,-135,106,-135v11,0,17,10,17,29","w":237},"g":{"d":"-186,243v0,49,39,75,89,75v128,0,161,-168,207,-281v119,-75,206,-160,259,-255r-8,-7v-57,95,-139,176,-247,244v17,-41,33,-77,46,-105v42,-88,82,-148,130,-226r-36,30v-18,-8,-41,-16,-59,0v-11,-12,-24,-18,-39,-18v-99,-5,-211,118,-211,217v0,101,80,127,130,56r-30,77v-88,30,-231,108,-231,193xm2,-27v0,-57,105,-270,159,-258v12,0,18,6,18,19v8,34,-124,282,-159,264v-12,0,-18,-8,-18,-25xm40,66v-23,78,-97,213,-169,213v-28,0,-42,-13,-42,-39v-2,-66,145,-158,211,-174","w":347},"h":{"d":"62,-33v-1,30,26,49,55,46v88,-8,187,-159,248,-231r-8,-7v-54,60,-159,201,-223,217v-9,0,-14,-6,-14,-18v35,-55,131,-191,131,-232v0,-28,-14,-42,-41,-42v-33,0,-76,25,-129,75r20,-44v93,-44,289,-228,289,-339v0,-20,-12,-30,-36,-30v-59,-17,-226,220,-286,324r-80,139r-106,199v8,-3,25,-25,38,-25v46,11,49,9,76,-42v47,-87,88,-208,187,-230v5,0,8,3,8,10v6,5,-143,216,-129,230xm345,-593v0,35,-20,80,-60,135v-46,63,-103,117,-172,162v66,-114,110,-188,132,-222v43,-67,73,-100,90,-100v7,0,10,8,10,25","w":342},"i":{"d":"149,-359v46,4,74,-90,13,-91v-53,-5,-73,89,-13,91xm93,-282v-20,-8,-48,-17,-61,12v-29,63,-98,151,-98,225v0,39,21,58,62,58v43,0,131,-77,262,-231r-8,-7v-31,40,-198,218,-232,219v-30,1,-24,-44,-14,-64r127,-242v-5,-1,-33,31,-38,30","w":236},"j":{"d":"135,-357v49,7,80,-91,18,-93v-49,-7,-84,91,-18,93xm-352,255v-1,44,44,74,90,73v61,0,110,-37,141,-113r69,-167v53,-35,144,-123,273,-266r-8,-7v-65,69,-119,125,-163,168v-44,43,-76,73,-99,90r180,-345v-4,-1,-33,31,-38,29v-32,-11,-47,-14,-69,26v-57,104,-107,210,-146,321v-95,19,-227,105,-230,191xm-129,84v-20,63,-107,205,-168,205v-28,0,-42,-12,-42,-37v0,-64,147,-169,210,-168","w":198},"k":{"d":"135,-17v-1,-4,48,-86,42,-94v0,-8,-6,-21,-18,-39v70,-37,105,-74,105,-111v0,-26,-13,-39,-40,-39v-33,0,-76,23,-131,70r32,-49v76,-26,286,-234,286,-326v0,-17,-24,-32,-41,-31v-43,0,-112,68,-213,198v-117,150,-188,296,-277,463v2,0,33,-27,38,-26v35,9,51,9,70,-28r59,-112v20,0,67,-1,67,9v0,31,-90,149,5,145v73,-3,187,-160,243,-231r-8,-7v-115,144,-185,216,-208,216v-7,0,-11,-3,-11,-8xm363,-597v0,88,-150,263,-225,294v22,-58,57,-113,98,-176v59,-93,97,-139,116,-139v7,0,11,7,11,21xm54,-156v14,-31,87,-108,123,-108v14,0,21,6,21,19v0,38,-44,71,-78,83v-11,4,-33,6,-66,6","w":339},"l":{"d":"249,-225v-34,70,-133,216,-204,219v-14,0,-21,-8,-21,-24v0,-76,53,-162,79,-225v90,-53,163,-122,220,-207v45,-69,69,-123,70,-162v0,-16,-14,-37,-31,-36v-49,-14,-202,184,-254,260v-56,82,-148,253,-148,331v0,44,21,86,58,82v114,-12,177,-117,239,-231xm350,-618v0,32,-22,84,-66,156v-51,83,-105,141,-160,174v24,-63,59,-126,97,-195v58,-104,96,-156,115,-156v9,0,14,7,14,21","w":234},"m":{"d":"243,-48v0,65,80,78,124,35v47,-46,136,-148,188,-205r-8,-7v-55,57,-170,205,-224,223v-28,-5,-21,-31,-5,-57r97,-157v35,-40,11,-77,-29,-84v-67,5,-65,24,-119,69v0,-46,-15,-69,-45,-69v-40,0,-87,28,-142,84r51,-96v-5,0,-31,28,-36,27v-22,-2,-48,-14,-59,7r-162,303v32,-37,36,-27,78,-21v26,-11,98,-178,120,-187v59,-61,97,-92,114,-92v7,0,11,5,11,14v0,7,-50,103,-149,286v31,-33,33,-30,69,-21v13,0,22,-4,27,-13r84,-155v61,-74,100,-111,117,-111v12,0,18,6,18,17v7,6,-130,204,-120,210","w":533},"n":{"d":"-120,25v32,-34,35,-29,74,-21v30,-6,54,-77,70,-103v34,-57,116,-169,174,-173v27,4,14,19,1,39r-83,127v-36,46,-26,124,37,120v85,-6,154,-124,209,-179v27,-27,41,-46,46,-53r-8,-7r-147,162v-36,40,-64,60,-83,60v-33,-7,-22,-22,-3,-52r93,-145v28,-37,30,-101,-27,-100v-36,0,-86,28,-150,84r51,-96r-37,29v-25,-6,-49,-15,-65,16","w":386},"o":{"d":"-49,-78v0,44,33,92,75,91v83,-2,164,-65,198,-124v76,-20,139,-74,168,-107r-8,-7v-58,50,-90,80,-151,99v10,-23,24,-49,24,-80v0,-49,-32,-94,-81,-94v-109,0,-225,111,-225,222xm7,-32v0,-57,110,-268,166,-256v16,0,24,8,24,25v0,35,-13,79,-39,134v-20,-3,-33,-13,-38,-30v34,1,36,-41,6,-41v-21,0,-31,11,-31,32v0,21,18,37,55,49v-48,79,-89,119,-124,119v-13,0,-19,-11,-19,-32","w":369},"p":{"d":"93,-283v-18,-3,-42,-16,-54,1v-33,50,-59,104,-87,157r-179,339r-82,147r42,-37v19,9,36,13,50,13v13,0,34,-35,63,-106v43,-105,80,-185,112,-242v13,64,69,48,113,18v13,15,28,23,45,23v110,-5,224,-152,279,-248r-8,-7v-56,94,-168,236,-271,243v-11,0,-22,-6,-33,-18v98,-72,147,-145,147,-218v0,-65,-70,-109,-116,-63r17,-31v-4,-1,-34,30,-38,29xm-17,-55v23,-64,114,-224,167,-224v13,0,20,7,20,21v-3,63,-72,177,-114,226v-34,-24,-42,-31,-73,-23xm30,-6v-22,25,-60,6,-57,-27v0,-8,9,-12,26,-12v13,0,29,8,46,24","w":372},"q":{"d":"9,342v81,0,155,-146,155,-231v0,-31,-12,-66,-35,-107v123,-29,202,-121,264,-222r-8,-7v-68,99,-131,178,-253,217r176,-304v-6,0,-31,29,-37,28v-19,-4,-44,-13,-58,2v-15,-12,-29,-18,-42,-18v-101,-5,-219,108,-219,210v0,120,71,124,140,67v-47,69,-147,196,-147,278v0,58,21,87,64,87xm12,-35v0,-54,117,-251,167,-244v30,4,16,39,8,57v-33,70,-65,132,-105,184v-15,20,-30,30,-44,30v-17,0,-26,-9,-26,-27xm149,111v0,52,-49,189,-95,189v-23,0,-34,-14,-34,-42v-2,-100,58,-176,97,-245v21,44,32,77,32,98","w":371},"r":{"d":"78,-233v4,8,-92,159,-82,174v1,48,18,72,52,72v51,0,104,-28,158,-83v30,-31,67,-80,111,-148r-8,-7v-100,144,-176,216,-229,216v-38,0,-27,-34,-7,-68v33,-55,80,-123,100,-184v1,-20,-15,-40,-35,-39v-15,0,-50,23,-105,69v23,-27,35,-50,35,-69v0,-15,-8,-23,-24,-23v-30,0,-56,48,-56,76v0,74,67,17,86,7v3,0,4,2,4,7xm3,-247v-1,-19,21,-63,41,-61v6,0,9,3,9,9v0,13,-13,36,-39,69v-7,0,-11,-6,-11,-17","w":294},"s":{"d":"-88,-110v-29,-1,-48,27,-48,56v0,46,26,69,79,69v42,0,79,-18,110,-53v121,-23,147,-74,217,-180r-8,-7v-67,100,-89,145,-203,173v27,-57,24,-129,-12,-200v21,-37,31,-62,31,-77v0,-12,-8,-18,-25,-18v-37,-1,-54,55,-53,96v1,44,33,99,9,146v-9,17,-15,31,-26,39v-5,0,-53,-49,-71,-44xm41,-264v-12,-18,-5,-70,13,-74v8,0,12,4,12,11v0,19,-8,40,-25,63xm-27,-56v-10,19,-78,13,-72,-16v6,-30,25,-22,47,-3v14,12,22,18,25,19","w":248},"t":{"d":"-42,-120v-33,57,-29,123,32,133v116,-4,207,-137,268,-231r-8,-7v-51,62,-93,134,-156,184v-31,23,-55,35,-74,35v-13,0,-26,-25,-25,-38v0,-10,7,-28,21,-53r104,-182r75,0r6,-15r-75,0r101,-177r-11,0r-39,59v-34,50,-73,87,-119,118r-79,0r-16,15r72,0","w":236},"u":{"d":"-19,13v64,-2,85,-44,121,-82v5,55,24,82,59,82v97,-2,222,-142,277,-231r-8,-7v-44,66,-169,216,-236,216v-41,0,-26,-34,-10,-64r127,-239v-4,-2,-31,29,-36,28v-21,-3,-47,-14,-59,6v-46,80,-69,138,-131,214v-31,39,-52,58,-64,58v-40,0,-23,-53,-8,-82r119,-224v-5,0,-30,30,-36,28v-21,-5,-50,-14,-60,7v-33,70,-106,157,-106,242v0,32,17,48,51,48","w":416},"v":{"d":"-35,-146v-34,60,-50,152,26,159v85,7,206,-78,228,-141v61,-3,121,-33,180,-90r-8,-7v-64,56,-119,84,-164,84v42,-46,38,-161,-29,-167v-39,-4,-74,53,-73,94v0,23,11,48,32,73v-45,94,-89,141,-130,141v-38,-1,-33,-52,-17,-83r119,-228v-6,-1,-31,28,-35,28v-18,-3,-47,-17,-59,6xm137,-213v0,-28,19,-72,46,-72v16,0,24,15,24,45v0,10,-14,39,-42,87v-19,-23,-28,-43,-28,-60","w":377},"w":{"d":"122,-77v-20,49,12,91,57,90v85,-2,188,-72,223,-132v89,-17,146,-50,173,-99r-8,-7v-11,35,-110,86,-157,91v44,-54,45,-168,-27,-174v-78,-7,-103,127,-44,173v-47,90,-92,135,-135,135v-43,0,-28,-51,-9,-87r119,-225v-6,0,-31,29,-37,28v-22,-3,-47,-15,-59,7r-76,141v-24,48,-84,127,-134,130v-22,-6,-15,-45,-2,-68r126,-238v-4,-2,-31,29,-36,28v-27,-4,-51,-17,-64,13v-31,68,-94,140,-101,220v-7,76,83,77,130,35v20,-18,41,-37,61,-61xm344,-149v-37,-24,-32,-135,18,-138v13,0,19,7,19,21v-1,36,-18,92,-37,117","w":552},"x":{"d":"12,-108v-13,25,-64,83,-88,81v-12,0,-27,-10,-44,-29v-34,22,-33,68,12,69v29,0,70,-32,125,-97v23,65,53,97,90,97v81,0,183,-77,304,-231r-8,-7v-52,74,-183,214,-265,214v-37,0,-55,-56,-55,-168v7,-18,105,-87,133,-79v14,0,32,8,53,24v23,-32,26,-66,-23,-66v-66,0,-101,49,-163,102r-2,-131v-3,0,-14,34,-19,32v-38,-1,-60,-4,-58,43","w":389},"y":{"d":"-198,220v0,45,37,80,81,77v130,-9,171,-163,227,-260v78,-41,109,-79,163,-129r132,-126r-8,-7v-91,80,-175,181,-278,247r71,-105v48,-74,83,-151,125,-229v-6,0,-32,30,-37,29v-26,-6,-46,-16,-64,16r-105,188v-11,30,-68,72,-102,72v-9,0,-13,-9,-13,-28v0,-13,5,-29,15,-49r122,-228v-5,-1,-32,30,-36,29v-27,-5,-49,-17,-67,16r-80,152v-28,45,-24,128,36,128v21,0,54,-16,97,-48r-42,83v-72,23,-125,45,-160,66v-51,31,-77,67,-77,106xm36,58r-44,74v-32,55,-99,129,-140,129v-28,0,-42,-14,-42,-42v0,-91,135,-127,226,-161","w":383},"z":{"d":"-180,343v147,-1,277,-134,240,-301v102,-48,194,-135,275,-260r-8,-7v-91,129,-182,214,-273,257v-3,-12,-12,-27,-27,-44v63,-20,156,-132,156,-215v0,-38,-29,-73,-67,-73v-45,0,-83,32,-116,97r0,17v28,-39,52,-59,71,-59v24,0,36,12,36,35v0,55,-53,163,-89,187v-21,-12,-42,-18,-63,-18v-16,0,-42,11,-40,27v5,34,54,25,90,11v4,9,6,27,6,54v-107,27,-271,112,-272,217v-1,48,34,75,81,75xm0,-13v-24,9,-40,13,-49,13v-15,0,-23,-5,-23,-14v0,-32,53,-16,72,1xm-187,333v-24,0,-48,-18,-48,-42v0,-88,164,-212,246,-228v8,82,-120,270,-198,270","w":312},"{":{"d":"618,-369v95,0,138,57,203,125r0,-11v-65,-79,-108,-140,-213,-140v-60,0,-96,26,-109,78v-110,-12,-210,73,-158,180v-55,22,-100,33,-134,33v-83,0,-176,-82,-176,-166v0,-70,72,-130,140,-130v64,0,135,49,135,109v0,46,-37,83,-83,83v-27,0,-52,-21,-52,-47v0,-36,34,-40,52,-15v17,-33,-9,-63,-42,-63v-36,0,-64,32,-62,68v3,50,43,75,94,78v53,3,104,-52,104,-104v0,-71,-76,-120,-146,-120v-92,0,-166,64,-166,151v0,96,100,180,197,177v31,0,79,-14,145,-42v48,62,101,104,209,104v94,0,201,-52,201,-140v0,-58,-74,-95,-139,-95v-33,-35,-48,-43,-95,-56v21,-38,52,-57,95,-57xm604,-257v-32,1,-54,5,-67,12v-11,-21,-16,-40,-16,-57v33,8,61,23,83,45xm613,-244v9,20,6,47,-16,46v-22,0,-41,-12,-56,-35v28,-10,41,-12,72,-11xm623,-244v57,5,124,33,125,83v2,72,-91,125,-171,125v-80,0,-147,-34,-201,-102r149,-90v21,31,45,46,72,46v38,0,47,-38,26,-62xm519,-240r-149,91v-42,-95,28,-170,129,-158v2,24,9,46,20,67","w":863},"}":{"d":"622,-83v97,3,197,-81,197,-177v0,-87,-74,-151,-166,-151v-71,0,-146,51,-146,120v0,54,50,106,104,104v51,-2,91,-28,94,-78v2,-36,-26,-68,-62,-68v-33,0,-59,30,-42,63v19,-25,52,-21,52,15v1,26,-25,47,-52,47v-46,0,-83,-37,-83,-83v0,-60,71,-109,135,-109v67,0,140,60,140,130v0,84,-93,166,-176,166v-35,0,-79,-11,-134,-33v53,-108,-48,-192,-158,-180v-13,-52,-50,-78,-109,-78v-103,0,-149,62,-213,140r0,11v66,-69,106,-125,203,-125v42,0,74,19,95,57v-48,13,-61,19,-95,56v-65,0,-139,37,-139,95v0,87,106,140,201,140v108,0,160,-43,209,-104v66,28,114,42,145,42xm325,-307v100,-12,171,63,129,158r-149,-91v11,-21,18,-43,20,-67xm287,-245v-18,-9,-39,-11,-67,-12v22,-22,50,-37,83,-45v0,17,-5,36,-16,57xm283,-233v-15,23,-34,35,-56,35v-22,1,-25,-26,-16,-46v31,-1,44,1,72,11xm247,-36v-109,0,-244,-119,-125,-186v22,-11,48,-19,79,-22v-21,24,-12,62,26,62v27,0,51,-15,72,-46r149,90v-54,68,-121,102,-201,102","w":863},"~":{"d":"346,-223v-22,0,-179,-59,-199,-52v-58,-2,-105,61,-107,119r55,0v5,-39,23,-58,54,-58v7,-4,175,54,198,52v66,-7,101,-48,108,-118r-55,0v-7,38,-25,57,-54,57","w":495},"\u201a":{"d":"156,83v47,-8,97,-94,97,-138v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,48v30,24,-33,54,-44,68v0,4,3,6,9,7","w":158},"\u0192":{"d":"484,-472v24,-25,61,-71,61,-95v0,-31,-34,-53,-67,-52v-60,0,-120,35,-180,103v-43,48,-77,128,-100,241r-82,0v-2,0,-16,22,-43,67v25,0,69,-8,114,-9v-14,67,-28,123,-38,168v-23,97,-66,220,-137,220v-50,0,-57,-67,-42,-110r-7,-3v-36,36,-54,67,-54,93v0,35,22,52,67,52v131,0,220,-126,250,-259v10,-44,25,-97,38,-161r93,0v20,-13,34,-46,50,-61v-39,-5,-88,5,-130,5v20,-89,38,-153,53,-193v33,-83,73,-125,118,-125v47,0,48,74,31,116","w":485},"\u201e":{"d":"237,83v47,-8,97,-94,97,-138v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,48v30,24,-33,54,-44,68v0,4,3,6,9,7xm136,83v47,-8,97,-94,97,-138v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,48v30,24,-33,54,-44,68v0,4,3,6,9,7","w":218},"\u2026":{"d":"484,8v30,0,58,-28,58,-58v0,-33,-14,-50,-42,-50v-58,0,-86,108,-16,108xm284,8v30,0,58,-28,58,-58v0,-33,-14,-50,-42,-50v-58,0,-86,108,-16,108xm84,8v30,0,58,-28,58,-58v0,-33,-14,-50,-42,-50v-58,0,-86,108,-16,108","w":600},"\u2020":{"d":"456,-302v-47,-3,-111,4,-168,3r73,-192v-25,14,-66,27,-91,37r-46,154r-162,0r-28,62r167,-5r-163,437v-2,1,-3,1,-3,-2r83,-28r151,-407r160,0v16,-16,28,-60,27,-59","w":463},"\u2021":{"d":"468,-338v-46,-2,-110,4,-166,3r60,-157v-29,19,-73,26,-94,43v-10,39,-22,77,-37,113r-159,1v-4,20,-15,43,-24,61r164,-5r-93,261r-157,0r-27,59r163,-5r-60,154v32,-9,62,-19,89,-30v11,-11,24,-52,41,-123r161,0v12,-16,18,-39,26,-59v-50,-1,-112,4,-167,4r93,-261v54,-2,117,5,165,-3","w":463},"\u02c6":{"d":"231,-416r24,55r19,0r-8,-151r-215,151r38,0","w":300},"\u2030":{"d":"58,-403v0,36,30,70,65,70v58,-1,120,-85,137,-139r73,-13r-95,121r-139,160v-68,66,-128,148,-157,241r12,1v11,-36,29,-22,55,-34v78,-138,151,-208,237,-324v47,-62,89,-121,127,-178v79,-43,118,-76,118,-101v0,-11,-7,-17,-20,-17v-30,0,-70,36,-120,107v-25,11,-55,17,-88,20v11,-45,7,-104,-43,-104v-74,0,-162,116,-162,190xm234,-9v74,0,147,-124,147,-200v0,-41,-18,-61,-54,-61v-66,0,-157,121,-157,187v0,37,27,74,64,74xm474,-594v0,13,-29,36,-87,70v35,-52,61,-78,78,-78v6,0,9,3,9,8xm194,-532v-1,-18,14,-37,31,-36v33,1,29,45,18,77v-33,-2,-49,-16,-49,-41xm172,-527v17,36,25,41,68,52v-7,36,-63,121,-98,119v-17,0,-25,-9,-25,-27v0,-33,18,-81,55,-144xm228,-60v0,-48,62,-187,108,-187v17,0,26,16,26,49v0,47,-67,168,-113,168v-14,0,-21,-10,-21,-30xm450,-9v74,0,147,-124,147,-200v0,-41,-18,-61,-54,-61v-66,0,-157,121,-157,187v0,37,27,74,64,74xm444,-60v0,-48,62,-187,108,-187v17,0,26,16,26,49v0,47,-67,168,-113,168v-14,0,-21,-10,-21,-30","w":628},"\u2018":{"d":"198,-482v30,0,57,-32,56,-61v0,-19,-13,-36,-39,-49v-22,-20,12,-48,38,-60v9,-4,8,-13,-3,-15v-47,8,-97,95,-97,139v0,23,22,46,45,46","w":158},"\u2019":{"d":"156,-485v47,-8,97,-94,97,-139v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,49v30,24,-33,54,-44,68v0,4,3,6,9,7","w":158},"\u201c":{"d":"298,-482v30,0,57,-32,56,-61v0,-19,-13,-36,-39,-49v-22,-20,12,-48,38,-60v9,-4,8,-13,-3,-15v-47,8,-97,95,-97,139v0,23,22,46,45,46xm197,-482v30,0,57,-32,56,-61v0,-19,-13,-36,-39,-49v-22,-20,12,-48,38,-60v9,-4,8,-13,-3,-15v-47,8,-97,95,-97,139v0,23,22,46,45,46","w":218},"\u201d":{"d":"237,-485v47,-8,97,-94,97,-139v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,49v30,24,-33,54,-44,68v0,4,3,6,9,7xm136,-485v47,-8,97,-94,97,-139v0,-25,-20,-46,-45,-46v-30,0,-57,32,-56,61v0,20,13,36,39,49v30,24,-33,54,-44,68v0,4,3,6,9,7","w":218},"\u2022":{"d":"89,-166v71,0,147,-107,147,-180v0,-37,-18,-55,-54,-55v-65,0,-157,106,-157,168v0,35,29,67,64,67","w":256},"\u2013":{"d":"10,-149v134,-49,281,61,384,-34v9,-7,14,-13,14,-17v0,-6,-4,-9,-11,-9v-19,0,-45,21,-70,19v-68,-5,-132,-23,-191,-24v-30,-1,-132,27,-132,60v0,3,2,5,6,5","w":414},"\u2014":{"d":"128,-163r311,22v34,0,70,-14,107,-42v9,-7,14,-13,14,-17v0,-6,-4,-9,-11,-9v-29,11,-71,25,-113,15v-56,-13,-231,-18,-280,-20v-30,-1,-132,27,-132,60v0,3,2,5,6,5v41,-11,74,-16,98,-14","w":604},"\u02dc":{"d":"230,-428v-22,0,-82,-20,-103,-19v-35,3,-52,52,-72,75r17,9v29,-73,137,34,175,-30r36,-52r-17,-10v-11,18,-23,27,-36,27"},"\u2122":{"d":"602,-439v-24,0,-28,-8,-28,-34r0,-161v0,-21,11,-32,32,-33r0,-11r-68,0r-93,196r-95,-196r-78,0r0,10v22,1,36,12,41,31r0,157v0,25,-10,38,-31,41r0,11r78,0r0,-11v-20,-3,-30,-16,-30,-41r0,-140r5,0r93,192r2,0r93,-193r5,0r0,148v1,14,0,23,-3,27v-9,3,-17,6,-25,7r0,11r102,0r0,-11xm184,-439v-24,0,-28,-8,-28,-34r0,-195v42,-2,66,1,75,40r9,0r0,-50r-213,0r0,50r8,0v9,-38,33,-43,75,-40r0,211v-4,14,-7,17,-28,18r0,11r102,0r0,-11","w":625},"\u0153":{"d":"393,-264v0,59,-88,115,-147,132v52,-103,94,-155,126,-155v14,0,21,8,21,23xm-49,-78v0,44,33,91,75,91v45,0,98,-23,137,-55v15,37,42,55,82,55v90,0,257,-161,295,-231r-8,-7v-38,71,-200,227,-287,224v-18,0,-27,-12,-27,-37v0,-21,6,-44,18,-70v31,0,69,-11,116,-32v61,-28,91,-63,91,-105v1,-30,-27,-56,-57,-55v-44,0,-89,18,-136,54v-13,-36,-38,-54,-74,-54v-109,0,-225,111,-225,222xm7,-32v0,-57,110,-268,166,-256v16,0,24,8,24,25v0,35,-13,79,-39,134v-20,-3,-33,-13,-38,-30v34,1,36,-41,6,-41v-21,0,-31,11,-31,32v0,21,18,37,55,49v-48,79,-89,119,-124,119v-13,0,-19,-11,-19,-32","w":517},"\u0178":{"d":"1280,411v179,0,331,-138,331,-317v0,-136,-107,-260,-244,-260v-94,0,-179,62,-179,156v0,81,60,143,141,141v7,0,10,-4,10,-11v-91,-12,-137,-55,-137,-130v0,-86,76,-140,165,-140v121,0,232,119,232,244v0,173,-147,306,-319,306v-175,0,-403,-133,-502,-247v94,-210,176,-448,308,-613v102,-127,200,-193,299,-193v95,0,149,40,160,120r11,6v-4,-106,-73,-134,-189,-134v-157,0,-299,112,-438,327v-51,78,-117,324,-227,334v-52,5,-48,-83,-32,-125v33,-85,142,-187,143,-308v1,-145,-144,-242,-299,-194r-71,26v-31,-98,-86,-144,-207,-144v-156,0,-234,45,-234,134v0,75,87,132,167,129v119,-5,176,-58,266,-104v5,72,-24,123,-39,156r8,2v30,-53,45,-99,40,-162v132,-70,314,-56,314,108v0,140,-155,216,-155,369v0,65,29,125,89,124v55,0,108,-71,142,-111v-31,137,-29,176,-69,238r-77,-70v-91,-78,-188,-117,-291,-117v-155,0,-314,89,-314,234v0,144,159,231,314,231v166,0,291,-84,376,-253v175,165,344,248,507,248xm169,-491v-78,0,-160,-48,-160,-120v0,-85,76,-128,227,-128v107,0,172,47,197,142v-123,71,-211,106,-264,106xm102,185v0,-141,142,-224,295,-224v156,0,274,95,362,187v-62,124,-199,221,-362,221v-127,0,-295,-70,-295,-184xm1098,-772v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm965,-772v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":1049},"\u00a1":{"d":"276,-491v-85,143,-277,405,-277,461v0,25,8,38,25,38v31,0,60,-31,87,-94r159,-372v5,-10,10,-22,17,-33r-11,0xm370,-680v-30,0,-58,29,-58,59v0,33,14,50,42,50v58,0,84,-109,16,-109","w":328},"\u00a2":{"d":"243,-335v40,1,73,-34,72,-74v0,-36,-18,-60,-53,-71r36,-67r-16,-5r-36,67v-127,-10,-242,123,-242,264v0,43,19,71,56,83r-48,90r16,7r49,-92v68,-1,81,-12,132,-54r-9,-13v-35,29,-64,44,-86,44v-25,1,-43,-26,-43,-51v0,-86,118,-244,181,-244v28,0,42,11,42,33v0,17,-20,44,-37,42v-20,-2,-18,-31,3,-39v-30,-26,-65,-3,-65,40v0,27,16,40,48,40","w":355},"\u00a4":{"d":"100,-101r23,23r45,-44v54,43,127,43,182,0r45,45r23,-24r-44,-45v43,-61,42,-121,1,-183r43,-44r-23,-24r-44,44v-56,-41,-128,-41,-184,0r-44,-44r-24,24r44,44v-41,53,-42,132,1,183xm148,-237v0,-66,45,-108,111,-111v60,-3,114,51,111,111v-3,66,-45,111,-111,111v-66,0,-111,-45,-111,-111","w":517},"\u00a6":{"d":"89,-675r0,350r66,0r0,-350r-66,0xm89,-175r0,349r66,0r0,-349r-66,0","w":243},"\u00a7":{"d":"179,-398v7,-20,56,-31,91,-30v102,2,139,30,106,100r11,3v32,-55,48,-90,48,-105v0,-39,-46,-58,-96,-58v-92,0,-204,75,-207,153v0,15,7,32,20,51v-58,39,-131,77,-134,156v0,18,8,34,21,49v10,12,106,89,157,129v29,24,43,43,43,56v4,61,-112,57,-158,31r14,-27v-49,-3,-84,-6,-105,-9r-36,71v0,5,3,8,9,10v17,6,49,9,96,9v84,0,148,-21,196,-56v55,-40,66,-102,23,-139v53,-28,83,-45,90,-51v56,-42,70,-100,20,-150v-50,-49,-193,-149,-209,-193xm251,-199v54,50,87,46,87,105v0,31,-23,58,-69,83r-129,-107v-76,-62,-65,-107,20,-156","w":463},"\u00a8":{"d":"211,-365v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm78,-365v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":300},"\u00a9":{"d":"408,0v192,0,354,-167,354,-361v0,-197,-160,-363,-354,-363v-193,0,-356,171,-356,363v0,193,161,361,356,361xm408,-45v-161,0,-296,-153,-296,-316v0,-163,135,-318,296,-318v161,0,294,156,294,318v0,162,-133,316,-294,316xm208,-371v-6,175,167,245,330,190v19,-6,28,-13,28,-20r16,-72r-20,0v-22,56,-63,84,-124,84v-100,0,-149,-62,-148,-186v0,-97,49,-172,142,-172v71,0,109,29,114,88r20,0v-5,-38,17,-88,-24,-94v-157,-65,-329,29,-334,182","w":800},"\u00ae":{"d":"209,-315v95,0,180,-84,180,-180v0,-97,-84,-182,-181,-182v-97,0,-180,84,-180,182v0,97,82,180,181,180xm209,-642v79,0,145,70,145,148v0,77,-69,145,-145,145v-79,0,-146,-66,-146,-145v0,-78,68,-148,146,-148xm140,-439v-1,24,0,28,-22,30r0,6r76,0r0,-6v-35,1,-20,-52,-23,-83r21,0r73,89r44,0r0,-6v-8,0,-15,-4,-21,-11r-62,-74v36,-6,54,-23,54,-50v0,-61,-97,-51,-162,-51r0,7v15,1,22,10,22,27r0,122xm247,-543v0,29,-25,43,-76,43r0,-67v0,-11,5,-17,15,-17v41,0,61,14,61,41","w":420},"\u00b0":{"d":"106,-354v78,0,168,-106,168,-183v0,-39,-20,-58,-61,-58v-69,0,-171,101,-171,171v0,47,21,70,64,70xm103,-403v0,-50,72,-165,120,-165v17,0,26,14,26,41v0,51,-85,147,-126,148v-13,0,-20,-8,-20,-24","w":459},"\u00b4":{"d":"234,-444v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":300},"\u00bf":{"d":"191,-23v-57,0,-107,-35,-107,-91v0,-60,116,-169,161,-198r148,-95v38,-23,44,-96,-13,-95v-9,0,-25,3,-46,8v9,10,20,3,36,3v60,-3,34,61,6,76v-109,57,-232,94,-311,183v-36,40,-54,78,-54,115v-2,72,74,125,149,125v121,0,265,-99,260,-216v-3,-66,-76,-75,-124,-33r10,3v42,-30,100,-23,103,31v5,85,-129,184,-218,184xm464,-679v-30,0,-58,29,-58,59v0,33,14,50,42,50v58,0,86,-109,16,-109","w":522},"\u00c0":{"d":"876,-475v39,-44,140,-139,181,-141v-3,5,-16,21,-39,48v-77,89,-121,170,-133,243v-32,6,-69,9,-112,9v17,-46,50,-100,103,-159xm986,-61v91,-46,224,-33,229,75v4,73,-94,138,-169,138v-97,0,-183,-32,-260,-97v110,-67,177,-104,200,-116xm696,8v-23,5,-51,11,-55,-8v0,-4,3,-6,9,-6v9,0,24,5,46,14xm286,-101v0,-112,135,-198,254,-198r201,0v-62,96,-107,159,-135,190v-73,81,-143,122,-210,122v-73,0,-110,-38,-110,-114xm853,-856v-160,-6,-355,121,-355,273v0,98,39,163,116,195r3,-13v-70,-31,-105,-91,-105,-182v0,-143,183,-262,334,-259v-6,23,0,38,19,52r100,75r26,0r-57,-119v123,20,246,120,246,247v0,111,-65,193,-194,244v8,-110,45,-196,111,-257v23,-21,34,-35,34,-42v0,-11,-3,-16,-10,-16v-146,33,-301,199,-368,342r-249,0v-135,-3,-265,88,-265,215v0,84,70,128,157,128v97,0,193,-69,287,-208r79,-120v51,0,92,-3,122,-9v1,60,-55,180,-81,242v-1,8,-66,70,-78,68v-32,-15,-59,-22,-80,-22v-17,0,-25,7,-25,20v0,34,65,33,102,25r36,32v-142,84,-264,126,-366,126v-216,0,-389,-146,-389,-359v0,-202,140,-353,344,-349v17,0,37,4,58,13r0,-12v-22,-8,-41,-12,-58,-12v-213,-4,-353,148,-353,360v0,218,177,369,398,369v112,0,272,-64,376,-128r91,59v99,49,222,68,308,0v41,-32,62,-68,62,-109v-1,-106,-146,-141,-241,-90v-27,14,-98,54,-212,123r-30,-28v88,-42,178,-146,217,-242v10,-27,17,-61,21,-101v140,-55,210,-142,210,-262v0,-138,-137,-245,-268,-263v-17,-27,-53,-30,-73,-6","w":1061},"\u00c1":{"d":"876,-475v39,-44,140,-139,181,-141v-3,5,-16,21,-39,48v-77,89,-121,170,-133,243v-32,6,-69,9,-112,9v17,-46,50,-100,103,-159xm986,-61v91,-46,224,-33,229,75v4,73,-94,138,-169,138v-97,0,-183,-32,-260,-97v110,-67,177,-104,200,-116xm696,8v-23,5,-51,11,-55,-8v0,-4,3,-6,9,-6v9,0,24,5,46,14xm286,-101v0,-112,135,-198,254,-198r201,0v-62,96,-107,159,-135,190v-73,81,-143,122,-210,122v-73,0,-110,-38,-110,-114xm1229,13v-1,-106,-146,-141,-241,-90v-27,14,-98,54,-212,123r-30,-28v88,-42,178,-146,217,-242v10,-27,17,-61,21,-101v140,-55,210,-142,210,-262v0,-52,-15,-98,-45,-138r129,-67v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-87,98v-61,-63,-170,-107,-277,-107v-161,0,-353,122,-353,273v0,98,39,163,116,195r3,-13v-70,-31,-105,-91,-105,-182v0,-144,187,-259,339,-259v106,0,210,43,268,104r-22,25v15,0,32,2,40,-5v29,37,43,80,43,131v0,111,-65,193,-194,244v8,-110,45,-196,111,-257v23,-21,34,-35,34,-42v0,-11,-3,-16,-10,-16v-146,33,-301,199,-368,342r-249,0v-135,-3,-265,88,-265,215v0,84,70,128,157,128v97,0,193,-69,287,-208r79,-120v51,0,92,-3,122,-9v1,60,-55,180,-81,242v-1,8,-66,70,-78,68v-32,-15,-59,-22,-80,-22v-17,0,-25,7,-25,20v0,34,65,33,102,25r36,32v-142,84,-264,126,-366,126v-216,0,-389,-146,-389,-359v0,-202,140,-353,344,-349v17,0,37,4,58,13r0,-12v-22,-8,-41,-12,-58,-12v-213,-4,-353,148,-353,360v0,218,177,369,398,369v112,0,272,-64,376,-128r91,59v99,49,222,68,308,0v41,-32,62,-68,62,-109","w":1061},"\u00c2":{"d":"876,-475v39,-44,140,-139,181,-141v-3,5,-16,21,-39,48v-77,89,-121,170,-133,243v-32,6,-69,9,-112,9v17,-46,50,-100,103,-159xm986,-61v91,-46,224,-33,229,75v4,73,-94,138,-169,138v-97,0,-183,-32,-260,-97v110,-67,177,-104,200,-116xm696,8v-23,5,-51,11,-55,-8v0,-4,3,-6,9,-6v9,0,24,5,46,14xm286,-101v0,-112,135,-198,254,-198r201,0v-62,96,-107,159,-135,190v-73,81,-143,122,-210,122v-73,0,-110,-38,-110,-114xm1229,13v-1,-106,-146,-141,-241,-90v-27,14,-98,54,-212,123r-30,-28v88,-42,178,-146,217,-242v10,-27,17,-61,21,-101v140,-55,210,-142,210,-262v0,-65,-23,-120,-70,-166r55,-21r24,55r19,0r-8,-151r-125,88v-69,-49,-148,-74,-238,-74v-161,0,-353,122,-353,273v0,98,39,163,116,195r3,-13v-70,-31,-105,-91,-105,-182v0,-144,187,-259,339,-259v86,0,164,24,226,68r-78,55v51,4,76,-17,111,-28v47,43,70,96,70,160v0,111,-65,193,-194,244v8,-110,45,-196,111,-257v23,-21,34,-35,34,-42v0,-11,-3,-16,-10,-16v-146,33,-301,199,-368,342r-249,0v-135,-3,-265,88,-265,215v0,84,70,128,157,128v97,0,193,-69,287,-208r79,-120v51,0,92,-3,122,-9v1,60,-55,180,-81,242v-1,8,-66,70,-78,68v-32,-15,-59,-22,-80,-22v-17,0,-25,7,-25,20v0,34,65,33,102,25r36,32v-142,84,-264,126,-366,126v-216,0,-389,-146,-389,-359v0,-202,140,-353,344,-349v17,0,37,4,58,13r0,-12v-22,-8,-41,-12,-58,-12v-213,-4,-353,148,-353,360v0,218,177,369,398,369v112,0,272,-64,376,-128r91,59v99,49,222,68,308,0v41,-32,62,-68,62,-109","w":1061},"\u00c3":{"d":"876,-475v39,-44,140,-139,181,-141v-3,5,-16,21,-39,48v-77,89,-121,170,-133,243v-32,6,-69,9,-112,9v17,-46,50,-100,103,-159xm986,-61v91,-46,224,-33,229,75v4,73,-94,138,-169,138v-97,0,-183,-32,-260,-97v110,-67,177,-104,200,-116xm696,8v-23,5,-51,11,-55,-8v0,-4,3,-6,9,-6v9,0,24,5,46,14xm286,-101v0,-112,135,-198,254,-198r201,0v-62,96,-107,159,-135,190v-73,81,-143,122,-210,122v-73,0,-110,-38,-110,-114xm1229,13v-1,-106,-146,-141,-241,-90v-27,14,-98,54,-212,123r-30,-28v88,-42,178,-146,217,-242v10,-27,17,-61,21,-101v140,-55,210,-142,210,-262v0,-83,-37,-149,-112,-200v29,-72,136,35,174,-29r36,-52r-17,-10v-11,18,-23,27,-36,27v-22,0,-82,-20,-103,-19v-33,3,-51,49,-70,72v-63,-39,-134,-58,-215,-58v-161,0,-353,122,-353,273v0,98,39,163,116,195r3,-13v-70,-31,-105,-91,-105,-182v0,-144,187,-259,339,-259v163,0,329,103,329,255v0,111,-65,193,-194,244v8,-110,45,-196,111,-257v23,-21,34,-35,34,-42v0,-11,-3,-16,-10,-16v-146,33,-301,199,-368,342r-249,0v-135,-3,-265,88,-265,215v0,84,70,128,157,128v97,0,193,-69,287,-208r79,-120v51,0,92,-3,122,-9v1,60,-55,180,-81,242v-1,8,-66,70,-78,68v-32,-15,-59,-22,-80,-22v-17,0,-25,7,-25,20v0,34,65,33,102,25r36,32v-142,84,-264,126,-366,126v-216,0,-389,-146,-389,-359v0,-202,140,-353,344,-349v17,0,37,4,58,13r0,-12v-22,-8,-41,-12,-58,-12v-213,-4,-353,148,-353,360v0,218,177,369,398,369v112,0,272,-64,376,-128r91,59v99,49,222,68,308,0v41,-32,62,-68,62,-109","w":1061},"\u00c4":{"d":"876,-475v39,-44,140,-139,181,-141v-3,5,-16,21,-39,48v-77,89,-121,170,-133,243v-32,6,-69,9,-112,9v17,-46,50,-100,103,-159xm986,-61v91,-46,224,-33,229,75v4,73,-94,138,-169,138v-97,0,-183,-32,-260,-97v110,-67,177,-104,200,-116xm696,8v-23,5,-51,11,-55,-8v0,-4,3,-6,9,-6v9,0,24,5,46,14xm286,-101v0,-112,135,-198,254,-198r201,0v-62,96,-107,159,-135,190v-73,81,-143,122,-210,122v-73,0,-110,-38,-110,-114xm1229,13v-1,-106,-146,-141,-241,-90v-27,14,-98,54,-212,123r-30,-28v88,-42,178,-146,217,-242v10,-27,17,-61,21,-101v140,-55,210,-142,210,-262v0,-79,-34,-143,-103,-194v36,-16,34,-89,-12,-89v-26,0,-53,26,-53,51v-210,-107,-527,28,-528,236v0,98,39,163,116,195r3,-13v-70,-31,-105,-91,-105,-182v2,-201,315,-329,515,-220v2,25,24,36,50,29v69,48,103,110,103,187v0,111,-65,193,-194,244v8,-110,45,-196,111,-257v23,-21,34,-35,34,-42v0,-11,-3,-16,-10,-16v-146,33,-301,199,-368,342r-249,0v-135,-3,-265,88,-265,215v0,84,70,128,157,128v97,0,193,-69,287,-208r79,-120v51,0,92,-3,122,-9v1,60,-55,180,-81,242v-1,8,-66,70,-78,68v-32,-15,-59,-22,-80,-22v-17,0,-25,7,-25,20v0,34,65,33,102,25r36,32v-142,84,-264,126,-366,126v-216,0,-389,-146,-389,-359v0,-202,140,-353,344,-349v17,0,37,4,58,13r0,-12v-22,-8,-41,-12,-58,-12v-213,-4,-353,148,-353,360v0,218,177,369,398,369v112,0,272,-64,376,-128r91,59v99,49,222,68,308,0v41,-32,62,-68,62,-109xm1197,-772v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98","w":1061},"\u00c5":{"d":"876,-475v39,-44,140,-139,181,-141v-3,5,-16,21,-39,48v-77,89,-121,170,-133,243v-32,6,-69,9,-112,9v17,-46,50,-100,103,-159xm986,-61v91,-46,224,-33,229,75v4,73,-94,138,-169,138v-97,0,-183,-32,-260,-97v110,-67,177,-104,200,-116xm696,8v-23,5,-51,11,-55,-8v0,-4,3,-6,9,-6v9,0,24,5,46,14xm286,-101v0,-112,135,-198,254,-198r201,0v-62,96,-107,159,-135,190v-73,81,-143,122,-210,122v-73,0,-110,-38,-110,-114xm512,-583v0,-186,273,-316,477,-236v-13,68,67,113,119,70v48,44,72,98,72,162v0,111,-65,193,-194,244v8,-110,45,-196,111,-257v23,-21,34,-35,34,-42v0,-11,-3,-16,-10,-16v-146,33,-301,199,-368,342r-249,0v-135,-3,-265,88,-265,215v0,84,70,128,157,128v97,0,193,-69,287,-208r79,-120v51,0,92,-3,122,-9v1,60,-55,180,-81,242v-1,8,-66,70,-78,68v-32,-15,-59,-22,-80,-22v-17,0,-25,7,-25,20v0,34,65,33,102,25r36,32v-142,84,-264,126,-366,126v-216,0,-389,-146,-389,-359v0,-202,140,-353,344,-349v17,0,37,4,58,13r0,-12v-22,-8,-41,-12,-58,-12v-213,-4,-353,148,-353,360v0,218,177,369,398,369v112,0,272,-64,376,-128r91,59v99,49,222,68,308,0v41,-32,62,-68,62,-109v-1,-106,-146,-141,-241,-90v-27,14,-98,54,-212,123r-30,-28v88,-42,178,-146,217,-242v10,-27,17,-61,21,-101v140,-55,210,-142,210,-262v0,-67,-26,-125,-77,-172v39,-45,2,-118,-56,-118v-33,0,-55,15,-67,44v-217,-81,-496,55,-496,250v0,98,39,163,116,195r3,-13v-70,-31,-105,-91,-105,-182xm1022,-821v14,-43,84,-28,81,17v0,10,-3,18,-9,25v-22,-17,-46,-31,-72,-42xm1084,-769v-28,19,-69,-4,-66,-38v24,11,46,23,66,38","w":1061},"\u00c7":{"d":"876,104v120,0,322,70,250,196r5,6v89,-133,-117,-213,-255,-213v-196,0,-363,148,-552,154v-182,5,-310,-150,-310,-334v0,-243,219,-459,486,-434v31,3,144,7,138,16v-105,59,-229,213,-229,342v0,85,32,144,95,175v27,37,60,56,97,56v70,0,141,-48,212,-143r-8,-9v-73,92,-141,138,-204,138v-25,0,-46,-10,-63,-31v144,23,295,-158,294,-288v0,-61,-26,-92,-79,-92v-137,0,-277,176,-265,322v-43,-53,-17,-116,14,-186v50,-111,145,-200,222,-268v46,7,84,11,116,15v107,14,237,-2,237,-87v0,-39,-34,-58,-101,-58v-95,0,-203,34,-325,102r-65,-7v-51,-6,-95,-9,-132,-9v-238,-6,-451,206,-451,446v0,196,130,348,321,345v196,-3,351,-155,552,-154xm1066,-561v0,53,-50,80,-150,80v-33,0,-90,-6,-171,-18v97,-73,174,-109,231,-109v60,0,90,16,90,47xm504,-58v-6,-107,124,-281,228,-281v44,0,66,22,66,67v0,101,-142,278,-242,278v-15,0,-28,-4,-41,-12v-7,-21,-11,-38,-11,-52xm429,116v1,31,-67,64,-99,74r3,11v65,-15,167,-67,167,-132v0,-19,-10,-28,-29,-28v-22,-1,-53,21,-52,43v-1,4,10,30,10,32","w":933},"\u00c8":{"d":"766,-436v65,2,134,-46,134,-107v0,-66,-67,-120,-134,-120v-105,0,-168,52,-189,155v-85,-10,-147,-15,-186,-15v-196,-3,-456,93,-375,291r12,-8v-78,-184,182,-273,363,-270v55,0,117,6,186,18v11,31,20,61,38,86v-147,-12,-248,77,-248,216v0,143,108,220,256,220v127,0,241,-110,241,-237v0,-64,-39,-120,-102,-120v-84,0,-181,86,-177,172v2,54,31,94,84,94v80,0,121,-79,117,-179r-12,0v1,85,-31,164,-105,165v-41,1,-70,-39,-70,-80v0,-75,90,-158,163,-158v56,0,88,47,88,106v0,117,-108,219,-227,219v-94,0,-161,-96,-161,-195v0,-100,97,-222,207,-173v12,15,25,23,40,23v20,-4,13,-25,-5,-31v-40,-13,-33,-50,-41,-95v43,15,77,23,103,23xm798,-628v46,0,90,38,90,85v0,102,-150,119,-224,65v-23,-75,67,-150,134,-150xm711,-847v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":973},"\u00c9":{"d":"766,-436v65,2,134,-46,134,-107v0,-66,-67,-120,-134,-120v-105,0,-168,52,-189,155v-85,-10,-147,-15,-186,-15v-196,-3,-456,93,-375,291r12,-8v-78,-184,182,-273,363,-270v55,0,117,6,186,18v11,31,20,61,38,86v-147,-12,-248,77,-248,216v0,143,108,220,256,220v127,0,241,-110,241,-237v0,-64,-39,-120,-102,-120v-84,0,-181,86,-177,172v2,54,31,94,84,94v80,0,121,-79,117,-179r-12,0v1,85,-31,164,-105,165v-41,1,-70,-39,-70,-80v0,-75,90,-158,163,-158v56,0,88,47,88,106v0,117,-108,219,-227,219v-94,0,-161,-96,-161,-195v0,-100,97,-222,207,-173v12,15,25,23,40,23v20,-4,13,-25,-5,-31v-40,-13,-33,-50,-41,-95v43,15,77,23,103,23xm798,-628v46,0,90,38,90,85v0,102,-150,119,-224,65v-23,-75,67,-150,134,-150xm949,-792v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":973},"\u00ca":{"d":"766,-436v65,2,134,-46,134,-107v0,-66,-67,-120,-134,-120v-105,0,-168,52,-189,155v-85,-10,-147,-15,-186,-15v-196,-3,-456,93,-375,291r12,-8v-78,-184,182,-273,363,-270v55,0,117,6,186,18v11,31,20,61,38,86v-147,-12,-248,77,-248,216v0,143,108,220,256,220v127,0,241,-110,241,-237v0,-64,-39,-120,-102,-120v-84,0,-181,86,-177,172v2,54,31,94,84,94v80,0,121,-79,117,-179r-12,0v1,85,-31,164,-105,165v-41,1,-70,-39,-70,-80v0,-75,90,-158,163,-158v56,0,88,47,88,106v0,117,-108,219,-227,219v-94,0,-161,-96,-161,-195v0,-100,97,-222,207,-173v12,15,25,23,40,23v20,-4,13,-25,-5,-31v-40,-13,-33,-50,-41,-95v43,15,77,23,103,23xm798,-628v46,0,90,38,90,85v0,102,-150,119,-224,65v-23,-75,67,-150,134,-150xm868,-774r24,55r19,0r-8,-151r-215,151r38,0","w":973},"\u00cb":{"d":"766,-436v65,2,134,-46,134,-107v0,-66,-67,-120,-134,-120v-105,0,-168,52,-189,155v-85,-10,-147,-15,-186,-15v-196,-3,-456,93,-375,291r12,-8v-78,-184,182,-273,363,-270v55,0,117,6,186,18v11,31,20,61,38,86v-147,-12,-248,77,-248,216v0,143,108,220,256,220v127,0,241,-110,241,-237v0,-64,-39,-120,-102,-120v-84,0,-181,86,-177,172v2,54,31,94,84,94v80,0,121,-79,117,-179r-12,0v1,85,-31,164,-105,165v-41,1,-70,-39,-70,-80v0,-75,90,-158,163,-158v56,0,88,47,88,106v0,117,-108,219,-227,219v-94,0,-161,-96,-161,-195v0,-100,97,-222,207,-173v12,15,25,23,40,23v20,-4,13,-25,-5,-31v-40,-13,-33,-50,-41,-95v43,15,77,23,103,23xm798,-628v46,0,90,38,90,85v0,102,-150,119,-224,65v-23,-75,67,-150,134,-150xm865,-772v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm732,-772v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":973},"\u00cc":{"d":"12,-259v-5,169,123,286,291,285v206,-2,303,-94,359,-259v95,-15,155,-93,177,-186r-9,-4v-33,90,-39,112,-108,151v-27,16,-46,24,-56,24v0,-16,7,-44,22,-83v51,-142,126,-229,224,-260v33,-11,73,-17,120,-18v-1,-31,-51,-34,-84,-41v-216,-45,-424,27,-479,188v-48,-36,-101,-54,-159,-54v-149,0,-256,92,-290,222r-8,-72v-4,-187,193,-368,390,-281r2,-9v-201,-87,-401,96,-401,290v0,41,3,76,9,107xm479,-453v44,-153,242,-228,448,-192v51,8,80,18,87,30v-62,3,-107,9,-137,15v-139,28,-248,192,-298,356v-22,-11,-38,-20,-49,-27v-5,-89,-16,-138,-51,-182xm519,-288v-35,-44,-38,-100,-43,-152v34,48,38,86,43,152xm519,-266v-44,126,-114,203,-255,203v-111,0,-191,-68,-240,-203v38,-161,133,-241,286,-241v60,0,112,19,155,56v3,93,12,130,54,185xm528,-258v17,11,31,20,47,26v-30,89,-169,247,-272,247v-160,0,-272,-100,-280,-255v52,114,111,186,241,186v131,0,219,-69,264,-204xm765,-847v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":789},"\u00cd":{"d":"12,-259v-5,169,123,286,291,285v206,-2,303,-94,359,-259v95,-15,155,-93,177,-186r-9,-4v-33,90,-39,112,-108,151v-27,16,-46,24,-56,24v0,-16,7,-44,22,-83v51,-142,126,-229,224,-260v33,-11,73,-17,120,-18v-1,-31,-51,-34,-84,-41v-216,-45,-424,27,-479,188v-48,-36,-101,-54,-159,-54v-149,0,-256,92,-290,222r-8,-72v-4,-187,193,-368,390,-281r2,-9v-201,-87,-401,96,-401,290v0,41,3,76,9,107xm479,-453v44,-153,242,-228,448,-192v51,8,80,18,87,30v-62,3,-107,9,-137,15v-139,28,-248,192,-298,356v-22,-11,-38,-20,-49,-27v-5,-89,-16,-138,-51,-182xm519,-288v-35,-44,-38,-100,-43,-152v34,48,38,86,43,152xm519,-266v-44,126,-114,203,-255,203v-111,0,-191,-68,-240,-203v38,-161,133,-241,286,-241v60,0,112,19,155,56v3,93,12,130,54,185xm528,-258v17,11,31,20,47,26v-30,89,-169,247,-272,247v-160,0,-272,-100,-280,-255v52,114,111,186,241,186v131,0,219,-69,264,-204xm1002,-792v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":789},"\u00ce":{"d":"12,-259v-5,169,123,286,291,285v206,-2,303,-94,359,-259v95,-15,155,-93,177,-186r-9,-4v-33,90,-39,112,-108,151v-27,16,-46,24,-56,24v0,-16,7,-44,22,-83v51,-142,126,-229,224,-260v33,-11,73,-17,120,-18v-1,-31,-51,-34,-84,-41v-216,-45,-424,27,-479,188v-48,-36,-101,-54,-159,-54v-149,0,-256,92,-290,222r-8,-72v-4,-187,193,-368,390,-281r2,-9v-201,-87,-401,96,-401,290v0,41,3,76,9,107xm479,-453v44,-153,242,-228,448,-192v51,8,80,18,87,30v-62,3,-107,9,-137,15v-139,28,-248,192,-298,356v-22,-11,-38,-20,-49,-27v-5,-89,-16,-138,-51,-182xm519,-288v-35,-44,-38,-100,-43,-152v34,48,38,86,43,152xm519,-266v-44,126,-114,203,-255,203v-111,0,-191,-68,-240,-203v38,-161,133,-241,286,-241v60,0,112,19,155,56v3,93,12,130,54,185xm528,-258v17,11,31,20,47,26v-30,89,-169,247,-272,247v-160,0,-272,-100,-280,-255v52,114,111,186,241,186v131,0,219,-69,264,-204xm881,-774r24,55r19,0r-8,-151r-215,151r38,0","w":789},"\u00cf":{"d":"12,-259v-5,169,123,286,291,285v206,-2,303,-94,359,-259v95,-15,155,-93,177,-186r-9,-4v-33,90,-39,112,-108,151v-27,16,-46,24,-56,24v0,-16,7,-44,22,-83v51,-142,126,-229,224,-260v33,-11,73,-17,120,-18v-1,-31,-51,-34,-84,-41v-216,-45,-424,27,-479,188v-48,-36,-101,-54,-159,-54v-149,0,-256,92,-290,222r-8,-72v-4,-187,193,-368,390,-281r2,-9v-201,-87,-401,96,-401,290v0,41,3,76,9,107xm479,-453v44,-153,242,-228,448,-192v51,8,80,18,87,30v-62,3,-107,9,-137,15v-139,28,-248,192,-298,356v-22,-11,-38,-20,-49,-27v-5,-89,-16,-138,-51,-182xm519,-288v-35,-44,-38,-100,-43,-152v34,48,38,86,43,152xm519,-266v-44,126,-114,203,-255,203v-111,0,-191,-68,-240,-203v38,-161,133,-241,286,-241v60,0,112,19,155,56v3,93,12,130,54,185xm528,-258v17,11,31,20,47,26v-30,89,-169,247,-272,247v-160,0,-272,-100,-280,-255v52,114,111,186,241,186v131,0,219,-69,264,-204xm885,-772v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm752,-772v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":789},"\u00d1":{"d":"1247,-618v47,1,108,-22,108,-66v0,-29,-22,-44,-66,-44v-45,0,-92,27,-141,81v-92,-40,-308,-107,-395,-106v-178,1,-239,25,-309,125v-32,45,-48,92,-51,139r-67,-5v-175,-6,-326,153,-326,327v0,159,121,254,284,254v140,0,259,-94,357,-282r159,-315v-28,142,-6,242,0,378v2,31,-26,100,-39,132v0,7,4,10,13,10v8,0,22,-15,41,-45r72,-115v37,-59,76,-127,117,-204r129,-246v7,-12,14,-24,21,-35v33,11,64,17,93,17xm1289,-719v21,0,57,13,57,35v0,38,-58,56,-99,55v-18,0,-47,-5,-87,-15v39,-50,82,-75,129,-75xm542,-321v-23,-88,-54,-127,-131,-162v18,-101,70,-172,156,-213v67,-32,129,-48,186,-48v70,0,200,35,390,106v-51,81,-135,259,-150,287r-57,102v0,0,-52,86,-85,138v23,-63,38,-110,34,-138r-40,-254v1,-88,60,-134,115,-180v-61,-21,-113,-31,-154,-31v-102,0,-279,64,-279,151v0,23,13,41,40,53r2,-9v-21,-13,-32,-28,-32,-44v0,-79,181,-142,269,-142v32,0,76,9,132,27v-152,123,-166,209,-247,362r-61,121v-93,183,-208,274,-346,274v-158,0,-276,-93,-276,-246v0,-195,171,-356,385,-312v-2,87,63,162,142,170v2,174,-108,290,-265,301v-83,6,-144,-68,-144,-153v0,-105,90,-217,191,-217v65,0,128,58,126,123v0,17,-8,43,-23,78r11,-2v61,-97,-12,-208,-114,-208v-110,0,-204,115,-201,226v3,98,56,161,154,161v165,0,281,-142,274,-308v125,-15,176,-110,128,-228r-9,2v45,111,-1,201,-121,213xm533,-321v-67,-12,-122,-76,-122,-152v75,32,96,63,122,152xm1144,-851v-22,0,-82,-20,-103,-19v-35,3,-52,52,-72,75r17,9v29,-73,137,34,175,-30r36,-52r-17,-10v-11,18,-23,27,-36,27","w":1041},"\u00d2":{"d":"0,-158v-3,97,61,183,158,180v143,-3,269,-136,333,-248v28,-49,78,-182,79,-250v1,-66,-49,-144,-111,-144v-104,0,-228,180,-228,286v0,46,27,86,74,86v85,0,168,-109,168,-198v0,-29,-18,-71,-48,-69v-17,0,-39,13,-65,39r7,7v21,-24,40,-36,58,-36v23,-1,37,35,37,59v1,71,-84,193,-157,187v-40,-3,-63,-31,-63,-75v0,-101,119,-277,217,-277v37,0,56,27,56,81v0,113,-124,372,-210,461v-53,55,-101,85,-147,85v-51,0,-84,-45,-84,-98v0,-131,124,-385,243,-493v24,-22,59,-42,103,-63v-100,-4,-135,29,-214,95v-99,83,-202,236,-206,385xm410,-847v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":600},"\u00d3":{"d":"0,-158v-3,97,61,183,158,180v143,-3,269,-136,333,-248v28,-49,78,-182,79,-250v1,-66,-49,-144,-111,-144v-104,0,-228,180,-228,286v0,46,27,86,74,86v85,0,168,-109,168,-198v0,-29,-18,-71,-48,-69v-17,0,-39,13,-65,39r7,7v21,-24,40,-36,58,-36v23,-1,37,35,37,59v1,71,-84,193,-157,187v-40,-3,-63,-31,-63,-75v0,-101,119,-277,217,-277v37,0,56,27,56,81v0,113,-124,372,-210,461v-53,55,-101,85,-147,85v-51,0,-84,-45,-84,-98v0,-131,124,-385,243,-493v24,-22,59,-42,103,-63v-100,-4,-135,29,-214,95v-99,83,-202,236,-206,385xm714,-792v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":600},"\u00d4":{"d":"0,-158v-3,97,61,183,158,180v143,-3,269,-136,333,-248v28,-49,78,-182,79,-250v1,-66,-49,-144,-111,-144v-104,0,-228,180,-228,286v0,46,27,86,74,86v85,0,168,-109,168,-198v0,-29,-18,-71,-48,-69v-17,0,-39,13,-65,39r7,7v21,-24,40,-36,58,-36v23,-1,37,35,37,59v1,71,-84,193,-157,187v-40,-3,-63,-31,-63,-75v0,-101,119,-277,217,-277v37,0,56,27,56,81v0,113,-124,372,-210,461v-53,55,-101,85,-147,85v-51,0,-84,-45,-84,-98v0,-131,124,-385,243,-493v24,-22,59,-42,103,-63v-100,-4,-135,29,-214,95v-99,83,-202,236,-206,385xm557,-774r24,55r19,0r-8,-151r-215,151r38,0","w":600},"\u00d5":{"d":"0,-158v-3,97,61,183,158,180v143,-3,269,-136,333,-248v28,-49,78,-182,79,-250v1,-66,-49,-144,-111,-144v-104,0,-228,180,-228,286v0,46,27,86,74,86v85,0,168,-109,168,-198v0,-29,-18,-71,-48,-69v-17,0,-39,13,-65,39r7,7v21,-24,40,-36,58,-36v23,-1,37,35,37,59v1,71,-84,193,-157,187v-40,-3,-63,-31,-63,-75v0,-101,119,-277,217,-277v37,0,56,27,56,81v0,113,-124,372,-210,461v-53,55,-101,85,-147,85v-51,0,-84,-45,-84,-98v0,-131,124,-385,243,-493v24,-22,59,-42,103,-63v-100,-4,-135,29,-214,95v-99,83,-202,236,-206,385xm637,-851v-22,0,-82,-20,-103,-19v-35,3,-52,52,-72,75r17,9v29,-73,137,34,175,-30r36,-52r-17,-10v-11,18,-23,27,-36,27","w":600},"\u00d6":{"d":"0,-158v-3,97,61,183,158,180v143,-3,269,-136,333,-248v28,-49,78,-182,79,-250v1,-66,-49,-144,-111,-144v-104,0,-228,180,-228,286v0,46,27,86,74,86v85,0,168,-109,168,-198v0,-29,-18,-71,-48,-69v-17,0,-39,13,-65,39r7,7v21,-24,40,-36,58,-36v23,-1,37,35,37,59v1,71,-84,193,-157,187v-40,-3,-63,-31,-63,-75v0,-101,119,-277,217,-277v37,0,56,27,56,81v0,113,-124,372,-210,461v-53,55,-101,85,-147,85v-51,0,-84,-45,-84,-98v0,-131,124,-385,243,-493v24,-22,59,-42,103,-63v-100,-4,-135,29,-214,95v-99,83,-202,236,-206,385xm636,-772v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm503,-772v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":600},"\u00d7":{"d":"375,-43r43,-43r-100,-99r100,-99r-43,-43r-99,99r-100,-99r-42,43r99,99r-99,99r42,43r100,-99","w":551},"\u00d8":{"d":"577,-18v95,44,193,2,193,-102v0,-90,-81,-134,-177,-134v-60,0,-293,134,-353,123v-77,2,-152,-62,-152,-139v0,-61,51,-99,115,-99v58,0,121,37,121,93v0,43,-37,79,-80,78v-33,0,-49,-12,-49,-37v-1,-21,24,-30,34,-35v-1,-17,-8,-26,-21,-26v-29,-1,-52,23,-52,52v0,40,37,62,78,62v55,1,101,-39,101,-94v0,-63,-66,-104,-133,-104v-97,0,-145,40,-145,120v0,85,91,142,183,140v64,12,293,-123,353,-123v74,0,151,57,151,134v0,51,-35,99,-84,98v-24,0,-50,-6,-79,-18","w":863},"\u00d9":{"d":"1392,-308v73,0,151,-56,151,-115v0,-122,-136,-195,-265,-192v-145,3,-147,18,-279,64v-76,-62,-154,-99,-298,-91r0,6v118,-6,149,19,270,97v-179,113,-290,261,-393,437v-44,75,-93,109,-140,109v-25,0,-37,-15,-37,-45v0,-110,135,-209,185,-298v11,-21,17,-46,17,-73v1,-143,-88,-227,-231,-227v-185,0,-363,128,-367,291v-3,91,76,163,165,163v67,0,123,-14,166,-42r-3,-6v-46,26,-100,39,-163,39v-84,0,-158,-69,-156,-154v4,-155,184,-282,358,-282v105,0,192,59,182,160v-12,124,-196,237,-198,380v-1,50,35,105,82,105v41,0,88,-32,142,-97v0,65,20,97,59,97v49,0,91,-23,126,-68r0,-18v-37,45,-74,68,-111,68v-10,0,-15,-5,-15,-15v0,-28,37,-105,111,-230v55,-94,137,-184,245,-270v130,138,262,207,397,207xm1278,-605v126,0,255,67,255,182v0,59,-79,105,-141,105v-102,0,-227,-72,-375,-216v98,-47,185,-71,261,-71xm738,-847v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":865},"\u00da":{"d":"1392,-308v73,0,151,-56,151,-115v0,-122,-136,-195,-265,-192v-145,3,-147,18,-279,64v-76,-62,-154,-99,-298,-91r0,6v118,-6,149,19,270,97v-179,113,-290,261,-393,437v-44,75,-93,109,-140,109v-25,0,-37,-15,-37,-45v0,-110,135,-209,185,-298v11,-21,17,-46,17,-73v1,-143,-88,-227,-231,-227v-185,0,-363,128,-367,291v-3,91,76,163,165,163v67,0,123,-14,166,-42r-3,-6v-46,26,-100,39,-163,39v-84,0,-158,-69,-156,-154v4,-155,184,-282,358,-282v105,0,192,59,182,160v-12,124,-196,237,-198,380v-1,50,35,105,82,105v41,0,88,-32,142,-97v0,65,20,97,59,97v49,0,91,-23,126,-68r0,-18v-37,45,-74,68,-111,68v-10,0,-15,-5,-15,-15v0,-28,37,-105,111,-230v55,-94,137,-184,245,-270v130,138,262,207,397,207xm1278,-605v126,0,255,67,255,182v0,59,-79,105,-141,105v-102,0,-227,-72,-375,-216v98,-47,185,-71,261,-71xm999,-792v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":865},"\u00db":{"d":"1392,-308v73,0,151,-56,151,-115v0,-122,-136,-195,-265,-192v-145,3,-147,18,-279,64v-76,-62,-154,-99,-298,-91r0,6v118,-6,149,19,270,97v-179,113,-290,261,-393,437v-44,75,-93,109,-140,109v-25,0,-37,-15,-37,-45v0,-110,135,-209,185,-298v11,-21,17,-46,17,-73v1,-143,-88,-227,-231,-227v-185,0,-363,128,-367,291v-3,91,76,163,165,163v67,0,123,-14,166,-42r-3,-6v-46,26,-100,39,-163,39v-84,0,-158,-69,-156,-154v4,-155,184,-282,358,-282v105,0,192,59,182,160v-12,124,-196,237,-198,380v-1,50,35,105,82,105v41,0,88,-32,142,-97v0,65,20,97,59,97v49,0,91,-23,126,-68r0,-18v-37,45,-74,68,-111,68v-10,0,-15,-5,-15,-15v0,-28,37,-105,111,-230v55,-94,137,-184,245,-270v130,138,262,207,397,207xm1278,-605v126,0,255,67,255,182v0,59,-79,105,-141,105v-102,0,-227,-72,-375,-216v98,-47,185,-71,261,-71xm896,-774r24,55r19,0r-8,-151r-215,151r38,0","w":865},"\u00dc":{"d":"1392,-308v73,0,151,-56,151,-115v0,-122,-136,-195,-265,-192v-145,3,-147,18,-279,64v-76,-62,-154,-99,-298,-91r0,6v118,-6,149,19,270,97v-179,113,-290,261,-393,437v-44,75,-93,109,-140,109v-25,0,-37,-15,-37,-45v0,-110,135,-209,185,-298v11,-21,17,-46,17,-73v1,-143,-88,-227,-231,-227v-185,0,-363,128,-367,291v-3,91,76,163,165,163v67,0,123,-14,166,-42r-3,-6v-46,26,-100,39,-163,39v-84,0,-158,-69,-156,-154v4,-155,184,-282,358,-282v105,0,192,59,182,160v-12,124,-196,237,-198,380v-1,50,35,105,82,105v41,0,88,-32,142,-97v0,65,20,97,59,97v49,0,91,-23,126,-68r0,-18v-37,45,-74,68,-111,68v-10,0,-15,-5,-15,-15v0,-28,37,-105,111,-230v55,-94,137,-184,245,-270v130,138,262,207,397,207xm1278,-605v126,0,255,67,255,182v0,59,-79,105,-141,105v-102,0,-227,-72,-375,-216v98,-47,185,-71,261,-71xm920,-772v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm787,-772v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":865},"\u00dd":{"d":"1280,411v179,0,331,-138,331,-317v0,-136,-107,-260,-244,-260v-94,0,-179,62,-179,156v0,81,60,143,141,141v7,0,10,-4,10,-11v-91,-12,-137,-55,-137,-130v0,-86,76,-140,165,-140v121,0,232,119,232,244v0,173,-147,306,-319,306v-175,0,-403,-133,-502,-247v94,-210,176,-448,308,-613v102,-127,200,-193,299,-193v95,0,149,40,160,120r11,6v-4,-106,-73,-134,-189,-134v-157,0,-299,112,-438,327v-51,78,-117,324,-227,334v-52,5,-48,-83,-32,-125v33,-85,142,-187,143,-308v1,-145,-144,-242,-299,-194r-71,26v-31,-98,-86,-144,-207,-144v-156,0,-234,45,-234,134v0,75,87,132,167,129v119,-5,176,-58,266,-104v5,72,-24,123,-39,156r8,2v30,-53,45,-99,40,-162v132,-70,314,-56,314,108v0,140,-155,216,-155,369v0,65,29,125,89,124v55,0,108,-71,142,-111v-31,137,-29,176,-69,238r-77,-70v-91,-78,-188,-117,-291,-117v-155,0,-314,89,-314,234v0,144,159,231,314,231v166,0,291,-84,376,-253v175,165,344,248,507,248xm169,-491v-78,0,-160,-48,-160,-120v0,-85,76,-128,227,-128v107,0,172,47,197,142v-123,71,-211,106,-264,106xm102,185v0,-141,142,-224,295,-224v156,0,274,95,362,187v-62,124,-199,221,-362,221v-127,0,-295,-70,-295,-184xm1200,-792v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":1049},"\u00df":{"d":"75,-23v-27,-15,-48,-24,-78,-20r78,-156v27,-29,48,-44,64,-43v25,1,36,14,35,37v-3,52,-63,160,-99,182xm-23,-3v22,12,49,10,84,-1v3,10,4,28,3,54v-57,14,-107,31,-153,56v17,-39,43,-71,66,-109xm-447,256v0,53,45,91,99,90v48,0,92,-21,132,-63v10,31,35,48,74,49v148,4,285,-117,255,-288v105,-43,202,-125,289,-245r-8,-8v-97,123,-192,204,-286,243v-2,-13,-10,-29,-25,-46v77,-24,216,-159,151,-258v-29,-44,-93,-28,-128,12v30,-67,66,-132,103,-194v55,-90,90,-135,106,-135v11,0,17,10,17,29v14,-4,35,-3,42,-11v-4,-19,-22,-31,-42,-34v-57,-10,-187,153,-236,232r-67,107r-59,0r-10,18r58,0r-210,430v-37,68,-107,162,-156,151v-41,0,-85,-29,-85,-70v0,-26,26,-84,52,-84v14,0,21,9,21,26v0,8,-10,13,-31,16v20,49,87,22,88,-21v1,-26,-23,-51,-49,-51v-50,0,-95,53,-95,105xm55,-14v-21,9,-38,11,-49,11v-25,-1,-22,-17,-14,-30v24,-7,44,3,63,19xm63,62v4,81,-131,270,-211,260v-32,-4,-57,-33,-42,-67v23,-32,50,-60,70,-96v52,-43,130,-88,183,-97","w":365},"\u00e0":{"d":"171,-300v-108,-4,-222,106,-222,216v0,128,110,116,161,40v18,38,43,57,76,57v48,0,136,-77,263,-231r-8,-7v-52,62,-192,217,-249,225v-37,-6,-21,-35,-5,-66r131,-246v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24xm6,-33v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33xm118,-499v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0"},"\u00e1":{"d":"171,-300v-108,-4,-222,106,-222,216v0,128,110,116,161,40v18,38,43,57,76,57v48,0,136,-77,263,-231r-8,-7v-52,62,-192,217,-249,225v-37,-6,-21,-35,-5,-66r131,-246v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24xm6,-33v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33xm354,-444v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0"},"\u00e2":{"d":"171,-300v-108,-4,-222,106,-222,216v0,128,110,116,161,40v18,38,43,57,76,57v48,0,136,-77,263,-231r-8,-7v-52,62,-192,217,-249,225v-37,-6,-21,-35,-5,-66r131,-246v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24xm6,-33v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33xm251,-416r24,55r19,0r-8,-151r-215,151r38,0"},"\u00e3":{"d":"171,-300v-108,-4,-222,106,-222,216v0,128,110,116,161,40v18,38,43,57,76,57v48,0,136,-77,263,-231r-8,-7v-52,62,-192,217,-249,225v-37,-6,-21,-35,-5,-66r131,-246v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24xm6,-33v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33xm270,-428v-22,0,-82,-20,-103,-19v-35,3,-52,52,-72,75r17,9v29,-73,137,34,175,-30r36,-52r-17,-10v-11,18,-23,27,-36,27"},"\u00e4":{"d":"171,-300v-108,-4,-222,106,-222,216v0,128,110,116,161,40v18,38,43,57,76,57v48,0,136,-77,263,-231r-8,-7v-52,62,-192,217,-249,225v-37,-6,-21,-35,-5,-66r131,-246v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24xm6,-33v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33xm271,-365v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm138,-365v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45"},"\u00e5":{"d":"171,-300v-108,-4,-222,106,-222,216v0,128,110,116,161,40v18,38,43,57,76,57v48,0,136,-77,263,-231r-8,-7v-52,62,-192,217,-249,225v-37,-6,-21,-35,-5,-66r131,-246v-5,0,-28,28,-33,27v-26,-1,-48,-16,-63,9v-11,-16,-28,-24,-51,-24xm6,-33v0,-67,112,-263,180,-249v14,0,21,8,21,24v0,12,-34,76,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33xm232,-505v-39,0,-73,33,-73,73v0,39,34,72,73,72v38,0,72,-33,72,-72v0,-40,-33,-73,-72,-73xm232,-390v-23,0,-43,-20,-43,-42v0,-23,20,-43,43,-43v22,0,42,20,42,43v0,22,-20,42,-42,42"},"\u00e6":{"d":"6,-33v0,-70,110,-249,180,-249v14,0,21,8,21,24v0,14,-34,78,-102,192v-26,44,-52,66,-79,66v-13,0,-20,-11,-20,-33xm424,-245v-3,-63,-84,-65,-130,-38v-28,-1,-56,-21,-72,7v-11,-16,-28,-24,-51,-24v-108,-4,-222,107,-222,216v0,128,110,116,161,40v18,38,36,63,94,62v108,-2,272,-151,317,-236r-8,-7v-40,74,-196,224,-287,224v-18,0,-27,-12,-27,-37v0,-21,6,-44,18,-70v75,3,210,-66,207,-137xm374,-264v0,42,-106,138,-147,132v52,-103,94,-155,126,-155v14,0,21,8,21,23","w":493},"\u00e7":{"d":"35,116v1,31,-66,64,-98,74r3,11v67,-15,165,-68,166,-132v0,-19,-10,-28,-29,-28v-22,-1,-53,21,-52,43v-1,4,10,30,10,32xm173,-300v-123,0,-224,103,-224,225v0,59,33,88,99,88v157,0,284,-117,363,-231r-8,-7v-75,107,-207,221,-355,226v-30,0,-45,-12,-45,-36v0,-60,114,-255,170,-255v23,0,34,7,34,21v0,25,-36,48,-60,20v-16,22,-17,60,26,60v29,0,60,-29,60,-59v0,-30,-31,-52,-60,-52","w":352},"\u00e8":{"d":"-51,-75v0,49,37,88,86,88v90,0,257,-161,295,-231r-8,-7v-38,71,-200,227,-287,224v-18,0,-27,-12,-27,-37v0,-21,6,-44,18,-70v31,0,69,-11,116,-32v61,-28,91,-63,91,-105v1,-30,-27,-55,-57,-55v-102,0,-227,116,-227,225xm183,-264v0,42,-106,138,-147,132v52,-103,94,-155,126,-155v14,0,21,8,21,23xm118,-499v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":308},"\u00e9":{"d":"-51,-75v0,49,37,88,86,88v90,0,257,-161,295,-231r-8,-7v-38,71,-200,227,-287,224v-18,0,-27,-12,-27,-37v0,-21,6,-44,18,-70v31,0,69,-11,116,-32v61,-28,91,-63,91,-105v1,-30,-27,-55,-57,-55v-102,0,-227,116,-227,225xm183,-264v0,42,-106,138,-147,132v52,-103,94,-155,126,-155v14,0,21,8,21,23xm374,-444v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":308},"\u00ea":{"d":"-51,-75v0,49,37,88,86,88v90,0,257,-161,295,-231r-8,-7v-38,71,-200,227,-287,224v-18,0,-27,-12,-27,-37v0,-21,6,-44,18,-70v31,0,69,-11,116,-32v61,-28,91,-63,91,-105v1,-30,-27,-55,-57,-55v-102,0,-227,116,-227,225xm183,-264v0,42,-106,138,-147,132v52,-103,94,-155,126,-155v14,0,21,8,21,23xm231,-416r24,55r19,0r-8,-151r-215,151r38,0","w":308},"\u00eb":{"d":"-51,-75v0,49,37,88,86,88v90,0,257,-161,295,-231r-8,-7v-38,71,-200,227,-287,224v-18,0,-27,-12,-27,-37v0,-21,6,-44,18,-70v31,0,69,-11,116,-32v61,-28,91,-63,91,-105v1,-30,-27,-55,-57,-55v-102,0,-227,116,-227,225xm183,-264v0,42,-106,138,-147,132v52,-103,94,-155,126,-155v14,0,21,8,21,23xm251,-365v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm118,-365v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":308},"\u00ec":{"d":"93,-282v-20,-8,-48,-17,-61,12v-29,63,-98,151,-98,225v0,39,21,58,62,58v43,0,131,-77,262,-231r-8,-7v-31,40,-198,218,-232,219v-30,1,-24,-44,-14,-64r127,-242v-5,-1,-33,31,-38,30xm18,-499v-23,-39,-81,-25,-82,19v0,14,6,29,21,40r99,75r26,0","w":236},"\u00ed":{"d":"93,-282v-20,-8,-48,-17,-61,12v-29,63,-98,151,-98,225v0,39,21,58,62,58v43,0,131,-77,262,-231r-8,-7v-31,40,-198,218,-232,219v-30,1,-24,-44,-14,-64r127,-242v-5,-1,-33,31,-38,30xm314,-444v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":236},"\u00ee":{"d":"93,-282v-20,-8,-48,-17,-61,12v-29,63,-98,151,-98,225v0,39,21,58,62,58v43,0,131,-77,262,-231r-8,-7v-31,40,-198,218,-232,219v-30,1,-24,-44,-14,-64r127,-242v-5,-1,-33,31,-38,30xm171,-416r24,55r19,0r-8,-151r-214,151r37,0","w":236},"\u00ef":{"d":"93,-282v-20,-8,-48,-17,-61,12v-29,63,-98,151,-98,225v0,39,21,58,62,58v43,0,131,-77,262,-231r-8,-7v-31,40,-198,218,-232,219v-30,1,-24,-44,-14,-64r127,-242v-5,-1,-33,31,-38,30xm171,-365v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm38,-365v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":236},"\u00f1":{"d":"-120,25v32,-34,35,-29,74,-21v30,-6,54,-77,70,-103v34,-57,116,-169,174,-173v27,4,14,19,1,39r-83,127v-36,46,-26,124,37,120v85,-6,154,-124,209,-179v27,-27,41,-46,46,-53r-8,-7r-147,162v-36,40,-64,60,-83,60v-33,-7,-22,-22,-3,-52r93,-145v28,-37,30,-101,-27,-100v-36,0,-86,28,-150,84r51,-96r-37,29v-25,-6,-49,-15,-65,16xm290,-428v-22,0,-82,-20,-103,-19v-35,3,-52,52,-72,75r17,9v29,-73,137,34,175,-30r36,-52r-17,-10v-11,18,-23,27,-36,27","w":386},"\u00f2":{"d":"-49,-78v0,44,33,92,75,91v83,-2,164,-65,198,-124v76,-20,139,-74,168,-107r-8,-7v-58,50,-90,80,-151,99v10,-23,24,-49,24,-80v0,-49,-32,-94,-81,-94v-109,0,-225,111,-225,222xm7,-32v0,-57,110,-268,166,-256v16,0,24,8,24,25v0,35,-13,79,-39,134v-20,-3,-33,-13,-38,-30v34,1,36,-41,6,-41v-21,0,-31,11,-31,32v0,21,18,37,55,49v-48,79,-89,119,-124,119v-13,0,-19,-11,-19,-32xm118,-499v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":369},"\u00f3":{"d":"-49,-78v0,44,33,92,75,91v83,-2,164,-65,198,-124v76,-20,139,-74,168,-107r-8,-7v-58,50,-90,80,-151,99v10,-23,24,-49,24,-80v0,-49,-32,-94,-81,-94v-109,0,-225,111,-225,222xm7,-32v0,-57,110,-268,166,-256v16,0,24,8,24,25v0,35,-13,79,-39,134v-20,-3,-33,-13,-38,-30v34,1,36,-41,6,-41v-21,0,-31,11,-31,32v0,21,18,37,55,49v-48,79,-89,119,-124,119v-13,0,-19,-11,-19,-32xm374,-444v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":369},"\u00f4":{"d":"-49,-78v0,44,33,92,75,91v83,-2,164,-65,198,-124v76,-20,139,-74,168,-107r-8,-7v-58,50,-90,80,-151,99v10,-23,24,-49,24,-80v0,-49,-32,-94,-81,-94v-109,0,-225,111,-225,222xm7,-32v0,-57,110,-268,166,-256v16,0,24,8,24,25v0,35,-13,79,-39,134v-20,-3,-33,-13,-38,-30v34,1,36,-41,6,-41v-21,0,-31,11,-31,32v0,21,18,37,55,49v-48,79,-89,119,-124,119v-13,0,-19,-11,-19,-32xm231,-416r24,55r19,0r-8,-151r-215,151r38,0","w":369},"\u00f5":{"d":"-49,-78v0,44,33,92,75,91v83,-2,164,-65,198,-124v76,-20,139,-74,168,-107r-8,-7v-58,50,-90,80,-151,99v10,-23,24,-49,24,-80v0,-49,-32,-94,-81,-94v-109,0,-225,111,-225,222xm7,-32v0,-57,110,-268,166,-256v16,0,24,8,24,25v0,35,-13,79,-39,134v-20,-3,-33,-13,-38,-30v34,1,36,-41,6,-41v-21,0,-31,11,-31,32v0,21,18,37,55,49v-48,79,-89,119,-124,119v-13,0,-19,-11,-19,-32xm270,-428v-22,0,-82,-20,-103,-19v-35,3,-52,52,-72,75r17,9v29,-73,137,34,175,-30r36,-52r-17,-10v-11,18,-23,27,-36,27","w":369},"\u00f6":{"d":"-49,-78v0,44,33,92,75,91v83,-2,164,-65,198,-124v76,-20,139,-74,168,-107r-8,-7v-58,50,-90,80,-151,99v10,-23,24,-49,24,-80v0,-49,-32,-94,-81,-94v-109,0,-225,111,-225,222xm7,-32v0,-57,110,-268,166,-256v16,0,24,8,24,25v0,35,-13,79,-39,134v-20,-3,-33,-13,-38,-30v34,1,36,-41,6,-41v-21,0,-31,11,-31,32v0,21,18,37,55,49v-48,79,-89,119,-124,119v-13,0,-19,-11,-19,-32xm251,-365v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm118,-365v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":369},"\u00f7":{"d":"234,-318v0,23,19,42,41,42v22,0,43,-21,43,-44v0,-23,-20,-43,-42,-43v-22,0,-42,22,-42,45xm119,-155r314,0r0,-61r-314,0r0,61xm234,-50v0,23,19,42,41,42v22,0,43,-21,43,-44v0,-23,-20,-43,-42,-43v-22,0,-42,22,-42,45","w":551},"\u00f8":{"d":"608,-120v92,2,183,-55,183,-140v0,-80,-48,-120,-145,-120v-67,0,-133,41,-133,104v0,55,47,95,101,94v39,0,78,-22,78,-62v0,-29,-23,-53,-52,-52v-13,0,-20,9,-21,26v23,7,34,18,34,35v0,25,-16,37,-49,37v-43,1,-80,-35,-80,-78v0,-56,63,-93,121,-93v62,0,115,35,115,99v0,77,-75,141,-152,139v-61,11,-292,-123,-353,-123v-98,0,-177,44,-177,134v-1,104,97,147,193,102r-4,-11v-29,12,-56,18,-79,18v-49,1,-84,-47,-84,-98v0,-77,77,-134,151,-134v60,0,289,135,353,123","w":863},"\u00f9":{"d":"-19,13v64,-2,85,-44,121,-82v5,55,24,82,59,82v97,-2,222,-142,277,-231r-8,-7v-44,66,-169,216,-236,216v-41,0,-26,-34,-10,-64r127,-239v-4,-2,-31,29,-36,28v-21,-3,-47,-14,-59,6v-46,80,-69,138,-131,214v-31,39,-52,58,-64,58v-40,0,-23,-53,-8,-82r119,-224v-5,0,-30,30,-36,28v-21,-5,-50,-14,-60,7v-33,70,-106,157,-106,242v0,32,17,48,51,48xm138,-499v-23,-38,-83,-25,-83,19v0,14,6,29,21,40r100,75r26,0","w":416},"\u00fa":{"d":"-19,13v64,-2,85,-44,121,-82v5,55,24,82,59,82v97,-2,222,-142,277,-231r-8,-7v-44,66,-169,216,-236,216v-41,0,-26,-34,-10,-64r127,-239v-4,-2,-31,29,-36,28v-21,-3,-47,-14,-59,6v-46,80,-69,138,-131,214v-31,39,-52,58,-64,58v-40,0,-23,-53,-8,-82r119,-224v-5,0,-30,30,-36,28v-21,-5,-50,-14,-60,7v-33,70,-106,157,-106,242v0,32,17,48,51,48xm374,-444v33,-25,29,-80,-23,-78v-13,0,-27,8,-40,23r-118,134r30,0","w":416},"\u00fb":{"d":"-19,13v64,-2,85,-44,121,-82v5,55,24,82,59,82v97,-2,222,-142,277,-231r-8,-7v-44,66,-169,216,-236,216v-41,0,-26,-34,-10,-64r127,-239v-4,-2,-31,29,-36,28v-21,-3,-47,-14,-59,6v-46,80,-69,138,-131,214v-31,39,-52,58,-64,58v-40,0,-23,-53,-8,-82r119,-224v-5,0,-30,30,-36,28v-21,-5,-50,-14,-60,7v-33,70,-106,157,-106,242v0,32,17,48,51,48xm271,-416r24,55r19,0r-8,-151r-215,151r38,0","w":416},"\u00fc":{"d":"-19,13v64,-2,85,-44,121,-82v5,55,24,82,59,82v97,-2,222,-142,277,-231r-8,-7v-44,66,-169,216,-236,216v-41,0,-26,-34,-10,-64r127,-239v-4,-2,-31,29,-36,28v-21,-3,-47,-14,-59,6v-46,80,-69,138,-131,214v-31,39,-52,58,-64,58v-40,0,-23,-53,-8,-82r119,-224v-5,0,-30,30,-36,28v-21,-5,-50,-14,-60,7v-33,70,-106,157,-106,242v0,32,17,48,51,48xm291,-365v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm158,-365v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":416},"\u00fd":{"d":"-198,220v0,45,37,80,81,77v130,-9,171,-163,227,-260v78,-41,109,-79,163,-129r132,-126r-8,-7v-91,80,-175,181,-278,247r71,-105v48,-74,83,-151,125,-229v-6,0,-32,30,-37,29v-26,-6,-46,-16,-64,16r-105,188v-11,30,-68,72,-102,72v-9,0,-13,-9,-13,-28v0,-13,5,-29,15,-49r122,-228v-5,-1,-32,30,-36,29v-27,-5,-49,-17,-67,16r-80,152v-28,45,-24,128,36,128v21,0,54,-16,97,-48r-42,83v-72,23,-125,45,-160,66v-51,31,-77,67,-77,106xm36,58r-44,74v-32,55,-99,129,-140,129v-28,0,-42,-14,-42,-42v0,-91,135,-127,226,-161","w":383},"\u00ff":{"d":"-198,220v0,45,37,80,81,77v130,-9,171,-163,227,-260v78,-41,109,-79,163,-129r132,-126r-8,-7v-91,80,-175,181,-278,247r71,-105v48,-74,83,-151,125,-229v-6,0,-32,30,-37,29v-26,-6,-46,-16,-64,16r-105,188v-11,30,-68,72,-102,72v-9,0,-13,-9,-13,-28v0,-13,5,-29,15,-49r122,-228v-5,-1,-32,30,-36,29v-27,-5,-49,-17,-67,16r-80,152v-28,45,-24,128,36,128v21,0,54,-16,97,-48r-42,83v-72,23,-125,45,-160,66v-51,31,-77,67,-77,106xm36,58r-44,74v-32,55,-99,129,-140,129v-28,0,-42,-14,-42,-42v0,-91,135,-127,226,-161xm291,-365v26,0,53,-27,53,-53v0,-30,-13,-45,-38,-45v-52,0,-77,97,-15,98xm158,-365v52,0,77,-97,15,-98v-26,0,-53,27,-53,53v0,30,13,45,38,45","w":383},"\ue000":{"w":0},"\ue001":{"w":270},"\u00a0":{"w":303}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Copyright ? 1998 by Matthew Welch. All Rights Reserved.
 * 
 * Trademark:
 * College? Trademark of Matthew Welch
 */
Cufon.registerFont({"w":1040,"face":{"font-family":"College Bold","font-weight":700,"font-stretch":"normal","units-per-em":"2048","panose-1":"2 11 -30 0 0 0 0 0 0 0","ascent":"1700","descent":"-348","bbox":"100 -1680 1500 280","underline-thickness":"0","underline-position":"0","unicode-range":"U+0020-U+007A"},"glyphs":{" ":{"w":840},"!":{"d":"100,0r0,-280r280,0r0,280r-280,0xm160,-560r-60,-420r0,-420r280,0r0,420r-60,420r-160,0","w":480},"\"":{"d":"500,-1120r0,-280r280,0r0,280r-140,280r-140,0r140,-280r-140,0xm100,-1120r0,-280r280,0r0,280r-140,280r-140,0r140,-280r-140,0","w":880},"#":{"d":"240,0r0,-280r-140,0r0,-280r140,0r0,-280r-140,0r0,-280r140,0r0,-280r280,0r0,280r280,0r0,-280r280,0r0,280r140,0r0,280r-140,0r0,280r140,0r0,280r-140,0r0,280r-280,0r0,-280r-280,0r0,280r-280,0xm520,-560r280,0r0,-280r-280,0r0,280","w":1320},"$":{"d":"380,280r0,-280r-56,0r-224,-224r0,-196r280,0r0,140r280,0r0,-280r-336,0r-224,-224r0,-392r224,-224r56,0r0,-280r280,0r0,280r56,0r224,224r0,196r-280,0r0,-140r-280,0r0,280r336,0r224,224r0,392r-224,224r-56,0r0,280r-280,0"},"'":{"d":"100,-1120r0,-280r280,0r0,280r-140,280r-140,0r140,-280r-140,0","w":480},"+":{"d":"380,-280r0,-280r-280,0r0,-280r280,0r0,-280r280,0r0,280r280,0r0,280r-280,0r0,280r-280,0"},",":{"d":"100,0r0,-280r280,0r0,280r-140,280r-140,0r140,-280r-140,0","w":480},"-":{"d":"100,-560r0,-280r840,0r0,280r-840,0"},".":{"d":"100,0r0,-280r280,0r0,280r-280,0","w":480},"0":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,952r-224,224r-392,0xm380,-280r280,0r0,-840r-280,0r0,840"},"1":{"d":"240,0r0,-280r140,0r0,-700r-140,0r0,-212r140,-208r280,0r0,1120r140,0r0,280r-560,0"},"2":{"d":"100,0r0,-616r224,-224r336,0r0,-280r-280,0r0,140r-280,0r0,-196r224,-224r392,0r224,224r0,392r-224,224r-336,0r0,280r280,0r0,-140r280,0r0,420r-840,0"},"3":{"d":"100,-980r0,-196r224,-224r392,0r224,224r0,392r-84,84r84,84r0,392r-224,224r-392,0r-224,-224r0,-196r280,0r0,140r280,0r0,-280r-140,0r0,-280r140,0r0,-280r-280,0r0,140r-280,0"},"4":{"d":"380,0r0,-280r140,0r0,-140r-420,0r0,-280r420,-700r280,0r0,700r140,0r0,280r-140,0r0,140r140,0r0,280r-560,0xm400,-700r120,0r0,-200"},"5":{"d":"100,-1400r840,0r0,280r-560,0r0,280r336,0r224,224r0,392r-224,224r-392,0r-224,-224r0,-196r280,0r0,140r280,0r0,-280r-336,0r-224,-224r0,-616"},"6":{"d":"940,-980r-280,0r0,-140r-280,0r0,280r336,0r224,224r0,392r-224,224r-392,0r-224,-224r0,-952r224,-224r392,0r224,224r0,196xm380,-280r280,0r0,-280r-280,0r0,280"},"7":{"d":"100,0r0,-280r140,0r420,-840r-280,0r0,140r-280,0r0,-420r840,0r0,280r-420,840r140,0r0,280r-560,0"},"8":{"d":"940,-784r-84,84r84,84r0,392r-224,224r-392,0r-224,-224r0,-392r84,-84r-84,-84r0,-392r224,-224r392,0r224,224r0,392xm380,-840r280,0r0,-280r-280,0r0,280xm380,-280r280,0r0,-280r-280,0r0,280"},"9":{"d":"100,-420r280,0r0,140r280,0r0,-280r-336,0r-224,-224r0,-392r224,-224r392,0r224,224r0,952r-224,224r-392,0r-224,-224r0,-196xm660,-1120r-300,0r0,280r300,0r0,-280"},":":{"d":"100,-840r0,-280r280,0r0,280r-280,0xm100,0r0,-280r280,0r0,280r-280,0","w":480},";":{"d":"100,0r0,-280r280,0r0,280r-140,280r-140,0r140,-280r-140,0xm100,-840r0,-280r280,0r0,280r-280,0","w":480},"=":{"d":"100,-840r0,-280r840,0r0,280r-840,0xm100,-280r0,-280r840,0r0,280r-840,0"},"?":{"d":"100,-980r0,-196r224,-224r392,0r224,224r0,392r-224,224r-56,0r0,140r-280,0r0,-196r224,-224r56,0r0,-280r-280,0r0,140r-280,0xm380,-280r280,0r0,280r-280,0r0,-280"},"A":{"d":"100,0r0,-280r140,0r280,-1120r280,0r280,1120r140,0r0,280r-540,0r0,-280r120,0r-35,-140r-210,0r-35,140r120,0r0,280r-540,0xm660,-840r-35,140r70,0","w":1320},"B":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r756,0r224,224r0,392r-140,84r140,84r0,392r-224,224r-756,0xm520,-840r280,0r0,-280r-280,0r0,280xm520,-280r280,0r0,-280r-280,0r0,280","w":1180},"C":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,196r-280,0r0,-140r-280,0r0,840r280,0r0,-140r280,0r0,196r-224,224r-392,0"},"D":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r756,0r224,224r0,952r-224,224r-756,0xm520,-280r280,0r0,-840r-280,0r0,840","w":1180},"E":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r980,0r0,420r-280,0r0,-140r-280,0r0,280r280,0r0,280r-280,0r0,280r280,0r0,-140r280,0r0,420r-980,0","w":1180},"F":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r980,0r0,420r-280,0r0,-140r-280,0r0,280r280,0r0,280r-280,0r0,280r140,0r0,280r-560,0","w":1180},"G":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,196r-280,0r0,-140r-280,0r0,840r280,0r0,-280r-140,0r0,-280r420,0r0,616r-224,224r-392,0"},"H":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r540,0r0,280r-120,0r0,280r280,0r0,-280r-120,0r0,-280r540,0r0,280r-140,0r0,840r140,0r0,280r-540,0r0,-280r120,0r0,-280r-280,0r0,280r120,0r0,280r-540,0","w":1320},"I":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r540,0r0,280r-120,0r0,840r120,0r0,280r-540,0","w":740},"J":{"d":"380,-420r0,140r280,0r0,-840r-140,0r0,-280r560,0r0,280r-140,0r0,896r-224,224r-392,0r-224,-224r0,-196r280,0","w":1180},"K":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r540,0r0,280r-120,0r0,372r280,-372r-120,0r0,-280r540,0r0,280r-112,0r-324,416r324,424r112,0r0,280r-540,0r0,-280r104,0r-180,-232r-84,112r0,120r120,0r0,280r-540,0","w":1280},"L":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r560,0r0,280r-140,0r0,840r280,0r0,-140r280,0r0,420r-980,0","w":1180},"M":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r420,0r280,680r280,-680r400,0r0,280r-140,0r0,840r140,0r0,280r-540,0r0,-280r140,0r0,-400r-276,688r-284,-688r0,400r136,0r0,280r-556,0","w":1580},"N":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r420,0r420,800r0,-520r-140,0r0,-280r560,0r0,280r-140,0r0,1120r-280,0r-420,-800r0,520r140,0r0,280r-560,0","w":1460},"O":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,952r-224,224r-392,0xm380,-280r280,0r0,-840r-280,0r0,840"},"P":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r756,0r224,224r0,392r-224,224r-336,0r0,280r140,0r0,280r-560,0xm520,-840r280,0r0,-280r-280,0r0,280","w":1180},"Q":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,952r-224,224r-56,0r0,280r-280,0r0,-280r-56,0xm380,-280r280,0r0,-840r-280,0r0,840"},"R":{"d":"100,0r0,-280r140,0r0,-840r-140,0r0,-280r756,0r224,224r0,392r-84,84r84,84r0,336r140,0r0,280r-540,0r0,-280r120,0r0,-280r-280,0r0,280r120,0r0,280r-540,0xm520,-840r280,0r0,-280r-280,0r0,280","w":1320},"S":{"d":"100,-420r280,0r0,140r280,0r0,-280r-336,0r-224,-224r0,-392r224,-224r392,0r224,224r0,196r-280,0r0,-140r-280,0r0,280r332,0r228,224r0,392r-224,224r-392,0r-224,-224r0,-196"},"T":{"d":"380,0r0,-280r140,0r0,-840r-140,0r0,140r-280,0r0,-420r1120,0r0,420r-280,0r0,-140r-140,0r0,840r140,0r0,280r-560,0","w":1320},"U":{"d":"100,-1400r540,0r0,280r-120,0r0,840r280,0r0,-840r-120,0r0,-280r540,0r0,280r-140,0r0,896r-224,224r-392,0r-224,-224r0,-896r-140,0r0,-280","w":1320},"V":{"d":"100,-1400r540,0r0,280r-120,0r140,560r140,-560r-120,0r0,-280r540,0r0,280r-140,0r-280,1120r-280,0r-280,-1120r-140,0r0,-280","w":1320},"W":{"d":"100,-1120r0,-280r560,0r0,280r-140,0r72,420r208,-420r208,420r72,-420r-140,0r0,-280r560,0r0,280r-140,0r-140,840r140,0r0,280r-540,0r0,-280r120,0r-140,-280r-140,280r120,0r0,280r-540,0r0,-280r140,0r-140,-840r-140,0","w":1600},"X":{"d":"100,-1120r0,-280r540,0r0,280r-120,0r140,210r140,-210r-120,0r0,-280r540,0r0,280r-140,0r-280,420r280,420r140,0r0,280r-540,0r0,-280r120,0r-140,-210r-140,210r120,0r0,280r-540,0r0,-280r140,0r280,-420r-280,-420r-140,0","w":1320},"Y":{"d":"100,-1120r0,-280r540,0r0,280r-120,0r140,210r140,-210r-120,0r0,-280r540,0r0,280r-140,0r-280,420r0,420r140,0r0,280r-560,0r0,-280r140,0r0,-420r-280,-420r-140,0","w":1320},"Z":{"d":"100,-980r0,-420r980,0r0,280r-640,840r360,0r0,-140r280,0r0,420r-980,0r0,-280r640,-840r-360,0r0,140r-280,0","w":1180},"a":{"d":"100,0r350,-1400r280,0r350,1400r-280,0r-70,-280r-280,0r-70,280r-280,0xm590,-840r-70,280r140,0","w":1180},"b":{"d":"100,0r0,-1400r616,0r224,224r0,392r-84,84r84,84r0,392r-224,224r-616,0xm380,-840r280,0r0,-280r-280,0r0,280xm380,-280r280,0r0,-280r-280,0r0,280"},"d":{"d":"100,0r0,-1400r616,0r224,224r0,952r-224,224r-616,0xm380,-280r280,0r0,-840r-280,0r0,840"},"e":{"d":"100,0r0,-1400r840,0r0,280r-560,0r0,280r420,0r0,280r-420,0r0,280r560,0r0,280r-840,0"},"f":{"d":"100,0r0,-1400r840,0r0,280r-560,0r0,280r420,0r0,280r-420,0r0,560r-280,0"},"h":{"d":"100,0r0,-1400r280,0r0,560r280,0r0,-560r280,0r0,1400r-280,0r0,-560r-280,0r0,560r-280,0"},"i":{"d":"100,0r0,-1400r280,0r0,1400r-280,0","w":480},"j":{"d":"380,-420r0,140r280,0r0,-1120r280,0r0,1176r-224,224r-392,0r-224,-224r0,-196r280,0"},"k":{"d":"100,0r0,-1400r280,0r0,556r420,-556r280,0r-436,568r436,832r-280,0r-308,-644r-112,144r0,500r-280,0","w":1180},"l":{"d":"100,0r0,-1400r280,0r0,1120r560,0r0,280r-840,0"},"m":{"d":"100,0r0,-1400r280,0r270,660r290,-660r280,0r0,1400r-280,0r0,-660r-290,660r-270,-656r0,656r-280,0","w":1300},"n":{"d":"100,0r0,-1400r280,0r420,800r0,-800r280,0r0,1400r-280,0r-420,-800r0,800r-280,0","w":1180},"p":{"d":"100,0r0,-1400r616,0r224,224r0,392r-224,224r-336,0r0,560r-280,0xm380,-844r280,0r0,-276r-280,0r0,276"},"r":{"d":"100,0r0,-1400r616,0r224,224r0,392r-84,84r84,84r0,616r-280,0r0,-560r-280,0r0,560r-280,0xm380,-840r280,0r0,-280r-280,0r0,280"},"t":{"d":"520,0r0,-1120r-420,0r0,-280r1120,0r0,280r-420,0r0,1120r-280,0","w":1320},"u":{"d":"100,-1400r280,0r0,1120r280,0r0,-1120r280,0r0,1176r-224,224r-392,0r-224,-224r0,-1176"},"v":{"d":"100,-1400r280,0r210,840r210,-840r280,0r-350,1400r-280,0","w":1180},"w":{"d":"100,-1400r280,0r168,740r112,-460r280,0r112,460r168,-740r280,0r-312,1400r-280,0r-108,-488r-108,488r-280,0","w":1600},"x":{"d":"100,-1400r280,0r280,467r280,-467r280,0r-420,700r420,700r-280,0r-280,-467r-280,467r-280,0r420,-700","w":1320},"y":{"d":"100,-1400r280,0r280,467r280,-467r280,0r-420,700r0,700r-280,0r0,-700","w":1320},"z":{"d":"100,-1120r0,-280r840,0r0,280r-520,840r520,0r0,280r-840,0r0,-280r520,-840r-520,0"},"c":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,196r-280,0r0,-140r-280,0r0,840r280,0r0,-140r280,0r0,196r-224,224r-392,0"},"g":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,196r-280,0r0,-140r-280,0r0,840r280,0r0,-280r-140,0r0,-280r420,0r0,616r-224,224r-392,0"},"o":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,952r-224,224r-392,0xm380,-280r280,0r0,-840r-280,0r0,840"},"q":{"d":"324,0r-224,-224r0,-952r224,-224r392,0r224,224r0,952r-224,224r-56,0r0,280r-280,0r0,-280r-56,0xm380,-280r280,0r0,-840r-280,0r0,840"},"s":{"d":"100,-420r280,0r0,140r280,0r0,-280r-336,0r-224,-224r0,-392r224,-224r392,0r224,224r0,196r-280,0r0,-140r-280,0r0,280r332,0r228,224r0,392r-224,224r-392,0r-224,-224r0,-196"},"\u00a0":{"w":840}}});
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Copyright ? 1998 by Matthew Welch. All Rights Reserved.
 * 
 * Trademark:
 * College? Trademark of Matthew Welch
 */
Cufon.registerFont({"w":800,"face":{"font-family":"College Condensed","font-weight":400,"font-stretch":"condensed","units-per-em":"2048","panose-1":"2 11 114 0 0 0 0 0 0 0","ascent":"1700","descent":"-348","bbox":"100 -1400 1300 200","underline-thickness":"0","underline-position":"0","unicode-range":"U+0020-U+007A"},"glyphs":{" ":{"w":600},"!":{"d":"100,0r0,-200r200,0r0,200r-200,0xm150,-400r-50,-500r0,-500r200,0r0,500r-50,500r-100,0","w":400},"\"":{"d":"400,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0xm100,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":700},"#":{"d":"200,-200r0,-200r-100,0r0,-200r100,-8r0,-192r-100,0r0,-200r100,0r0,-200r200,0r0,200r100,0r0,-200r200,0r0,200r100,0r0,200r-100,0r0,200r100,0r0,200r-100,0r0,200r-200,0r0,-200r-100,0r0,200r-200,0xm400,-600r100,0r0,-200r-100,0r0,200","w":900},"$":{"d":"300,0r0,-200r-40,0r-160,-160r0,-140r200,0r0,100r200,0r0,-200r-240,0r-160,-160r0,-280r160,-160r40,0r0,-200r200,0r0,200r40,0r160,160r0,140r-200,0r0,-100r-200,0r0,200r240,0r160,160r0,280r-160,156r-40,4r0,200r-200,0"},"'":{"d":"100,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"+":{"d":"300,-400r0,-200r-200,0r0,-200r200,0r0,-252r200,0r0,252r200,0r0,200r-200,0r0,200r-200,0"},",":{"d":"100,0r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"-":{"d":"100,-600r0,-200r600,0r0,200r-600,0"},".":{"d":"100,0r0,-200r200,0r0,200r-200,0","w":400},"0":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,1080r-160,160r-280,0xm300,-200r200,0r0,-1000r-200,0r0,1000"},"1":{"d":"100,0r0,-200r200,0r0,-852r-148,0r0,-148r148,-200r200,0r0,1200r200,0r0,200r-600,0"},"2":{"d":"100,0r0,-640r160,-160r240,0r0,-400r-200,0r0,100r-200,0r0,-140r160,-160r280,0r160,160r0,480r-160,160r-240,0r0,400r200,0r0,-100r200,0r0,300r-600,0"},"3":{"d":"100,-1100r0,-140r160,-160r280,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-280,0r-160,-160r0,-140r200,0r0,100r200,0r0,-400r-100,0r0,-200r100,0r0,-400r-200,0r0,100r-200,0"},"4":{"d":"300,0r0,-200r100,0r0,-200r-300,0r0,-200r300,-800r196,0r0,800r104,0r0,200r-100,0r0,200r100,0r0,200r-400,0xm300,-600r100,0r0,-267"},"5":{"d":"100,-1400r600,0r0,200r-400,0r0,400r240,0r160,160r0,480r-160,160r-280,0r-160,-160r0,-140r200,0r0,100r200,0r0,-400r-240,0r-160,-160r0,-640"},"6":{"d":"700,-1100r-200,0r0,-100r-200,0r0,400r240,0r160,160r0,480r-160,160r-280,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,140xm300,-200r200,0r0,-400r-200,0r0,400"},"7":{"d":"100,0r0,-200r100,0r300,-1000r-200,0r0,100r-200,0r0,-300r600,0r0,200r-300,1000r100,0r0,200r-400,0"},"8":{"d":"700,-760r-60,60r60,60r0,480r-160,160r-280,0r-160,-160r0,-480r60,-60r-60,-60r0,-480r160,-160r280,0r160,160r0,480xm300,-800r200,0r0,-400r-200,0r0,400xm300,-200r200,0r0,-400r-200,0r0,400"},"9":{"d":"100,-300r200,0r0,100r200,0r0,-400r-240,0r-160,-160r0,-480r160,-160r280,0r160,160r0,1080r-160,160r-280,0r-160,-160r0,-140xm500,-1200r-200,0r0,400r200,0r0,-400"},":":{"d":"100,0r0,-200r200,0r0,200r-200,0xm100,-600r0,-200r200,0r0,200r-200,0","w":400},";":{"d":"100,-600r0,-200r200,0r0,200r-200,0xm100,0r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"=":{"d":"100,-800r0,-200r600,0r0,200r-600,0xm100,-400r0,-200r600,0r0,200r-600,0"},"?":{"d":"100,-1000r0,-240r160,-160r280,0r160,160r0,480r-160,160r-40,0r0,200r-200,0r0,-240r160,-160r40,0r0,-400r-200,0r0,200r-200,0xm300,-200r200,0r0,200r-200,0r0,-200"},"A":{"d":"100,0r0,-200r100,0r200,-1200r200,0r200,1200r100,0r0,200r-380,0r0,-200r80,0r-34,-200r-133,0r-33,200r80,0r0,200r-380,0xm500,-800r-34,200r67,0","w":1000},"B":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r540,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-540,0xm400,-800r200,0r0,-400r-200,0r0,400xm400,-200r200,0r0,-400r-200,0r0,400","w":900},"C":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,240r-200,0r0,-200r-200,0r0,1000r200,0r0,-200r200,0r0,240r-160,160r-280,0"},"D":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r540,0r160,160r0,1080r-160,160r-540,0xm400,-200r200,0r0,-1000r-200,0r0,1000","w":900},"E":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r700,0r0,300r-200,0r0,-100r-200,0r0,400r300,0r0,200r-300,0r0,400r200,0r0,-100r200,0r0,300r-700,0","w":900},"F":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r700,0r0,300r-200,0r0,-100r-200,0r0,400r250,0r0,200r-250,0r0,400r100,0r0,200r-400,0","w":900},"G":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,240r-200,0r0,-200r-200,0r0,1000r200,0r0,-400r-100,0r0,-200r300,0r0,640r-160,160r-280,0"},"H":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r380,0r0,200r-80,0r0,400r200,0r0,-400r-80,0r0,-200r380,0r0,200r-100,0r0,1000r100,0r0,200r-380,0r0,-200r80,0r0,-400r-200,0r0,400r80,0r0,200r-380,0","w":1000},"I":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1000r100,0r0,200r-400,0","w":600},"J":{"d":"300,-400r0,200r200,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1040r-160,160r-280,0r-160,-160r0,-240r200,0","w":900},"K":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,468r280,-468r-100,0r0,-200r400,0r0,200r-100,0r-240,440r240,560r100,0r0,200r-400,0r0,-200r100,0r-152,-360r-128,196r0,164r100,0r0,200r-400,0","w":1080},"L":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1000r200,0r0,-100r200,0r0,300r-700,0","w":900},"M":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r300,0r250,760r250,-760r300,0r0,200r-100,0r0,1000r100,0r0,200r-400,0r0,-200r100,0r0,-560r-250,760r-250,-764r0,564r100,0r0,200r-400,0","w":1300},"N":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r300,0r300,800r0,-600r-100,0r0,-200r400,0r0,200r-100,0r0,1200r-200,0r-300,-800r0,600r100,0r0,200r-400,0","w":1100},"O":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,1080r-160,160r-280,0xm300,-200r200,0r0,-1000r-200,0r0,1000"},"P":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r540,0r160,160r0,480r-160,160r-240,0r0,400r100,0r0,200r-400,0xm400,-800r200,0r0,-400r-200,0r0,400","w":900},"Q":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,1080r-160,160r-40,0r0,100r-200,0r0,-100r-40,0xm300,-200r200,0r0,-1000r-200,0r0,1000"},"R":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r540,0r160,160r0,480r-60,60r60,60r0,440r100,0r0,200r-380,0r0,-200r80,0r0,-400r-200,0r0,400r80,0r0,200r-380,0xm400,-800r200,0r0,-400r-200,0r0,400","w":1000},"S":{"d":"100,-300r200,0r0,100r200,0r0,-400r-240,0r-160,-160r0,-480r160,-160r280,0r160,160r0,140r-200,0r0,-100r-200,0r0,400r240,0r160,160r0,480r-160,160r-280,0r-160,-160r0,-140"},"T":{"d":"300,0r0,-200r96,0r0,-1000r-96,0r0,100r-200,0r0,-300r800,0r0,300r-200,0r0,-100r-100,0r0,1000r100,0r0,200r-400,0","w":1000},"U":{"d":"100,-1400r380,0r0,200r-80,0r0,1000r200,0r0,-1000r-80,0r0,-200r380,0r0,200r-100,0r0,1040r-160,160r-280,0r-160,-160r0,-1040r-100,0r0,-200","w":1000},"V":{"d":"100,-1400r380,0r0,200r-80,0r96,596r104,-596r-80,0r0,-200r380,0r0,200r-100,0r-200,1200r-200,0r-200,-1200r-100,0r0,-200","w":1000},"W":{"d":"100,-1200r0,-200r400,0r0,200r-100,0r120,600r180,-420r180,420r120,-600r-100,0r0,-200r400,0r0,200r-100,0r-200,1000r100,0r0,200r-380,0r0,-200r80,0r-100,-300r-100,300r80,0r0,200r-380,0r0,-200r100,0r-200,-1000r-100,0","w":1400},"X":{"d":"100,-1200r0,-200r380,0r0,200r-80,0r100,250r100,-250r-80,0r0,-200r380,0r0,200r-100,0r-200,500r200,500r100,0r0,200r-380,0r0,-200r80,0r-100,-250r-100,250r80,0r0,200r-380,0r0,-200r100,0r200,-500r-200,-500r-100,0","w":1000},"Y":{"d":"100,-1200r0,-200r380,0r0,200r-80,0r100,250r100,-250r-80,0r0,-200r380,0r0,200r-100,0r-200,500r0,500r100,0r0,200r-400,0r0,-200r100,0r0,-500r-200,-500r-100,0","w":1000},"Z":{"d":"100,-1100r0,-300r800,0r0,200r-540,1000r340,0r0,-100r200,0r0,300r-800,0r0,-200r540,-1000r-340,0r0,100r-200,0","w":1000},"a":{"d":"100,0r250,-1400r200,0r250,1400r-200,0r-71,-399r-158,-1r-71,400r-200,0xm450,-840r-43,240r86,0","w":900},"b":{"d":"100,0r0,-1400r440,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-440,0xm300,-800r200,0r0,-400r-200,0r0,400xm300,-200r200,0r0,-400r-200,0r0,400"},"d":{"d":"100,0r0,-1400r440,0r160,160r0,1080r-160,160r-440,0xm300,-200r200,0r0,-1000r-200,0r0,1000"},"e":{"d":"100,0r0,-1400r600,0r0,200r-400,0r0,400r250,0r0,200r-250,0r0,400r400,0r0,200r-600,0"},"f":{"d":"100,0r0,-1400r600,0r0,200r-400,0r0,400r250,0r0,200r-250,0r0,600r-200,0"},"h":{"d":"100,0r0,-1400r200,0r0,600r200,0r0,-600r200,0r0,1400r-200,0r0,-600r-200,0r0,600r-200,0"},"i":{"d":"100,0r0,-1400r200,0r0,1400r-200,0","w":400},"j":{"d":"300,-400r0,200r200,0r0,-1200r200,0r0,1240r-160,160r-280,0r-160,-160r0,-240r200,0"},"k":{"d":"100,0r0,-1400r200,0r0,552r352,-552r248,0r-360,560r360,840r-200,0r-288,-692r-112,160r0,532r-200,0","w":1000},"l":{"d":"100,0r0,-1400r200,0r0,1200r400,0r0,200r-600,0"},"m":{"d":"100,0r0,-1400r200,0r250,800r250,-800r200,0r0,1400r-200,0r0,-800r-250,800r-250,-800r0,800r-200,0","w":1100},"n":{"d":"100,0r0,-1400r200,0r300,800r0,-800r200,0r0,1400r-200,0r-300,-800r0,800r-200,0","w":900},"p":{"d":"100,0r0,-1400r440,0r160,160r0,480r-160,160r-240,0r0,600r-200,0xm300,-800r200,0r0,-400r-200,0r0,400"},"r":{"d":"100,0r0,-1400r440,0r160,160r0,480r-60,60r60,60r0,640r-200,0r0,-600r-200,0r0,600r-200,0xm300,-800r200,0r0,-400r-200,0r0,400"},"t":{"d":"300,0r0,-1200r-200,0r0,-200r600,0r0,200r-200,0r0,1200r-200,0"},"u":{"d":"100,-1400r200,0r0,1200r200,0r0,-1200r200,0r0,1240r-160,160r-280,0r-160,-160r0,-1240"},"v":{"d":"100,-1400r200,0r150,840r150,-840r200,0r-250,1400r-200,0","w":900},"w":{"d":"100,-1400r200,0r140,772r110,-572r200,0r110,572r140,-772r200,0r-250,1400r-200,0r-100,-568r-100,568r-200,0","w":1300},"x":{"d":"100,-1400r200,0r200,467r200,-467r200,0r-300,700r300,700r-200,0r-200,-467r-200,467r-200,0r300,-700","w":1000},"y":{"d":"100,-1400r200,0r200,467r200,-467r200,0r-300,700r0,700r-200,0r0,-700","w":1000},"z":{"d":"100,-1200r0,-200r600,0r0,200r-340,1000r340,0r0,200r-600,0r0,-200r340,-1000r-340,0"},"c":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,240r-200,0r0,-200r-200,0r0,1000r200,0r0,-200r200,0r0,240r-160,160r-280,0"},"g":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,240r-200,0r0,-200r-200,0r0,1000r200,0r0,-400r-100,0r0,-200r300,0r0,640r-160,160r-280,0"},"o":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,1080r-160,160r-280,0xm300,-200r200,0r0,-1000r-200,0r0,1000"},"q":{"d":"260,0r-160,-160r0,-1080r160,-160r280,0r160,160r0,1080r-160,160r-40,0r0,100r-200,0r0,-100r-40,0xm300,-200r200,0r0,-1000r-200,0r0,1000"},"s":{"d":"100,-300r200,0r0,100r200,0r0,-400r-240,0r-160,-160r0,-480r160,-160r280,0r160,160r0,140r-200,0r0,-100r-200,0r0,400r240,0r160,160r0,480r-160,160r-280,0r-160,-160r0,-140"},"\u00a0":{"w":600}}});
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Copyright ? 1998 by Matthew Welch. All Rights Reserved.
 * 
 * Trademark:
 * College? Trademark of Matthew Welch
 */
Cufon.registerFont({"w":900,"face":{"font-family":"College Semi condensed","font-weight":400,"font-stretch":"semi-condensed","units-per-em":"2048","panose-1":"2 11 114 0 0 0 0 0 0 0","ascent":"1700","descent":"-348","bbox":"100 -1400 1400 200","underline-thickness":"0","underline-position":"0","unicode-range":"U+0020-U+007A"},"glyphs":{" ":{"w":700},"!":{"d":"100,0r0,-200r200,0r0,200r-200,0xm150,-400r-50,-500r0,-500r200,0r0,500r-50,500r-100,0","w":400},"\"":{"d":"400,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0xm100,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":700},"#":{"d":"200,-200r0,-200r-100,0r0,-200r100,-8r0,-192r-100,0r0,-200r100,0r0,-200r200,0r0,200r200,0r0,-200r200,0r0,200r100,0r0,200r-100,0r0,200r100,0r0,200r-100,0r0,200r-200,0r0,-200r-200,0r0,200r-200,0xm400,-600r200,0r0,-200r-200,0r0,200","w":1000},"$":{"d":"350,0r0,-200r-90,0r-160,-160r0,-140r200,0r0,100r300,0r0,-200r-340,0r-160,-160r0,-280r160,-160r90,0r0,-200r200,0r0,200r90,0r160,160r0,140r-200,0r0,-100r-300,0r0,200r340,0r160,160r0,280r-160,160r-90,0r0,200r-200,0"},"'":{"d":"100,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"+":{"d":"350,-350r0,-250r-250,0r0,-200r250,0r0,-250r200,0r0,250r250,0r0,200r-250,0r0,250r-200,0"},",":{"d":"100,0r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"-":{"d":"100,-600r0,-200r700,0r0,200r-700,0"},".":{"d":"100,0r0,-200r200,0r0,200r-200,0","w":400},"0":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,1080r-160,160r-380,0xm300,-200r300,0r0,-1000r-300,0r0,1000"},"1":{"d":"150,0r0,-200r200,0r0,-852r-148,0r0,-148r148,-200r200,0r0,1200r200,0r0,200r-600,0"},"2":{"d":"100,0r0,-640r160,-160r340,0r0,-400r-300,0r0,100r-200,0r0,-140r160,-160r380,0r160,160r0,480r-160,160r-340,0r0,400r300,0r0,-100r200,0r0,300r-700,0"},"3":{"d":"100,-1100r0,-140r160,-160r380,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-380,0r-160,-160r0,-140r200,0r0,100r300,0r0,-400r-150,0r0,-200r150,0r0,-400r-300,0r0,100r-200,0"},"4":{"d":"400,0r0,-200r100,0r0,-200r-400,0r0,-200r400,-800r200,0r0,800r100,0r0,200r-100,0r0,200r100,0r0,200r-400,0xm350,-600r150,0r0,-300"},"5":{"d":"100,-1400r700,0r0,200r-500,0r0,400r340,0r160,160r0,480r-160,160r-380,0r-160,-160r0,-140r200,0r0,100r300,0r0,-400r-340,0r-160,-160r0,-640"},"6":{"d":"800,-1100r-200,0r0,-100r-300,0r0,400r340,0r160,160r0,480r-160,160r-380,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,140xm300,-200r300,0r0,-400r-300,0r0,400"},"7":{"d":"100,0r0,-200r148,0r296,-1000r-244,0r0,100r-200,0r0,-300r700,0r0,200r-312,1000r148,0r0,200r-536,0"},"8":{"d":"800,-760r-60,60r60,60r0,480r-160,160r-380,0r-160,-160r0,-480r60,-60r-60,-60r0,-480r160,-160r380,0r160,160r0,480xm300,-800r300,0r0,-400r-300,0r0,400xm300,-200r300,0r0,-400r-300,0r0,400"},"9":{"d":"100,-300r200,0r0,100r300,0r0,-400r-340,0r-160,-160r0,-480r160,-160r380,0r160,160r0,1080r-160,160r-380,0r-160,-160r0,-140xm600,-1200r-300,0r0,400r300,0r0,-400"},":":{"d":"100,0r0,-200r200,0r0,200r-200,0xm100,-600r0,-200r200,0r0,200r-200,0","w":400},";":{"d":"100,-600r0,-200r200,0r0,200r-200,0xm100,0r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"=":{"d":"100,-800r0,-200r700,0r0,200r-700,0xm100,-400r0,-200r700,0r0,200r-700,0"},"?":{"d":"100,-1000r0,-240r160,-160r380,0r160,160r0,480r-160,160r-90,0r0,200r-200,0r0,-240r160,-160r90,0r0,-400r-300,0r0,200r-200,0xm350,-200r200,0r0,200r-200,0r0,-200"},"A":{"d":"100,0r0,-200r100,0r250,-1200r200,0r250,1200r100,0r0,200r-400,0r0,-200r100,0r-38,-200r-224,0r-38,200r100,0r0,200r-400,0xm550,-1000r-75,400r150,0","w":1100},"B":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r640,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-640,0xm400,-800r300,0r0,-400r-300,0r0,400xm400,-200r300,0r0,-400r-300,0r0,400","w":1000},"C":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,240r-200,0r0,-200r-300,0r0,1000r300,0r0,-200r200,0r0,240r-160,160r-380,0"},"D":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r640,0r160,160r0,1080r-160,160r-640,0xm400,-200r300,0r0,-1000r-300,0r0,1000","w":1000},"E":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r800,0r0,300r-200,0r0,-100r-300,0r0,400r300,0r0,200r-300,0r0,400r300,0r0,-100r200,0r0,300r-800,0","w":1000},"F":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r800,0r0,300r-200,0r0,-100r-300,0r0,400r300,0r0,200r-300,0r0,400r100,0r0,200r-400,0","w":1000},"G":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,240r-200,0r0,-200r-300,0r0,1000r300,0r0,-400r-100,0r0,-200r300,0r0,640r-160,160r-380,0"},"H":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,400r300,0r0,-400r-100,0r0,-200r400,0r0,200r-100,0r0,1000r100,0r0,200r-400,0r0,-200r100,0r0,-400r-300,0r0,400r100,0r0,200r-400,0","w":1100},"I":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1000r100,0r0,200r-400,0","w":600},"J":{"d":"300,-400r0,200r300,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1040r-160,160r-380,0r-160,-160r0,-240r200,0","w":1000},"K":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,468r380,-468r-100,0r0,-200r400,0r0,200r-100,0r-340,440r340,560r100,0r0,200r-400,0r0,-200r100,0r-260,-428r-120,144r0,284r100,0r0,200r-400,0","w":1180},"L":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1000r300,0r0,-100r200,0r0,300r-800,0","w":1000},"M":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r300,0r300,820r300,-820r300,0r0,200r-100,0r0,1000r100,0r0,200r-400,0r0,-200r100,0r0,-660r-300,860r-300,-820r0,620r100,0r0,200r-400,0","w":1400},"N":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r300,0r400,900r0,-700r-100,0r0,-200r400,0r0,200r-100,0r0,1200r-200,0r-400,-900r0,700r100,0r0,200r-400,0","w":1200},"O":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,1080r-160,160r-380,0xm300,-200r300,0r0,-1000r-300,0r0,1000"},"P":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r640,0r160,160r0,480r-160,160r-340,0r0,400r100,0r0,200r-400,0xm400,-800r300,0r0,-400r-300,0r0,400","w":1000},"Q":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,1080r-160,160r-90,0r0,100r-200,0r0,-100r-90,0xm300,-200r50,0r0,-100r200,0r0,100r50,0r0,-1000r-300,0r0,1000"},"R":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r640,0r160,160r0,480r-60,60r60,60r0,440r100,0r0,200r-400,0r0,-200r100,0r0,-400r-300,0r0,400r100,0r0,200r-400,0xm400,-800r300,0r0,-400r-300,0r0,400","w":1100},"S":{"d":"100,-300r200,0r0,100r300,0r0,-400r-340,0r-160,-160r0,-480r160,-160r380,0r160,160r0,140r-200,0r0,-100r-300,0r0,400r340,0r160,160r0,480r-160,160r-380,0r-160,-160r0,-140"},"T":{"d":"350,0r0,-200r100,0r0,-1000r-150,0r0,100r-200,0r0,-300r900,0r0,300r-200,0r0,-100r-150,0r0,1000r100,0r0,200r-400,0","w":1100},"U":{"d":"100,-1400r400,0r0,200r-100,0r0,1000r300,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1040r-160,160r-380,0r-160,-160r0,-1040r-100,0r0,-200","w":1100},"V":{"d":"100,-1400r400,0r0,200r-100,0r150,800r150,-800r-100,0r0,-200r400,0r0,200r-100,0r-250,1200r-200,0r-250,-1200r-100,0r0,-200","w":1100},"W":{"d":"100,-1200r0,-200r400,0r0,200r-100,0r140,660r210,-480r210,480r140,-660r-100,0r0,-200r400,0r0,200r-100,0r-200,1000r100,0r0,200r-400,0r0,-200r100,0r-150,-320r-150,320r100,0r0,200r-400,0r0,-200r100,0r-200,-1000r-100,0","w":1500},"X":{"d":"100,-1200r0,-200r400,0r0,200r-100,0r150,333r150,-333r-100,0r0,-200r400,0r0,200r-100,0r-250,500r250,500r100,0r0,200r-400,0r0,-200r100,0r-150,-333r-150,333r100,0r0,200r-400,0r0,-200r100,0r250,-500r-250,-500r-100,0","w":1100},"Y":{"d":"100,-1200r0,-200r400,0r0,200r-100,0r150,333r150,-333r-100,0r0,-200r400,0r0,200r-100,0r-250,500r0,500r100,0r0,200r-400,0r0,-200r100,0r0,-500r-250,-500r-100,0","w":1100},"Z":{"d":"100,-1100r0,-300r900,0r0,200r-640,1000r440,0r0,-100r200,0r0,300r-900,0r0,-200r640,-1000r-440,0r0,100r-200,0","w":1100},"a":{"d":"100,0r300,-1400r200,0r300,1400r-200,0r-86,-400r-228,0r-86,400r-200,0xm500,-933r-72,333r144,0","w":1000},"b":{"d":"100,0r0,-1400r540,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-540,0xm300,-800r300,0r0,-400r-300,0r0,400xm300,-200r300,0r0,-400r-300,0r0,400"},"d":{"d":"100,0r0,-1400r540,0r160,160r0,1080r-160,160r-540,0xm300,-200r300,0r0,-1000r-300,0r0,1000"},"e":{"d":"100,0r0,-1400r700,0r0,200r-500,0r0,400r300,0r0,200r-300,0r0,400r500,0r0,200r-700,0"},"f":{"d":"100,0r0,-1400r700,0r0,200r-500,0r0,400r300,0r0,200r-300,0r0,600r-200,0"},"h":{"d":"100,0r0,-1400r200,0r0,600r300,0r0,-600r200,0r0,1400r-200,0r0,-600r-300,0r0,600r-200,0"},"i":{"d":"100,0r0,-1400r200,0r0,1400r-200,0","w":400},"j":{"d":"300,-400r0,200r300,0r0,-1200r200,0r0,1240r-160,160r-380,0r-160,-160r0,-240r200,0"},"k":{"d":"100,0r0,-1400r200,0r0,552r452,-552r248,0r-460,560r460,840r-244,0r-368,-676r-88,108r0,568r-200,0","w":1100},"l":{"d":"100,0r0,-1400r200,0r0,1200r500,0r0,200r-700,0"},"m":{"d":"100,0r0,-1400r200,0r300,820r300,-820r200,0r0,1400r-200,0r0,-820r-300,820r-300,-820r0,820r-200,0","w":1200},"n":{"d":"100,0r0,-1400r200,0r400,920r0,-920r200,0r0,1400r-200,0r-400,-920r0,920r-200,0","w":1000},"p":{"d":"100,0r0,-1400r540,0r160,160r0,480r-160,160r-340,0r0,600r-200,0xm300,-800r300,0r0,-400r-300,0r0,400"},"r":{"d":"100,0r0,-1400r540,0r160,160r0,480r-60,60r60,60r0,640r-200,0r0,-600r-300,0r0,600r-200,0xm300,-800r300,0r0,-400r-300,0r0,400"},"t":{"d":"350,0r0,-1200r-250,0r0,-200r700,0r0,200r-250,0r0,1200r-200,0"},"u":{"d":"100,-1400r200,0r0,1200r300,0r0,-1200r200,0r0,1240r-160,160r-380,0r-160,-160r0,-1240"},"v":{"d":"100,-1400r200,0r200,933r200,-933r200,0r-300,1400r-200,0","w":1000},"w":{"d":"100,-1400r200,0r150,860r175,-660r200,0r175,660r150,-860r200,0r-250,1400r-200,0r-175,-740r-175,740r-200,0","w":1450},"x":{"d":"100,-1400r200,0r250,500r250,-500r200,0r-350,700r350,700r-200,0r-250,-500r-250,500r-200,0r350,-700","w":1100},"y":{"d":"100,-1400r200,0r250,500r250,-500r200,0r-350,700r0,700r-200,0r0,-700","w":1100},"z":{"d":"100,-1200r0,-200r700,0r0,200r-440,1000r440,0r0,200r-700,0r0,-200r440,-1000r-440,0"},"c":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,240r-200,0r0,-200r-300,0r0,1000r300,0r0,-200r200,0r0,240r-160,160r-380,0"},"g":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,240r-200,0r0,-200r-300,0r0,1000r300,0r0,-400r-100,0r0,-200r300,0r0,640r-160,160r-380,0"},"o":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,1080r-160,160r-380,0xm300,-200r300,0r0,-1000r-300,0r0,1000"},"q":{"d":"260,0r-160,-160r0,-1080r160,-160r380,0r160,160r0,1080r-160,160r-90,0r0,100r-200,0r0,-100r-90,0xm300,-200r50,0r0,-100r200,0r0,100r50,0r0,-1000r-300,0r0,1000"},"s":{"d":"100,-300r200,0r0,100r300,0r0,-400r-340,0r-160,-160r0,-480r160,-160r380,0r160,160r0,140r-200,0r0,-100r-300,0r0,400r340,0r160,160r0,480r-160,160r-380,0r-160,-160r0,-140"},"\u00a0":{"w":700}}});
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Copyright ? 1998 by Matthew Welch. All Rights Reserved.
 * 
 * Trademark:
 * College? Trademark of Matthew Welch
 */
Cufon.registerFont({"w":1000,"face":{"font-family":"College","font-weight":400,"font-stretch":"normal","units-per-em":"2048","panose-1":"2 11 114 0 0 0 0 0 0 0","ascent":"1700","descent":"-348","bbox":"100 -1400 1500 200","underline-thickness":"0","underline-position":"0","unicode-range":"U+0020-U+007A"},"glyphs":{" ":{"w":801},"!":{"d":"100,0r0,-200r200,0r0,200r-200,0xm150,-400r-50,-500r0,-500r200,0r0,500r-50,500r-100,0","w":400},"\"":{"d":"400,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0xm100,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":700},"#":{"d":"300,-200r0,-200r-200,0r0,-200r200,0r0,-200r-200,0r0,-200r200,0r0,-200r200,0r0,200r200,0r0,-200r200,0r0,200r200,0r0,200r-200,0r0,200r200,0r0,200r-200,0r0,200r-200,0r0,-200r-200,0r0,200r-200,0xm500,-600r200,0r0,-200r-200,0r0,200","w":1200},"$":{"d":"400,0r0,-200r-140,0r-160,-160r0,-140r200,0r0,100r400,0r0,-200r-440,0r-160,-160r0,-280r160,-160r140,0r0,-200r200,0r0,200r140,0r160,160r0,140r-200,0r0,-100r-400,0r0,200r440,0r160,160r0,280r-160,160r-140,0r0,200r-200,0"},"'":{"d":"100,-1200r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"+":{"d":"400,-300r0,-300r-300,0r0,-200r300,0r0,-300r200,0r0,300r300,0r0,200r-300,0r0,300r-200,0"},",":{"d":"100,0r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"-":{"d":"100,-600r0,-200r800,0r0,200r-800,0"},".":{"d":"100,0r0,-200r200,0r0,200r-200,0","w":400},"0":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,1080r-160,160r-480,0xm300,-200r400,0r0,-1000r-400,0r0,1000"},"1":{"d":"200,0r0,-200r200,0r0,-852r-148,0r0,-148r148,-200r200,0r0,1200r200,0r0,200r-600,0"},"2":{"d":"100,0r0,-640r160,-160r440,0r0,-400r-400,0r0,100r-200,0r0,-140r160,-160r480,0r160,160r0,480r-160,160r-440,0r0,400r400,0r0,-100r200,0r0,300r-800,0"},"3":{"d":"100,-1100r0,-140r160,-160r480,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-480,0r-160,-160r0,-140r200,0r0,100r400,0r0,-400r-200,0r0,-200r200,0r0,-400r-400,0r0,100r-200,0"},"4":{"d":"500,0r0,-200r100,0r0,-200r-500,0r0,-200r500,-800r200,0r0,800r100,0r0,200r-100,0r0,200r100,0r0,200r-400,0xm352,-600r248,0r0,-400"},"5":{"d":"100,-1400r800,0r0,200r-600,0r0,400r440,0r160,160r0,480r-160,160r-480,0r-160,-160r0,-140r200,0r0,100r400,0r0,-400r-440,0r-160,-160r0,-640"},"6":{"d":"900,-1100r-200,0r0,-100r-400,0r0,400r440,0r160,160r0,480r-160,160r-480,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,140xm300,-200r400,0r0,-400r-400,0r0,400"},"7":{"d":"100,0r0,-200r148,0r396,-1000r-344,0r0,100r-200,0r0,-300r800,0r0,200r-412,1000r148,0r0,200r-536,0"},"8":{"d":"900,-760r-60,60r60,60r0,480r-160,160r-480,0r-160,-160r0,-480r60,-60r-60,-60r0,-480r160,-160r480,0r160,160r0,480xm300,-800r400,0r0,-400r-400,0r0,400xm300,-200r400,0r0,-400r-400,0r0,400"},"9":{"d":"100,-300r200,0r0,100r400,0r0,-400r-440,0r-160,-160r0,-480r160,-160r480,0r160,160r0,1080r-160,160r-480,0r-160,-160r0,-140xm700,-1200r-400,0r0,400r400,0r0,-400"},":":{"d":"100,0r0,-200r200,0r0,200r-200,0xm100,-600r0,-200r200,0r0,200r-200,0","w":400},";":{"d":"100,-600r0,-200r200,0r0,200r-200,0xm100,0r0,-200r200,0r0,200r-100,200r-100,0r100,-200r-100,0","w":400},"=":{"d":"100,-800r0,-200r800,0r0,200r-800,0xm100,-400r0,-200r800,0r0,200r-800,0"},"?":{"d":"100,-1000r0,-240r160,-160r480,0r160,160r0,480r-160,160r-140,0r0,200r-200,0r0,-240r160,-160r140,0r0,-400r-400,0r0,200r-200,0xm400,-200r200,0r0,200r-200,0r0,-200"},"A":{"d":"100,0r0,-200r100,0r300,-1200r200,0r300,1200r100,0r0,200r-400,0r0,-200r100,0r-50,-200r-300,0r-50,200r100,0r0,200r-400,0xm600,-1000r-100,400r200,0","w":1200},"B":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r740,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-740,0xm400,-800r400,0r0,-400r-400,0r0,400xm400,-200r400,0r0,-400r-400,0r0,400","w":1100},"C":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,240r-200,0r0,-200r-400,0r0,1000r400,0r0,-200r200,0r0,240r-160,160r-480,0"},"D":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r740,0r160,160r0,1080r-160,160r-740,0xm400,-200r400,0r0,-1000r-400,0r0,1000","w":1100},"E":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r900,0r0,300r-200,0r0,-100r-400,0r0,400r200,0r0,-100r200,0r0,400r-200,0r0,-100r-200,0r0,400r400,0r0,-100r200,0r0,300r-900,0","w":1100},"F":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r900,0r0,300r-200,0r0,-100r-400,0r0,400r200,0r0,-100r200,0r0,400r-200,0r0,-100r-200,0r0,400r100,0r0,200r-400,0","w":1100},"G":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,240r-200,0r0,-200r-400,0r0,1000r400,0r0,-400r-200,0r0,-200r400,0r0,640r-160,160r-480,0"},"H":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,400r400,0r0,-400r-100,0r0,-200r400,0r0,200r-100,0r0,1000r100,0r0,200r-400,0r0,-200r100,0r0,-400r-400,0r0,400r100,0r0,200r-400,0","w":1200},"I":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1000r100,0r0,200r-400,0","w":600},"J":{"d":"300,-400r0,200r400,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1040r-160,160r-480,0r-160,-160r0,-240r200,0","w":1100},"K":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,400r400,-400r-100,0r0,-200r480,0r0,200r-100,0r-440,440r440,560r100,0r0,200r-444,0r0,-200r100,0r-336,-420r-100,100r0,320r100,0r0,200r-400,0","w":1280},"L":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1000r400,0r0,-100r200,0r0,300r-900,0","w":1100},"M":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r300,0r350,860r350,-860r300,0r0,200r-100,0r0,1000r100,0r0,200r-400,0r0,-200r100,0r0,-660r-350,860r-350,-860r0,660r100,0r0,200r-400,0","w":1500},"N":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r300,0r500,960r0,-760r-100,0r0,-200r400,0r0,200r-100,0r0,1200r-200,0r-500,-960r0,760r100,0r0,200r-400,0","w":1300},"O":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,1080r-160,160r-480,0xm300,-200r400,0r0,-1000r-400,0r0,1000"},"P":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r740,0r160,160r0,480r-160,160r-440,0r0,400r100,0r0,200r-400,0xm400,-800r400,0r0,-400r-400,0r0,400","w":1100},"Q":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,1080r-160,160r-140,0r0,100r-200,0r0,-100r-140,0xm300,-200r100,0r0,-100r200,0r0,100r100,0r0,-1000r-400,0r0,1000"},"R":{"d":"100,0r0,-200r100,0r0,-1000r-100,0r0,-200r740,0r160,160r0,480r-60,60r60,60r0,440r100,0r0,200r-400,0r0,-200r100,0r0,-400r-400,0r0,400r100,0r0,200r-400,0xm400,-800r400,0r0,-400r-400,0r0,400","w":1200},"S":{"d":"100,-300r200,0r0,100r400,0r0,-400r-440,0r-160,-160r0,-480r160,-160r480,0r160,160r0,140r-200,0r0,-100r-400,0r0,400r440,0r160,160r0,480r-160,160r-480,0r-160,-160r0,-140"},"T":{"d":"400,0r0,-200r100,0r0,-1000r-200,0r0,100r-200,0r0,-300r1000,0r0,300r-200,0r0,-100r-200,0r0,1000r100,0r0,200r-400,0","w":1200},"U":{"d":"100,-1400r400,0r0,200r-100,0r0,1000r400,0r0,-1000r-100,0r0,-200r400,0r0,200r-100,0r0,1040r-160,160r-480,0r-160,-160r0,-1040r-100,0r0,-200","w":1200},"V":{"d":"100,-1400r400,0r0,200r-100,0r200,800r200,-800r-100,0r0,-200r400,0r0,200r-100,0r-300,1200r-200,0r-300,-1200r-100,0r0,-200","w":1200},"W":{"d":"100,-1200r0,-200r400,0r0,200r-100,0r140,700r260,-520r260,520r140,-700r-100,0r0,-200r400,0r0,200r-100,0r-200,1000r100,0r0,200r-400,0r0,-200r100,0r-200,-400r-200,400r100,0r0,200r-400,0r0,-200r100,0r-200,-1000r-100,0","w":1600},"X":{"d":"100,-1200r0,-200r400,0r0,200r-100,0r200,333r200,-333r-100,0r0,-200r400,0r0,200r-100,0r-300,500r300,500r100,0r0,200r-400,0r0,-200r100,0r-200,-333r-200,333r100,0r0,200r-400,0r0,-200r100,0r300,-500r-300,-500r-100,0","w":1200},"Y":{"d":"100,-1200r0,-200r400,0r0,200r-100,0r200,333r200,-333r-100,0r0,-200r400,0r0,200r-100,0r-300,500r0,500r100,0r0,200r-400,0r0,-200r100,0r0,-500r-300,-500r-100,0","w":1200},"Z":{"d":"100,-1100r0,-300r1000,0r0,200r-740,1000r540,0r0,-100r200,0r0,300r-1000,0r0,-200r740,-1000r-540,0r0,100r-200,0","w":1200},"a":{"d":"100,0r350,-1400r200,0r350,1400r-200,0r-100,-400r-300,0r-100,400r-200,0xm550,-1000r-100,400r200,0","w":1100},"b":{"d":"100,0r0,-1400r640,0r160,160r0,480r-60,60r60,60r0,480r-160,160r-640,0xm300,-800r400,0r0,-400r-400,0r0,400xm300,-200r400,0r0,-400r-400,0r0,400"},"d":{"d":"100,0r0,-1400r640,0r160,160r0,1080r-160,160r-640,0xm300,-200r400,0r0,-1000r-400,0r0,1000"},"e":{"d":"100,0r0,-1400r800,0r0,200r-600,0r0,400r400,0r0,200r-400,0r0,400r600,0r0,200r-800,0"},"f":{"d":"100,0r0,-1400r800,0r0,200r-600,0r0,400r400,0r0,200r-400,0r0,600r-200,0"},"h":{"d":"100,0r0,-1400r200,0r0,600r400,0r0,-600r200,0r0,1400r-200,0r0,-600r-400,0r0,600r-200,0"},"i":{"d":"100,0r0,-1400r200,0r0,1400r-200,0","w":400},"j":{"d":"300,-400r0,200r400,0r0,-1200r200,0r0,1240r-160,160r-480,0r-160,-160r0,-240r200,0"},"k":{"d":"100,0r0,-1400r200,0r0,552r552,-552r248,0r-560,560r560,840r-244,0r-456,-700r-100,100r0,600r-200,0","w":1200},"l":{"d":"100,0r0,-1400r200,0r0,1200r600,0r0,200r-800,0"},"m":{"d":"100,0r0,-1400r200,0r350,860r350,-860r200,0r0,1400r-200,0r0,-860r-350,860r-350,-860r0,860r-200,0","w":1300},"n":{"d":"100,0r0,-1400r200,0r500,960r0,-960r200,0r0,1400r-200,0r-500,-960r0,960r-200,0","w":1100},"p":{"d":"100,0r0,-1400r640,0r160,160r0,480r-160,160r-440,0r0,600r-200,0xm300,-800r400,0r0,-400r-400,0r0,400"},"r":{"d":"100,0r0,-1400r640,0r160,160r0,480r-60,60r60,60r0,640r-200,0r0,-600r-400,0r0,600r-200,0xm300,-800r400,0r0,-400r-400,0r0,400"},"t":{"d":"400,0r0,-1200r-300,0r0,-200r800,0r0,200r-300,0r0,1200r-200,0"},"u":{"d":"100,-1400r200,0r0,1200r400,0r0,-1200r200,0r0,1240r-160,160r-480,0r-160,-160r0,-1240"},"v":{"d":"100,-1400r200,0r250,1000r250,-1000r200,0r-350,1400r-200,0","w":1100},"w":{"d":"100,-1400r200,0r200,1000r200,-800r200,0r200,800r200,-1000r200,0r-300,1400r-200,0r-200,-800r-200,800r-200,0","w":1600},"x":{"d":"100,-1400r200,0r300,525r300,-525r200,0r-400,700r400,700r-200,0r-300,-525r-300,525r-200,0r400,-700","w":1200},"y":{"d":"100,-1400r200,0r300,525r300,-525r200,0r-400,700r0,700r-200,0r0,-700","w":1200},"z":{"d":"100,-1200r0,-200r800,0r0,200r-540,1000r540,0r0,200r-800,0r0,-200r540,-1000r-540,0"},"c":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,240r-200,0r0,-200r-400,0r0,1000r400,0r0,-200r200,0r0,240r-160,160r-480,0"},"g":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,240r-200,0r0,-200r-400,0r0,1000r400,0r0,-400r-200,0r0,-200r400,0r0,640r-160,160r-480,0"},"o":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,1080r-160,160r-480,0xm300,-200r400,0r0,-1000r-400,0r0,1000"},"q":{"d":"260,0r-160,-160r0,-1080r160,-160r480,0r160,160r0,1080r-160,160r-140,0r0,100r-200,0r0,-100r-140,0xm300,-200r100,0r0,-100r200,0r0,100r100,0r0,-1000r-400,0r0,1000"},"s":{"d":"100,-300r200,0r0,100r400,0r0,-400r-440,0r-160,-160r0,-480r160,-160r480,0r160,160r0,140r-200,0r0,-100r-400,0r0,400r440,0r160,160r0,480r-160,160r-480,0r-160,-160r0,-140"},"\u00a0":{"w":801}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Typeface ? <your company>. 2009. All Rights Reserved
 * 
 * Trademark:
 * BlackCasper? Trademark of <your company>.
 * 
 * Description:
 * BlackCasper is created with the Font Creator Program from High-Logic.com
 */
Cufon.registerFont({"w":1139,"face":{"font-family":"BlackCasper","font-weight":400,"font-stretch":"normal","units-per-em":"2048","panose-1":"2 0 0 0 0 0 0 0 0 0","ascent":"1638","descent":"-410","x-height":"50","cap-height":"114","bbox":"-634.119 -2392.63 3016.91 885","underline-thickness":"150","underline-position":"-142","unicode-range":"U+0020-U+F005"},"glyphs":{" ":{"w":1317},"\u00a0":{"w":1317},"!":{"d":"35,-1759v17,92,14,209,14,314v0,16,-9,36,0,48r0,130r-14,-434v-1,-20,-9,-43,0,-58xm180,-1663r9,0r-5,10xm175,-1634r24,5r-19,5xm160,-1629v-1,7,-4,12,-9,15xm353,-1552v102,17,220,13,304,49r-130,718v-14,60,-113,23,-174,29v-18,-90,-5,-219,-5,-323r0,-357v4,-36,6,-75,5,-116xm49,-963v4,43,6,87,5,135xm59,-601v8,21,0,41,-5,58xm262,-230v14,-103,-2,-230,24,-318r250,34v9,21,-1,44,-4,67v-8,71,-12,146,-29,208v-80,2,-165,20,-241,9xm59,-529v1,29,16,62,5,87r0,19","w":954},"\"":{"d":"95,-1729v83,8,180,2,248,24v64,-7,135,0,192,12v19,19,23,66,16,100v1,14,16,33,0,40v-12,53,-28,105,-28,168v0,81,-18,170,16,228v12,20,14,44,8,72v12,43,-12,109,0,152v-6,26,2,45,-4,72v4,8,4,16,0,24v7,25,0,44,-8,64v7,41,0,80,-4,120r-36,8v-102,-23,-218,-32,-308,-68r-4,8v-27,-6,-53,-8,-76,-20r0,-168v-5,-32,0,-64,0,-96v0,-71,1,-145,0,-212r-4,-268v1,-8,8,-20,0,-24xm227,-1385v25,12,52,1,88,4v6,-37,-2,-68,4,-104r-24,0v-5,-12,-7,-25,-8,-40r24,-20v6,-15,10,-33,12,-52r-20,-4v-19,9,-37,23,-56,40v-13,33,-21,73,-24,116v7,14,3,40,4,60xm455,-1597v-40,-2,-50,21,-72,44v-13,48,-24,97,-16,156v17,13,39,19,64,20v14,-15,22,-35,24,-60v-4,-21,-16,-40,-36,-56v7,-21,19,-41,36,-60v1,-15,7,-32,0,-44","w":641},"#":{},"$":{"d":"315,-1539v5,1,9,5,13,13r-19,12xm633,-1514v5,1,9,5,12,13xm721,-1501v8,1,15,6,20,13xm-8,-1488r12,0r-6,12xm525,-1450v5,1,9,5,12,13r-19,6xm-27,-1431r25,-13v-8,9,-19,16,-32,19r-6,-19xm112,-1431r19,25v-8,-6,-14,-14,-19,-25xm525,-1425v5,1,9,5,12,13xm17,-1412r19,6r-19,7r0,-13xm-72,-1387v-5,-1,-9,-5,-13,-12xm74,-1399v13,7,24,15,32,25v-13,-5,-24,-13,-32,-25xm334,-1399v8,4,14,10,19,19xm74,-1234v34,-11,53,-29,70,-57v8,4,4,12,0,19v23,-13,48,-24,76,-32v-8,-7,-12,-15,-13,-25v16,-6,31,-15,45,-26v7,12,18,21,31,26r-12,-39r12,26v10,-10,24,-4,38,0r-19,-32v20,7,41,12,64,13r38,-13r-13,6v0,6,-2,16,7,13v19,-7,42,-31,57,-6r57,-7v13,-8,22,-18,25,-31v20,9,41,15,64,19r127,-19v19,3,38,9,57,19r127,1028v-19,13,-39,29,-64,32r-508,70r-76,-19r-44,13r13,-13r-13,-19r-7,19v-9,-3,-18,-10,-25,-19v-24,-14,-57,-22,-70,-45v-15,-11,-27,-26,-38,-44v-3,9,-10,15,-19,19r6,-32r-25,13r-127,-997v5,1,10,6,13,13r38,-7r-19,26r26,51r37,-13r-18,25r37,32v7,17,18,34,32,51r-6,-45xm239,-1393v5,1,9,5,13,13xm321,-1387r13,0r-6,13xm80,-1349r26,13r12,-13r-19,26xm-59,-1317v0,-6,2,-14,-6,-12xm226,-1310r13,0v-1,-6,3,-16,-6,-13xm61,-1310v-5,-1,-9,-5,-13,-13xm-59,-1310r0,12r13,-6xm-53,-1291v1,5,6,9,13,12v-1,-5,-5,-9,-13,-12xm17,-1298v9,4,17,10,25,19xm575,-529v-21,-13,-51,-13,-76,-26v8,-40,22,-75,38,-108r-12,-38r-38,-25r-64,6v-22,28,-35,62,-38,102r51,82v26,17,58,32,95,45v37,0,67,17,89,51r6,44v19,-3,36,-13,51,-32r-6,-57r57,-19v25,-17,53,-37,76,-63v30,-33,46,-96,57,-153r-6,-63v-14,-28,-31,-56,-51,-83r-83,-57v-31,-6,-65,-17,-101,-32r-26,-222r32,-6r38,25r-12,63v9,33,32,55,69,64v31,-17,51,-45,58,-83v-11,-26,-31,-51,-58,-76v-30,-16,-66,-27,-107,-32v-17,-23,-39,-46,-64,-69v-12,29,-29,57,-51,82r-82,51r-51,89v2,36,-5,81,6,108r0,19r64,76v58,35,144,39,152,127r19,203xm-40,-1272r-19,12v11,-1,17,-5,19,-12xm-21,-1266r-13,25v10,7,20,17,32,7xm-46,-1234v-1,-6,-6,-10,-13,-13v1,4,6,8,13,13xm10,-1241v1,6,6,10,13,13v-1,-5,-5,-10,-13,-13xm-15,-1209v-1,-6,3,-16,-6,-13xm4,-1209v-1,-5,-5,-10,-12,-13v1,5,5,9,12,13xm17,-1215r-25,38r12,19r32,-32v-3,-9,-10,-17,-19,-25xm-40,-1209v-9,36,1,61,6,95v10,-4,19,-12,26,-25v-10,3,-20,9,-26,0v3,-9,10,-15,19,-19v-3,-18,-11,-35,-25,-51xm525,-1171v18,55,17,126,31,184r-6,19r-38,-12v-25,-26,-42,-60,-51,-102v13,-33,34,-63,64,-89xm-40,-1114v2,13,6,26,13,39v-1,-12,-5,-25,-13,-39xm639,-796v41,12,83,41,102,82r12,70r-25,64r-64,32xm48,-345v7,13,12,27,13,44xm137,-307v-6,7,-14,11,-25,13xm194,-301r7,13v0,-6,2,-16,-7,-13xm61,-263v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13","w":1214},"%":{"d":"1303,-1375v3,1,6,4,8,9xm1295,-1366r4,14v-4,-5,-11,-9,-4,-14xm1156,-1348v5,1,9,5,12,10xm1057,-1343v6,1,11,4,16,9v-5,-1,-11,-4,-16,-9xm1101,-1343v3,3,6,7,8,14v-4,-3,-7,-7,-8,-14xm1228,-1320v-3,-1,-6,-4,-8,-9xm958,-1325v3,1,6,4,8,10xm1160,-1320r16,9v-5,-1,-11,-4,-16,-9xm1042,-1315r8,0r-4,9xm1077,-1315r16,9v-6,-1,-11,-4,-16,-9xm851,-1306r8,23v-7,-4,-13,-6,-19,0xm1026,-1297v-3,-1,-6,-4,-8,-9xm958,-1297v8,5,13,12,16,23v-7,-5,-12,-12,-16,-23xm673,-1293r4,19r-8,0v2,-5,3,-11,4,-19xm883,-1288v3,1,6,4,8,9xm1050,-1288v3,1,5,4,7,9xm1287,-1283r8,0r-4,9xm1156,-1279r8,0r-4,9xm1026,-1274r20,0r-20,18r0,-18xm610,-1270r20,0v-5,5,-11,11,-16,19xm566,-1265r16,9v-6,-1,-11,-4,-16,-9xm824,-1265v3,3,6,7,8,14xm851,-1265r16,23v-7,-5,-13,-12,-16,-23xm958,-1265r4,14r-8,0xm1192,-1265v8,4,13,12,16,23xm1228,-1260r8,0r-4,9xm812,-1256v3,9,13,20,0,23r-12,-5v5,-3,9,-9,12,-18xm871,-1251v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1046,-1242v-3,-1,-6,-4,-8,-9xm1180,-1251r16,4v-8,4,-14,6,-16,-4xm531,-1247r4,14r-8,0xm598,-1247v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm1069,-1247v3,1,6,4,8,9xm844,-1233v-3,-1,-6,-4,-8,-9xm966,-1242r8,0r-4,9xm998,-1233v-3,-1,-6,-4,-8,-9xm582,-1228v-3,-1,-5,-4,-8,-10xm693,-1238v-1,8,-5,14,-12,19v5,-4,9,-10,12,-19xm875,-1238r16,5r-16,28v-2,-12,-6,-24,0,-33xm1200,-1238r20,5r-20,18v3,-8,5,-16,0,-23xm630,-1224v-3,-1,-6,-4,-8,-9xm919,-1233r39,5v-11,1,-35,11,-39,-5xm1057,-1233r20,5v-9,3,-19,6,-20,-5xm1224,-1233r20,5v-9,3,-19,6,-20,-5xm1129,-1228v6,1,13,4,20,9r-20,9v6,-4,2,-11,0,-18xm1216,-1224r16,9v-6,0,-11,-3,-16,-9xm812,-1215v3,13,6,26,-4,32r-8,-18v5,-2,9,-7,12,-14xm824,-1215r12,19v-6,-5,-10,-11,-12,-19xm1141,-1215r8,0r-4,10xm420,-1201v-4,0,-7,-3,-8,-9xm717,-1210r16,9v-6,-1,-11,-4,-16,-9xm1010,-1210v7,5,17,9,28,14v-10,0,-19,-5,-28,-14xm1069,-1210r20,9v-7,-1,-14,-4,-20,-9xm1188,-1210v3,1,6,4,8,9v-3,-1,-6,-4,-8,-9xm574,-1196r16,9r-20,9v2,-5,3,-11,4,-18xm717,-1196v12,3,19,9,20,18v-9,-3,-15,-9,-20,-18xm891,-1192v4,-7,13,-1,20,0v-5,5,-11,11,-16,19xm455,-1192v3,1,6,4,8,9v-3,0,-5,-3,-8,-9xm491,-1192v4,5,11,9,4,14xm606,-1192v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm776,-1192r12,9v-7,3,-12,8,-16,14xm927,-1192v3,1,5,4,8,9xm1069,-1192v7,5,13,12,16,23xm1255,-1183v-3,0,-5,-3,-7,-9xm653,-1187v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1283,-1187v7,3,13,9,16,18v-6,-4,-11,-10,-16,-18xm360,-1183r20,0r-16,14xm523,-1183r20,0v-8,7,-17,14,-28,19xm475,-1169v-3,-1,-5,-4,-8,-9xm931,-1178r27,5v-2,4,-3,10,-4,18xm0,-1173v3,0,6,3,8,9v-3,-1,-6,-4,-8,-9xm246,-1169v5,1,8,4,11,9v-5,0,-8,-3,-11,-9xm915,-1164v1,12,16,32,0,36r-12,-4xm475,-1160v0,10,-3,19,-8,28xm1129,-1160v5,1,11,4,16,10xm523,-1155v7,1,14,4,20,9xm1046,-1155r31,5v-1,9,-5,15,-12,18v-5,-10,-16,-10,-19,-23xm939,-1150r15,9v-5,-1,-10,-4,-15,-9xm653,-1146r20,5r-20,13r0,-18xm590,-339v1,-16,12,-27,12,-41r24,-5r-16,-23r12,-18r4,13v17,-27,42,-64,24,-105v8,-7,16,-16,23,-27r-20,-14r24,0v6,-20,10,-52,16,-74v-5,-5,-9,-11,-12,-18r12,9r16,-41v-9,-8,-20,-14,-32,-18v4,-7,9,-13,16,-19r-4,10v15,2,13,-13,20,-19v-3,0,-6,-3,-8,-9r8,5v9,-19,22,-33,28,-55r-12,-10v9,-14,19,-28,20,-50r-12,-5v25,-5,30,-30,35,-55r-8,-9v10,-11,17,-27,4,-41r20,-23v-1,-21,-16,-28,-20,-46r16,0r-8,9v9,-2,17,-6,24,-13r-8,-23v6,-5,13,-8,20,-9r12,-28v10,19,2,42,24,51v8,-8,21,-22,7,-33r12,-9v-5,-3,-10,-7,-15,-13v14,-14,32,-17,47,-28r8,18r-28,10r-4,36v13,-5,26,-8,40,-9v-9,7,-19,11,-32,14v-8,10,-18,19,-31,27v24,12,43,30,59,51r20,-5r0,9v22,-3,5,-33,4,-50r-16,23r4,-19v-11,-3,-21,-9,-32,-18v20,-12,51,-14,56,-41v-8,4,-18,14,-20,0v6,-18,7,-37,12,-55r19,32r8,-46v9,9,15,20,20,32v-3,12,-9,21,-8,37r4,0v-3,6,-8,12,-16,18r12,9v-18,14,-26,34,-27,65v13,1,16,11,19,22r-23,5v-1,12,-8,18,-20,18v-14,-17,-26,-37,-44,-50v-4,5,-11,9,-4,14v-12,-1,-27,-9,-35,0v-13,-1,-27,-11,-32,4v5,5,8,13,12,19r24,-10r7,42r-35,-19r-12,28r-12,-14r-16,23r8,14r-24,36v7,6,12,14,16,23r-16,10v1,4,4,7,8,9v-5,7,-7,16,-8,27v-6,9,-10,19,-11,32r27,5r-24,23r16,4r-16,28v-11,2,-21,7,-31,14r-4,41r-20,37v-1,12,-5,24,-12,36v-6,88,-43,142,-47,234r-16,18r8,14v-16,29,-24,71,-40,101v8,1,7,16,16,18v21,-5,35,-18,47,-32r28,18v14,-13,31,-22,48,-32v4,-46,29,-71,31,-119v6,-14,14,-26,24,-36r16,18v-6,-2,-13,-8,-16,0r4,23r-12,4r8,5v-20,19,-14,70,-39,87v-1,13,-5,25,-12,37v3,13,10,26,31,23v-7,10,-17,16,-31,18v3,-5,5,-10,0,-14r-4,14r-119,27r-24,-13v2,5,6,8,12,9v-17,-3,-26,-17,-28,-37v5,-20,18,-42,4,-59r24,-14r-12,-9v11,-12,15,-29,4,-46v10,9,14,-6,24,-9v-1,-5,-3,-8,-8,-9v2,-11,17,-24,8,-33v-11,3,-18,11,-24,19xm998,-1146r16,9v-6,-1,-11,-4,-16,-9xm1022,-1141v6,3,10,9,12,18xm792,-1137v-1,4,-3,7,-8,9xm986,-1132v6,1,11,4,16,9v-6,-1,-11,-4,-16,-9xm1160,-1132r16,9v-5,-1,-11,-4,-16,-9xm4,-1128v6,4,11,10,16,19v-6,-3,-11,-10,-16,-19xm253,-1128v11,3,19,10,24,19v-9,-4,-17,-10,-24,-19xm475,-1123v9,2,20,4,32,5v-13,7,-26,15,-44,18v3,-7,7,-15,12,-23xm788,-1114v-3,-1,-5,-4,-8,-9xm337,-1118v13,4,22,15,27,32v-15,4,-1,20,4,27r-8,23r16,5v-14,3,-32,15,-39,0r-8,13v2,-7,7,-13,16,-18r11,-32v-3,1,-6,4,-7,9r-16,-18r23,-18v-8,-6,-14,-14,-19,-23xm681,-1109v-3,-1,-5,-4,-8,-9xm792,-1118v3,0,6,3,8,9xm1160,-1118r28,4r-20,19xm119,-1109v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm590,-1109v5,6,12,11,20,14r-16,9xm1125,-1105r8,0r-4,10xm51,-1100v4,6,9,12,16,18v-7,-1,-12,-7,-16,-18xm226,-1100v3,1,5,4,8,9xm246,-1091v-3,-1,-6,-4,-8,-9xm721,-1100v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm1216,-1100r8,23r-20,-14xm166,-454v-35,11,-22,74,-4,92r-8,37r-138,-770v11,17,10,58,35,64r-11,18r47,243v-8,26,10,44,12,69r8,96v10,18,22,43,36,60v-6,2,-11,6,-16,13v7,28,4,60,23,78r4,-14xm428,-1095v5,0,11,3,16,9xm756,-1095v3,0,6,3,8,9v-3,-1,-5,-4,-8,-9xm1073,-1095v3,0,6,3,8,9xm1085,-1095v11,1,24,7,32,0v-12,4,-26,14,-32,0xm661,-1091v6,1,11,4,16,9xm895,-1086r12,4r-12,5r0,-9xm1053,-1086r16,9v-5,-1,-11,-4,-16,-9xm428,-1082v5,1,11,4,16,9xm507,-1077v3,1,6,4,8,9xm83,-1073r8,0r-4,10xm222,-1073v4,5,7,11,8,19xm1038,-1073v6,11,11,23,15,37r-27,-18v5,-4,9,-10,12,-19xm1216,-1073r16,10v-6,-1,-11,-4,-16,-10xm610,-1068v3,1,6,4,8,9xm1073,-1068v6,1,11,4,16,9xm1109,-1068v3,1,6,4,8,9v-3,-1,-6,-4,-8,-9xm202,-1063r4,18r-8,0xm1156,-1063r8,0r-4,9xm562,-1059v3,1,6,4,8,9xm681,-1059r16,19v-7,-3,-12,-9,-16,-19xm285,-1054r8,0r-4,9xm459,-1054v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1002,-1050r28,10v-9,0,-19,-3,-28,-10xm59,-1045r8,0r-4,9xm95,-1045r20,9v-7,-1,-14,-4,-20,-9xm214,-1045v10,2,21,8,28,0v-9,8,-20,14,-32,18v2,-4,3,-10,4,-18xm222,-1031v0,-4,2,-11,-4,-9xm400,-1045v6,1,11,4,16,9xm562,-1045r8,0r-4,9xm1188,-1045v3,1,6,4,8,9xm479,-1031v-3,-1,-5,-4,-8,-9xm764,-1040v7,0,14,3,20,9xm1263,-1040v5,1,9,4,12,9xm824,-1031r-20,32r16,-14r16,5v9,-12,-5,-16,-12,-23xm978,-1036v6,1,11,4,16,9v-6,-1,-11,-4,-16,-9xm1156,-1036r36,23v-20,-2,-33,4,-47,9r-24,-18v12,-1,24,-5,35,-14xm265,-1022v-3,-1,-5,-4,-8,-9xm570,-1022v-3,-1,-5,-4,-8,-9xm590,-1031r16,9v-6,0,-11,-3,-16,-9xm622,-1027v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm372,-1013v-3,-1,-5,-4,-8,-9xm515,-1022v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm562,-1018r-11,19v5,-5,9,-11,11,-19xm610,-1018v3,5,12,10,4,14xm1069,-1018v0,10,-4,18,-12,23v6,-5,10,-13,12,-23xm127,-1013r8,0r-4,9xm844,-1008r-4,18r11,0r4,-14xm1093,-1013v3,1,6,4,8,9v-3,-1,-6,-4,-8,-9xm1117,-1013r20,5r-20,18v3,-8,5,-16,0,-23xm364,-1008v11,7,26,7,36,13v17,-14,39,-4,40,19v-7,-3,-12,-9,-16,-19v-9,10,-19,18,-32,23r4,19v-20,2,-7,-24,-4,-32v-3,1,-9,8,-8,0r-12,9xm471,-1008r16,4v-8,4,-14,6,-16,-4xm689,-1008v3,0,6,3,8,9v-3,-1,-6,-4,-8,-9xm234,-1004v5,1,11,4,16,9xm749,-1004r23,9v-7,0,-15,-3,-23,-9xm1200,-1004v6,1,11,4,16,9xm491,-999v9,14,15,29,20,46v-4,6,-9,12,-16,18r-20,-28v7,-10,13,-22,16,-36xm1129,-999v11,2,6,13,4,23xm1271,-999v13,7,26,16,40,27v-18,-1,-31,-10,-40,-27xm515,-995v13,16,28,27,47,32v-5,14,-7,29,-8,46v-11,-7,-17,-19,-19,-36xm689,-995v3,1,6,4,8,10v-3,-1,-6,-4,-8,-10xm986,-995r44,19r8,41r-20,-37xm392,-417v-17,34,-77,1,-107,27v-10,-1,-21,-6,-32,-13r28,4v5,-7,9,-14,12,-23v-16,-14,-36,-24,-59,-32r-32,32v3,-20,17,-32,32,-41r-16,-23v-5,7,-12,13,-20,18v-1,-9,-3,-16,-8,-22v9,-6,17,-15,24,-28r-16,-5r0,10r-20,4r12,-41v-34,-31,-31,-113,-47,-165v8,-70,17,-133,47,-183v18,-14,40,-34,71,-37r-4,23r36,9v-3,-21,-5,-40,-16,-55r12,-9r24,9r28,-32r19,64r-35,37r20,27v-7,1,-14,4,-20,9r-8,-9v-3,6,-7,11,-12,14r-4,-18v10,-5,19,-32,0,-32v-11,1,-21,4,-32,9v-5,11,-9,25,-12,41v-8,-1,-14,-5,-19,-14v-10,9,-18,20,-24,32r-40,19r16,27v-9,3,-17,10,-24,19r32,32v-6,0,-11,3,-16,9v19,5,34,19,44,41v-10,7,-19,17,-28,28v15,-4,30,-6,44,0r-28,13r12,28v-9,4,-17,12,-24,23r28,-9v7,10,16,19,27,27v-7,7,-14,11,-23,14r-4,-28r-20,5v3,10,6,22,8,37v15,9,28,24,39,45v38,32,94,48,151,60v7,-8,13,-17,16,-28v8,14,25,19,43,23r16,-23v9,0,19,-3,28,-9r8,14r16,-23v-6,-6,-11,-14,-16,-23v20,17,42,4,63,-14v-3,-14,-8,-28,-16,-41r12,-9v6,11,14,21,24,32r8,-32v13,-12,22,-29,28,-50r4,23v6,-5,12,-11,19,-19v-15,45,-38,84,-63,119v-10,39,-36,30,-59,51v-14,12,-29,25,-44,41r-20,-9v-1,8,-7,18,0,23v-10,-7,-22,-11,-35,-14r-16,14r0,27v-5,-7,-13,-13,-24,-18r12,-14xm618,-981v-4,0,-7,-3,-8,-9xm1196,-990r12,5v-6,5,-10,3,-12,-5xm1236,-990r16,9v-6,-1,-11,-4,-16,-9xm313,-976v-4,0,-7,-3,-8,-9xm206,-981v3,1,6,4,8,9xm459,-981v5,1,9,4,12,9xm689,-981v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm1105,-981r16,14v-8,5,-17,10,-28,14xm1164,-981r28,9v-9,0,-18,-3,-28,-9xm796,-972r-4,23r12,0v-1,-8,-3,-16,-8,-23xm123,-972v7,1,14,4,20,9xm206,-958v2,-15,20,-5,32,-5v-9,3,-20,4,-32,5xm986,-967r8,18v-4,-4,-7,-10,-8,-18xm998,-967v3,1,6,4,8,9xm1339,-967v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm75,-963r16,5r-12,5xm119,-953v-3,-1,-6,-4,-8,-10xm127,-963r12,10v-5,-1,-9,-4,-12,-10xm253,-963r12,10v-5,-1,-9,-5,-12,-10xm448,-963v9,6,17,14,23,23v-13,-1,-20,-8,-23,-23xm325,-949r4,14r4,-14r-8,0xm709,-944v-3,-1,-6,-4,-8,-9xm998,-953v7,4,13,12,16,23xm1327,-953r8,0r-4,9xm570,-949v20,21,34,48,60,64v-28,6,-42,36,-56,60r4,27v-24,-15,-12,-52,-8,-82r20,-32v-6,1,-13,4,-20,9v-12,-12,-4,-29,0,-46xm737,-949r8,0r-4,9xm749,-949r15,9v-5,-1,-10,-4,-15,-9xm1220,-949r8,0r-4,9xm1244,-949v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm158,-944r16,4r-12,19xm341,-940r4,14r4,-14r-8,0xm630,-944v5,1,11,4,16,9xm1105,-944v6,3,10,9,12,18v-7,-4,-11,-10,-12,-18xm1149,-944r3,23r-27,-19v9,-1,21,2,24,-4xm206,-940v3,1,6,4,8,10v-3,-1,-6,-4,-8,-10xm887,-940v-2,12,-7,21,-16,28v4,-10,9,-19,16,-28xm982,-940v3,1,6,4,8,10xm1141,-926r8,0v0,-4,2,-11,-4,-9xm1180,-930v-3,-1,-5,-4,-8,-10xm325,-926r0,9v8,-3,8,-6,0,-9xm416,-930v2,11,6,23,12,36r-12,23v13,1,31,9,39,0v8,11,15,25,20,41r28,10r-16,22r20,-4v-3,13,-7,27,-12,41v7,14,13,29,16,46r-8,46r12,18v-13,11,-30,25,-32,46r-24,-18r-15,9r27,-23v4,-12,9,-24,16,-37v-7,-31,-7,-61,-20,-87v-6,5,-14,8,-23,9v20,-11,15,-39,0,-55r-20,5r20,-14r-32,-18r-24,9v-7,-4,-15,-7,-24,-9v-10,9,-22,17,-35,23v-6,13,-14,25,-24,36r8,-36r-16,-14r32,-9r71,-60v-5,-6,-9,-14,-12,-23r20,14xm911,-930r20,4r-4,32r12,5v-7,12,-26,13,-40,18v6,-18,4,-37,12,-59xm1125,-930r8,0r-4,9xm1279,-930r8,0r-4,9xm994,-926r8,18v-5,-4,-7,-10,-8,-18xm1160,-926r4,18r-8,0v3,-4,4,-10,4,-18xm242,-917v1,11,4,20,11,28v-1,-10,-4,-19,-11,-28xm459,-921r16,9r-27,4xm495,-921v6,8,10,17,12,27r16,-14r-8,33r-24,9xm820,-921v3,4,11,9,4,13v-3,-4,-11,-9,-4,-13xm143,-917v3,1,5,4,7,9xm218,-912v-8,-1,-5,10,-8,14r8,0r0,-14xm1089,-917v3,8,6,17,-4,19xm1097,-917v3,1,6,4,8,9xm1137,-917r15,9v-5,0,-10,-3,-15,-9xm202,-898v-1,-4,2,-12,-4,-10xm915,-894r8,0v0,-4,2,-11,-4,-9xm372,-903v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm657,-894v-3,-1,-5,-4,-7,-9xm661,-903v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1109,-903v3,1,6,4,8,9xm1133,-903v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm1303,-903r16,9v-6,-1,-11,-4,-16,-9xm222,-894v2,5,6,8,12,9v-3,-4,-7,-7,-12,-9xm875,-898r8,0r-4,9xm1220,-875v-24,5,-63,8,-48,-23v14,5,30,12,48,23xm1323,-898v3,0,5,3,8,9v-3,-1,-6,-4,-8,-9xm198,-889v3,8,8,14,16,18v-2,-8,-7,-14,-16,-18xm820,-894v5,3,7,7,8,14v-5,-3,-7,-7,-8,-14xm982,-889r4,36r-16,-9xm1097,-889r20,0r-20,18r0,-18xm804,-885v3,3,6,8,8,14v-4,-3,-7,-7,-8,-14xm871,-885r12,23r-16,5xm1006,-885v3,7,9,13,16,19r-32,0xm1323,-885v6,1,11,4,16,10xm273,-880r20,9r-24,5xm1228,-880v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm1109,-875r40,9v-3,6,-7,12,-12,18xm186,-866v1,7,5,13,12,18v-1,-7,-5,-13,-12,-18xm574,-866v3,4,7,7,12,9v-2,-5,-6,-8,-12,-9xm717,-871v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm1188,-866v5,1,9,4,12,9xm1212,-866v7,1,11,5,12,13v-6,6,-11,14,-16,23v7,13,11,27,12,42v-6,-12,-12,-26,-24,-32v4,-14,9,-29,16,-46xm269,-862r4,32v-6,-2,-13,-6,-16,0xm828,-862r-20,32v1,-13,7,-24,20,-32xm1081,-862r28,9r-24,5xm1252,-862v6,2,10,7,11,14xm91,-848v-3,0,-6,-3,-8,-9xm697,-857r4,18r-8,0v2,-4,3,-10,4,-18xm855,-857v3,1,6,4,8,9r-12,5xm966,-756v-32,17,-26,76,-55,96r-32,-5r-20,-32v4,-61,26,-101,32,-160v13,7,27,13,44,18v5,7,3,15,0,23r-36,-4r16,36r-28,28v-5,14,-7,29,-8,46v7,9,17,17,28,22v5,-11,11,-25,16,-41r28,-32xm531,-853v8,8,15,17,20,28xm1050,-853r15,10v-5,-1,-10,-4,-15,-10xm202,-834v0,-4,2,-11,-4,-9xm958,-848r16,0v-7,9,-16,15,-27,18v6,-5,10,-11,11,-18xm978,-848v9,3,18,7,28,14v-9,-3,-19,-7,-28,-14xm1271,-848v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1283,-848r8,0r-4,9xm352,-830v-1,-3,2,-10,-3,-9xm622,-843r24,45r0,60v6,-3,12,-8,15,0r-15,5v13,27,12,64,0,96r-16,-60v5,-37,7,-74,-20,-91v6,-18,10,-36,12,-55xm1180,-843v13,8,3,23,0,36r-20,-9xm1220,-843r24,0r-4,23v-9,-5,-15,-12,-20,-23xm1089,-839v8,2,15,7,20,14r-24,5xm1323,-834r16,9v-6,0,-11,-3,-16,-9xm693,-830r8,0r-4,10xm1014,-830r4,46r-16,5v-3,-15,-7,-28,-12,-37v9,0,17,-5,24,-14xm511,-825v11,7,20,16,28,27v-9,-7,-19,-16,-28,-27xm265,-816v5,12,13,21,24,28v-7,15,-17,26,-32,32v3,-8,5,-16,0,-23v-7,1,-14,4,-19,9v0,16,3,33,8,50r31,10v-2,5,-6,10,-12,13v-22,-9,-33,-43,-47,-64r12,-18v15,-7,26,-20,35,-37xm1303,-816v3,3,6,7,8,14v-4,-3,-7,-7,-8,-14xm737,-798v0,-4,2,-11,-4,-9xm352,-807r16,9v-5,0,-11,-3,-16,-9xm966,-807r16,0r-16,23r-15,-4v5,-4,10,-10,15,-19xm1204,-449v26,-25,31,-78,24,-124r8,-27r-20,-5r8,-23r-12,14v8,-15,-3,-28,-8,-41v-13,3,-24,18,-28,32r4,-37r24,-5r-24,-18r-24,9v6,-6,11,-14,16,-23v-22,5,-42,7,-55,-9v-16,31,-40,55,-64,78r4,-23r-19,-32r15,9r24,-55v-8,1,-16,4,-24,9v11,-12,23,-23,24,-45r-12,-5v7,-8,18,-2,28,0r12,-32r28,27r-16,-4r4,9v-15,7,-23,21,-24,41v14,-7,30,-13,48,-18v32,8,60,20,83,37v2,13,7,25,16,36v-4,7,-12,16,0,19r19,-19r-11,37v5,28,10,56,0,82v17,13,-7,49,3,69r-23,55xm1327,-802v2,10,14,24,0,27v-6,-8,-2,-17,0,-27xm891,-784v0,-4,2,-11,-4,-9xm903,-784v0,-4,2,-11,-4,-9xm582,-788v5,8,7,17,8,27v-8,-7,-21,-1,-32,0xm1240,-788v5,1,9,4,12,9r-16,9xm531,-784v4,5,11,9,4,14xm927,-784v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm1267,-784v7,7,15,17,24,28v-9,-6,-17,-15,-24,-28xm1335,-775r12,23r-12,19v1,-14,7,-31,0,-42xm1358,-765v-3,-1,-5,-4,-7,-10xm1362,-775v3,1,6,4,8,10v-3,-1,-5,-4,-8,-10xm313,-765v7,3,12,9,16,18r-24,18xm1014,-756r-12,4r4,-13xm1176,-765v5,3,9,7,12,13v-5,-2,-9,-6,-12,-13xm535,-756v12,12,4,26,-4,41xm368,-743v-3,0,-5,-3,-8,-9xm487,-738v0,-4,2,-11,-4,-9xm420,-747r12,9v-5,-1,-9,-4,-12,-9xm848,-747v-1,4,-4,7,-8,9xm1220,-747v0,9,-3,16,-8,23xm1358,-743v-3,10,-8,18,-15,23xm578,-738r12,28v-6,-7,-10,-16,-12,-28xm717,-729v1,4,3,7,8,9v-1,-3,-4,-6,-8,-9xm808,-733r16,13v-6,-2,-11,-6,-16,-13xm681,-715v-3,-1,-5,-4,-8,-9xm729,-720r0,19r12,-14xm408,-720r12,23v-6,-6,-10,-14,-12,-23xm701,-706r8,0v0,-4,2,-11,-4,-9xm966,-715r12,9r-16,5xm380,-710r16,9v-4,0,-10,-2,-8,4r-20,-4xm1180,-692v0,-4,2,-11,-4,-9xm321,-701v7,7,11,14,12,23v-4,6,-9,12,-16,18xm451,-701r16,23v-6,3,-11,7,-16,13r0,-36xm558,-692v-3,-1,-5,-4,-7,-9xm796,-701v3,3,6,7,8,13xm1370,-701v7,9,12,19,16,32v-5,11,-11,21,-20,32v-6,-5,-10,-11,-12,-18r16,-5v0,-12,10,-30,-4,-32xm594,-692r8,0r-4,9xm1184,-678r8,0v-1,-4,2,-12,-4,-10xm289,-688v4,3,7,8,8,14xm436,-688v0,9,-3,16,-8,23xm899,-674v0,-4,2,-11,-4,-9xm230,-683r8,0r-4,9xm800,-486v1,-13,10,-27,16,-37r-4,-32v-7,0,-11,-1,-12,-4v11,-8,25,-10,32,-23r-8,-28r24,-32v-12,-11,-4,-26,0,-41r19,5v-2,26,-8,48,-16,68r12,19v-8,2,-20,2,-23,9r15,14r4,-14v0,11,-20,20,-4,27v-8,22,-33,29,-39,55xm1145,-683v3,6,8,12,15,18v-7,-1,-12,-7,-15,-18xm392,-678r8,0r-4,9xm131,-674r4,23r-20,-4v6,-3,11,-10,16,-19xm190,-660v-5,-17,-12,-3,-16,5xm265,-674r8,19v-4,-5,-7,-11,-8,-19xm1081,-660v0,-4,2,-11,-4,-9xm368,-665v6,1,11,4,16,10xm412,-665v3,1,6,4,8,10v-3,-1,-6,-4,-8,-10xm253,-660v4,5,11,9,4,14v-3,-5,-10,-9,-4,-14xm329,-660v9,3,19,4,31,5r-15,13v-9,0,-15,-6,-16,-18xm733,-660r8,0r-4,9xm943,-660v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm923,-655v-7,49,2,91,16,128r-8,27v14,18,19,45,27,69v14,-1,30,-8,40,0r-24,32v16,19,32,37,52,51r8,-19r8,32r43,23r32,-4v0,-14,-21,-34,-4,-42v10,8,15,20,16,37r39,9r107,-23r16,-27r28,-5r47,-82r32,-87v5,20,4,44,-12,50r12,5v-1,14,-3,29,-8,46v-16,17,-18,35,-24,59v-9,3,-20,8,-31,14r-24,41v-25,14,-50,27,-83,32v-12,12,-31,18,-32,41r-12,-13r-12,18r-20,5v14,-4,5,-21,-3,-28v-13,0,-25,3,-36,9v-17,-16,-38,-20,-60,-32r-19,14r4,-14v-10,-1,-16,3,-24,5r8,-19v-9,0,-16,-4,-20,-13v-11,-7,-26,-29,-36,-9v7,9,11,18,12,27v-17,-9,-17,-34,-8,-50r-16,-14v0,-23,-12,-34,-23,-46v-5,-9,-11,-16,-20,-23v-5,-9,-11,-16,-20,-23r-20,14r8,-18r28,-10r-8,-18v6,6,10,5,12,-4v-14,-20,-7,-41,-12,-69v-5,0,-8,-2,-8,-5v4,-39,1,-77,32,-91xm1014,-655r12,4r-12,5r0,-9xm186,-646v5,9,11,17,20,23v-5,-10,-11,-18,-20,-23xm519,-651v8,4,13,12,16,23xm768,-651r20,18v0,-7,3,-11,8,-13r-4,23v-9,-6,-17,-15,-24,-28xm400,-646r8,27v-7,4,-11,9,-12,14r-36,14r-8,-23r36,-5xm594,-646r24,0v-6,11,-18,17,-28,27r-8,-14xm733,-646r12,18r-16,14xm1081,-646r20,13r-20,10r0,-23xm1129,-642r20,19v-9,-3,-15,-10,-20,-19xm238,-637v11,9,24,15,39,18r-12,23v-11,-11,-20,-25,-27,-41xm1390,-633r4,23v-11,-2,-6,-13,-4,-23xm1152,-628v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1053,-623r20,41r-16,14xm1335,-623r8,0r-4,9xm305,-619v-1,11,-5,21,-12,28xm1030,-619v5,1,9,4,12,9xm768,-614v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm321,-610v3,1,5,4,8,10xm432,-610v-1,4,-4,7,-8,10xm998,-610v5,5,11,11,16,19v-6,-3,-11,-10,-16,-19xm1077,-605v3,1,6,4,8,9xm519,-600v5,2,9,6,12,13v-6,-1,-10,-5,-12,-13xm1152,-600r16,22v-8,-3,-13,-11,-16,-22xm570,-591v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1065,-578v0,-4,2,-11,-4,-9xm1089,-587v5,-8,13,3,20,5r-16,9xm463,-587v0,7,-3,14,-8,19xm653,-587v3,1,6,4,8,9xm1006,-587r8,19r-12,9v-3,-13,-6,-19,4,-28xm1125,-587v3,1,5,4,8,9xm1196,-582v3,1,6,4,8,9v-3,-1,-6,-4,-8,-9xm135,-578v3,1,5,4,8,10xm396,-578r12,5r-12,5r0,-10xm539,-578v5,5,9,11,12,19xm432,-573v3,3,6,7,8,14v-5,-3,-7,-7,-8,-14xm1101,-573v7,3,11,6,12,9xm293,-568v3,0,6,3,8,9r-12,9xm1394,-568r8,13v-5,-2,-7,-6,-8,-13xm1244,-550v0,-4,2,-11,-4,-9xm1149,-559v5,1,10,4,15,9v-5,-1,-10,-4,-15,-9xm364,-555v5,1,9,5,12,10xm531,-555r4,19r-12,4xm1061,-550r12,18v-5,1,-11,4,-16,9v-5,-3,-9,-7,-11,-13xm1101,-550v3,1,6,4,8,9v-3,-1,-6,-4,-8,-9xm1137,-545r39,4v-17,8,-33,20,-55,23xm1196,-541v6,1,11,4,16,9xm1002,-536v4,6,7,14,8,23xm1354,-518v-2,-5,-6,-11,4,-9xm131,-523v3,1,5,4,8,10v-3,-1,-6,-4,-8,-10xm535,-518v7,1,14,4,19,9v-6,0,-12,-3,-19,-9xm626,-518r16,18v-7,-1,-13,-7,-16,-18xm1069,-518r24,9v-10,7,-22,11,-36,14xm840,-500r4,14r-8,0xm1085,-500v16,7,27,20,32,37v-12,-9,-23,-22,-32,-37xm1192,-500r4,32r-16,-22v6,0,10,-3,12,-10xm436,-486v6,-9,18,4,27,5v-6,7,-14,13,-23,18xm863,-490v3,7,9,13,16,18r-12,4xm1145,-490v5,0,10,3,15,9xm230,-481v1,4,3,7,8,9v-1,-4,-3,-7,-8,-9xm804,-481r16,4v-11,18,-22,41,-24,69r-16,14v5,-31,12,-57,24,-87xm915,-477r0,9v8,-3,8,-6,0,-9xm1354,-472v-3,-1,-5,-4,-7,-9xm186,-477v3,1,6,4,8,9xm1014,-477v5,1,9,4,12,9v-5,-1,-9,-4,-12,-9xm598,-472v3,1,6,4,8,9v-3,-1,-6,-4,-8,-9xm1315,-472v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm634,-468v3,1,5,4,8,10v-3,-1,-6,-4,-8,-10xm836,-463r15,23v-5,1,-9,4,-11,9xm848,-463v3,1,5,4,7,9v-3,-1,-5,-4,-7,-9xm1188,-463v9,3,8,10,4,18r-12,-9xm721,-458v6,7,11,16,16,27v-7,-7,-12,-16,-16,-27xm1141,-454v-1,7,-3,14,-8,19xm1188,-435v0,6,-3,10,-8,13xm269,-431v3,1,6,4,8,9v-3,0,-5,-3,-8,-9xm162,-426r16,9v-5,-1,-11,-4,-16,-9xm1085,-426v3,4,11,9,4,13v-3,-4,-11,-9,-4,-13xm891,-417r8,18r-20,0v5,-4,9,-10,12,-18xm1133,-417v2,11,6,23,12,37r-24,-5xm158,-413v7,1,14,4,20,10xm1220,-413v3,1,5,4,8,10v-3,-1,-6,-4,-8,-10xm420,-390v0,-4,2,-11,-4,-9xm717,-403r4,13r-8,0xm194,-394v3,1,6,4,8,9xm491,-394v-3,7,-8,11,-16,14xm440,-380v-3,-1,-6,-4,-8,-10xm1038,-390v3,1,5,4,8,10xm448,-385v5,5,9,11,11,18xm614,-380v2,4,6,7,12,9v-2,-5,-6,-8,-12,-9xm392,-371v-3,-1,-6,-4,-8,-9xm1374,-376v3,1,6,4,8,9v-3,0,-5,-3,-8,-9xm325,-371v5,1,11,4,16,9xm467,-371v3,6,10,2,16,0v-8,8,-21,30,-32,18v7,-3,12,-9,16,-18xm970,-353v0,-4,2,-11,-4,-9xm1188,-367v4,3,7,8,8,14v-4,-3,-7,-7,-8,-14xm1232,-358v-3,0,-6,-3,-8,-9xm408,-362r16,4r-16,5r0,-9xm432,-362v-1,9,-5,17,-12,23xm1386,-362r8,0r-4,9xm333,-348v-3,-1,-6,-4,-8,-10xm780,-344v0,-4,2,-11,-4,-9xm1236,-353v-7,8,-15,14,-24,18xm701,-339v-3,-1,-6,-4,-8,-9xm879,-348r16,18v-8,-2,-13,-8,-16,-18xm1382,-348r8,23r-20,-5v6,-4,10,-10,12,-18xm285,-344r20,0r-20,19v2,-7,6,-15,0,-19xm440,-344v7,9,12,20,15,32v-15,-1,-34,-10,-35,9v3,-9,9,-15,20,-18r-12,-14v5,0,9,-3,12,-9xm721,-344r8,14r-12,5xm768,-330v0,-4,2,-11,-4,-9xm804,-344r20,5v-5,7,-11,13,-20,18r12,-14xm947,-344v-1,11,-3,22,-8,32xm1141,-344v9,3,7,10,4,19xm1160,-344r8,19v-4,-5,-7,-12,-8,-19xm368,-339r20,9v-7,-1,-14,-4,-20,-9xm851,-339v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm598,-325v-3,-1,-6,-4,-8,-10xm1394,-335v3,1,6,4,8,10v-3,-1,-6,-4,-8,-10xm166,-330r20,9v-7,-1,-14,-4,-20,-9xm309,-330v3,1,6,4,8,9xm451,-316v-1,-3,2,-10,-3,-9xm792,-330r4,18r-8,0v2,-4,3,-10,4,-18xm1172,-330v3,1,6,4,8,9xm190,-325v3,0,6,3,8,9v-3,-1,-6,-4,-8,-9xm404,-321r8,0r-4,9xm598,-312v-3,0,-6,-3,-8,-9xm1358,-321v3,1,6,4,8,9xm166,-316v10,21,9,60,24,78r-12,9v13,25,10,67,28,87r-8,23r-40,-179xm420,-261v-17,3,-25,9,-32,23r-12,-19r12,-4r-24,-14r-12,9r-7,-18v8,-6,16,-15,23,-28v7,14,22,20,40,23xm851,-312r8,0r-4,9xm250,-307v5,1,10,4,15,9v-5,-1,-10,-4,-15,-9xm440,-307v2,10,7,21,-4,23xm309,-303r8,0r-4,10xm673,-303v4,3,7,8,8,14v-4,-3,-7,-7,-8,-14xm780,-303r16,5r-16,5r0,-10xm246,-289v-4,0,-7,-3,-8,-9xm701,-298v8,7,15,16,20,28v-7,-7,-14,-17,-20,-28xm899,-293v6,1,11,4,16,9xm491,-280v-3,0,-6,-3,-8,-9xm800,-289v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm947,-289r27,9v-9,-1,-18,-4,-27,-9xm246,-280v3,1,5,4,7,10xm424,-280v3,1,5,4,8,10xm1236,-280v3,1,5,4,8,10v-3,-1,-6,-4,-8,-10xm317,-275r20,18r-12,5xm598,-261v0,-4,2,-11,-4,-9xm1252,-275r3,18r-7,0xm1014,-270v9,1,19,4,28,9v-9,0,-19,-3,-28,-9xm246,-266v7,1,13,4,19,9xm281,-266v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm364,-257v3,1,6,4,8,9xm824,-257v-1,8,-5,14,-12,19xm1022,-257v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm1208,-248v-3,0,-6,-3,-8,-9xm1069,-252r8,0r-4,9xm364,-243v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm527,-243r8,0r-4,9xm990,-243r16,0v-5,4,-11,10,-16,18r0,-18xm895,-238v-1,7,-5,13,-12,18xm206,-225v-3,0,-6,-3,-8,-9xm305,-234r4,19r-8,0v2,-5,3,-11,4,-19xm341,-234r8,0r-4,9xm491,-234v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm796,-234r8,23r-20,-4v5,-4,9,-10,12,-19xm808,-234v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm951,-234v3,1,5,4,7,9xm1117,-234v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm1295,-234r16,9v-6,-1,-11,-4,-16,-9xm364,-229r8,0r-4,9xm503,-229r20,0r-4,32v-8,-8,-15,-17,-16,-32xm281,-225r16,10v-6,-1,-11,-4,-16,-10xm432,-225v3,1,5,4,8,10xm808,-220v-1,7,-4,13,-8,18xm836,-220v5,3,10,7,15,14v-5,-3,-10,-7,-15,-14xm337,-215r31,0v-10,4,-20,10,-31,18v1,-7,7,-15,0,-18xm388,-215r16,9v-6,-1,-11,-4,-16,-9xm855,-215r8,0r-4,9xm1164,-215v6,0,11,3,16,9xm1200,-215r28,4r-20,9xm253,-211r8,18r-19,0xm444,-206r7,18r-11,14xm784,-206r8,18v-4,-4,-7,-10,-8,-18xm820,-206r31,4v-5,2,-10,7,-15,14r-28,5xm962,-206r16,4v-8,4,-14,6,-16,-4xm566,-193v-3,0,-5,-3,-8,-9xm1184,-202v3,1,6,4,8,9v-3,0,-6,-3,-8,-9xm1053,-197v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm1244,-197v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm313,-193r8,0r-4,10xm325,-193v3,1,5,4,8,10v-3,-1,-6,-4,-8,-10xm337,-193r15,10v-5,-1,-10,-4,-15,-10xm475,-193v3,1,6,4,8,10xm503,-193r12,10v-5,-1,-9,-5,-12,-10xm962,-193r8,19r-12,4xm1121,-193v5,1,9,5,12,10xm238,-179v-3,-1,-6,-4,-8,-9xm416,-179v-3,-1,-6,-4,-8,-9xm325,-179r8,0r-4,9xm337,-179v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm1156,-170v-3,0,-5,-3,-7,-9xm218,-174v6,1,11,4,16,9xm867,-174r8,0r-4,9xm416,-170v3,1,5,4,8,10xm313,-165v6,2,10,7,12,14v-6,-3,-10,-7,-12,-14xm554,-160v3,0,6,3,8,9xm416,-156v3,1,5,4,8,9xm428,-156r8,0r-4,9xm828,-151v3,1,5,4,8,9v-3,-1,-6,-4,-8,-9xm844,-151r15,9v-5,-1,-10,-4,-15,-9xm226,-147v3,1,5,4,8,9xm661,-138v3,1,6,4,8,10v-3,-1,-5,-4,-8,-10xm729,-124v-3,-1,-6,-4,-8,-9xm329,-119v-3,-1,-6,-4,-8,-9xm764,-128v3,0,6,3,8,9xm356,-124v-1,9,-4,15,-11,19xm650,-124r3,19r-7,0v2,-5,3,-11,4,-19xm685,-124r16,9v-6,-1,-11,-4,-16,-9xm281,-115v3,1,6,4,8,10xm463,-115v6,2,13,8,16,0r-16,23r0,-23xm333,-110r8,0r-4,9xm198,-105v15,28,17,68,24,105v-16,-27,-20,-66,-24,-105xm250,-105r27,9v-9,0,-18,-3,-27,-9xm602,-101v6,1,11,4,16,9xm622,-101v3,1,5,4,8,9v-3,0,-6,-3,-8,-9xm309,-87r16,23r-20,-5xm614,-87r16,4r-16,5r0,-9xm776,-87v3,1,6,4,8,9v-3,-1,-5,-4,-8,-9xm495,-83v6,1,11,4,16,10xm657,-83r8,0r-4,10xm657,-69r8,0r-4,9xm669,-69r8,0r-4,9xm246,-64v6,1,12,4,19,9v-7,-1,-14,-4,-19,-9xm459,-50v3,4,11,9,4,13xm455,-32v3,1,6,4,8,9","w":1385},"&":{"d":"168,-1687v8,27,3,62,-5,87r-22,234v12,60,22,131,22,196v0,127,-50,218,-55,332r-11,240v-2,8,-8,17,0,22v-3,69,-22,141,-11,207v-9,11,-4,35,-5,54r-11,-49r16,-267v-1,-17,-9,-37,0,-49r55,-746v-3,-93,19,-171,27,-261xm473,-903v-18,-40,-35,-84,-38,-142r16,-76v14,-25,32,-52,55,-81r98,-39v41,6,81,14,114,28v20,21,40,47,60,76r5,109v-21,32,-32,67,-65,98v-36,34,-95,55,-147,76v19,38,46,69,71,109v32,50,76,110,109,163v6,9,15,16,27,22v28,-47,56,-91,71,-152v7,-31,24,-60,49,-88r38,11r-60,169v-17,34,-53,72,-71,114r93,131r-66,6v-17,-42,-43,-67,-81,-93r-88,49r-114,22v-35,-3,-74,-8,-114,-22v-28,-9,-54,-30,-82,-54v-21,-42,-51,-77,-60,-131v10,-19,5,-54,6,-82r43,-92r71,-66v32,-9,52,-31,60,-65xm593,-1186v-27,13,-52,33,-77,60v-11,32,-18,68,-21,109v9,39,25,92,49,125v80,-33,158,-72,179,-169v-1,-31,-12,-64,-32,-98v-30,-14,-63,-23,-98,-27xm1012,-990v4,1,8,4,11,11xm495,-827r-104,87r-27,66v-3,25,-5,54,-5,87r27,65r49,44r71,27v25,3,54,5,87,5r70,-21r55,-39r-22,-59r-43,-49v-47,-75,-90,-156,-158,-213xm1094,-369r5,21r-11,6","w":1339},"'":{"d":"137,-2207v71,2,57,104,64,168r55,516v-1,27,4,60,-5,79r15,10v8,29,13,63,19,99r50,293v-72,25,-142,48,-228,64v-5,-11,-10,-25,-15,-40r-138,-431r-199,-649r5,-15r5,15v101,-62,252,-63,372,-109xm176,-1820v-16,7,-31,19,-44,34v-12,55,-17,115,-35,164r0,15r74,-20r15,-179xm-2,-1350v1,5,5,8,10,10v-1,-3,-5,-7,-10,-10xm33,-1251v0,-5,2,-11,-5,-9xm77,-1122r-5,15r10,0","w":544},"(":{"w":682},")":{"w":682},"*":{"w":797},"+":{"w":1196},",":{"d":"437,-897v16,7,37,1,56,0v25,30,17,96,12,144v12,19,-7,56,4,76v-7,45,3,93,-4,132v9,24,2,65,4,96v-7,8,0,21,0,32r4,180r-4,12r4,168r4,0v-4,58,-1,142,4,204r-4,8r8,248r4,24r-24,8r-360,40v-15,-10,-23,-25,-24,-44r-16,-272v8,-18,-3,-43,-4,-64r-12,-288r-4,0v2,-31,7,-64,-4,-88v13,-7,7,-27,0,-40r8,-12v-18,-45,-16,-113,-16,-172v0,-44,-3,-102,0,-156r-4,0r4,-12r-8,-176v2,-13,9,-25,20,-36r352,-8r0,-4xm81,-381v1,7,3,14,8,20v-1,-7,-3,-14,-8,-20xm81,-349r8,0v0,-4,2,-10,-4,-8xm309,-293r-72,12v-13,-8,-32,3,-48,4v2,19,6,39,0,56v7,20,5,50,12,72v-8,6,3,17,8,20r-12,4v6,19,10,41,28,48v15,-3,30,-12,44,-4r8,44r-24,64r-32,24v-5,28,-6,71,12,88v62,-10,94,-49,124,-92v4,-41,21,-82,12,-124v10,-17,-13,-36,4,-48v-1,-15,-12,-32,-4,-44v-3,-9,-12,-19,-4,-28v-7,-28,-9,-57,-4,-88v-15,-5,-39,-12,-52,0r0,-8xm221,-257v3,1,6,3,8,8xm313,-253v3,1,6,3,8,8v-3,-1,-6,-3,-8,-8xm197,-221r8,0v-3,8,-5,8,-8,0xm249,71v3,0,6,3,8,8xm265,123v2,-9,8,-8,16,-4","w":679},"-":{"w":682},"\u00ad":{"w":682},".":{"d":"196,-1144v10,18,7,44,0,64r-16,152r-56,368r-64,360v-7,42,-23,92,-32,136v-4,19,-11,41,-20,64r-8,-28v89,-291,114,-649,172,-972v8,-47,10,-102,24,-144xm224,-1140v5,2,11,6,16,12v-6,-2,-11,-6,-16,-12xm256,-1132v10,3,21,7,32,12v-11,-2,-21,-6,-32,-12xm304,-1120v7,1,13,3,20,8xm340,-1116v11,3,22,9,32,16v-11,-2,-21,-7,-32,-16xm376,-1108v19,2,40,11,64,16v62,13,129,9,176,36r-12,8v-74,-27,-156,-27,-228,-60xm228,-292r60,8v27,17,51,37,72,60r16,48v-1,83,-44,139,-116,148v-62,8,-105,-30,-132,-68v-10,-32,-14,-68,-8,-108r28,-40v23,-20,49,-36,80,-48","w":684},"\/":{"w":569},"0":{"d":"552,-1699v46,-9,92,-17,150,-14r7,27r34,341r-7,95r20,150r7,546v2,28,12,60,0,82v5,50,9,101,0,149v14,36,4,97,7,144r-123,-41v-32,61,-47,139,-68,211v-3,9,-10,15,-20,20v-40,-42,-90,-74,-136,-109v-15,-11,-34,-19,-55,-27r-109,177r-14,27r-34,-20v-4,-11,-11,-20,-20,-28r-14,21r7,273v-9,-19,-20,-39,-20,-62r-21,-981r-7,-20r-61,-886v8,-24,26,-39,55,-41v141,-12,268,-36,422,-34xm375,-1556v-27,7,-54,16,-82,27r-61,41r-41,61r-48,164r-7,95v21,154,12,331,82,437r27,74r96,110v22,13,47,24,75,34r95,6r75,-27r55,-48r40,-61r28,-75r20,-191v-2,-19,-12,-41,0,-54v-4,-8,-10,-16,0,-21r-48,-266v-24,-78,-60,-147,-102,-211r-47,-48r-69,-34xm375,-1372v27,5,55,17,82,34r34,82r47,286r0,211v-13,24,-28,47,-47,68v-25,-5,-50,-14,-75,-27r-34,-82r-55,-395r7,-102","w":817},"1":{"d":"77,-1664v8,3,14,9,18,18r-119,1412v-8,31,-12,68,-12,109v-7,31,-5,68,-12,108r-18,102r-19,-13xm534,-1472v105,15,222,11,313,42r-114,1100r18,72r54,36r150,19r12,18r-12,138v-9,21,-27,33,-54,36r-866,-90r-12,-18r12,-139v5,-20,19,-32,42,-36r157,12v19,-8,37,-20,54,-36v11,-15,21,-33,30,-54r72,-715v-63,-25,-147,-25,-223,-36r-30,-12v13,-66,11,-128,36,-186v83,10,171,3,235,-18v51,-36,95,-78,126,-133","w":1134},"2":{"d":"206,-1523v165,20,289,84,451,108v43,18,91,31,146,38v63,28,138,44,209,64r32,31r-19,13v-11,51,-26,98,-45,140v-19,144,-83,254,-108,393v1,5,6,9,13,13r-6,13r-19,6r-76,292v-9,22,-15,47,-20,76v-18,40,-31,84,-38,134v-18,39,-31,83,-38,133r-38,89r-774,-210r-76,-95r-32,57r-13,-19v16,-130,57,-235,83,-355r25,-64r197,-635v28,-34,43,-76,70,-114xm1164,-1275v29,7,56,19,83,38r-25,-19v-20,-3,-39,-10,-58,-19xm422,-1244v-30,9,-62,21,-96,38r-57,64r-12,44v38,18,83,35,133,39v21,-21,47,-38,76,-51v27,8,55,21,83,38r12,63r-19,32v-116,91,-288,130,-406,222r-19,102v9,24,28,43,57,51r387,108r26,-96v-72,-50,-176,-71,-267,-101v60,-54,158,-73,229,-121r76,-51r51,-69r25,-102r-25,-95r-58,-64r-88,-38xm1222,-1225r12,51r-12,13v1,-13,11,-31,0,-38r0,-26xm1184,-1186r12,0r-6,12xm1088,-1142r13,19v-6,-4,-10,-10,-13,-19xm1203,-1142r19,19r-13,44r-19,-44xm1164,-1129r13,0r-6,12xm1184,-1053r25,6r-19,26v13,51,-11,88,-19,133r-26,19r0,-38v15,-21,30,-43,39,-70v-1,-5,-6,-10,-13,-13r13,-31r-13,12xm1164,-869r7,19r-13,0xm1139,-831r-19,19r6,-32xm968,-729r25,12v-9,-1,-18,-5,-25,-12xm1082,-666r44,0r-19,83r-38,-19v7,-21,12,-42,13,-64xm1057,-621v-5,-1,-10,-5,-13,-13xm949,-628r25,7r-25,6r0,-13xm834,-291r19,25r-25,13r-6,-32v6,0,14,2,12,-6xm904,-50r51,7r-13,50v-24,-10,-37,-29,-38,-57","w":904},"3":{"d":"-405,-1576r1110,21v30,2,63,14,86,0r158,15v27,130,18,303,29,451v-32,63,-96,94,-115,172r0,36r115,7r7,122v-6,22,-16,46,-29,72v-30,32,-56,68,-79,107r-21,72v4,29,-12,71,14,79r93,0v14,21,24,45,29,71r0,101v-25,7,-53,13,-86,14r-738,22v-27,2,-57,12,-79,0r-443,14v-13,-20,-22,-42,-29,-65xm462,-1074r-100,21r-72,50r-43,72r7,43r143,7r22,-7v10,-28,31,-47,64,-57v26,7,50,18,72,35v-3,29,-10,57,-22,86v-30,7,-51,26,-64,58r7,64v51,5,72,33,100,65v-5,29,-17,57,-35,86r-79,7v-34,-17,-47,-52,-65,-86v-34,-1,-73,-13,-100,0r-64,7v12,80,40,142,100,179v49,30,124,33,200,36v69,-13,127,-24,180,-57r57,-65r14,-100v-9,-25,-21,-51,-36,-79r-71,-43v15,-18,34,-37,57,-57v10,-28,17,-59,22,-93v-5,-29,-15,-57,-29,-86v-19,-19,-40,-39,-65,-58v-60,-16,-126,-26,-200,-28","w":1124},"4":{"d":"788,-2237v118,1,209,-7,309,24r23,154r24,1177r12,107r-24,36r36,451v-31,30,-75,46,-131,48v-29,-28,-44,-64,-47,-107v-45,-4,-81,-28,-107,-71v7,-41,34,-65,83,-72r12,-154r-107,-72r-12,-499r-333,-12v-60,59,-118,103,-178,167r-166,178v-41,31,-102,50,-155,71r0,-35r-94,35v76,62,99,178,142,274v28,29,62,56,107,59r166,12r155,-12v29,28,44,64,47,107v-41,10,-85,26,-131,48r0,130r-665,48v-29,-82,-53,-188,-59,-285r-48,-773r-12,0r12,-36r-12,-843r131,-48r226,-36v14,10,33,16,59,12r309,-47r24,12v32,-4,58,-13,95,-12r0,-12r12,12xm526,-965r12,238v-12,16,-28,28,-47,35r-119,-24v12,-105,101,-177,154,-249xm-91,-894r12,36r0,-36r-12,0","w":1329},"5":{"d":"0,-2238v23,32,35,71,36,118r37,1984v16,33,7,90,9,136r-9,-36r-73,-1541v14,-158,8,-336,9,-507v-4,-13,-14,-29,0,-36xm453,-1232r245,0v-9,33,-24,66,-45,99v-64,-1,-127,-1,-181,9r-28,73v68,25,118,56,173,100v27,36,48,81,63,136v-7,45,-22,93,-45,145r-118,72r-136,9r-27,-18v-11,-23,-18,-50,-19,-82v43,6,79,40,109,64r82,-18v25,-35,43,-74,54,-118v-9,-45,-30,-88,-63,-127v-39,-21,-81,-39,-127,-54r-18,-27r36,-118v9,-43,24,-91,45,-145xm771,-199v15,9,27,24,36,45r-36,9v-1,-19,-17,-44,0,-54xm335,-190r19,36r-9,18r-37,-18xm472,-190v14,9,23,24,27,45v-15,-9,-24,-24,-27,-45xm617,-190v17,11,26,26,27,45v-14,-10,-23,-25,-27,-45xm172,-181v15,9,24,24,27,45v-15,-12,-24,-27,-27,-45","w":1129},"6":{"d":"20,-1727r304,7r0,-7r22,7r645,0r7,22r0,615v-1,32,-13,69,0,94v-3,38,7,89,-7,116v11,21,2,48,0,73v-4,55,8,123,-7,166r-15,246v13,33,-3,68,-7,102v-12,103,-2,223,-29,311v-28,-32,-59,-61,-80,-101r-43,21v-58,48,-107,106,-174,145r-87,-239v-89,20,-159,71,-232,109r-14,-22r-22,-232r-29,-14r-239,51r36,-268v-20,-2,-43,-12,-57,0r0,311v-13,29,0,66,0,101v0,110,-14,223,0,326r-8,22r-21,-22r0,-65r-8,0r8,-22r0,-289v-7,-50,-12,-118,0,-167r-8,-14r0,-181v11,-103,8,-220,8,-333r7,-22r22,-623v5,-34,-1,-73,7,-115xm759,-1539v-83,1,-158,-9,-203,36r-166,442v-10,71,-22,132,-22,217v0,108,24,210,58,290r58,65r72,43r109,15r101,-15r73,-43r65,-65r36,-80r22,-101v7,-129,-16,-217,-51,-311r-51,-66r-72,-50v-34,-1,-74,-14,-101,0v-25,13,-53,26,-80,43r22,-87r108,-253v11,-23,18,-50,22,-80xm629,-974v37,1,68,18,94,51r29,101v-5,43,0,96,-15,130v-12,28,-30,54,-50,80v-34,-5,-63,-22,-87,-51r-37,-101v1,-35,6,-76,15,-123v13,-28,30,-57,51,-87","w":1239},"7":{"d":"1003,-1773v34,18,43,70,44,123v-12,8,-27,12,-49,10v26,27,53,61,54,108r10,370r5,44r-5,709v-10,54,1,128,-10,182v11,48,-1,113,0,168v-6,12,-7,29,-10,44r-753,-30v-122,-10,-261,2,-389,0r-10,-14r-10,-360v12,-24,-7,-63,5,-88r-10,-655v-1,-25,-9,-53,0,-74r-5,-276v-5,-10,-5,-20,0,-30v-9,-48,-4,-111,-5,-167v23,-9,51,-14,84,-15r414,-19v30,-11,80,-2,118,-5r0,-5v29,0,65,-10,88,0r434,-15r0,-5xm303,-1512r-29,59v-53,60,-93,134,-138,202r-10,10r15,20v28,-12,44,-37,69,-50r128,-69r355,45v19,1,37,6,54,14r-256,257r-148,196v-39,75,-81,143,-113,227v-30,79,-67,161,-84,256r39,10v66,-21,143,-25,192,-64r84,-345r182,-330r237,-276r44,-39r10,-44xm1367,-906r25,24v-10,-5,-18,-13,-25,-24","w":1074},"8":{"d":"134,-1580r406,16r24,7r586,16r47,8r0,524v-12,6,-4,19,0,31r-16,602v-3,39,-21,67,-54,86r-430,-8r-24,-8r-586,-15r-47,-16r0,-250r16,-297v0,-41,12,-87,15,-141r16,-289v22,-86,3,-184,47,-266xm384,-1166v-48,9,-100,24,-156,47v-31,27,-58,64,-79,110r-7,54v9,28,22,57,39,86r62,55r-47,31v-30,33,-53,75,-70,126v6,43,22,90,47,140v35,23,77,44,125,63r188,8v47,-7,96,-20,148,-39v35,-25,66,-59,94,-102r8,-78v-5,-25,-13,-51,-24,-78r-93,-86v33,-25,61,-59,85,-102r8,-55r-39,-94v-33,-27,-72,-51,-117,-70v-50,-9,-107,-14,-172,-16xm407,-1041v38,6,72,27,102,63v-3,40,-24,74,-62,102v-44,-3,-78,-24,-102,-63v5,-39,25,-73,62,-102xm407,-759v49,4,88,30,118,78v-7,48,-33,85,-78,110v-47,-5,-83,-29,-110,-71v7,-45,30,-84,70,-117","w":1034},"9":{"d":"5,-1623v5,28,9,61,11,98r38,577v-3,6,-7,13,0,17r0,38r6,0v-2,74,10,140,11,218r11,49r-6,54v18,55,19,131,33,191v35,0,63,17,65,54r6,109v-21,13,-35,33,-44,60r11,158r-54,-419r-11,-38r-33,-376r-5,-17r-28,-528r-5,-16r-11,-213xm621,-1541r207,5v33,13,73,18,109,27r147,82r60,55r92,136r60,174r11,278v-8,86,-36,152,-54,228v-25,54,-46,110,-88,148r-119,108r-153,77r-196,32v-155,9,-277,-23,-376,-81r-54,-60v-13,-25,-24,-54,-33,-87v0,-38,-4,-78,11,-104r44,-71v23,-11,50,-22,81,-32v37,0,79,-12,109,0r82,32v16,21,30,45,43,71r6,60r-16,38v-15,16,-30,34,-44,55v27,11,58,18,93,21r98,-16r76,-38r54,-60v34,-47,38,-140,66,-196v-3,-24,-16,-49,-6,-71r-5,-76r-17,-11v-44,33,-93,59,-147,82v-101,7,-211,34,-310,11v-54,-12,-116,-41,-163,-66r-60,-60v-33,-45,-71,-86,-77,-152r-10,-104r10,-103r33,-82r44,-71r60,-54r147,-82v56,-20,117,-45,185,-43xm659,-1367r-65,38v-15,19,-29,40,-44,65r-16,82v1,104,16,184,65,245r65,38v31,0,69,11,93,0v21,-10,43,-19,65,-32r44,-60r16,-87r-22,-186v-11,-19,-25,-38,-43,-59r-60,-44r-98,0","w":1414},":":{"d":"31,-1452v112,47,233,85,332,144r-250,-106xm100,-1371v11,9,17,21,19,38v-11,-8,-17,-21,-19,-38xm369,-1308r56,25v-17,-6,-36,-14,-56,-25xm81,-1271r25,13r-12,25r-25,-13xm44,-1164v14,4,24,14,31,31v-13,-6,-24,-16,-31,-31xm31,-1070v11,6,19,16,25,31v-13,1,-30,11,-37,0xm388,-1039v36,1,67,16,94,44v12,21,-3,45,-7,68r-31,19v-21,2,-45,10,-62,0r-25,-37r-7,-57v12,-9,25,-22,38,-37xm0,-964v13,4,23,12,31,25r-31,6v-4,-11,-8,-22,0,-31xm-24,-864v13,4,23,12,30,25r-30,6v-5,-11,-9,-22,0,-31xm-43,-764v10,8,16,20,19,37v-11,-9,-17,-21,-19,-37xm-68,-658v11,6,20,17,25,32v-13,-6,-22,-17,-25,-32xm294,-583v32,7,59,26,81,57v-5,33,-23,60,-56,81v-31,-8,-58,-27,-81,-56v9,-31,27,-59,56,-82xm-93,-558v11,3,21,9,31,19v-12,6,-25,18,-37,6xm-118,-458v13,5,23,13,31,25r-31,7v-2,-11,-10,-26,0,-32xm-143,-358v13,5,23,13,31,25r-25,13v-6,-13,-18,-25,-6,-38","w":1054},";":{"w":569},"\u037e":{"w":569},"<":{"w":1196},"=":{"w":1196},">":{"w":1196},"?":{"d":"1063,-2077v10,11,14,25,16,44r108,980v-11,21,11,51,0,72r80,1012v-53,16,-123,6,-180,12r-12,-4r-956,36v-17,-19,-26,-52,-28,-84r-84,-1184v-12,-43,-4,-104,-16,-148r-8,-152r-4,0r-12,-136r4,-12r-36,-388v52,-19,127,-15,192,-20v11,6,26,0,40,0xm607,-1657v-73,-9,-137,8,-204,16v-76,29,-150,60,-204,112v-38,37,-72,91,-104,136v-17,60,-40,115,-44,188v-7,13,-1,32,0,48v51,-2,112,5,156,-4r148,0r16,-84r28,-52v43,-53,141,-94,228,-56r44,36r28,52v16,106,-37,163,-88,220r-148,168v-44,58,-36,161,-36,264v0,6,3,11,8,16r268,-24r20,-4v-2,-39,-15,-83,0,-116r24,-52r152,-168r60,-96r36,-120v-5,-75,0,-158,-24,-216v-30,-73,-64,-150,-132,-184r-104,-52xm115,-1333v3,1,6,3,8,8xm615,-97v101,-19,171,-83,172,-208r-20,-76v-31,-54,-85,-104,-172,-108v-23,4,-49,11,-76,20v-17,10,-38,23,-56,44v-41,47,-61,149,-24,220v9,18,23,36,40,56r56,36v23,9,50,14,80,16","w":1204},"@":{"w":2079},"A":{"d":"1241,-1834v34,15,72,27,124,24r12,148r-8,12r-48,4v-21,25,-7,76,-8,116r4,0r-4,12r12,132v-2,28,30,31,56,24r12,4r12,44r124,1024r-16,-16r-88,-180v-41,-64,-78,-140,-112,-208r-216,-428v-23,-43,-43,-100,-72,-140v-33,-90,-78,-172,-120,-256v-12,-23,-27,-45,-36,-72v-7,-7,-17,-13,-28,-16v-81,8,-171,4,-244,20r-16,36r-328,1012v-63,150,-101,326,-164,476r0,20v19,-6,51,0,68,-8r4,4v66,-6,126,-18,200,-16v30,-7,57,-7,84,-20r84,-292v6,-11,15,-20,28,-28r444,-36r96,4v17,37,27,78,52,108v21,69,50,128,84,184v23,4,45,11,68,4v19,10,47,-2,68,-4r176,-12r8,12r24,136r-24,28r24,8r-1632,0r0,-1764r8,-48v14,-16,38,-33,68,-24v29,1,63,13,88,4v12,7,29,1,44,0xm933,-1790r-12,12v21,7,43,-1,64,-4xm693,-1762v-39,-25,-95,-11,-144,-4v20,9,37,26,64,16v33,2,58,-4,80,-12xm29,-1762v-7,16,-1,37,0,56v30,9,61,-5,92,-8v8,-12,13,-25,16,-40xm745,-1158v48,54,64,141,108,200r96,212r8,36r-284,24v-21,-2,-51,6,-60,-8xm1497,18v10,2,21,6,28,0r-28,0xm1673,22v-17,11,-48,8,-76,8v21,-5,49,-4,76,-4r0,-4","w":1490},"B":{"d":"1157,-2100r62,5r297,2135v-9,11,-21,21,-38,29r-1298,234v-15,-6,-28,-15,-39,-28r-320,-2112v3,-15,9,-31,19,-48r1269,-201xm299,21v10,-6,19,-13,24,-24v2,-40,-17,-75,-28,-105v1,-21,4,-44,9,-67r43,-43r120,-53r144,-24r311,34r302,-206r120,-53v18,-11,28,-29,29,-52v-21,-121,-29,-255,-63,-364v-40,-70,-121,-107,-234,-106r-20,-14v31,-46,60,-85,91,-134v33,-51,63,-107,68,-187r-15,-72r-29,-57r-43,-39r-62,-24r-81,0r-130,48r-105,63r-91,81v-34,51,-51,118,-58,196r58,455v5,83,-13,153,-43,211v-29,55,-65,107,-106,153r-52,34v30,-107,102,-193,86,-335r-34,-307v-18,-66,-18,-151,-24,-230r10,-76r24,-63v36,-50,69,-103,115,-143v-62,13,-119,31,-192,33v-49,-14,-113,-11,-168,-19r-76,10r-58,24r-48,38v-25,31,-43,68,-57,110r0,19v28,-24,59,-47,101,-53v56,-9,98,10,148,20r77,-5r62,-29v2,43,-31,69,-48,96v-43,69,-71,152,-72,263r5,0v-17,39,-70,44,-105,67v-16,11,-35,21,-53,34r-34,52r-9,48v31,-6,54,-19,81,-28r77,-5v21,5,43,13,67,24r38,43r10,77r-101,71v-20,27,-33,67,-33,115r14,5v26,-25,60,-51,110,-53v17,17,39,35,43,67r-28,115v-56,88,-126,161,-149,283v2,21,7,43,15,66xm860,-1463v25,7,52,18,81,33r63,53r43,72v7,31,14,64,14,100v0,92,-65,166,-124,216v-8,7,-21,11,-34,14r-29,-158v-3,-9,-10,-17,-19,-24v-2,18,-9,39,0,53r43,302r29,196r14,120v-10,24,-50,9,-76,9v-91,0,-168,24,-245,43r-14,-4r14,-24v42,-25,84,-70,120,-106v34,-34,62,-97,62,-167r0,-115r-62,-446v9,-53,22,-86,53,-124xm1128,-860v-27,33,-77,47,-134,53v-11,-9,-38,-4,-57,-5v-13,-23,-21,-48,-24,-77v6,-51,53,-85,86,-114v25,3,52,11,81,23v26,27,43,70,48,120xm1095,-812v50,4,51,73,57,125r-5,14v-48,11,-116,17,-167,29v-45,-11,-47,-73,-53,-125r5,-9v52,-20,110,-10,163,-34xm1042,-644v34,1,73,-3,101,4v17,33,30,76,33,125r-5,14r-86,58r-91,-15v-32,-31,-35,-93,-43,-148v24,-19,61,-25,91,-38","w":1431},"C":{"d":"286,-124v-12,-9,-13,-32,-13,-49v-16,-41,-11,-93,-34,-131v-16,-2,-32,-6,-47,-13v-22,-23,-32,-57,-45,-89r-20,-475r8,-14r14,-344r-101,-677v-1,-19,-5,-41,6,-52r56,-16r784,-81v41,-9,82,-10,129,-15v17,3,34,11,46,22r42,-2r-13,9v11,12,20,26,25,44r-29,-6v11,16,31,13,32,35v-4,10,-11,19,-21,28v15,18,9,45,23,68r-19,8v19,43,28,96,31,156r-20,13r19,-4v10,12,-2,28,-5,43r21,198v-5,8,-13,13,-21,17v15,6,36,38,19,54v4,17,13,36,0,48v22,85,23,191,36,285r9,20r-17,-11v-2,23,6,42,5,67v6,6,9,13,10,20r-4,-15r-16,28v17,8,17,47,6,63v4,17,13,36,0,48v4,27,19,65,19,101r-12,57r16,16v1,27,-2,57,11,72v-28,5,-1,50,-20,66r3,33v9,13,18,28,25,45r-28,32r-3,28v5,-5,12,-7,19,-8r4,19r-13,4v9,12,4,38,6,58r28,21r-22,37v-10,7,-17,14,-21,23v13,17,28,33,36,55v-4,-2,-7,-6,-10,-11r-8,9r-9,-19v-9,7,-14,16,-16,27r-31,13r7,-14v-20,3,-48,32,-61,10v-126,28,-282,23,-411,49v-19,-1,-38,1,-55,6v-27,-3,-53,11,-73,0v-30,7,-66,8,-104,7v-31,10,-61,19,-104,17r-11,-15v10,4,21,9,25,-3v-27,-10,-66,-4,-91,3xm1072,-2039r12,1v0,-5,3,-12,-5,-10xm1072,-2034r4,15r8,-14xm817,-2032v1,-5,4,-11,-4,-10xm1035,-2027r4,15v0,-6,6,-17,-4,-15xm762,-2026v0,-5,-4,-8,-11,-10v1,3,5,7,11,10xm653,-2024v1,4,4,7,11,10v-1,-3,-4,-6,-11,-10xm682,-2008v1,-5,3,-11,-5,-9xm452,-2009v1,5,4,8,11,11v-1,-5,-4,-8,-11,-11xm335,-1988r12,1v1,-5,2,-11,-5,-10xm635,-1968v1,-5,2,-11,-5,-10xm297,-1981v8,6,15,7,19,-3v-8,-6,-15,-7,-19,3xm1054,-1925v0,-5,3,-12,-5,-10xm218,-1976v8,5,15,5,19,-4v-8,-5,-15,-5,-19,4xm164,-1980v3,6,8,10,17,11xm94,-1951v1,-5,5,-12,-4,-10xm334,-1930v0,-5,3,-12,-5,-10xm177,-1931r-1,9r12,-4xm1113,-1854v0,-5,3,-12,-5,-10xm98,-1927r4,19r8,-18xm302,-1909r4,15v0,-6,5,-16,-4,-15xm1103,-1826v0,-5,3,-12,-5,-10xm100,-1889v1,-5,3,-11,-5,-9xm138,-1853v1,5,4,8,11,11v-1,-3,-5,-7,-11,-11xm646,-1795r-134,6v-25,13,-52,25,-88,27v-33,13,-64,24,-84,52v-31,5,-53,34,-89,37r-15,33v-33,7,-28,41,-44,69v-21,34,-25,84,-39,126r11,15r-8,14r94,959v0,13,2,28,7,44r3,-29v15,14,7,40,25,54r28,22r-27,17r17,11r-2,19v13,-2,23,-8,32,-17v7,2,10,5,11,10r35,12r28,26r31,-13v1,3,4,8,11,11r99,40v40,5,76,15,119,17r0,-4r17,10v32,0,72,-14,98,-3v57,-17,121,-22,163,-56v49,-21,88,-59,131,-87r34,-36v7,-13,16,-27,29,-41v12,-47,39,-80,34,-141v14,-17,-3,-42,-6,-63r13,-56v-9,-29,-16,-61,-13,-102v-12,-51,-36,-92,-92,-102v-51,-9,-121,-7,-170,8v-17,-10,-40,-2,-61,1r-46,30r-12,57r6,220r-29,46r-45,21r-48,-8r-35,-64r-7,14v-14,-27,-24,-58,-26,-98r8,-14v-5,-43,-10,-86,-23,-121v-5,-58,1,-117,-18,-164r-30,-390r13,-61v16,-30,33,-55,68,-67v17,2,34,6,53,13v11,11,22,25,32,40v22,62,38,127,43,209v1,15,9,29,20,44r45,27v84,-6,178,3,250,-16v12,-7,25,-15,39,-26r13,-62v-1,-90,-16,-167,-33,-246v-6,-13,-15,-27,-26,-40v-21,-68,-68,-126,-128,-152r-156,-68xm1097,-1764r-2,9r13,-4xm1106,-1740r12,1v1,-5,2,-11,-5,-10xm257,-1778v1,-5,3,-11,-5,-9xm218,-1756v0,-5,3,-12,-5,-10xm343,-1738v0,-5,3,-12,-5,-10xm325,-1735v1,-5,2,-11,-5,-10xm775,-1704r5,14v-4,-5,-16,-10,-5,-14xm180,-1687v1,-5,2,-11,-5,-10xm880,-1616r11,15r-19,4xm193,-1643v1,-5,4,-11,-4,-10xm149,-1517v-11,8,-3,16,4,24v1,-9,5,-21,-4,-24xm937,-1469r12,1r-7,9xm828,-1414v6,7,9,16,9,25r-24,3xm860,-1373r2,29r-12,4xm1129,-1350r5,14v0,-6,5,-16,-5,-14xm994,-1331r10,20v-5,-5,-8,-11,-10,-20xm901,-1313v11,8,20,18,27,30v-12,-6,-21,-16,-27,-30xm955,-1309r11,15v-5,-3,-9,-8,-11,-15xm821,-1299r23,11r-12,52v-8,-19,-12,-40,-11,-63xm958,-1281v5,3,9,8,11,15v-7,-3,-10,-8,-11,-15xm873,-1277r51,37v-27,-3,-44,-15,-51,-37xm1008,-856v7,3,13,8,17,15v-7,-3,-13,-8,-17,-15xm880,-845v7,0,15,12,4,14xm877,-817v8,9,13,19,15,30xm1021,-807r10,15v-5,-3,-8,-8,-10,-15xm261,-389v-6,10,-11,21,-4,33r13,-9xm793,-330r41,8v-14,7,-31,12,-50,16xm1164,-300v1,4,5,7,11,10v-1,-3,-4,-6,-11,-10xm269,-355r-20,13r30,7xm713,-321v16,4,31,17,47,8r-31,13xm259,-317v-1,7,3,13,10,19xm312,-309v1,4,4,7,11,10v0,-4,-4,-7,-11,-10xm1171,-251r-9,28r18,6v0,-11,-3,-22,-9,-34xm377,-290v-1,-5,-4,-8,-11,-11v1,3,5,7,11,11xm1152,-243r5,14v0,-6,5,-16,-5,-14xm382,-285r-8,23r10,15r3,-24v9,-1,17,-5,25,-12v-11,3,-22,4,-30,-2xm1155,-214v0,-5,3,-12,-5,-10xm439,-253v1,-5,2,-11,-5,-10xm1159,-200r12,1v1,-5,4,-11,-4,-10xm305,-243v1,-5,3,-11,-5,-9xm394,-232v1,-5,2,-11,-5,-10xm425,-234v1,4,4,7,11,10v-1,-5,-4,-8,-11,-10xm760,-202v0,-5,3,-12,-5,-10xm328,-231v0,7,3,13,10,19v-1,-6,-4,-12,-10,-19xm566,-196r-1,9r12,-4xm555,-154v1,4,4,7,11,10v0,-4,-4,-7,-11,-10xm278,-168v1,5,5,8,11,11v0,-5,-4,-8,-11,-11","w":1596},"D":{"d":"48,-1692r13,9v-3,91,-22,185,-13,274r-4,14r-13,510v-4,5,-6,9,0,13r43,131r31,43v15,5,33,10,52,13v14,22,17,49,26,74v-5,20,-8,39,-30,44r-40,9r-48,-9v-11,4,-21,11,-30,22r26,357v54,1,97,7,131,31r-13,57v-28,-9,-40,-39,-66,-53v-19,-2,-42,-8,-52,5r9,104v-1,7,-4,11,-9,13r-30,-423r-5,-17r-26,-794r35,-370xm218,-1378r475,9r0,-5v67,16,155,11,214,35v81,32,136,89,170,166v18,39,14,83,35,118v-24,16,14,54,-9,65r9,48v-13,27,-18,64,-22,100r4,9v-20,7,-16,35,-34,44v-5,23,-6,55,-31,56r-22,44v-45,36,-96,66,-144,100v-13,3,-28,9,-43,18v-32,2,-64,18,-101,17r0,5v-28,-7,-57,-3,-87,0v-15,-20,-48,11,-61,-9r-35,9r-96,-14v-15,20,-48,-11,-61,9r-48,-9v-17,4,-36,14,-48,0r-26,-13v-4,-8,-10,-15,-17,-21v-3,-20,-16,-45,0,-57r43,-31v2,-77,20,-158,9,-231v12,-15,-7,-43,5,-56v-2,-23,5,-55,-5,-70v11,-13,9,-41,5,-61v7,-36,-3,-79,4,-109v-13,-16,-33,-25,-52,-35v-3,-18,-23,-17,-35,-26r13,-18v-12,-3,-19,-12,-22,-26xm305,-724v4,44,-39,70,-52,105r109,-5v16,9,44,-1,70,0r222,13v35,-8,77,-6,113,-17r83,-26v47,-29,87,-45,122,-92r48,-65r35,-74r18,-87r0,-109v-14,-86,-50,-166,-118,-205v-21,-12,-43,-27,-70,-40r-192,-26v-28,8,-49,-2,-83,0r0,5v-30,0,-66,-10,-91,0v-18,-1,-38,-9,-52,0v-71,-11,-158,-5,-236,-9v3,31,22,49,57,52v18,19,30,44,35,74v-2,35,5,79,-5,105r-4,279v-11,33,4,89,-9,122xm523,-1247v0,-56,85,-46,135,-39v52,7,87,35,127,56r48,74v9,45,22,82,22,140v0,132,-36,257,-127,305r-39,22v-52,5,-103,17,-157,9v-9,-12,-17,-25,-22,-40r0,-239v9,-91,13,-197,13,-288xm231,-1282r-4,13r13,-4v-1,-3,-4,-6,-9,-9xm205,-1269r9,0r-5,9xm288,-1256v-11,1,-10,12,0,13r0,-13xm227,-1247v-3,-1,-6,-4,-9,-9xm589,-1225v0,-5,2,-11,-5,-9xm610,-1234v1,4,4,7,9,9v-1,-3,-4,-6,-9,-9xm632,-1234v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm693,-1225v0,-4,2,-11,-4,-9xm1103,-1238r13,17v-6,-3,-10,-9,-13,-17xm536,-754v8,20,12,38,27,56r78,0r61,-17v31,-20,59,-43,83,-70r52,-166v-3,-28,-5,-56,0,-83v-9,-5,-10,-12,-4,-21v-3,-48,-27,-82,-48,-114v-11,-11,-24,-16,-39,-17v-21,-13,-47,-13,-74,-18r13,-17r-48,9r-44,-13v-11,11,-23,18,-35,21v13,11,4,28,0,44v-3,14,-8,29,-17,44v1,10,6,17,13,21r-9,35r9,31r-13,26v4,5,10,10,17,13r-17,26v3,13,9,27,17,40r-17,-9v1,11,8,25,-5,26v1,4,4,7,9,9v-1,5,-4,10,-9,13r5,13r17,-9r-13,13v0,24,-15,56,-4,74xm567,-1221v1,3,4,6,9,9v-1,-4,-4,-7,-9,-9xm698,-1221r8,13v-1,-6,-3,-10,-8,-13xm728,-1208v0,-4,2,-11,-4,-9xm593,-1208v3,1,6,4,9,9xm737,-1204v3,5,7,8,13,9xm750,-1182v4,3,7,7,9,13xm554,-1147v-12,-3,-17,12,-5,13xm789,-1138v3,1,6,4,9,9xm554,-1121r9,13v-4,-3,-7,-7,-9,-13xm1116,-990v4,0,13,10,5,13xm1090,-898v1,3,4,6,9,8v-1,-3,-4,-6,-9,-8xm26,-794r5,136r-5,13v31,17,74,25,122,26r5,-44v-31,-4,-51,-15,-75,-30xm828,-584v0,-4,2,-11,-4,-9xm785,-571v0,-4,2,-11,-4,-9xm344,-179r136,5r8,13v-25,19,-30,57,-35,96r5,13v28,0,61,8,83,0v7,-31,-1,-61,-5,-92v-17,-2,-22,-16,-26,-30v44,1,92,-2,131,4v4,0,11,2,9,-4v6,5,10,12,13,21v-13,7,-23,17,-31,31r-4,87v-21,12,-45,19,-74,22v-23,-9,-49,-13,-79,-13v-27,16,-64,23,-104,26v-1,-13,-9,-30,0,-39r0,-87v-13,-14,-22,-32,-27,-53xm938,-170v17,7,31,19,43,35r35,100v-40,4,-81,8,-100,-17r-22,21r-22,0v14,-51,36,-103,66,-139","w":1224},"E":{"d":"44,-1789v30,1,67,-4,90,4r5,-4v52,4,115,-3,160,9v3,-8,12,-2,19,0r188,5r221,4v39,10,99,-1,137,10v24,-10,54,0,85,0v23,0,45,9,65,28r33,424r-4,14r9,165r-5,14r19,283v-9,83,7,169,10,254v2,5,6,11,0,14v0,48,15,104,4,146v10,25,6,64,10,95r-5,9r5,273r-10,14r-56,-4r-151,41v-45,3,-90,8,-132,0v-34,14,-92,-9,-127,5v-21,-1,-45,-9,-61,0r-137,-9v-64,11,-149,2,-211,-9v-31,3,-61,5,-85,-5v-15,3,-32,3,-43,9v-16,-8,-46,-6,-65,-14r-19,10v-49,-10,-48,-76,-66,-118r24,-278r47,-551r0,-198r14,-273r9,-94v-2,-97,17,-179,23,-273xm685,-1238v27,-3,43,-27,42,-52v11,-11,-6,-32,5,-42r-5,0r-5,-66v-6,-13,-17,-21,-32,-24v-15,4,-29,12,-43,24r-23,-19v-39,5,-75,3,-109,-5v-14,3,-30,7,-47,14v-12,-14,-39,-8,-56,0v-4,-1,-7,-4,-10,-9v-39,2,-59,14,-80,37r14,24v-5,-5,-11,-8,-18,-9v13,16,28,39,56,37r-23,14v-1,10,-4,20,-10,29r-19,4r-9,-33v7,-1,11,-4,14,-9r-9,-14r-24,14r9,-24v-17,-5,-34,-4,-51,0v14,12,19,34,28,52v-7,-7,-13,-12,-19,-14r9,33v-15,-16,-28,-34,-32,-61r-19,14v-3,-19,-7,-37,-14,-52v5,9,11,15,18,19r19,-52r-19,-5v-11,10,-21,23,-28,38r-14,-14v-5,11,-7,24,-9,38v3,-5,8,-9,14,-10v7,7,14,17,19,29r-5,-15v-21,9,0,46,0,66r61,85v-14,17,-20,39,-38,52r-9,-42r19,18r-5,-18r14,0r-14,-38r0,28v-15,-15,-19,-40,-33,-56v-8,9,-2,24,0,37r-14,-23v-3,5,-7,10,0,14v-9,-19,-15,-39,-19,-61v7,-8,12,-18,14,-29r-23,-70r28,-14v-9,-9,-20,-15,-33,-19v-10,11,-24,15,-33,28r10,19v-14,25,-20,73,-5,99r14,-10v-1,9,-4,16,-9,19r4,28v-7,-7,-9,-25,-19,-28v6,29,16,53,19,85r-19,-38r15,71r-10,-24v2,39,10,80,-5,109r10,52v-27,14,23,48,-5,61v3,43,4,87,14,122r-9,-19v-10,18,4,35,9,52r-14,14v4,38,6,76,0,113r14,52v-3,-6,-8,-9,-14,-9r14,37v-23,13,-9,55,-9,85v0,65,-6,138,9,193v9,-1,17,-4,24,-9r42,9v26,-5,66,1,80,-18v2,7,7,13,14,18v47,-16,105,8,160,-4v52,8,107,-4,156,4v15,-16,43,-2,66,0v27,-7,72,4,75,-28r5,-56r-14,-62v15,-4,4,-23,0,-33v-20,1,-41,4,-62,10v-30,-9,-63,-11,-98,-5v-39,-4,-77,-7,-109,5r-37,-5r-24,14r-9,-14v-13,3,-23,12,-29,28r10,33v-19,-11,-14,-42,-28,-61v0,9,8,23,0,28v-14,-24,-33,-57,-15,-84v-1,-14,-4,-28,-9,-43r5,28r-24,-56v8,7,17,12,28,14r-4,-75r-19,-24r-14,-56r9,18v-1,-21,-6,-43,-14,-66r5,-42v-8,-10,-13,-19,-14,-28r0,5v3,-15,5,-29,0,-43r9,24r24,-5v3,-12,9,-25,18,-38v-3,-28,-1,-61,-9,-84v6,-41,5,-72,-5,-114r10,-23v-7,2,-15,8,-19,0r19,-5r-19,-37r-14,47v-2,-30,10,-58,-5,-76r24,5r-15,-28v4,-7,10,-13,19,-19v1,9,5,16,10,19v12,-7,23,-16,33,-29v1,9,4,19,9,29v15,-1,31,-6,47,-14v14,4,29,13,43,4v-1,-4,-5,-7,-10,-9r14,-10r5,10r47,19v16,-1,36,-9,47,0v38,-3,77,-4,108,-14xm261,-1417r14,28v7,-7,10,-15,10,-24r-15,15v-1,-7,-4,-14,-9,-19xm289,-1417v5,16,13,32,24,47v-5,-16,-13,-32,-24,-47xm308,-1417v1,6,5,11,10,14xm449,-1413v4,1,7,4,10,10v-4,-1,-7,-4,-10,-10xm506,-1403v-4,-1,-7,-4,-10,-10xm195,-1403v-6,-2,-5,4,-5,9v6,2,5,-4,5,-9xm435,-1408v4,1,7,4,10,10v-4,-1,-7,-4,-10,-10xm492,-1398v-4,-1,-7,-4,-10,-10xm539,-1408v3,1,6,4,9,10xm365,-1403r9,14v-6,9,-9,18,-9,28v-9,0,-17,-3,-24,-9v10,-10,18,-21,24,-33xm252,-1394r9,24v0,-8,-3,-16,-9,-24xm313,-1394r0,10r9,-5xm732,-1384v0,-5,2,-12,-5,-10xm238,-1389r0,9r9,-4xm440,-1394r9,0r-4,10xm421,-1380v-3,0,-6,-3,-9,-9xm459,-1384r9,0r-4,9xm242,-1375r10,24v-1,-9,-4,-17,-10,-24xm294,-1365v0,-5,2,-12,-5,-10xm280,-1361v0,-5,2,-11,-5,-9xm369,-1375r29,28r-33,10r14,-10xm529,-1365v-3,-1,-6,-4,-9,-10xm638,-1375r9,0r-5,10xm266,-1356v0,-5,2,-11,-5,-9xm299,-1351v0,-5,2,-12,-5,-10xm492,-1365r9,0r-5,9xm605,-1356v-4,-1,-7,-4,-10,-9xm609,-1365r15,18r-24,5v6,-7,9,-14,9,-23xm153,-1356r14,33v-7,-9,-11,-20,-14,-33xm308,-1342r10,0v0,-5,2,-11,-5,-9xm511,-1356v3,1,6,4,9,9v-3,0,-6,-3,-9,-9xm256,-1337r5,14v-1,-5,3,-16,-5,-14xm628,-1332v-3,-1,-6,-4,-9,-10xm501,-1337v4,1,7,4,10,9v-4,-1,-7,-4,-10,-9xm186,-1318v0,-5,2,-12,-5,-10xm332,-1328v1,4,4,7,9,10v-1,-5,-4,-8,-9,-10xm172,-1309v-4,-1,-7,-4,-10,-9xm336,-1314v-6,8,-9,18,-9,29r19,-5xm416,-1314r10,24r-19,0xm473,-1304v-4,-1,-7,-4,-9,-10xm459,-1299v-4,-1,-7,-4,-10,-10xm120,-1304v3,1,6,4,9,9v-3,-1,-6,-4,-9,-9xm176,-1295v-3,-1,-6,-4,-9,-9xm539,-1304v3,1,6,4,9,9xm525,-1299v3,0,6,3,9,9xm228,-1290v6,9,12,13,19,14v6,7,14,12,23,14r-4,24r19,28r-10,19v-6,-13,-15,-24,-28,-33v-6,-14,-15,-32,-28,-43v5,-6,8,-14,9,-23xm289,-1290r29,9v-9,8,-17,18,-24,29xm205,-1262v0,-5,2,-11,-5,-9xm336,-1276v4,1,7,4,10,9xm548,-1276r10,0r-5,9xm313,-1271r19,4r-19,5r0,-9xm426,-1262v-4,-1,-7,-4,-10,-9xm534,-1271r10,0r-5,9xm252,-1262r-5,14v5,-2,12,-10,5,-14xm341,-1262v4,1,7,4,10,10xm708,-1252v-3,-1,-6,-4,-9,-10xm153,-1252v10,21,18,48,23,80v-10,-23,-18,-50,-23,-80xm322,-1205v1,4,5,7,10,9v-1,-3,-5,-6,-10,-9xm195,-1205r-9,28v0,-9,3,-18,9,-28xm285,-1201r9,0r-5,10xm332,-1182v0,-5,2,-11,-5,-9xm195,-1191v4,1,7,4,10,9xm303,-1172v-1,-4,2,-12,-4,-10xm186,-1172v6,9,11,20,14,33xm275,-1158v-3,-1,-6,-4,-9,-10xm167,-1149r14,33v-6,-9,-11,-20,-14,-33xm270,-1149r10,19v-4,-5,-7,-11,-10,-19xm190,-1135v-3,0,-6,-3,-9,-9xm153,-1135v6,9,11,20,14,33xm228,-1125v4,1,7,4,10,9xm289,-1125v4,1,7,4,10,9xm247,-1116v3,1,6,4,9,10xm238,-1102v4,5,7,11,9,19xm303,-1092r10,23r-19,5xm294,-1012v4,1,7,4,9,9v-3,-1,-6,-4,-9,-9xm313,-1003v3,1,6,4,9,10v-3,-1,-6,-4,-9,-10xm464,-974v-9,7,-17,16,-24,28v-11,9,-24,22,-38,37v8,-24,25,-42,38,-61v-22,5,-35,9,-47,28r-28,15v-9,17,-18,36,-24,56r5,57v7,-14,11,-30,14,-47r14,37v9,-5,13,-13,14,-23r14,19r-14,14r24,18v35,-6,68,-2,99,5v17,-3,36,-7,56,-14r33,9r42,-14r-14,10v20,0,45,14,66,4r-4,-32r14,32v9,-21,-5,-51,4,-70v-2,-31,-6,-61,0,-90r-4,-14r-38,-4r5,14r-10,-10v-32,13,-76,-11,-99,10v-11,-9,-25,-11,-42,-5v-3,-8,-7,-10,-14,-5r5,5v-10,12,-18,26,-24,42r-14,-14r5,14r-10,0v1,-7,5,-13,10,-19v-1,-12,-5,-23,-14,-32xm275,-974v4,4,7,10,10,18xm346,-965v1,6,4,11,9,14xm360,-965r9,23v0,-8,-3,-16,-9,-23xm129,-965v4,5,7,11,10,19xm341,-946v-1,-5,-4,-8,-9,-10v1,3,4,7,9,10xm383,-946v-1,-4,2,-12,-4,-10xm431,-942v0,-5,2,-11,-5,-9xm346,-946r-5,28r14,-19xm449,-937v4,1,7,4,10,10xm261,-927r5,61r-14,-47v5,-3,8,-7,9,-14xm675,-927r10,0r-5,9xm332,-904r9,0r-5,-9xm190,-913r15,37v-7,-10,-12,-22,-15,-37xm426,-913r28,14r-23,9xm473,-913r9,0r-4,9xm459,-909v3,1,6,4,9,10v-3,-1,-6,-4,-9,-10xm327,-880v1,7,4,15,9,23v-1,-9,-4,-16,-9,-23xm374,-885v4,1,7,4,9,9xm534,-876v-3,0,-6,-3,-9,-9xm318,-866v0,-5,2,-12,-5,-10xm247,-876r23,66r10,-14r5,19r-15,14v-8,-5,-16,-13,-23,-23r14,9xm393,-876v3,1,6,4,9,10xm449,-866v-3,-1,-6,-4,-9,-10xm308,-861v1,16,6,30,14,42xm322,-852v0,-4,2,-11,-4,-9xm148,-857v0,13,-3,26,-9,38xm341,-843v0,-5,2,-11,-5,-9xm327,-838v-1,-4,-4,-7,-9,-9v1,3,4,6,9,9xm445,-847v3,0,6,3,9,9xm346,-833v3,1,6,4,9,9v-3,-1,-6,-4,-9,-9xm449,-833v4,1,7,4,10,9v-4,-1,-7,-4,-10,-9xm172,-828r9,65r-14,-18r-5,14r-14,-29r9,15v8,-14,13,-30,15,-47xm379,-810v0,-5,2,-11,-5,-9xm581,-814v-3,-1,-6,-4,-9,-10xm365,-805v0,-5,2,-11,-5,-9xm346,-810v1,4,4,7,9,10v-1,-4,-4,-7,-9,-10xm393,-810r5,14v-1,-5,3,-16,-5,-14xm544,-814v3,0,6,3,9,9xm318,-805r14,38r0,-24xm379,-805r-19,9v8,0,14,-3,19,-9xm473,-810r19,5r-19,5r0,-10xm303,-800v1,4,5,7,10,9v-1,-3,-5,-6,-10,-9xm308,-786v1,4,5,7,10,9v-1,-4,-4,-7,-10,-9xm318,-763v0,-5,2,-11,-5,-9xm289,-772v-1,7,-4,15,-9,24xm322,-748v-1,-4,2,-12,-4,-10xm327,-734v-1,-5,-4,-8,-9,-10v1,3,4,7,9,10xm327,-730r5,24v0,-9,2,-21,-5,-24xm228,-730r10,29v-5,0,-8,3,-10,9r-9,-28v4,-1,7,-4,9,-10xm318,-715v0,-5,2,-12,-5,-10xm275,-725r24,47v-3,17,-8,32,-14,47r-19,-66xm139,-720v4,5,7,11,9,19xm318,-711v1,9,4,17,9,24v-1,-8,-4,-16,-9,-24xm275,-697r5,15v-1,-6,4,-17,-5,-15xm280,-673v1,4,4,7,9,9v-1,-3,-4,-6,-9,-9xm303,-668r10,19v-4,-5,-7,-11,-10,-19xm266,-654r28,75v-2,26,-10,55,5,71r-5,14v-5,-21,-13,-43,-24,-66v0,19,-3,40,-9,61v-4,-29,0,-66,-9,-89r-14,4r9,-28r9,19v8,-8,13,-17,14,-28r-9,19r-9,-47r14,14r0,-19xm313,-645v6,11,11,23,14,38xm280,-579v1,7,4,14,9,19v-1,-7,-4,-14,-9,-19xm228,-527r19,56v-7,-16,-13,-35,-19,-56xm299,-485r9,14v-4,-3,-7,-7,-9,-14xm336,-480v1,6,5,11,10,14xm285,-480r9,19v-4,-5,-7,-11,-9,-19xm289,-456v5,3,8,7,10,14xm308,-447v4,5,7,11,10,19xm577,-438v4,5,7,11,9,19xm680,-433v4,5,7,11,10,19xm609,-405v-3,0,-6,-3,-9,-9xm718,-409r9,14v-4,-3,-7,-8,-9,-14xm751,-320v0,-5,2,-11,-5,-9","w":820},"F":{"d":"763,-649v-20,-17,-49,-16,-76,-30r-17,18v-9,-10,-15,-22,-18,-35v-20,15,-54,8,-70,29v-2,-9,-6,-15,-12,-18v-11,34,-15,75,-35,100r18,41v-3,8,-9,14,-18,17r-23,223v-12,53,-10,123,-24,175r6,41r-6,-23v-20,20,-34,51,-35,88v9,-3,19,-10,24,0v35,2,75,19,105,6r345,28v-22,10,-47,20,-76,18r-650,-46v-30,-15,-90,3,-122,-12v-23,2,-35,16,-47,29r-12,-88r117,-1188r18,-263r0,-65r17,-64v7,30,24,53,53,70v24,-13,60,-14,82,-29v63,27,161,18,234,35v45,-9,81,0,123,6v39,-22,95,16,134,0v27,7,58,13,94,18v9,23,15,50,18,81r-12,88r-18,30v20,15,24,47,36,70r-36,-12v-1,27,-12,44,-35,53v-10,1,-18,7,-23,17v-39,-20,-89,-29,-129,-47r6,24v-20,-1,-41,-7,-64,-18v-13,9,-29,17,-47,24r11,35r-23,82r6,76r-12,17v27,17,61,30,88,47v36,-4,94,-3,117,-29v3,15,11,31,23,47v12,40,19,87,41,117r-17,-12v-16,17,-22,63,-12,88v5,1,9,5,12,12r-18,11r-11,77v-12,10,-22,24,-30,41xm184,-1604r12,30v-1,-11,-5,-21,-12,-30xm213,-1563v0,-6,2,-13,-6,-11xm190,-1568r11,17v-1,-8,-5,-14,-11,-17xm184,-1545r-6,29v4,7,10,11,18,12r-6,-29r11,-6xm207,-1516v0,-6,2,-14,-6,-12xm184,-1492v1,5,5,8,12,11v-1,-5,-5,-8,-12,-11xm178,-1475v1,16,5,32,12,47xm1009,-1481r18,24r-35,17v11,-11,17,-25,17,-41xm892,-1440r0,12r12,-6xm172,-1393v2,8,6,14,12,18xm1056,-1375v11,10,27,23,41,11r-100,1013r-23,6r-6,70v-12,-49,-5,-97,-41,-129v-13,-28,-27,-55,-47,-76v11,-1,23,-4,36,-11r29,-65r-12,-58v29,-18,16,-56,-6,-82r30,11v1,-4,4,-8,11,-11r-29,-30v8,-23,14,-49,18,-76v16,-4,7,-31,5,-47v-3,1,-7,5,-11,12r-12,-6v11,-19,26,-32,47,-41v0,-23,-4,-47,-12,-70r18,-17v-9,-3,-17,-9,-24,-18v7,-10,17,-20,29,-29r-17,-30r12,-76v7,-15,13,-33,17,-52v-23,1,-34,15,-35,41r-6,-53v9,-4,18,-10,29,-18r24,-76r-18,-6v4,-1,8,-5,12,-11r-6,-24r29,24xm184,-1352v0,-6,2,-14,-6,-12xm1079,-1328v-8,-11,-30,3,-17,11xm166,-1299r12,0v0,-6,2,-14,-6,-12xm980,-1299v5,5,9,13,12,23xm676,-1276v0,-6,2,-14,-6,-12xm652,-1282r6,18r6,-18r-12,0xm728,-1270r12,6r-6,-18xm1027,-1282v1,8,5,14,11,18xm172,-1241v0,-6,2,-13,-6,-11xm1027,-1229v-1,-5,-5,-9,-12,-12v1,4,5,8,12,12xm166,-1235v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm1015,-1211r-18,11v8,-1,14,-5,18,-11xm1009,-1182r12,0v0,-6,2,-14,-6,-12xm160,-1129v-1,-5,3,-14,-5,-12xm155,-1124r5,30v9,-11,2,-20,-5,-30xm564,-1083v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm997,-1083r6,18r0,-18r-6,0xm980,-1071r12,23v-1,-8,-5,-16,-12,-23xm599,-1007r12,0r-6,-11xm646,-989v-1,-5,-4,-9,-11,-12v1,4,5,8,11,12xm143,-995v1,11,5,20,12,29v-1,-9,-5,-19,-12,-29xm775,-983v0,-6,2,-14,-6,-12xm997,-989v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm921,-960v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm143,-901r0,12r12,-6xm986,-878v-9,11,-1,20,6,29v0,-11,2,-26,-6,-29xm137,-866r6,29v0,-11,2,-26,-6,-29xm160,-854v-1,-5,3,-14,-5,-12xm974,-854v0,-6,2,-14,-6,-12xm816,-860v5,3,9,9,12,17xm137,-796v0,-6,2,-14,-6,-12xm131,-784v2,7,6,13,12,17xm968,-772v1,5,5,8,12,11v-1,-4,-5,-8,-12,-11xm974,-749v-8,7,-12,17,-12,29v7,-9,11,-19,12,-29xm131,-731v0,-6,2,-14,-6,-12xm916,-743r11,35r-23,-12xm775,-702v0,-6,2,-14,-6,-12xm125,-685v0,-5,2,-13,-5,-11xm746,-679v0,-6,2,-13,-6,-11xm763,-679v-8,-2,-4,7,-5,12v8,2,4,-7,5,-12xm875,-679r17,12v-7,-1,-12,-5,-17,-12xm512,-655v0,-6,2,-14,-6,-12xm529,-632v2,8,6,14,12,18xm114,-620v1,9,5,16,11,23xm535,-538v0,-6,2,-14,-6,-12xm898,-556r12,24v-5,-6,-9,-14,-12,-24xm892,-521v7,1,13,5,18,12xm102,-491v1,5,5,8,12,11v-1,-5,-5,-9,-12,-11xm916,-486v-5,12,-17,24,-6,36v6,-12,28,-27,6,-36xm968,-445v0,-6,2,-13,-6,-11xm921,-439r12,6r6,-12r-12,-5xm96,-445v2,8,6,14,12,18xm898,-439v-5,-1,-9,-4,-12,-11xm512,-404v0,-6,2,-13,-6,-11xm875,-409v7,3,12,9,17,17v-7,-3,-13,-9,-17,-17xm90,-392v0,11,4,23,12,35xm84,-322v0,12,-2,26,6,30r6,-24xm986,-328v10,11,1,20,-6,30xm79,-257v1,11,4,23,11,35v0,-11,-4,-22,-11,-35xm898,-222v6,5,10,13,12,23v-5,-5,-9,-13,-12,-23xm73,-199v3,13,9,26,0,35r11,-29xm951,-199r11,24v-5,-6,-8,-14,-11,-24xm863,-175v-5,-1,-9,-5,-12,-12xm921,-175r12,23v-5,-5,-9,-13,-12,-23xm79,-152r11,0r-6,-12xm67,-152v1,8,5,14,12,18xm857,-158v6,9,16,19,6,29xm73,-129r-18,65v27,15,63,20,100,12v18,9,43,11,64,17v-1,-14,-9,-26,-23,-35v-12,-2,-24,-6,-36,-12r-17,12v-9,-5,-21,-9,-35,-12v-12,-13,-24,-29,-35,-47xm120,-88v0,-6,2,-13,-6,-11xm242,-82v3,18,13,34,30,47v-7,-16,-17,-32,-30,-47xm278,-70v8,17,20,30,35,41v-8,-16,-20,-30,-35,-41xm365,-52v0,-6,2,-14,-6,-12xm324,-58v6,12,16,22,30,29v-7,-14,-17,-24,-30,-29xm359,-47r6,18r6,-18r-12,0xm400,-47r6,18r0,-18r-6,0xm389,-29v0,-6,2,-14,-6,-12xm436,-41r5,18r0,-18r-5,0xm84,17v8,3,14,9,18,18r-35,99r-18,-41v30,-6,23,-51,35,-76xm441,58r30,0r-24,82xm529,70v29,17,44,45,47,82v-11,-26,-27,-53,-47,-82xm910,88v7,5,10,13,11,23v-7,-5,-10,-13,-11,-23xm190,105r17,12r-17,23r0,-35xm248,111v7,8,11,18,12,29v-6,-9,-10,-18,-12,-29xm301,111v-1,7,-5,13,-12,18xm137,117r6,17r-12,0xm676,134v15,3,30,9,41,0r-6,30xm763,140v9,3,17,9,24,18v-11,-1,-19,-7,-24,-18xm834,146v7,4,12,10,17,18v-8,-3,-14,-9,-17,-18xm892,152v9,1,17,5,24,12v-13,3,-26,9,-36,0","w":1184},"G":{"d":"1543,-1407v-12,39,-71,13,-108,13v-8,15,-14,30,-19,45r14,27r-14,5v2,11,10,8,19,4r-14,18v15,3,30,13,45,5r68,-63v15,21,16,56,18,90v-1,5,-4,10,-9,14r-27,-9v-8,9,-27,19,-9,31v23,6,45,21,54,41v3,38,5,75,0,112v9,50,26,92,22,154r-9,-9r-13,13r22,14r99,793v-1,20,-9,44,5,54v-6,9,-15,18,-27,27r-302,14v-49,-11,-107,17,-171,9r0,4v-13,-6,-30,-2,-46,0r-229,13v-42,-8,-98,14,-140,0v-41,14,-102,3,-154,5r-302,9v-54,8,-117,-4,-171,9v-8,-4,-16,-6,-23,0r0,-5r-117,5r0,5v-31,-6,-62,-4,-94,0v0,-38,-13,-59,-22,-90v-5,-104,-5,-219,-14,-311v-16,-159,9,-327,9,-487v0,-14,-7,-31,0,-41r32,-356v8,-26,6,-48,18,-72v-4,-1,-7,-4,-9,-9r18,-217v-1,-84,6,-159,9,-238v11,-9,25,-16,40,-23v17,2,35,7,54,14v30,-11,64,-8,95,0v9,8,21,14,36,18r351,13r0,-4v47,8,111,-1,154,13r9,23v-10,6,-16,15,-18,27v-23,16,-55,55,-32,90r-18,4r22,14v15,-5,31,-13,41,0v14,-8,33,-2,50,0v14,-2,27,-7,40,-14r5,-22r9,13r-9,14v3,6,7,10,13,13r18,-45v28,-36,61,-68,81,-112v16,5,2,19,-4,27v-16,22,-21,47,-32,76v-14,19,-30,36,-36,63v36,10,79,17,118,23v-7,-11,-18,-18,-32,-23r32,-18r-14,-45v8,-27,18,-53,9,-85v10,-17,36,-18,59,-23v7,9,12,21,13,36v-14,23,-33,37,-31,77v31,-13,59,-25,85,-45r59,-23v9,9,-7,19,-14,27v-26,33,-54,61,-76,99r9,32v-15,-16,-39,-2,-50,9r14,9r22,-14r0,28v29,29,60,66,86,99v28,58,59,113,59,198v0,34,-51,25,-86,23r0,4v-13,-6,-29,0,-45,0v-96,3,-200,-5,-284,9v-25,-6,-2,-44,-14,-58v11,-19,-17,-28,-31,-36v11,-3,20,-11,27,-23v-7,-13,-16,-25,-27,-36v-17,-5,-35,-10,-54,-14r-59,5v-29,12,-46,37,-59,68r-4,383v0,15,8,34,0,45v5,49,-2,94,9,140v-12,20,2,52,4,76r27,36v13,6,30,22,41,5v-7,-38,-15,-93,-5,-135v-1,-90,-16,-186,-4,-271v2,-14,11,-25,22,-36v35,9,76,11,104,27r9,-14v28,13,67,15,99,23r100,-4v5,-1,8,-4,9,-9r-86,-23r-27,9v12,-25,46,-26,77,-32r9,9v19,-10,57,-27,76,-9v17,-1,38,-9,45,5v16,-13,35,-22,63,-23v11,18,32,-7,50,-9r32,5r36,-14r-5,14v12,2,17,-5,18,-14v9,-10,18,-22,27,-36r-4,-22v6,4,9,10,9,18v11,4,23,10,36,18v22,-24,33,-67,22,-108r18,9v2,-17,-27,-28,-13,-41v1,7,4,11,9,14v4,-12,10,-24,18,-36v0,-14,3,-28,9,-41r-18,-9r18,-18r-18,-27r18,4v-3,-7,-9,-12,-18,-13v3,-10,9,-19,18,-27v0,-12,17,-29,0,-36r-23,-27v11,-13,9,-31,18,-45r-13,-9v6,-17,17,-35,18,-59r-9,-9v10,-31,16,-64,36,-86v14,-15,14,-39,9,-63v3,7,7,13,13,18r9,-22r46,-5r9,23v7,-3,13,-7,18,-14r13,27r18,158v-9,45,9,101,14,149xm700,-1750r9,14v-5,-3,-8,-8,-9,-14xm1065,-1745v-11,31,-35,53,-63,67v13,-31,42,-45,63,-67xm754,-1727r9,0r-5,9xm817,-1727v-1,13,-4,25,-9,36xm695,-1723v-4,9,-10,16,-18,23xm1466,-1718v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm772,-1696v4,14,28,20,40,27r-9,27v-7,-3,-14,-7,-22,-13v-17,5,-31,15,-50,18r14,-41v-7,-12,-11,-25,-14,-40r18,40xm1389,-1714v2,8,9,19,0,23r-31,-5v11,-4,22,-10,31,-18xm700,-1687v-1,5,-4,10,-9,14xm763,-1678v-6,-2,-5,4,-5,9v6,2,5,-4,5,-9xm803,-1669v0,-4,2,-11,-4,-9xm785,-1673v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm767,-1669v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm1182,-1673r36,9v-7,10,-16,20,-27,31r-63,32r-90,72v0,-20,6,-40,18,-59v36,-33,72,-68,126,-85xm1398,-1669v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm664,-1669r13,18v-6,-3,-10,-9,-13,-18xm957,-1655v0,-5,2,-11,-5,-9xm1200,-1664r0,9r9,-5xm1128,-1646v-5,3,-5,6,0,9r9,-5xm884,-1583v4,1,7,4,9,9v-3,-1,-6,-4,-9,-9xm1042,-1574r14,18v-2,-7,-7,-13,-14,-18xm1371,-1561v1,5,4,8,9,9v-1,-3,-4,-6,-9,-9xm1020,-1515v0,-5,2,-11,-5,-9xm1331,-1511v3,1,6,4,9,9v-3,-1,-6,-4,-9,-9xm1308,-1493v5,1,10,4,14,9r-18,9xm1290,-1488r9,0r-4,9xm1389,-1421v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm1376,-1394v0,-5,2,-11,-5,-9xm1471,-1403r4,9v0,-4,2,-11,-4,-9xm1322,-1403v3,1,6,4,9,9xm1173,-1389r50,31r31,36v-31,-15,-63,-35,-81,-67xm1259,-1313v9,13,16,29,22,46xm1444,-1281v1,6,4,11,9,14r4,-14r-13,0xm1394,-1249r-14,22v4,10,10,21,18,32r18,-27xm-75,-1236v0,-5,2,-11,-5,-9xm28,-1204r0,9r9,-5xm73,-1204r-14,9v7,-1,12,-4,14,-9xm-75,-1191v-1,-4,-4,-7,-9,-9v1,3,4,6,9,9xm-17,-1182v0,-4,2,-11,-4,-9xm-48,-1182r0,9r9,-4xm50,-1182r0,9r9,-4xm1398,-1182v1,4,4,7,9,9v-1,-3,-4,-6,-9,-9xm1430,-1168v0,-5,2,-11,-5,-9xm-8,-1155v0,-4,2,-11,-4,-9xm1367,-1159v1,13,4,27,9,40r-9,27v14,-8,30,-19,36,-36xm1421,-1150r9,0v0,-5,2,-11,-5,-9xm1439,-1141v0,-4,2,-11,-4,-9xm1498,-1141v0,-5,2,-11,-5,-9xm1349,-1110v0,-5,2,-11,-5,-9xm1425,-1119v1,4,5,7,10,9v-1,-3,-5,-6,-10,-9xm1304,-1101v0,-5,2,-11,-5,-9xm1268,-1092r9,0v0,-5,2,-11,-5,-9xm1421,-1092r9,0v0,-5,2,-11,-5,-9xm1353,-1096v-6,-2,-4,5,-4,9v6,2,4,-5,4,-9xm1403,-1096r13,13v-2,-6,-6,-10,-13,-13xm1083,-1096v3,1,6,4,9,9v-3,-1,-6,-4,-9,-9xm1191,-1087v-4,0,-7,-3,-9,-9xm1376,-1083v7,-2,11,-5,4,-9xm1439,-1083v0,-4,2,-11,-4,-9xm1254,-1083v-8,0,-6,10,-9,14v5,-2,11,-4,9,-14xm1344,-1078r0,9r9,-5xm1376,-1065v0,-5,2,-11,-5,-9xm1353,-1069v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm1385,-1060v1,8,6,14,13,18v-1,-7,-6,-13,-13,-18xm1200,-1042v0,-4,2,-11,-4,-9xm812,-1051v0,7,-3,13,-9,18xm1371,-1033v0,-4,2,-11,-4,-9xm821,-1042v4,1,7,4,9,9xm970,-1001r18,-9r-27,0v1,3,4,6,9,9xm1425,-979v-4,16,-14,34,0,45v15,-13,32,-21,41,-40xm1178,-952v-17,13,1,45,-9,63v10,55,-3,130,9,185v-14,18,8,54,-5,72r5,235r-46,18v-46,-5,-100,-10,-126,18v5,14,13,27,23,40v38,1,84,-9,117,0v26,-6,66,-4,99,-4v6,-26,11,-52,5,-81r4,-9r-13,-393v7,-35,-7,-87,4,-126r-4,-18r-63,0xm1317,-952v7,7,16,11,27,14xm1308,-934r9,0r-4,-9xm1367,-943v1,4,4,7,9,9v-1,-3,-4,-6,-9,-9xm1507,-916v0,-5,2,-11,-5,-9xm1543,-925v1,4,4,7,9,9v-1,-4,-4,-7,-9,-9xm1394,-911v0,-5,2,-11,-5,-9xm731,-758v-8,21,-7,34,-4,59r22,0r5,-50xm-107,-708r5,13v-1,-5,3,-15,-5,-13xm893,-542v-11,30,-24,58,-40,82r-63,58v-43,18,-84,37,-131,50v-37,2,-79,18,-113,9v-26,8,-60,-4,-81,4r-167,-36v18,31,58,41,86,63r99,27v109,-5,226,8,311,-27v49,-9,75,-41,113,-63r27,-36v-13,-46,-16,-96,-41,-131xm-116,-370r5,13v-1,-5,3,-15,-5,-13","w":1784},"H":{"d":"33,-2007v33,4,74,0,102,9r4,-4r149,9r9,-5r167,0v51,-8,100,12,153,0v8,4,16,7,23,0v25,5,52,15,79,28r60,5v-2,31,6,56,9,79r33,245v-11,30,9,54,0,79v7,23,10,56,14,84r-5,9v11,29,29,69,19,111v1,3,4,6,9,9r46,464v-10,48,11,95,0,139v1,5,4,8,9,10v-1,17,-7,37,0,51r-9,74r14,65v-6,1,-11,4,-14,9v7,24,20,55,9,79v15,36,16,89,5,130r14,-10v6,43,12,76,32,107r-9,46r14,10v0,31,14,79,5,116r9,13r-14,5v11,12,11,35,14,55v-7,-1,-14,-6,-19,-14r-27,23v-13,-1,-27,-4,-42,-9v-42,11,-83,14,-130,23v-13,-11,-35,-13,-55,-18v-3,5,-7,10,-14,14r-28,-19r-5,9v-2,-5,-6,-10,0,-13r-37,9v9,7,15,16,19,28r-200,18r-102,-9r-88,9v-10,-10,-34,4,-41,-4v-12,16,-46,10,-70,14r-9,-14r-56,0r-23,-38r-19,-96r-18,-682v-2,-18,-8,-37,0,-51v-21,-305,23,-614,37,-914v-11,-32,-14,-67,-28,-106v-9,-27,-17,-58,-23,-93v1,-30,11,-59,28,-88xm399,-1979v-43,5,-79,-1,-121,9r-18,-5r-185,10r13,194v47,11,104,1,130,-27v9,-10,20,-20,33,-28v20,-42,40,-84,78,-107v10,-6,19,-16,28,-28v14,-2,28,-8,42,-18xm570,-1979v1,4,5,7,10,9v-1,-3,-5,-6,-10,-9xm283,-1868r5,14v-1,-5,3,-16,-5,-14xm436,-407v-17,-19,1,-56,-9,-79v2,-19,8,-41,-5,-51v1,-19,9,-41,0,-56v4,-25,6,-49,-4,-69v5,-33,17,-54,41,-70v59,-16,82,24,93,70r-5,32r14,9v-3,14,-9,25,-9,42r5,0v1,13,7,28,0,37v3,25,5,50,0,74r13,-4r-9,51v3,17,13,35,5,51v1,5,4,10,9,14v-21,6,4,43,-9,60v2,22,6,45,0,65r14,0v-7,11,-9,28,-10,46r5,0v2,23,11,47,-5,61v1,13,7,25,19,37r23,41v17,3,33,8,47,14r4,-9v9,12,25,20,37,5v9,0,18,3,28,9v1,-5,4,-10,9,-14r-4,14v15,2,11,-12,23,-14v35,-2,68,-6,93,-18v9,-19,22,-34,27,-56v-3,-24,-5,-48,0,-70v-7,-5,-11,-11,-4,-18v-1,-16,-9,-36,0,-47r-19,-278v12,-32,-11,-64,0,-93v-5,-41,-2,-90,-14,-125v8,-35,-3,-68,-4,-102r-5,-167v-3,-5,-7,-10,0,-14r-14,-162v15,-33,-12,-82,0,-116v-3,-29,1,-65,-9,-88v6,-32,4,-64,0,-97v-7,-14,-17,-28,-28,-42v-46,-19,-114,-23,-167,-9v-15,-9,-34,1,-51,4r-32,33v-18,45,1,108,-10,157v10,18,0,46,0,70v0,51,19,100,10,153v8,21,-3,47,-5,70v-9,13,-19,25,-32,37v-16,1,-36,9,-47,0r-37,-28v-16,-69,-12,-158,-18,-237v-10,-26,5,-62,-5,-92r5,-14r-23,-112r-38,-23v-50,-5,-101,-3,-153,0r0,5v-20,-11,-38,4,-60,14v-9,13,-15,29,-18,46r9,380r-9,47v4,37,13,71,14,111r4,0v-7,48,-1,102,0,153r5,0v2,33,8,67,0,97v7,16,12,52,5,70v11,61,17,143,9,209v11,5,11,25,4,37r14,144v-7,50,3,112,14,162v21,22,65,48,102,28r37,9v27,-8,60,-12,93,-14r37,-28v13,-49,8,-107,5,-162v8,-16,-2,-34,-5,-51v11,-45,-14,-93,0,-139xm594,-1460r4,14r-9,0xm603,-1451r5,14r-10,0xm733,-1400v4,0,13,11,4,14xm645,-1177v11,-27,-6,-61,-28,-37r-5,23r-18,-5r9,-41v-7,-26,-11,-54,-9,-88v6,-23,17,-44,32,-65v5,12,8,26,9,41r-18,-4v3,32,32,38,32,74r37,-5v-4,7,-10,13,-18,19v-1,16,-9,35,0,46v-2,12,-8,24,0,33r18,-28v7,7,12,14,14,23v-10,-6,-18,-4,-23,5v6,9,15,17,28,23v15,13,31,28,46,46r-32,-23r-9,153r13,42v-26,17,-50,30,-78,46v2,11,8,21,18,28v7,-3,15,-7,23,-14v-4,30,-6,58,14,74r-18,37r-37,19v-2,-27,-26,-34,-47,-42r-28,-46r-46,-28r-14,-28v14,-3,28,-9,42,-18r9,-47r14,19v21,-18,38,-39,65,-51v-7,-28,-11,-56,-5,-88v-15,-2,-34,19,-41,0r9,-28r23,14v0,-14,-3,-28,-9,-42r18,-14r-23,-28v11,4,23,14,33,5xm714,-1367v5,9,10,19,14,32v-6,-8,-11,-19,-14,-32xm686,-1353v5,2,9,7,10,14xm608,-1302v1,7,6,13,13,18v-1,-7,-5,-13,-13,-18xm714,-1307r37,47r-23,-5v-2,12,-9,26,5,28r-14,-14xm283,-1237v6,0,12,10,5,14xm306,-1228r14,51v-7,-17,-11,-34,-14,-51xm339,-1223v2,15,7,30,-5,37r-5,-23v5,-7,9,-11,10,-14xm761,-1205r-14,14r4,-23xm733,-1186r4,18v-11,-2,-8,-10,-4,-18xm598,-1168r5,19v-10,-2,-9,-10,-5,-19xm677,-1149r-14,46v7,4,11,10,23,9v4,-21,13,-36,19,-55r-28,0xm339,-1103v4,9,13,19,4,28xm686,-1075r-4,32r18,5v-1,-13,-5,-25,-14,-37xm733,-1066r18,37r-9,28xm316,-1047r4,32r-14,5xm339,-1024v2,11,8,26,-5,28xm598,-1024v5,5,12,11,19,19v-7,-5,-14,-11,-19,-19xm654,-982v8,13,19,23,32,32v-7,-13,-17,-23,-32,-32xm367,-954r18,23v-8,-5,-14,-12,-18,-23xm529,-945v7,6,11,14,14,23v-10,-3,-21,-7,-28,0xm742,-945r19,9r-19,9r0,-18xm404,-936v14,7,28,17,41,28r-4,46v-7,-30,-22,-52,-37,-74xm478,-927v2,10,7,22,-5,24xm761,-917r-24,37v5,-14,13,-26,24,-37xm357,-908v8,5,14,12,19,23xm700,-908v9,9,-1,21,-4,32xm714,-908v4,1,7,4,9,9v-3,-1,-6,-4,-9,-9xm482,-899v4,1,7,4,10,10xm506,-862r32,33v-20,9,-46,-7,-69,-9xm742,-852r23,0v-3,9,-7,18,-14,27xm316,-848r4,19r-9,0v3,-5,4,-11,5,-19xm710,-764r-14,4r4,-14xm756,-769v3,1,6,4,9,9v-3,0,-6,-3,-9,-9xm640,-718v-3,-1,-6,-4,-9,-9xm742,-713v12,1,7,13,5,23xm524,-685v0,-5,2,-12,-5,-10xm348,-648r9,0r-4,9xm538,-625v-11,1,-9,12,0,14r0,-14xm320,-616v4,1,7,4,9,9v-3,0,-6,-3,-9,-9xm770,-616r9,0r-5,9xm510,-491v0,-4,2,-11,-4,-9xm900,-491v0,-5,2,-11,-5,-9xm524,-486v0,-5,2,-11,-5,-9xm909,-463v0,-5,2,-11,-5,-9xm371,-412v6,1,11,4,14,9v-6,0,-11,-3,-14,-9xm918,-301v0,-5,2,-11,-5,-9xm932,-296v-1,-4,-4,-7,-9,-9v1,3,4,6,9,9xm941,-250r5,14r5,-9xm519,-199v0,-4,2,-11,-4,-9xm941,-185r5,19r5,-19r-10,0xm570,-161v-1,-4,2,-12,-4,-10xm955,-148v0,-4,2,-11,-4,-9xm533,-124v-1,-4,2,-12,-4,-10xm862,-55v0,-4,2,-11,-4,-9xm612,-22v-1,-4,2,-12,-4,-10xm723,-13v0,-4,2,-11,-4,-9xm608,-8v0,-5,2,-12,-5,-10xm672,-18v1,4,5,7,10,10v-1,-5,-4,-8,-10,-10xm677,5v0,-5,2,-11,-5,-9xm214,10v0,-5,2,-12,-5,-10xm895,10v0,-5,2,-12,-5,-10xm316,14v0,-5,2,-11,-5,-9xm719,14v0,-5,2,-11,-5,-9xm849,14v0,-5,2,-11,-5,-9xm589,10v-10,-1,-6,12,-9,18r9,0r0,-18xm237,42v0,-5,2,-11,-5,-9xm524,47v0,-5,2,-12,-5,-10","w":1019},"I":{"d":"555,-2032v6,3,10,9,12,17v-7,-3,-11,-9,-12,-17xm491,-2026v7,1,12,5,17,11v-7,-1,-12,-5,-17,-11xm427,-2020v5,6,15,11,5,17v-5,-6,-16,-12,-5,-17xm357,-2015v5,4,9,10,11,18v-6,-3,-10,-9,-11,-18xm152,-1997v5,3,9,9,12,17v-6,-3,-10,-9,-12,-17xm30,-1991v-19,13,-40,22,-64,29xm-623,-1915v21,145,18,317,29,472r-6,18r18,478r6,18r23,519r-6,23r12,490v-7,6,-15,10,-24,11v-9,-32,-16,-67,-17,-105r-41,-1312v-1,-18,-11,-40,0,-52v-9,-17,-3,-38,0,-59v-6,-40,0,-81,0,-122r0,-274xm36,-1653v7,4,13,10,17,18v-8,-3,-14,-9,-17,-18xm327,-1501v21,17,33,40,35,70r100,1050v-89,18,-192,22,-286,35v-12,-23,-26,-47,-29,-76r-100,-1044r18,-6xm712,-1373r18,12v-7,-1,-13,-5,-18,-12xm520,-1361v57,24,54,93,82,152r-59,11v-13,-8,7,-15,12,-23v-7,-50,-3,-99,-53,-111r-17,17v6,44,-3,92,23,117r-52,6v14,-43,3,-104,-6,-146v23,-5,46,-12,70,-23xm759,-970v9,55,13,105,35,151v-28,-7,-49,-24,-64,-52v1,-34,10,-67,29,-99xm660,-801v3,-10,7,-21,12,-29v-9,-41,-5,-82,-35,-111v-19,17,-29,40,-30,70r18,76r-53,0r12,-41r-12,-88v-16,-1,-34,-9,-46,0v-11,41,0,76,11,117v-1,7,-4,13,-11,18v-11,-1,-21,-5,-29,-12v7,-51,4,-109,-24,-140v31,-8,63,-7,94,-18r40,18r18,-23v27,1,48,14,64,40r12,94v-12,12,-26,22,-41,29xm607,-620r59,6r6,40v-26,-6,-47,-22,-76,-23r17,163r24,41r-65,6v6,-75,9,-136,-11,-204v-21,7,-41,18,-59,35r-5,-41xm712,-568v28,4,51,18,70,41r6,35r-93,12v5,23,18,45,35,58v16,-3,32,-9,47,-17r-24,40v-25,-4,-51,-14,-76,-29v-6,-25,-10,-52,-11,-81v12,-21,27,-40,46,-59xm718,-550v-10,15,-18,33,-23,52r35,0v11,-10,19,-24,23,-41xm823,-480v8,19,12,38,12,58v-7,-18,-11,-37,-12,-58xm852,-66v-41,-33,-99,-42,-122,-99v11,-21,27,-43,47,-64v26,1,55,11,75,0v6,17,10,35,-11,41v-10,-11,-24,-19,-41,-24v-21,10,-32,30,-35,59v43,22,88,37,111,81xm117,-159r41,0r6,76v13,-8,28,-16,47,-24r35,12v11,25,18,58,23,99v-5,7,-13,12,-23,17v-8,-38,-8,-77,-29,-104v-15,3,-28,9,-41,17v-17,28,15,81,-12,99v-26,-57,-21,-131,-47,-192xm514,-136v15,11,26,26,35,47r-35,-24v-17,26,-26,57,-29,94v-15,-27,-26,-59,-35,-94v21,-5,43,-13,64,-23xm345,-118v32,3,59,18,82,46v-25,17,-57,29,-94,35r6,46r-29,-5v-14,-51,5,-85,35,-122xm362,-107v-13,15,-22,33,-29,53v27,1,50,0,64,-12v-7,-16,-19,-30,-35,-41","w":1083},"J":{"d":"-157,-2143r47,743r7,23r8,418r16,31v-15,69,-33,159,-16,233r-8,15r0,201v-2,37,-12,77,0,109v-2,29,-12,61,0,85v-2,60,-12,123,0,178v-6,12,-10,26,-15,39r-16,-271r-7,-23r0,-279r7,-132r-31,-1238xm369,-1276r379,16v13,11,24,27,31,46r-54,8v-24,17,-45,40,-62,69v-1,47,-15,101,0,140v-3,83,-24,170,-8,248r-8,15r-7,178r7,31v-10,103,-5,210,-46,286r-46,86r-70,69r-132,39r-85,-15v-26,-17,-49,-41,-69,-70v0,-33,8,-67,23,-101r77,-15r23,15r39,93r39,23r39,-31r15,-116r0,-271v5,-37,6,-78,8,-124r23,-480v-3,-35,-21,-61,-54,-77v-33,-4,-54,-25,-62,-62xm833,-912v16,13,40,3,62,0v0,25,-5,51,-15,77v-31,-11,-60,-31,-86,-62","w":1317},"K":{"d":"812,-1798v9,8,18,20,25,35xm505,-1791v6,2,11,7,15,14v-6,-2,-11,-7,-15,-14xm1030,-1777r15,7r-20,7xm183,-1770v3,1,6,5,9,14v-3,-1,-6,-5,-9,-14xm321,-1770v-1,12,-4,24,-10,35xm455,-1770v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm336,-1763r10,21v-5,-4,-8,-11,-10,-21xm391,-1749v-4,-1,-7,-5,-10,-14xm797,-1763r15,14r-20,14xm401,-1756r29,28r15,-21v17,1,39,13,50,0v-3,27,6,41,15,56r-20,-14r-5,14r-10,-49v-24,16,-51,31,-69,56r-25,-35v9,-8,15,-20,20,-35xm1040,-185v-23,-12,-27,-50,-45,-70r-25,42v8,10,32,24,10,35r-54,-56r-40,7v-6,-7,-13,-16,-20,-28r-34,14r15,-28v-35,14,-77,17,-114,28v-11,-9,-23,-13,-35,-14v5,13,14,20,25,21r-15,14r-40,-14v-3,11,-8,23,-15,35r-19,-7v4,-10,10,-19,19,-28v-14,-17,-38,-24,-59,-35v-9,-12,-19,-19,-30,-21r-35,14v-1,20,-11,34,-29,42v-1,-17,-6,-34,-15,-49r-45,21v-1,-9,-5,-16,-10,-21v-7,13,-17,24,-29,35v5,-15,13,-31,0,-42r-45,-7r-15,14r5,-21v-31,2,-52,15,-79,21r-35,-29v-5,10,-11,17,-20,22r-54,-14v-13,3,-24,13,-35,28v-7,-15,-17,-24,-30,-28v-10,2,-20,7,-29,14v-20,-17,-43,-43,-55,-71v23,-37,17,-108,25,-161v20,3,40,6,49,21r5,-14v12,5,18,15,35,14r0,-7v16,-23,26,-54,30,-91v-9,1,-19,6,-30,14v36,-36,42,-120,25,-182r15,7v3,-32,-13,-41,-25,-63r20,-7r5,14v-1,-29,-4,-59,-10,-92r10,-56v-10,-13,-18,-26,-25,-42v13,-7,17,-23,25,-35v-9,-50,-8,-92,-25,-140v11,-34,12,-68,25,-98r-20,-56r15,-28r-30,-35r5,-14r15,14v-7,-17,-17,-29,-30,-35v-21,-1,-44,-5,-69,-14r-15,-42v12,-3,11,-36,-5,-36v5,-40,22,-81,10,-119r94,-21v22,4,49,3,64,14v-1,-25,10,-34,20,-49r-10,28r25,-7v4,16,16,24,25,35r30,-28v10,13,23,22,39,28v-1,-5,3,-16,-5,-14r5,-7v1,5,5,9,10,14v9,-10,20,-17,35,-21r25,21r54,-7r25,21r15,-14v17,2,43,28,49,0v19,1,36,6,50,14v3,16,8,32,15,49v14,-21,31,-39,49,-56r35,14v31,1,64,-37,69,-77r15,21r-29,56v20,-3,37,-10,49,-21v3,10,8,17,15,21r10,-14v25,5,51,21,74,7r5,-77v8,12,18,24,30,35r-10,-28r20,-14r10,28v30,-35,78,-31,109,-63v-2,31,-4,62,-15,84v-3,-29,-22,-34,-45,-49v-4,2,-7,7,-10,14r15,28r-25,-28r-14,14r9,42v18,15,38,25,60,28r64,-14v23,9,43,27,60,56r49,-14v3,-11,8,-23,15,-35r-10,-7r20,7v-3,23,-8,46,-15,70r10,56r-15,-14v-15,13,-32,22,-49,29r15,35v-21,15,-34,41,-40,77r-40,-35r-44,14r20,28r-50,49v4,-21,6,-42,-5,-56r5,-14v-22,18,-22,64,-35,91r-29,-21v-2,17,-7,33,-15,49v21,9,35,28,44,56v-8,-8,-18,-13,-29,-14v-4,15,-7,34,-10,56r54,-7r5,56v19,1,38,5,55,14v-27,19,-75,19,-109,0v-19,29,-32,64,-45,98r20,-7v21,24,-3,40,-10,63r20,14r15,28r10,-35v4,17,6,34,0,50r19,14v-9,18,-15,39,-19,63v21,-9,44,-14,69,-14r-15,42r30,-14v3,13,8,27,15,42r24,-21v16,34,39,59,45,105r30,-28r-15,28v3,10,8,17,15,21r-30,28r10,-28r-15,0v-7,12,-3,27,0,42v-15,-7,-24,-21,-25,-42r25,-7v-7,-19,-12,-42,-15,-70r-20,0v-2,-10,-8,-22,0,-28v-9,8,-13,20,-14,35r14,7v-7,23,-17,47,-29,70v-25,-9,-43,-25,-60,-42v2,30,7,60,15,91v13,18,30,34,50,49v13,28,29,42,59,42r-40,-49v5,7,12,12,20,14r20,-35r35,28v-16,-2,-35,-12,-45,0v11,27,31,44,50,63r15,77r10,-21v17,-5,35,-14,54,-28r10,35r-20,56r40,63r-30,-14r-20,-63r-39,70r-5,43r29,-28v7,4,12,11,15,21v-12,5,-23,15,-34,28r-30,-28v-11,8,-19,17,-25,28r10,35r-20,14r5,-56v-6,0,-12,-1,-10,7r-30,-7v12,33,28,62,45,91r-25,14r-29,-42r-25,-7r-10,14r20,0v-6,15,-25,30,-5,42v-6,11,-13,22,-5,35v-13,-15,-25,-33,-35,-56v9,-1,15,-5,20,-14xm282,-1742r10,0r-5,14xm500,-1742v3,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm832,-1742v-5,7,-12,12,-20,14xm98,-1735v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm539,-1735v7,7,14,16,20,28v-7,-7,-14,-16,-20,-28xm584,-1735v13,4,27,13,40,28xm777,-1735v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm1114,-1735v7,18,12,39,15,63v-7,-18,-12,-39,-15,-63xm336,-1728v4,1,7,5,10,14xm133,-1721v11,4,23,11,35,21r-30,14xm634,-1721v-5,25,-15,46,-30,63v2,-23,12,-44,30,-63xm678,-1721v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm197,-1714r10,0r-5,14xm282,-1714v3,1,7,5,10,14xm306,-1714r10,0r-5,14xm743,-1714v3,1,6,5,9,14r-14,7xm1149,-1714v17,13,32,30,45,49v-16,-13,-31,-30,-45,-49xm668,-1700v7,3,14,10,20,21xm837,-1700v6,2,11,7,15,14r-20,14xm1303,-1700v3,1,6,5,9,14xm653,-1693v4,1,7,5,10,14xm1233,-1679v11,8,21,22,30,42v-10,-11,-20,-25,-30,-42xm946,-1651v-1,-5,3,-16,-5,-14xm376,-1658v1,6,4,11,10,14v-1,-5,-5,-9,-10,-14xm1283,-1665v6,5,11,12,15,21v-9,-3,-14,-10,-15,-21xm-20,-1581v8,20,9,41,20,63v-7,19,-23,39,-5,57v-11,30,-19,84,-10,119v-3,1,-7,6,-10,14r10,77r-10,7r10,7v-9,17,-1,42,0,63v-7,17,-19,31,-35,42v-39,2,-37,-71,-30,-112v-11,-27,7,-65,-5,-91r0,-225r5,-98v23,3,44,10,65,21xm733,-1644v-4,-1,-7,-5,-10,-14xm916,-1637v-1,-5,3,-16,-5,-14xm901,-1623v-1,-5,3,-16,-5,-14xm941,-1637r0,14r10,-7xm1288,-1637r24,42v-10,-10,-18,-24,-24,-42xm1327,-1637v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm609,-1581v-7,12,-12,26,-15,42v10,0,20,5,30,14v-2,-19,-7,-38,-15,-56xm643,-1567v-1,-6,-4,-11,-9,-14v1,5,4,9,9,14xm1164,-1581r-15,28r15,14r5,-14v6,-1,11,-6,15,-14xm579,-1567v1,7,4,11,10,14v-1,-6,-4,-11,-10,-14xm1194,-1560r-20,35v11,-5,18,-17,20,-35xm1258,-1553r10,28v-5,-6,-8,-15,-10,-28xm1159,-1518v-1,-5,3,-16,-5,-14xm1164,-1525v1,9,5,16,10,21v-1,-9,-5,-16,-10,-21xm604,-1511v3,14,2,32,15,36v9,-14,-1,-29,-5,-43xm1159,-1504v-9,-2,-4,9,-5,15v9,2,4,-9,5,-15xm1303,-1511r19,22v-7,-4,-13,-11,-19,-22xm1327,-1511v5,4,11,6,20,7v-4,9,-11,18,-20,29v6,-11,4,-23,0,-36xm579,-1496v6,21,16,38,30,49v-7,-19,-17,-36,-30,-49xm9,-1496r10,21v-5,-5,-8,-12,-10,-21xm1253,-1496v10,15,18,31,25,49r-10,-14v-15,10,-28,22,-40,35v1,-29,22,-45,25,-70xm624,-1475v1,6,4,11,10,14v-1,-7,-5,-11,-10,-14xm1194,-1454v-4,-1,-7,-6,-10,-14xm14,-1433v-4,-1,-7,-6,-10,-14xm619,-1440v8,30,31,52,59,63v-9,-14,-14,-30,-15,-49xm1303,-1447v7,6,11,15,14,28xm465,-1433r-15,77r10,21v-5,13,-9,30,-10,49r20,-21r-10,-14r15,28v-6,16,-14,32,-25,49v1,22,4,45,10,70v9,9,21,16,35,21r-5,-35r15,28r-40,21r-10,21r10,14v37,-5,52,-48,74,-70r-39,-49v-1,-19,-4,-38,-10,-56v16,12,24,31,34,49v2,-22,18,-25,30,-35v-17,-38,-28,-75,-49,-112r-35,-14r25,-35xm688,-1433v3,23,9,44,20,63r10,-42xm569,-1426r15,28v-2,-11,-7,-21,-15,-28xm747,-1412v-1,-5,3,-15,-4,-14xm98,-1426r10,21v-5,-5,-8,-12,-10,-21xm534,-1419r20,49r-20,-14r-10,14r35,35r25,-7v-15,-27,-18,-69,-50,-77xm1278,-1426v4,1,7,5,10,14xm515,-1412v3,11,9,21,19,28v-5,-9,-11,-19,-19,-28xm673,-1398v-1,-5,3,-16,-5,-14xm738,-1412v-11,0,-6,15,-10,21v7,-3,12,-9,10,-21xm594,-1405r-5,21r15,14v-1,-13,-5,-24,-10,-35xm1035,-1398r-15,28v11,1,26,13,30,0v-3,-11,-8,-20,-15,-28xm108,-1384v-4,-1,-7,-5,-10,-14xm1288,-1398v7,3,14,10,19,21xm1198,-1384r20,7v-6,19,-14,38,-24,56xm594,-1363r15,42r20,-14v-11,-13,-22,-22,-35,-28xm1169,-1370v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm475,-1363v16,7,26,24,30,49xm688,-1335v-1,-5,3,-16,-5,-14xm83,-1349r35,0r-15,28xm638,-1342r-39,56r15,21v4,-9,11,-19,20,-28v13,-1,26,-5,39,-14v-10,-15,-22,-27,-35,-35xm1099,-1349r25,14r-15,14xm1283,-1349v3,1,7,5,10,14xm544,-1335v1,6,4,11,10,14v-1,-7,-4,-11,-10,-14xm594,-1335v-7,9,-12,20,-15,35r25,0v-1,-13,-5,-24,-10,-35xm559,-1321r-10,28r15,14xm688,-1307v-1,-5,3,-16,-5,-14xm678,-1286v-1,-5,3,-16,-5,-14xm1060,-1307v-1,10,-5,19,-10,28xm931,-1293v1,6,4,11,10,14v-1,-6,-4,-11,-10,-14xm574,-1286r-10,21r20,21r10,-28v-5,-7,-11,-11,-20,-14xm926,-1272v-1,-5,3,-16,-5,-14xm911,-1265v-1,-5,3,-16,-5,-14xm1139,-1286v8,7,16,19,25,7r-20,21xm69,-1265r34,63v-14,-17,-25,-38,-34,-63xm559,-1258r-15,21r15,14r20,-7v-5,-10,-11,-19,-20,-28xm599,-1230r0,-21v-12,1,-11,18,0,21xm876,-1251r0,14r10,-7xm896,-1251r-10,28r20,-21xm1075,-1258v7,9,14,20,19,35xm921,-1244v-13,16,-21,37,-25,63r-25,-14v-12,16,-21,36,-29,56r24,-14v-5,31,-11,61,-24,84v12,3,26,11,34,0r5,-63r45,-42xm579,-1216r10,0v-1,-5,3,-16,-5,-14xm594,-1216v4,-1,7,-6,10,-14v-3,2,-7,7,-10,14xm1060,-1237r10,28r-20,-7xm881,-1202v-1,-5,3,-16,-5,-14xm1154,-1223v4,1,7,5,10,14v-5,0,-8,-5,-10,-14xm108,-1209v9,3,17,10,25,21xm941,-1202v-8,-2,-4,9,-5,14v8,2,4,-9,5,-14xm559,-1195v1,9,5,16,10,21xm970,-1188r-14,14r5,-28xm440,-1188r10,28v-1,-10,-4,-19,-10,-28xm1258,-1181v-4,-1,-7,-5,-10,-14xm1050,-1174v-4,-1,-7,-5,-10,-14xm153,-1174v3,9,8,13,15,14v-3,-7,-8,-11,-15,-14xm1124,-1181r20,7r-20,42v-2,-17,-8,-36,0,-49xm812,-1167v1,7,4,11,10,14v-1,-5,-5,-9,-10,-14xm445,-1153v1,6,5,11,10,14v-1,-5,-5,-9,-10,-14xm524,-1132v6,-1,9,-5,10,-14v-3,2,-7,7,-10,14xm812,-1139v1,6,4,11,10,14v-1,-5,-5,-9,-10,-14xm985,-1125v-1,-6,-4,-11,-10,-14v1,5,5,9,10,14xm1278,-1146r10,0r-5,14xm1298,-1146v7,7,13,16,19,28v-6,-7,-12,-16,-19,-28xm1164,-1125v-4,-1,-7,-5,-10,-14xm480,-1118v-4,-1,-7,-5,-10,-14xm797,-1118v3,7,8,11,15,14xm891,-1118r5,21r0,-21r-5,0xm158,-1097r10,0v-1,-5,3,-16,-5,-14xm-80,-1104r5,21v-4,-7,-14,-14,-5,-21xm455,-1097v1,6,5,11,10,14v-1,-6,-4,-11,-10,-14xm802,-1083r10,0v-1,-5,3,-16,-5,-14xm921,-1097v-11,0,-6,15,-10,21v7,-3,12,-9,10,-21xm450,-1069v-1,-5,3,-16,-5,-14xm886,-1083r0,14r10,-7xm817,-1062v-1,-5,3,-16,-5,-14xm901,-1076v-4,16,-15,34,-5,49r20,-14xm926,-1062v-1,-5,3,-16,-5,-14xm465,-1055v-1,-5,3,-16,-5,-14xm837,-1069v-11,0,-6,15,-10,21v7,-3,12,-9,10,-21xm1000,-1076r10,0r-5,14xm956,-1062v9,6,17,8,24,0r-19,21v7,13,11,27,14,42v15,11,32,18,50,21r-10,-35v9,7,15,17,20,28v-9,15,-16,34,-20,56r-35,-21r10,-28r-20,-14r-9,28v-4,-1,-7,-6,-10,-14r19,-28v-14,-12,-30,-15,-39,-35v8,7,16,19,25,7v2,-10,8,-22,0,-28xm1035,-1041r-10,7r5,28v-5,-7,-11,-11,-20,-14r20,-35xm-85,-1041v4,1,7,5,10,14v-3,-1,-7,-5,-10,-14xm-40,-1041v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm842,-1013r10,0v-1,-5,3,-16,-5,-14xm1060,-1034v6,19,9,40,10,63v-7,17,-17,29,-30,35xm1208,-1027v4,1,7,5,10,14v-3,-1,-7,-5,-10,-14xm837,-1013r5,28r19,-14xm866,-985v6,11,19,10,30,21v7,-3,12,-9,10,-21v-17,-4,-22,-20,-35,-28xm1268,-1006v9,13,14,29,15,49xm118,-992v4,1,7,6,10,14xm857,-971v3,7,7,11,14,14xm911,-950v-1,-5,3,-16,-5,-14xm123,-957r10,0r-5,14xm916,-950v-21,1,-34,15,-40,42r35,-21r5,29r-15,-22v-7,7,-13,16,-20,29v13,11,32,3,50,0xm1070,-957v9,11,15,22,19,35v-13,-1,-19,-13,-19,-35xm153,-915r10,0v-1,-5,3,-16,-5,-14xm78,-922r10,36v-7,-8,-10,-20,-10,-36xm-40,-915v11,1,26,13,30,0r-15,29xm951,-908r-5,22r10,0xm4,-908v-1,5,-4,10,-9,15xm1169,-908v6,5,11,12,15,22v-7,-5,-12,-12,-15,-22xm1248,-908v4,1,7,6,10,15xm1317,-908v5,5,8,12,10,22xm1352,-908v4,1,7,6,10,15xm-75,-900v11,11,25,20,40,28r15,63v-4,42,-14,84,-5,126r-10,147v10,22,0,56,0,84r20,42v-23,27,-11,74,-45,98r-35,15r10,-22r-10,-14r10,-553v5,-1,8,-5,10,-14xm916,-879r5,35r15,-21xm1283,-886v3,26,8,52,15,77v-8,-7,-18,-12,-30,-14v3,-21,8,-42,15,-63xm1218,-865v-3,-1,-7,-6,-10,-14xm574,-865v-6,11,-13,22,-5,35v7,-10,24,-26,5,-35xm906,-837r0,-21v-12,1,-11,18,0,21xm1194,-865v4,4,7,11,9,21v-4,-5,-7,-12,-9,-21xm1149,-858v5,0,8,5,10,14r-15,7xm1099,-851r10,0r-5,14xm1119,-851v4,1,7,5,10,14v-4,-1,-7,-6,-10,-14xm1208,-851r15,28v-8,-5,-13,-15,-15,-28xm529,-837r0,14r10,-7xm936,-837v-8,-2,-4,9,-5,14v8,2,4,-9,5,-14xm1228,-844r10,0r-5,14xm1248,-844v3,15,10,26,20,35v-5,11,-11,20,-20,28v-31,-8,-2,-42,0,-63xm14,-837r20,21v-7,-4,-14,-11,-20,-21xm599,-830v1,9,5,16,10,21xm524,-823v1,9,5,16,10,21xm539,-823v1,6,5,11,10,14v-1,-5,-4,-9,-10,-14xm584,-823v1,6,4,11,10,14v-1,-7,-4,-11,-10,-14xm1134,-830v11,5,20,14,25,28v-11,-5,-20,-14,-25,-28xm579,-795v-1,-5,3,-16,-5,-14xm1099,-816v11,7,21,16,30,28xm1189,-816v11,9,19,23,24,42v-9,-11,-17,-25,-24,-42xm1312,-816v4,7,14,14,5,21xm544,-802v3,17,8,34,15,49v2,-17,8,-36,0,-49r-15,0xm951,-802r-5,35r20,-7v-2,-11,-7,-20,-15,-28xm54,-802v3,1,7,5,10,14xm1174,-802v3,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm1005,-788v1,6,4,11,10,14v-1,-5,-5,-9,-10,-14xm1025,-781v-11,0,-6,15,-10,21r10,0r0,-21xm539,-760v-1,-7,-4,-11,-10,-14v1,5,5,9,10,14xm574,-774r10,70v-13,7,-25,18,-35,35r-10,-21v-19,10,0,34,5,49v-9,-9,-20,-16,-34,-21r-15,-28r-45,-7v1,17,4,33,10,49r-15,14r35,77r-15,-7v-1,5,-4,10,-10,14v0,10,3,19,10,28v15,-12,30,-25,40,-42r-15,-7v4,-25,17,-53,25,-77v24,21,25,69,39,105r30,14v-5,27,-20,46,-20,77r20,-14v-1,12,-7,21,-20,28r20,7r-20,35r5,28v7,-3,13,-10,20,-21v8,-3,16,-10,25,-21v1,-19,9,-41,0,-56v7,-9,15,-16,24,-21r15,-49r15,21v7,-7,13,-16,20,-28r-35,-63r-5,56r-19,-14r14,-49r-39,-14r-10,14v6,-17,14,-34,25,-49v-4,-13,-11,-23,-20,-28v4,-17,11,-34,20,-49v-13,-15,-28,-27,-45,-35xm1189,-781v11,11,19,25,24,42xm500,-767r-5,21r15,-14xm634,-760v-8,-2,-4,9,-5,14v8,2,4,-9,5,-14xm980,-746v-1,-5,3,-16,-5,-14xm460,-753v3,7,8,11,15,14xm529,-739v-1,-5,3,-16,-5,-14xm505,-746v1,19,6,38,15,56v-2,-18,-7,-37,-15,-56xm574,-732v-1,-5,3,-16,-5,-14xm1169,-753v4,7,7,16,10,28xm1248,-753r-10,42r20,14r-10,14r-15,-28xm554,-739v-7,9,-10,21,-10,35r25,-14v-3,-9,-8,-16,-15,-21xm480,-732v1,9,4,19,10,28xm1327,-732v-8,12,-18,19,-29,21xm634,-718r-10,35r29,0xm975,-718v4,7,9,12,15,14v-3,-7,-8,-11,-15,-14xm1025,-697v-1,-5,3,-16,-5,-14xm1174,-711r15,28v-5,1,-8,5,-10,14r-15,-28v4,-1,7,-5,10,-14xm64,-697v7,6,14,15,19,28v-8,-6,-14,-15,-19,-28xm975,-676v-1,-5,3,-16,-5,-14xm1035,-690v1,6,4,11,10,14v-1,-6,-4,-11,-10,-14xm-15,-683r15,7r-15,7r0,-14xm663,-662v-1,-6,-4,-11,-10,-14v2,5,5,9,10,14xm1194,-683r14,28v-7,-7,-12,-16,-14,-28xm975,-669v1,6,5,11,10,14v-1,-6,-4,-11,-10,-14xm624,-662r14,21v-2,-10,-7,-17,-14,-21xm1293,-669r5,21v-4,-7,-14,-14,-5,-21xm445,-655v-8,-2,-4,9,-5,14v8,2,4,-9,5,-14xm564,-662r5,21r-10,0xm579,-655v4,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm653,-648v3,32,17,53,40,63xm990,-634v-1,-5,3,-16,-5,-14xm1189,-655v7,37,37,38,69,28v-19,16,4,29,15,42r-40,14r15,35v-10,-4,-18,-13,-25,-28r-25,-21v-3,-11,-9,-21,-19,-28v-1,13,-2,22,-5,28xm515,-627r9,0r-4,-14xm485,-641r15,21v-6,-5,-11,-12,-15,-21xm69,-627v3,1,6,5,9,14xm1288,-627v23,12,43,31,59,56r-30,42r-39,-14v15,-4,26,-11,34,-21v-9,-19,-17,-40,-24,-63xm1060,-620r20,49v-9,-13,-16,-30,-20,-49xm1218,-599r10,28r20,-21r-20,-21v-3,2,-7,7,-10,14xm9,-592v-4,-1,-7,-5,-9,-14xm510,-599r19,21v-4,-10,-10,-17,-19,-21xm609,-606r15,14r-20,7xm1134,-606v4,1,7,5,10,14xm44,-599r34,14r-14,21xm440,-592v-2,14,-10,31,5,35r10,-35r-15,0xm559,-599r25,49v-15,-7,-23,-24,-25,-49xm1337,-571v-1,-6,-4,-11,-10,-14v1,5,5,9,10,14xm510,-564v4,-1,7,-6,10,-14v-3,2,-7,7,-10,14xm148,-564v1,6,4,11,10,14v-1,-6,-4,-11,-10,-14xm1030,-564v1,7,4,11,10,14v-1,-5,-5,-9,-10,-14xm1174,-564v3,1,7,5,10,14v-4,-1,-7,-5,-10,-14xm9,-557v-1,9,-4,16,-9,21xm1194,-557v6,7,12,16,19,28v-8,-5,-14,-15,-19,-28xm88,-550r5,21v-4,-7,-14,-14,-5,-21xm708,-543r-5,42r20,14xm1258,-550v13,25,18,60,25,91v-2,10,-7,17,-15,21v14,-39,-20,-54,-40,-70v16,-3,26,-17,30,-42xm1342,-550v-1,9,-4,16,-10,21xm505,-536v1,6,4,11,10,14v-1,-5,-5,-9,-10,-14xm520,-536r4,21v5,-9,6,-17,-4,-21xm549,-529r-10,28r20,7v-1,-12,-4,-24,-10,-35xm1273,-508v-1,-5,3,-16,-5,-14xm470,-515v5,9,11,16,20,21xm495,-515v5,10,11,17,20,21xm693,-501v-1,-5,3,-16,-5,-14xm1253,-501r10,0r-5,-14xm524,-508r5,21r0,-21r-5,0xm1198,-487v-3,-1,-6,-5,-9,-14xm619,-473r10,0r-5,-14xm1149,-487v1,9,5,16,10,21v-1,-9,-5,-16,-10,-21xm1298,-494r9,0r-4,14xm1233,-445v-4,7,-14,14,-5,21r15,-7v-1,-6,-4,-11,-10,-14xm1169,-417v-1,-5,3,-16,-5,-14xm1194,-424r-20,42v8,7,17,20,24,7r20,-35xm1169,-396v-1,-5,3,-16,-5,-14xm1283,-410v19,17,37,38,54,63xm609,-375v-6,5,-9,12,-10,21v6,-4,9,-11,10,-21xm1169,-354v-1,-6,-4,-11,-10,-14v1,5,5,9,10,14xm584,-361v1,9,5,16,10,21xm1293,-368r14,7r-14,7r0,-14xm1298,-340r14,21v-6,-4,-11,-11,-14,-21xm123,-312r0,15r10,-7xm594,-304v1,6,4,11,10,14v-1,-7,-4,-11,-10,-14xm420,-283v-1,-7,-4,-11,-10,-14v1,5,5,9,10,14xm460,-297r0,14r10,-7xm510,-297r-5,35r15,0v-1,-11,-5,-22,-10,-35xm688,-290r-25,35v11,-5,23,-10,35,-14xm713,-290r20,35v-3,-16,-10,-28,-20,-35xm752,-283v1,6,5,11,10,14v-1,-5,-4,-9,-10,-14xm896,-283v10,13,22,25,35,35v-9,-14,-21,-26,-35,-35xm1050,-283r10,28v0,-10,-3,-19,-10,-28xm1253,-283v13,11,28,18,45,21r-35,42xm876,-269v1,6,5,11,10,14v-1,-5,-4,-9,-10,-14xm658,-241v-1,-5,3,-16,-5,-14xm599,-255r25,42v-21,-3,-30,6,-40,14v0,-14,10,-33,0,-42xm931,-234r10,0v-1,-5,3,-16,-5,-14xm1164,-255v4,1,7,5,10,14xm381,-234r10,0r-5,14xm1159,-234v6,4,11,11,15,21xm1198,-234v7,16,15,28,25,35r-20,35v1,9,5,16,10,21r30,-14r5,28r-10,-14v-9,15,-16,34,-20,56v26,17,58,29,94,35v17,3,27,15,30,42r-550,-70v-145,5,-245,-36,-386,-35v-6,-5,-12,-9,-15,0r-204,-28v-21,2,-44,12,-59,0r-208,-21v-6,-13,-9,-27,-10,-42v22,10,45,6,65,-7r15,14r153,28v15,17,32,-18,49,0v18,-1,41,-17,45,7v18,-2,42,-28,50,0v15,1,31,5,49,14r20,-7v1,5,5,9,10,14r5,-14v15,15,39,-5,59,-7r15,21v3,-1,7,-6,10,-14v30,5,57,11,79,-7r-5,21v11,1,26,13,30,0r-10,-28v9,12,18,24,20,42r20,-14r45,21v3,-7,7,-11,14,-14r65,21v12,-17,43,10,54,-7r109,21r10,-7r80,14r9,-14r30,14r-5,-42r15,28r25,7r35,-21r-10,21r34,21r30,-28v3,8,8,15,15,21r35,7r5,-21r-20,-28v8,3,17,11,20,0v-11,-17,-19,-35,-25,-56xm510,-227r10,0r-5,14xm1080,-213v0,7,10,19,14,7xm1194,-213v-8,15,-18,26,-30,35r15,21v9,-17,14,-35,15,-56xm1089,-185r10,0r-5,-14xm1238,-206r10,42v-6,-10,-9,-24,-10,-42xm1298,-185v11,7,19,19,24,35v-10,-9,-18,-20,-24,-35xm911,-164v-4,-1,-7,-5,-10,-14xm1273,-157v-3,9,-8,16,-15,21xm1020,-80v-1,-5,3,-16,-5,-14xm1303,-80v7,1,13,5,19,14v-7,-1,-14,-5,-19,-14","w":1210},"L":{"d":"-18,-1582v15,2,33,10,44,0v14,-3,21,12,27,0r195,17v16,-9,36,-1,56,0r195,11v6,3,12,7,16,0v27,14,83,-4,112,11v26,1,57,11,78,0r195,11v26,13,75,3,111,6r11,16r-17,56r11,45v-7,1,-12,5,-16,11r16,50v-13,24,-21,45,-33,72v9,9,34,18,11,28r-22,5v2,9,8,15,17,17v14,16,14,40,22,61r-28,12r6,38v5,-8,12,-15,22,-22r-17,28v3,24,3,52,11,72r-11,0r6,34v-6,3,-13,7,-17,0v12,21,22,45,28,72r0,195r-6,17r-11,812r-17,94r-38,23v-23,-3,-47,-9,-67,0v-109,-12,-238,-4,-357,-6v-4,-10,-14,-2,-22,0v-28,-2,-60,-10,-83,0v-59,-1,-125,-17,-178,-6v-33,-9,-67,6,-95,-5v-34,7,-58,-1,-95,0v-18,-21,-26,-49,-27,-84r-6,-294r-6,-11r-27,-663r6,-16r-6,-206v-12,-14,0,-40,0,-61v0,-50,7,-112,-6,-151r6,-5v-2,-42,-10,-86,0,-123r-6,-11r0,-133xm9,-1504v1,5,5,8,11,11v-1,-4,-5,-8,-11,-11xm31,-1493v0,-5,2,-13,-5,-11xm209,-1493v7,-1,10,-4,11,-11xm432,-1471v-3,-14,-12,-22,-22,-28r-45,12v-5,-6,-13,-10,-22,-12r-6,17r-50,-22v-6,11,-22,20,-11,33v-13,-4,-26,-11,-39,-22v-13,15,-20,31,-22,50r28,17r-6,17v7,6,14,12,6,22r-17,-17v-1,9,-4,19,-11,28v11,5,21,12,28,22r-23,-11v-20,13,-6,44,0,67r-16,11v11,11,24,22,39,33r33,50r-22,23r0,-28r-39,33r22,17v-35,19,-40,82,-22,122v-1,5,-5,9,-11,12r5,33r-11,5r11,12r-11,66r11,-5v-3,16,-21,36,0,44r-11,23v3,5,9,8,17,11v-8,7,-14,14,-17,22r11,17r-11,44v5,13,8,28,11,45v-5,1,-8,4,-11,11r28,11r-6,-28v12,-1,25,-5,39,-11v-3,15,-5,31,-5,50r17,11v15,-9,12,-32,22,-50r-17,6r11,-23v-8,3,-17,9,-22,0r11,-5r-11,-22r-11,16r-11,-22v14,1,27,5,39,11r28,45r22,11v11,-30,19,-62,22,-100r-17,-73r17,-27r17,33r0,-22v19,5,3,34,0,50v12,-5,19,-15,28,-23v-6,-14,-12,-31,-17,-50r11,17v18,-27,38,-51,61,-72v-5,-9,-12,-14,-22,-17v9,-13,21,-24,28,-39v-3,-13,-22,-33,0,-39v-1,-25,-11,-53,0,-72r-6,-45r11,-16v-1,-13,-7,-20,-16,-23v1,-13,4,-26,11,-39v-2,-15,-10,-33,0,-44r-11,-28r16,17v-2,-21,-8,-45,0,-62v-1,-37,-10,-68,-22,-94r22,17r6,-28r-28,-11xm788,-1482v0,-5,2,-13,-5,-11xm861,-1482v0,-6,2,-13,-6,-11xm410,-1493r11,28r-28,-11xm927,-1487v2,7,6,13,12,16xm966,-1476v0,-5,2,-13,-5,-11xm-2,-1482v1,10,4,19,11,28xm321,-1487r11,27r-22,6v-1,-16,7,-22,11,-33xm810,-1471v0,-5,2,-13,-5,-11xm950,-1471v0,-6,2,-13,-6,-11xm232,-1482v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm371,-1482v4,1,8,4,11,11xm989,-1465v0,-6,2,-13,-6,-11xm20,-1471r-17,34v10,-8,16,-19,17,-34xm215,-1476v4,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm287,-1476r11,0r-5,11xm894,-1471v1,5,5,9,11,11v-1,-5,-4,-8,-11,-11xm966,-1471r0,11r11,-5xm816,-1454v0,-6,2,-13,-6,-11xm888,-1454v0,-5,2,-13,-5,-11xm939,-1454v0,-6,2,-13,-6,-11xm994,-1448v-1,-5,3,-14,-5,-12xm220,-1460r12,0r-6,12xm343,-1460v10,4,20,8,28,0r-23,28xm905,-1443v0,-5,2,-13,-5,-11xm977,-1443v0,-5,2,-13,-5,-11xm259,-1454r23,6r-23,5r0,-11xm326,-1454v5,1,8,4,11,11xm399,-1454r11,0r-6,11xm888,-1437v0,-5,2,-13,-5,-11xm310,-1448v4,0,8,4,11,11xm927,-1432v0,-5,2,-13,-5,-11xm911,-1426v0,-6,2,-13,-6,-11xm9,-1432r0,11r11,-5xm259,-1437v5,1,9,4,12,11v-5,-1,-9,-4,-12,-11xm332,-1437v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm387,-1437r28,5r-22,6xm822,-1421v0,-6,2,-13,-6,-11xm894,-1421v0,-6,2,-13,-6,-11xm939,-1421r11,0v0,-6,2,-13,-6,-11xm966,-1421v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm933,-1415v0,-6,2,-13,-6,-11xm994,-1426v1,5,5,8,11,11v-1,-5,-4,-8,-11,-11xm282,-1426v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm844,-1409v0,-6,2,-14,-6,-12xm916,-1409v-1,-5,-4,-9,-11,-12v1,4,5,8,11,12xm-2,-1415v1,5,5,8,11,11v-1,-3,-5,-7,-11,-11xm20,-1404v0,-5,2,-13,-5,-11xm265,-1421v4,1,8,5,11,12v-4,-1,-8,-5,-11,-12xm337,-1421r11,28v-7,-7,-10,-17,-11,-28xm393,-1421r22,12v-7,-1,-15,-5,-22,-12xm248,-1415v5,1,8,4,11,11xm927,-1409v1,5,5,8,12,11v-1,-5,-5,-9,-12,-11xm298,-1398v-4,-1,-8,-4,-11,-11xm354,-1409v5,0,8,4,11,11xm426,-1409v5,0,9,4,12,11xm849,-1393v0,-5,2,-13,-5,-11xm922,-1393v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm15,-1398r-12,22r28,5v-2,-9,-7,-18,-16,-27xm933,-1393r0,11r11,-5xm360,-1393v6,8,10,17,11,28xm399,-1387r27,0r-22,28xm254,-1371v-5,0,-8,-4,-11,-11xm393,-1371v-4,0,-8,-4,-11,-11xm872,-1365v0,-6,2,-13,-6,-11xm944,-1365v0,-5,2,-13,-5,-11xm927,-1359v-1,-5,3,-14,-5,-12xm3,-1348v0,-5,2,-13,-5,-11xm861,-1343v0,-6,2,-13,-6,-11xm977,-1354v1,5,5,8,12,11v-1,-5,-5,-8,-12,-11xm972,-1337v0,-6,2,-13,-6,-11xm955,-1332v0,-5,2,-13,-5,-11xm254,-1343r17,34r-17,11r-17,-28v8,-2,14,-8,17,-17xm304,-1343v4,1,8,4,11,11xm939,-1326v-1,-5,-5,-8,-12,-11v2,3,6,7,12,11xm15,-1320r11,0v0,-6,2,-14,-6,-12xm966,-1332v1,5,5,9,11,12v-1,-5,-4,-9,-11,-12xm9,-1315v0,-6,2,-13,-6,-11xm888,-1315v0,-5,2,-13,-5,-11xm376,-1326v5,1,8,4,11,11xm994,-1309v0,-5,2,-13,-5,-11xm220,-1320v5,0,9,4,12,11xm900,-1315v1,5,4,8,11,11v-1,-5,-5,-8,-11,-11xm972,-1315r0,11r11,-5xm15,-1298v0,-6,2,-13,-6,-11xm332,-1315r28,6r-23,5xm894,-1298v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm927,-1293v0,-5,2,-13,-5,-11xm226,-1304r11,0r-5,11xm298,-1304r23,17r-23,39r-11,-39v6,-3,10,-8,11,-17xm421,-1304r11,0r-6,11xm911,-1287v0,-6,2,-13,-6,-11xm983,-1287v0,-6,2,-13,-6,-11xm9,-1293v1,5,5,9,11,12v-1,-5,-4,-9,-11,-12xm404,-1298v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm894,-1281v0,-6,2,-14,-6,-12xm293,-1270r11,0v0,-6,2,-13,-6,-11xm354,-1287v5,1,8,4,11,11xm916,-1270v0,-5,2,-13,-5,-11xm15,-1276v1,5,4,8,11,11v-1,-5,-5,-8,-11,-11xm209,-1276v1,10,4,19,11,28v-1,-10,-4,-19,-11,-28xm265,-1281v4,0,8,4,11,11v-4,-1,-8,-4,-11,-11xm1016,-1270v-4,-1,-8,-4,-11,-11xm-2,-1270v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm983,-1265v1,5,5,8,11,11v-1,-5,-4,-8,-11,-11xm26,-1248v0,-6,2,-13,-6,-11xm3,-1254r0,11r12,-5xm254,-1259v4,1,8,4,11,11xm933,-1243r11,0v0,-5,2,-13,-5,-11xm927,-1237v0,-5,2,-13,-5,-11xm220,-1243r-16,17v8,-3,13,-9,16,-17xm15,-1226v0,-6,2,-13,-6,-11xm259,-1243r12,0r-6,12xm332,-1243r11,0r-6,12xm939,-1237v1,5,4,8,11,11v-1,-5,-5,-8,-11,-11xm994,-1231r0,11r11,-6xm911,-1215v0,-6,2,-13,-6,-11xm204,-1220v6,11,13,18,22,22v-4,-9,-11,-17,-22,-22xm950,-1209v0,-6,2,-13,-6,-11xm989,-1198v0,-6,2,-13,-6,-11xm-2,-1204v1,5,5,9,11,12v-1,-4,-5,-8,-11,-12xm966,-1181r11,0v0,-5,2,-13,-5,-11xm983,-1192v3,7,9,15,17,22v-2,-8,-8,-15,-17,-22xm3,-1187v1,5,5,8,12,11v-1,-3,-5,-7,-12,-11xm944,-1170v0,-5,2,-13,-5,-11xm293,-1181v4,1,8,4,11,11xm972,-1176v1,5,5,8,11,11v-1,-3,-5,-7,-11,-11xm3,-1159r12,0v0,-6,2,-13,-6,-11xm276,-1176r11,0r-5,11xm961,-1159v0,-6,2,-13,-6,-11xm298,-1165r12,0r-6,12xm438,-1165v4,1,8,5,11,12xm9,-1142r11,0v0,-5,2,-13,-5,-11xm961,-1153r-17,16v8,-3,14,-9,17,-16xm-2,-1148v1,10,4,19,11,28xm321,-1153r-11,33r-6,-28r17,0r0,-5xm371,-1148v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm215,-1142r11,0r-6,11xm421,-1131v-5,-1,-8,-4,-11,-11xm972,-1126v0,-6,2,-13,-6,-11xm321,-1137v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm966,-1120v-7,7,-10,17,-11,28v7,-8,11,-17,11,-28xm3,-1115r-5,28r17,0v-1,-9,-5,-19,-12,-28xm337,-1109v-4,-1,-8,-4,-11,-11xm310,-1115r11,0r-6,12xm944,-1098v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm972,-1103v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm271,-1092v-5,-1,-9,-4,-12,-11xm315,-1098v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm226,-1092v5,1,8,4,11,11xm977,-1087v1,5,5,9,12,11v-1,-5,-5,-8,-12,-11xm9,-1081v1,5,5,8,11,11v-1,-5,-4,-8,-11,-11xm276,-1076v-4,0,-8,-4,-11,-11xm961,-1081r0,11r11,-6xm-2,-1076v1,11,5,20,11,28xm989,-1059v0,-6,2,-13,-6,-11xm20,-1053v0,-5,2,-13,-5,-11xm287,-1070r17,39v-7,-11,-13,-24,-17,-39xm972,-1053v0,-6,2,-13,-6,-11xm994,-1042v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm3,-1042r0,11r12,-6xm9,-1025r0,11r11,-6xm298,-1025v5,0,9,4,12,11v-5,-1,-9,-4,-12,-11xm20,-998v0,-5,2,-13,-5,-11xm332,-1003v-5,-1,-8,-4,-11,-11xm232,-1009v13,5,24,12,33,22xm460,-992v0,-6,2,-13,-6,-11xm9,-981v0,-6,2,-13,-6,-11xm3,-975v1,5,5,8,12,11v-1,-5,-5,-9,-12,-11xm399,-981v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm360,-959v-5,-1,-9,-4,-12,-11xm321,-953r11,33r-22,6v7,-12,10,-25,11,-39xm365,-942v-4,-1,-8,-4,-11,-11xm20,-931v0,-5,2,-13,-5,-11xm271,-948r5,17v-5,-6,-15,-11,-5,-17xm-2,-914r11,5r6,-11r-12,-5xm432,-914v0,-6,2,-13,-6,-11xm432,-897v0,-6,2,-14,-6,-12xm3,-903v1,5,5,8,12,11v-1,-5,-5,-8,-12,-11xm237,-892v-4,-1,-8,-4,-11,-11xm454,-886v0,-5,2,-13,-5,-11xm220,-886v-4,-1,-8,-4,-11,-11xm9,-886v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm399,-886v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm421,-875v0,-6,2,-13,-6,-11xm-2,-870v3,23,11,46,22,67r-11,-50r11,-17r-22,0xm287,-864r28,0v-7,5,-15,12,-22,22xm449,-847v0,-6,2,-14,-6,-12xm360,-842v0,-6,2,-13,-6,-11xm449,-831v0,-6,2,-13,-6,-11xm365,-825v0,-5,2,-13,-5,-11xm315,-836r28,89r-22,5r-6,-22v4,-1,8,-5,11,-11r-16,0r11,-6xm399,-831v0,8,4,16,11,23r11,-23r-22,0xm376,-825r-16,67r33,-45v-3,-7,-8,-15,-17,-22xm209,-825v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm282,-825r11,0r-6,11xm421,-808v0,-6,2,-14,-6,-12xm-2,-808r5,61r17,-34xm271,-808v11,5,20,12,27,22v-11,-3,-20,-11,-27,-22xm426,-792v0,-5,2,-13,-5,-11xm393,-797r-6,22r12,6xm410,-786v0,-6,2,-13,-6,-11xm304,-797v4,1,8,4,11,11xm421,-775r11,0v0,-6,2,-13,-6,-11xm415,-769v-1,-5,-4,-9,-11,-12v1,4,5,8,11,12xm426,-758r12,0v0,-6,2,-13,-6,-11xm421,-764v-29,-3,-44,8,-61,17v15,13,25,-15,39,0xm332,-758v-8,-2,-6,5,-6,11v8,2,6,-5,6,-11xm209,-758v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm438,-742v0,-6,2,-13,-6,-11xm348,-725r12,0r-6,-11xm443,-725v0,-5,2,-13,-5,-11xm-2,-731v2,11,8,20,17,28v-3,-10,-9,-19,-17,-28xm404,-731r-17,17v8,-3,14,-9,17,-17xm421,-731r0,12r11,-6xm376,-708v0,-5,2,-13,-5,-11xm354,-714v1,10,5,19,11,28v-1,-11,-4,-20,-11,-28xm393,-708v0,9,4,19,11,28xm243,-692v0,-6,2,-13,-6,-11xm304,-703v1,5,5,9,11,11v-1,-3,-5,-7,-11,-11xm382,-692v0,-6,2,-13,-6,-11xm315,-536v-11,9,-22,23,-11,39r39,-16r22,-39v11,13,27,21,45,27r-6,-39v-11,-7,-20,-16,-28,-27r23,16v-4,-17,-10,-31,-17,-44r-34,44r23,-50v-7,-8,-15,-13,-23,-16v-3,-17,-9,-34,-16,-51v-11,7,-20,17,-28,28v-2,-12,-8,-23,-17,-33v7,14,10,31,11,50v-10,5,-19,13,-27,22r-17,-11r-28,22r-6,-27v7,-12,11,-25,12,-39r-12,16r-22,-28v1,12,11,28,0,34v5,22,5,53,22,61r17,56r-17,0r0,5r-5,-5v7,13,16,26,28,39v-7,12,-16,23,-28,33r-6,-22v20,3,17,-16,11,-28v-11,6,-19,15,-22,28r11,94v-8,20,-15,41,-22,62v9,5,17,14,22,27r-16,-16r11,55r-11,-16r-6,61v5,3,9,9,11,17r-11,16v5,0,13,2,11,-5r56,5r39,-44v11,-5,22,-13,33,-22r28,11r-50,16r-28,39v26,1,58,13,72,-5v37,-14,65,7,101,11r-23,-6r17,-5v7,-9,11,-21,11,-34r-11,23r-28,-17v20,-8,35,-20,50,-33v7,-1,13,-5,17,-12r-17,-16v12,-19,-4,-34,-11,-50r6,33v-19,-8,-23,-30,-34,-45r-39,6v20,-9,35,-34,39,-56r-50,-72r23,0v-7,4,-11,10,-12,17r28,11r11,-34r23,28v-5,-18,-17,-50,-39,-50r-39,-44r-23,22r23,83r-28,6v9,-18,-5,-31,-6,-50r-33,-11v5,23,5,49,22,61r6,33r-39,-44v-7,-21,-22,-36,-45,-45v16,-2,29,-9,39,-22v3,-20,8,-40,17,-61v3,11,-17,30,-6,39xm343,-697r5,17r6,-12xm237,-686v1,5,5,8,11,11v-1,-3,-5,-7,-11,-11xm-2,-680v1,19,7,38,17,55v-3,-19,-8,-38,-17,-55xm371,-669v0,-6,2,-13,-6,-11xm432,-680r11,27r6,-27r-17,0xm399,-675v1,10,7,19,16,28v-3,-10,-8,-19,-16,-28xm271,-647v0,-6,2,-13,-6,-11xm254,-641v0,-6,2,-14,-6,-12xm438,-641v5,-1,8,-5,11,-12v-4,2,-8,6,-11,12xm237,-636v0,-5,2,-13,-5,-11xm421,-636v5,-1,8,-5,11,-11v-4,1,-8,5,-11,11xm415,-630v0,-5,2,-13,-5,-11xm399,-625v0,-6,2,-13,-6,-11xm426,-630v1,5,5,8,12,11v-1,-5,-5,-9,-12,-11xm332,-630v-3,5,-9,9,-17,11xm421,-614v0,-6,2,-13,-6,-11xm243,-625v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm265,-614v0,37,18,83,-11,101v0,-11,4,-21,11,-28r-28,-56v11,-1,21,-7,28,-17xm404,-608v1,9,3,14,6,17r16,-17v-8,2,-17,8,-22,0xm198,-591v-1,-5,3,-14,-5,-12xm315,-597v-4,-1,-8,-4,-11,-11xm438,-597v-8,7,-12,18,-12,33v6,-9,10,-20,12,-33xm3,-586v1,16,5,31,12,45v-1,-16,-5,-31,-12,-45xm193,-586v1,5,4,8,11,11v-1,-5,-4,-8,-11,-11xm360,-586v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm449,-569v0,-6,2,-13,-6,-11xm220,-564v0,-5,2,-13,-5,-11xm204,-558v0,-6,2,-13,-6,-11xm315,-575v5,13,8,28,11,45v-5,-12,-8,-27,-11,-45xm360,-569r16,5r-28,6xm438,-547v-1,-5,-5,-8,-12,-11v2,4,6,8,12,11xm198,-552v1,5,4,8,11,11v-1,-5,-4,-9,-11,-11xm438,-525r11,28v-1,-10,-4,-19,-11,-28xm3,-519r12,44v-2,-15,-6,-30,-12,-44xm337,-502r-11,16r22,-5v-1,-4,-4,-8,-11,-11xm376,-491v-4,-1,-8,-4,-11,-11xm382,-502r11,22r-22,5xm287,-486v3,8,9,16,17,23v-3,-8,-8,-16,-17,-23xm265,-475r6,56v9,5,16,13,22,22v-11,4,-21,12,-28,23v-13,6,-26,10,-39,11r-6,-28r34,11r-6,-28r-33,11v21,-20,30,-53,50,-78xm198,-452v0,-5,2,-13,-5,-11xm449,-430v0,-6,2,-13,-6,-11xm426,-436r0,12r12,-6xm365,-430v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm348,-424v7,7,11,16,12,27xm432,-419r0,11r11,-5xm387,-419v5,1,9,4,12,11v-5,-1,-9,-4,-12,-11xm382,-402v-5,-1,-8,-4,-11,-11xm198,-380v0,-5,2,-13,-5,-11xm304,-397v4,1,8,5,11,12xm465,-380v0,-5,2,-13,-5,-11xm560,-391r-11,22r22,-5xm805,-391v2,13,8,20,17,22xm237,-374v0,-5,2,-13,-5,-11xm638,-374v0,-6,2,-13,-6,-11xm699,-385v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm482,-369v0,-5,2,-13,-5,-11xm616,-380r0,11r11,-5xm682,-380r12,22v11,-1,22,-4,33,-11xm738,-380v-6,11,-15,21,-28,28r11,17v-10,1,-21,5,-33,11r-6,-39r-16,39r28,22r-6,-17r11,6v-3,38,-21,60,-22,100v8,10,19,21,33,33r-16,-50r22,-11v10,13,16,29,17,50r39,11v15,-36,-41,-60,-51,-94r12,28v1,-19,9,-38,22,-56v14,-8,23,-19,28,-33v-8,-19,-23,-34,-45,-45xm310,-380v20,19,15,48,27,72r-27,6v4,-13,16,-27,5,-39v-18,1,-29,12,-33,33v5,-27,14,-51,28,-72xm460,-374v1,5,4,8,11,11v-1,-5,-4,-9,-11,-11xm521,-369v-9,-11,-19,7,-28,11v14,13,34,-7,45,-16xm582,-374v1,5,5,8,11,11v-1,-4,-4,-8,-11,-11xm599,-374r0,11r11,-6xm660,-363v0,-5,2,-13,-5,-11xm788,-374v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm872,-363v-1,-5,-5,-9,-11,-11v1,3,5,7,11,11xm566,-369r-17,17v10,-2,16,-8,17,-17xm644,-358v0,-6,2,-13,-6,-11xm855,-358v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm488,-352v0,-6,2,-13,-6,-11xm610,-363r-22,16v10,-1,17,-7,22,-16xm627,-352v0,-6,2,-13,-6,-11xm471,-347v0,-6,2,-13,-6,-11xm532,-358r-39,39v-1,10,-5,21,-11,34v15,1,30,5,45,11r11,22v-10,1,-23,11,-28,0r11,50r33,-11r17,-33r-22,5r17,-28r39,-11r22,23r22,-23v-7,-15,-16,-28,-28,-39v7,-1,13,-5,17,-11r-28,6r17,28v-24,7,-42,4,-56,-12v-9,5,-17,10,-22,17v-19,-5,-32,-16,-39,-33r39,11v-3,-15,-9,-30,-17,-45xm794,-358v1,5,4,9,11,11v-1,-5,-4,-8,-11,-11xm577,-352v-8,3,-16,8,-23,17v8,-3,16,-8,23,-17xm638,-341r11,0v0,-5,2,-13,-5,-11xm788,-341v0,-5,2,-13,-5,-11xm905,-352v1,7,13,15,17,5xm493,-335v-1,-5,3,-14,-5,-12xm632,-335v-1,-5,-4,-9,-11,-12v1,4,5,8,11,12xm894,-335v0,-6,2,-14,-6,-12xm382,-335v-5,-1,-8,-5,-11,-12xm477,-330v0,-6,2,-13,-6,-11xm588,-330r11,0v0,-6,2,-13,-6,-11xm799,-341v1,5,5,8,11,11v-1,-5,-4,-8,-11,-11xm872,-341r0,11r11,-5xm644,-335v1,5,4,8,11,11v-1,-5,-5,-9,-11,-11xm911,-335v-9,10,-2,18,5,27v0,-10,2,-24,-5,-27xm738,-335v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm822,-330r-17,17v8,-3,14,-8,17,-17xm888,-319r12,0v0,-6,2,-13,-6,-11xm376,-330r45,11v-11,7,-24,13,-39,17xm593,-313r12,0v0,-6,2,-13,-6,-11xm721,-330r6,45r-22,-34xm883,-313v0,-6,2,-13,-6,-11xm588,-308v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm844,-319v-12,5,-23,12,-34,23r34,-6r-28,50r33,-11r12,-17xm905,-302v0,-5,2,-13,-5,-11xm677,-296v0,-6,2,-14,-6,-12xm237,-308v5,1,8,5,11,12v-4,-1,-8,-5,-11,-12xm772,-291r11,0v0,-6,2,-13,-6,-11xm788,-302v5,13,12,24,22,33v-3,-13,-11,-24,-22,-33xm204,-302v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm287,-291v-4,-1,-8,-4,-11,-11xm760,-296r-16,16r28,11xm900,-296v2,9,7,18,16,27v-2,-9,-7,-18,-16,-27xm326,-285v-4,-1,-8,-4,-11,-11xm866,-291v1,5,5,8,11,11v-1,-3,-5,-7,-11,-11xm310,-280v-5,-1,-9,-4,-12,-11xm666,-274v0,-6,2,-13,-6,-11xm788,-274v0,-5,2,-13,-5,-11xm226,-285v6,5,10,13,11,22xm888,-280v1,5,5,8,12,11v-1,-3,-5,-7,-12,-11xm872,-274v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm599,-257v0,-6,2,-14,-6,-12xm861,-257v0,-6,2,-14,-6,-12xm688,-269r11,0r-5,12xm777,-252v0,-5,2,-13,-5,-11xm916,-252v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm493,-257r-16,27r16,-5v1,4,11,13,0,11r-11,28r28,11r5,-11xm621,-246v0,-5,2,-13,-5,-11xm760,-246v0,-5,2,-13,-5,-11xm883,-246v0,-6,2,-13,-6,-11xm605,-241v-1,-5,-5,-8,-12,-11v2,4,6,8,12,11xm788,-252r-16,11v16,20,25,42,44,61v-4,-32,-7,-53,-28,-72xm866,-241v0,-5,2,-13,-5,-11xm360,-252r11,0r-6,11xm577,-246v1,4,12,16,16,5xm632,-246v1,5,5,8,12,11v-1,-5,-5,-9,-12,-11xm849,-235v0,-5,2,-13,-5,-11xm894,-235r11,0v0,-5,2,-13,-5,-11xm204,-246r11,0r-6,11xm616,-241v1,5,4,8,11,11v-1,-5,-4,-8,-11,-11xm877,-230r11,0v0,-5,2,-13,-5,-11xm243,-241r11,28r-22,6xm599,-235r0,11r11,-6xm872,-224v0,-6,2,-13,-6,-11xm638,-230v1,5,5,9,11,11v-1,-5,-4,-8,-11,-11xm705,-219r11,0v0,-6,2,-13,-6,-11xm833,-230v1,5,4,9,11,11v-1,-3,-5,-7,-11,-11xm855,-219v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm900,-230v1,5,4,9,11,11v-1,-5,-5,-8,-11,-11xm332,-230v11,5,21,12,28,23v-11,-4,-20,-12,-28,-23xm621,-224r0,11r11,-6xm315,-224v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm465,-219v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm616,-207v-1,-5,-5,-9,-11,-12v1,4,5,8,11,12xm727,-219r-17,6r6,28v7,-9,10,-21,11,-34xm866,-219v1,5,5,9,11,12v-1,-5,-4,-9,-11,-12xm582,-213v-17,-2,-19,11,-28,17r17,-6r6,11xm638,-213v-11,7,-19,18,-22,33v12,-17,35,-24,55,-33r-33,0xm788,-202v0,-5,2,-13,-5,-11xm861,-202v-1,-5,-5,-8,-12,-11v2,4,6,8,12,11xm905,-213v1,5,5,8,11,11v-1,-3,-5,-7,-11,-11xm209,-213v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm816,-207v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm833,-207v3,7,8,15,16,22v-3,-8,-8,-15,-16,-22xm888,-207r12,27v-1,-10,-5,-19,-12,-27xm477,-191v0,-6,2,-13,-6,-11xm549,-191v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm460,-185v0,-6,2,-13,-6,-11xm521,-196v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm599,-196v-8,-2,-6,5,-6,11v8,2,6,-5,6,-11xm644,-185v5,-1,8,-5,11,-11v-4,1,-8,5,-11,11xm794,-185v0,-6,2,-13,-6,-11xm638,-180v0,-6,2,-13,-6,-11xm822,-191v1,5,4,9,11,11v-1,-3,-5,-7,-11,-11xm744,-174v0,-6,2,-13,-6,-11xm877,-185r0,11r11,-6","w":1069},"M":{"d":"246,-1625r84,0v19,8,37,19,45,39r253,641r-130,201v-6,8,-15,17,-26,26v-25,-39,-35,-84,-65,-130r-161,-246r-13,-71r0,-324xm964,-1612v39,2,88,-6,117,6r0,337v13,56,-1,131,0,195r-7,13r-226,259r-201,518r-129,-344v21,-86,98,-145,129,-220xm1269,-1508r58,1237v-23,3,-46,9,-65,0v-19,-84,-6,-210,-6,-305v0,-22,-13,-49,0,-64r0,-260v3,-33,9,-67,0,-97r6,-13r0,-356v1,-22,13,-50,0,-65xm233,-977v75,91,139,205,207,304v-2,50,-12,105,0,149r-7,13r0,188v-9,49,-66,45,-116,52v-12,-6,-27,-7,-46,-7v-43,0,-47,-48,-51,-90v12,-31,4,-82,6,-123r-6,0v17,-44,-6,-124,13,-169v-13,-104,4,-207,0,-317xm1068,-964v16,79,18,192,6,278v13,23,-5,48,0,78v16,7,-14,35,7,45r-7,20v-3,92,7,196,-6,278v-27,-2,-56,-10,-78,0v-24,-2,-51,-10,-71,0v-8,-12,-35,-4,-52,-6v-6,-54,0,-107,0,-162r0,-246xm-130,-304v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm1133,-213v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13","w":1365},"N":{"d":"58,-1652v1,22,7,47,0,66r-23,319v-10,-136,14,-257,23,-385xm257,-354v-11,-25,-9,-52,-9,-84r0,-120v6,-62,-1,-136,9,-199v-12,-30,13,-82,0,-116v9,-60,9,-138,9,-199r0,-119v3,-26,5,-52,0,-76v10,-26,-1,-72,9,-102r-5,-8r5,-111v41,-4,78,-11,124,-9v16,-5,32,4,53,9v41,58,80,119,124,173v35,44,63,94,97,137v44,55,76,120,120,173v34,40,53,94,93,128v1,-32,13,-69,4,-97r13,-164v-2,-56,5,-104,9,-155v-6,-13,-2,-29,0,-45r9,-163v-1,-38,0,-74,9,-102v60,2,123,18,181,9v30,13,70,1,102,8v9,14,15,29,18,45v-8,70,-7,144,-22,208r-168,66v-10,13,-23,35,-14,58r-4,9r-31,868v0,13,-4,25,-13,35v-19,-20,-35,-42,-49,-66v-55,-63,-107,-131,-155,-199v-33,-47,-68,-88,-102,-133v-8,-10,-16,-21,-27,-31v-71,-107,-150,-205,-230,-302r-13,14r-18,611v-4,14,-13,26,-26,35xm22,-1205v34,92,31,223,49,332r-49,102r-4,67r-5,-9r-9,-217v-8,-37,4,-84,0,-129v14,-39,7,-100,18,-146xm18,-647r4,67r5,0r-5,4r13,195r-4,13xm31,-354v13,41,14,92,13,146r5,13r9,195v-26,-102,-17,-237,-27,-354","w":1390},"O":{"d":"757,-2197r41,21r34,-14v3,10,10,17,20,20v4,-8,11,-12,21,-13r14,20r6,-20r48,13v23,-1,43,-7,62,-20v20,7,40,12,61,14r7,13r-7,0r0,21r28,7v0,-7,3,-17,-7,-14r14,-41v23,22,47,44,61,75v6,14,15,28,28,41r-28,7r21,14r13,54r-6,48r13,35v-7,1,-12,6,-13,13r13,14r-13,41v1,18,8,34,20,48r-27,7v1,6,5,10,13,13v6,18,11,39,14,62v-3,17,-12,36,-27,55v19,19,29,49,34,82v-8,4,-17,6,-14,20r7,0r-20,21v8,2,15,6,20,13r-20,21v1,8,5,13,13,14v4,57,21,117,7,171r7,13v-3,51,-11,104,0,151v-14,20,3,55,0,82r-7,68r-20,48v7,21,12,44,13,69v-5,-2,-9,-7,-13,-14r-14,7v15,14,17,41,20,68v-10,23,-19,58,-6,82v-9,29,-4,71,0,103v3,24,-19,59,6,69v-29,56,-20,148,-41,212r14,20v-15,37,-17,68,-34,110r14,20r-28,34v22,19,15,62,21,96v-7,32,-12,66,-28,89v0,23,18,52,-6,61r13,62v-9,14,-22,23,-41,27r-14,27v-15,10,-33,17,-54,21v-12,-7,-21,-19,-28,-34v-13,8,-24,19,-34,34v-11,1,-25,5,-41,14r-14,-14r-20,14v-1,-9,-5,-16,-14,-21v-14,8,-30,35,-41,7r-55,14v-9,-8,-16,-17,-20,-28r-48,28r-21,-14r-41,14v-16,-7,-36,-35,-47,-7v-20,8,-41,6,-62,0r-7,14r-48,-21r-13,14v-21,-12,-50,-2,-76,0r-34,-14r-7,14v-31,10,-58,4,-75,-14r-7,21r14,0r-48,-21v-27,18,-67,14,-103,21v-12,-6,-23,-14,-34,-21v6,-25,8,-51,0,-75r14,-41r-41,-48r-14,-61r41,-582r0,-267r7,-171v11,-7,18,-18,20,-34r-13,-48v21,-20,31,-51,41,-82v-6,1,-11,6,-14,14r-20,-123r13,-35r-13,-6r13,-137r-7,0r-13,-41r20,-7r-27,-41r-27,-493v8,-36,33,-68,47,-102r35,-7v31,8,68,11,95,-7r-6,34v8,5,15,9,20,0r55,-34r41,14r20,-14v7,9,16,15,28,20r-7,-20v45,-1,73,22,109,34v22,-4,42,-24,69,-27v31,10,65,16,102,20r21,-20v-3,10,-11,21,0,27r41,-34r21,20v-3,-10,-11,-21,0,-27xm414,-2183v8,7,17,12,28,13xm148,-2170r20,21v-4,-9,-11,-16,-20,-21xm565,-2170v4,9,11,16,21,21v-5,-8,-12,-15,-21,-21xm284,-2149v-1,-6,3,-17,-6,-14xm360,-2163v4,9,11,13,20,14xm613,-2163r0,14r14,-7xm729,-2149r14,0v0,-7,3,-17,-7,-14xm852,-2163v1,6,6,11,14,14v-1,-6,-5,-11,-14,-14xm941,-2163v1,6,6,11,14,14v-2,-5,-7,-9,-14,-14xm1023,-2163v1,6,6,11,14,14v-1,-5,-6,-9,-14,-14xm223,-2135v-1,-7,-6,-11,-14,-14v2,5,7,9,14,14xm298,-2149v1,6,6,11,14,14v-1,-7,-6,-11,-14,-14xm421,-2149v4,8,11,13,21,14v-4,-7,-11,-11,-21,-14xm544,-2135r14,6r7,-13r-14,-7xm627,-2135r13,6r7,-13r-14,-7xm996,-2149v3,9,10,13,21,14xm873,-2142v1,8,15,18,20,7xm962,-2142v1,6,6,10,14,13v-1,-6,-6,-10,-14,-13xm1126,-2142v1,9,5,16,14,20xm702,-2135v-13,-2,-9,13,-14,20r14,0r0,-20xm1030,-2135r-7,27r14,-7r0,-20r-7,0xm360,-2129r0,14r13,-7xm606,-2129v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm818,-2129v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm934,-2129v2,6,7,11,14,14v-1,-6,-5,-11,-14,-14xm1181,-2135v8,1,15,6,20,13xm538,-2108v0,-7,3,-17,-7,-14xm1064,-2108r14,-7r-27,-7xm1112,-2108v-1,-6,3,-17,-6,-14xm784,-2101v0,-7,3,-17,-7,-14xm127,-2108v4,7,11,11,21,14xm257,-2108v1,6,6,11,14,14v-1,-5,-6,-9,-14,-14xm1044,-2108v0,9,5,18,14,27v-1,-9,-5,-18,-14,-27xm1126,-2108v5,8,12,13,21,14v-4,-7,-11,-11,-21,-14xm380,-2101v1,6,6,10,14,13v-1,-6,-6,-10,-14,-13xm709,-2101v1,9,14,17,20,7xm832,-2088r14,0v0,-6,2,-16,-7,-13xm914,-2101r20,13v-3,-6,-10,-10,-20,-13xm948,-2101r-7,27r28,-14v-4,-6,-11,-10,-21,-13xm196,-2094r6,20r0,-20r-6,0xm770,-2088v2,9,7,16,14,21v-2,-9,-7,-16,-14,-21xm1099,-2074r13,7r7,-14r-13,-7xm442,-2081v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm982,-2081v1,6,6,11,14,14v-1,-6,-5,-11,-14,-14xm1044,-2074r7,21r7,-14xm394,-2053v0,-7,3,-17,-7,-14xm517,-2053v0,-7,3,-17,-7,-14xm921,-2067r0,14r13,-7xm312,-2046v-1,-7,-6,-11,-14,-14v2,5,7,9,14,14xm1140,-2060v-13,-2,-9,13,-14,20r14,0r0,-20xm271,-2033r13,7r0,-20v-10,-1,-9,8,-13,13xm360,-2046r13,20v-1,-9,-6,-16,-13,-20xm1030,-2033v0,-6,2,-16,-7,-13xm620,-2026v-1,-6,-6,-11,-14,-14v2,5,7,9,14,14xm818,-2040v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm934,-2040v2,9,15,19,21,7xm1058,-2040v1,7,15,19,20,7xm1160,-2026v-1,-6,-5,-11,-13,-14v1,5,6,9,13,14xm107,-2026r-7,41r13,7v13,-15,-1,-32,-6,-48xm223,-2012v0,-7,3,-17,-7,-14xm312,-2012v0,-7,3,-17,-7,-14xm346,-2012v0,-7,3,-17,-7,-14xm435,-2012v0,-7,3,-17,-7,-14xm633,-2026r0,14r14,-7xm668,-2026v1,6,6,11,13,14v-1,-5,-6,-9,-13,-14xm962,-2012r14,0v0,-7,3,-17,-7,-14xm1003,-2019r0,14r14,-7xm1133,-2005v-1,-7,-6,-11,-14,-14v2,5,7,9,14,14xm202,-1992v-1,-6,3,-16,-6,-13xm524,-1999r20,14v-3,-7,-10,-11,-20,-14xm982,-1999v1,6,6,11,14,14v-1,-6,-5,-11,-14,-14xm1030,-1985v0,-7,3,-17,-7,-14xm1106,-1999v1,7,5,11,13,14v-1,-6,-5,-11,-13,-14xm127,-1992v3,10,10,17,21,21v-4,-9,-11,-16,-21,-21xm264,-1971v0,-7,3,-17,-7,-14xm394,-1971v0,-7,3,-17,-7,-14xm476,-1971v0,-7,3,-17,-7,-14xm599,-1971v0,-7,3,-17,-7,-14xm627,-1985v1,6,6,11,13,14v-1,-5,-6,-9,-13,-14xm709,-1971r13,7r0,-21v-10,-1,-9,9,-13,14xm928,-1971v0,-7,3,-17,-7,-14xm503,-1978r0,14r14,-7xm832,-1978v1,6,6,11,14,14v-1,-7,-6,-11,-14,-14xm1044,-1978r0,14r14,-7xm1078,-1978v1,6,6,11,14,14v-1,-7,-6,-11,-14,-14xm1160,-1964r14,6r7,-13r-14,-7xm107,-1971v1,9,6,15,13,20xm319,-1964v1,6,6,10,13,13v-1,-6,-5,-10,-13,-13xm661,-1951v0,-6,2,-16,-7,-13xm866,-1951v0,-6,2,-16,-7,-13xm1112,-1951v-1,-6,3,-16,-6,-13xm175,-1944v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm216,-1944r7,21r0,-21r-7,0xm763,-1923v-1,-6,3,-17,-6,-14xm887,-1923v0,-7,3,-17,-7,-14xm141,-1923r20,13v-3,-7,-10,-11,-20,-13xm237,-1923v1,6,6,10,13,13v-1,-6,-5,-10,-13,-13xm373,-1910v-1,-6,3,-16,-6,-13xm818,-1923r7,20r7,-13xm934,-1910r14,7r7,-13r-14,-7xm1147,-1923v1,6,6,10,13,13v-1,-6,-5,-10,-13,-13xm613,-1916v5,11,14,18,27,20xm962,-1916r7,20r7,-20r-14,0xm1071,-1903v0,-6,2,-16,-7,-13xm223,-1889v0,-7,3,-17,-7,-14xm681,-1889v0,-7,3,-17,-7,-14xm887,-1889v0,-7,3,-17,-7,-14xm1167,-1889v1,6,6,11,14,14v-1,-7,-6,-11,-14,-14xm538,-1869v0,-6,2,-16,-7,-13xm750,-1869v0,-6,2,-16,-7,-13xm859,-1882r14,20v-2,-9,-7,-15,-14,-20xm982,-1869r14,0v0,-6,2,-16,-7,-13xm1106,-1882v1,9,5,15,13,20xm113,-1862v-1,-6,3,-16,-6,-13xm784,-1862v0,-6,2,-16,-7,-13xm141,-1855v0,-7,3,-17,-7,-14xm380,-1862v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm469,-1862v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm599,-1848v0,-7,3,-17,-7,-14xm811,-1848v0,-7,3,-17,-7,-14xm1044,-1862r7,21r7,-14xm1160,-1862v4,9,11,16,21,21v-4,-9,-11,-16,-21,-21xm284,-1821v-1,-6,3,-16,-6,-13xm435,-1807v0,-7,3,-17,-7,-14xm763,-1807v-1,-6,3,-17,-6,-14xm668,-1814r0,14r13,-7xm887,-1800v0,-7,3,-17,-7,-14xm996,-1800r14,0v0,-7,3,-17,-7,-14xm1133,-1800v0,-7,3,-17,-7,-14xm120,-1793v0,-7,3,-17,-7,-14xm161,-1786v-1,-7,-5,-11,-13,-14v1,5,6,9,13,14xm284,-1786v-1,-7,-5,-11,-13,-14v2,5,6,9,13,14xm934,-1786r14,0v0,-7,3,-17,-7,-14xm1147,-1786r13,0v0,-7,3,-17,-7,-14xm722,-1759v-1,-6,3,-17,-6,-14xm1051,-1759v0,-7,3,-17,-7,-14xm1160,-1773v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm743,-1766r0,14r14,-7xm202,-1745v-1,-6,3,-17,-6,-14xm859,-1759r7,20r0,-20r-7,0xm1106,-1759r6,20r7,-13xm1023,-1739v-1,-6,3,-16,-6,-13xm1188,-1752v1,6,6,10,13,13v-1,-5,-5,-10,-13,-13xm804,-1725v-1,-6,3,-17,-6,-14xm832,-1739r7,21r0,-21r-7,0xm360,-1704r13,6r0,-20v-10,-1,-9,9,-13,14xm702,-1704v0,-7,3,-17,-7,-14xm1023,-1718v1,6,6,11,14,14v-1,-5,-6,-9,-14,-14xm284,-1698v-1,-6,3,-16,-6,-13xm408,-1698v0,-6,2,-16,-7,-13xm948,-1698v-1,-6,-5,-10,-14,-13v2,5,7,9,14,13xm1140,-1711r-14,27r27,-7v-1,-9,-6,-15,-13,-20xm558,-1684v0,-7,3,-17,-7,-14xm763,-1684v-1,-6,3,-17,-6,-14xm880,-1698r7,21r0,-21r-7,0xm996,-1698v2,9,7,16,14,21v-2,-9,-7,-16,-14,-21xm141,-1643v0,-6,2,-16,-7,-13xm1051,-1636v0,-7,3,-17,-7,-14xm1174,-1636v0,-7,3,-17,-7,-14xm107,-1643r6,21r0,-21r-6,0xm1112,-1622v-1,-6,3,-17,-6,-14xm743,-1615v-3,29,-21,47,-55,54r-96,-7r-41,62v-17,-18,-37,-29,-61,-34r7,34v14,-1,34,-13,41,0v-10,14,-24,23,-41,27r-7,76r-28,-14v-18,24,-34,51,-48,82r69,-14r75,-41v16,-17,30,-38,41,-61v-20,5,-37,24,-55,34r-34,-21r34,0r7,-13r48,-21v4,11,11,22,21,34v-6,25,-15,51,-28,76v33,-5,65,-17,96,-35v18,37,32,78,55,110v5,19,10,38,0,55r-7,130v15,42,8,106,14,157v-19,50,5,138,-14,192v6,88,11,158,-7,246r48,41v-11,-34,-10,-82,-14,-123v13,-22,-1,-46,-6,-69r27,-54r-27,-41r61,13r-14,55v27,7,67,8,96,0v-12,12,-21,28,-27,48v-26,10,-59,14,-89,20r7,69r48,-21v27,-4,59,-6,95,-6v-13,-23,-22,-49,-27,-76r27,-54v35,1,67,29,96,41r7,-69r-14,-82r-34,-7r55,-41r-14,-109r-27,48r-7,-48r14,-14v-11,-13,-24,-27,-41,-41r27,-48r-55,14v7,13,12,29,14,48r-27,20r-21,-48v-16,15,-32,35,-34,62v7,-8,16,-13,27,-14v-5,17,-12,33,-20,48v-23,-15,-53,-1,-76,14v-17,-30,-26,-64,-27,-103v27,-11,40,-34,41,-68r-48,-41r41,-21v11,-11,20,-24,28,-41r61,14r-20,-62r27,7r14,-14r-21,-68v19,-6,37,-15,55,-27r14,27v-14,4,-21,16,-28,27r14,41v19,-21,40,-33,55,-61v-12,-4,-23,-11,-34,-21r27,7r-7,-89v-10,5,-19,14,-27,27r-35,-54v-23,-5,-41,-19,-54,-41v-2,12,-12,28,0,34r41,75v-10,17,-24,33,-41,48r7,-34v-24,-13,-50,2,-76,7v2,18,7,38,14,61v-28,-15,-47,-40,-82,-48r34,-61r34,-28r0,48v10,-2,19,-9,28,-20v-9,-23,-20,-46,-35,-69r28,-68r-21,-14v-27,-3,-49,-21,-68,-54xm880,-1609v1,6,6,11,13,14v-1,-6,-5,-11,-13,-14xm284,-1581v-1,-6,3,-17,-6,-14xm1023,-1595r7,21r0,-21r-7,0xm934,-1588r0,14r14,-7xm182,-1568v0,-6,2,-16,-7,-13xm1112,-1533v-1,-6,3,-17,-6,-14xm168,-1540r7,20r0,-20r-7,0xm654,-1540r7,20v-7,-7,-19,-13,-7,-20xm1160,-1533v3,9,10,13,21,13xm449,-1527v1,10,5,19,13,28v-1,-11,-6,-20,-13,-28xm620,-1527r-7,28r-7,-34xm202,-1506v-1,-6,3,-17,-6,-14xm640,-1520r14,55v-9,-15,-13,-33,-14,-55xm421,-1506v-11,8,-20,19,-27,34v21,15,46,26,75,34v-11,-24,-27,-47,-48,-68xm722,-1513v9,3,16,10,21,21v-13,-1,-20,-8,-21,-21xm928,-1485r6,20r0,-20r-6,0xm1010,-1472v0,-6,2,-16,-7,-13xm387,-404v-20,-23,-32,-51,-55,-76v11,-25,31,-41,62,-48r-14,41v5,9,12,13,21,14r20,-34r48,-34v-51,-10,-112,-3,-137,-41r-20,27v18,-30,-19,-66,0,-96r7,-34r54,34r35,-61r61,-7r-13,-21v-28,3,-56,10,-83,21r-20,-62r27,-27v9,18,22,32,41,41v-2,-21,-9,-41,-20,-62r27,0v6,-52,33,-92,48,-136v-13,-9,-29,-16,-48,-21v2,13,7,27,14,41v-21,24,-33,54,-34,89r-48,-21r-7,-41r-41,28r20,-48r-20,-14r7,-48v20,19,23,55,41,76r34,-14v3,-47,28,-72,34,-116r-20,6r-28,62r-7,-7r28,-75r-41,-7r27,-48r27,21r-13,34v17,-11,35,-20,48,-34v0,17,4,35,13,54v1,12,5,21,14,28v22,-14,32,-31,55,-48v5,16,14,30,27,41v5,-22,15,-43,28,-62r6,-54r-34,-28r28,-82r-42,-14v-11,16,-19,35,-27,55v-16,-14,-27,-32,-34,-55r-48,-20r-14,34v-13,12,-22,28,-27,48r48,7v1,-13,5,-26,14,-41v1,23,10,45,27,68v-17,10,-33,24,-48,41r-55,-27v-9,15,-20,29,-34,41r-7,-41r21,-27r-21,13v-11,-16,-14,-40,-20,-61r54,-14r28,-75v-14,-7,-33,-8,-55,-7v2,-24,9,-47,21,-69v10,17,24,33,41,48v4,-60,-16,-82,-41,-123r-76,192r0,732v18,69,34,130,76,178v19,22,46,38,75,54r27,-13r-20,-48r-7,27r-34,-27r13,-34r-13,-7xm661,-1465v8,3,12,10,13,21v-7,-4,-11,-11,-13,-21xm743,-1458r20,34r-20,7r0,-41xm613,-1438r-7,21r14,7xm928,-1424v5,1,10,5,13,14v-5,-1,-10,-5,-13,-14xm866,-1410v2,10,7,19,14,27v-2,-11,-7,-20,-14,-27xm722,-1403r21,20v-9,-4,-16,-11,-21,-20xm798,-1369v0,-7,3,-17,-7,-14xm1133,-1349v0,-6,2,-16,-7,-13xm538,-1355r48,34v-13,-15,-29,-26,-48,-34xm510,-1342v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm127,-1328r0,14r14,-7xm462,-1314v1,5,6,10,14,13v-1,-6,-5,-10,-14,-13xm202,-1294v-1,-6,3,-17,-6,-14xm353,-1308r20,21v-9,-3,-16,-10,-20,-21xm326,-1294v8,13,15,29,20,48v-11,-12,-17,-28,-20,-48xm798,-1294r20,14v-9,-1,-16,-5,-20,-14xm777,-1267v12,17,21,35,27,55r-27,7v-2,-21,-12,-47,0,-62xm818,-1267r41,14r-13,41v-11,-15,-21,-34,-28,-55xm640,-1232v0,-7,3,-17,-7,-14xm928,-1246v4,9,11,16,20,21v-4,-9,-11,-16,-20,-21xm962,-1239r-62,82r-7,41r21,0r14,-48r41,-41v9,9,21,13,34,14v-7,-20,-20,-36,-41,-48xm510,-1191v7,4,11,11,14,20xm873,-1184r7,20r7,-20r-14,0xm1112,-1171v-1,-6,3,-16,-6,-13xm408,-1178r13,28v0,-10,-4,-19,-13,-28xm1023,-1171v-7,11,-18,22,-6,34v12,-6,31,-24,6,-34xm804,-1143v10,9,22,13,35,13xm503,-1130r-6,28r-7,-35xm839,-1123v6,19,17,35,34,48r7,-48r-41,0xm1023,-1109v-9,5,-18,14,-27,27v16,-3,25,-12,27,-27xm326,-1102r6,20v-6,-7,-18,-13,-6,-20xm1112,-1082v-1,-6,3,-16,-6,-13xm592,-1068v-1,-6,3,-17,-6,-14xm777,-1089r7,28r-14,0xm1133,-1068v0,-7,3,-17,-7,-14xm223,-1061r-7,27v9,7,16,12,21,14r13,-28xm579,-1048v-10,29,-17,58,-21,89r34,-27xm510,-1041r-20,62v9,17,23,31,41,41r13,-14v-1,-10,-6,-21,-13,-34v-1,-18,-8,-36,-21,-55xm811,-1027r7,41r-14,7v2,6,7,11,14,14r21,-21v-6,-15,-15,-29,-28,-41xm1099,-979v2,9,6,15,13,20v-1,-9,-6,-15,-13,-20xm921,-979r41,34v-15,-6,-29,-17,-41,-34xm476,-945v2,9,7,16,14,21v-2,-9,-7,-16,-14,-21xm551,-945r-13,41r27,27r21,-41xm900,-931v19,15,33,33,41,54v-13,3,-27,10,-41,21v-2,-26,-12,-55,0,-75xm490,-918r-14,28r27,20r14,-27xm982,-897r41,7r-47,20xm134,-863v0,-7,3,-17,-7,-14xm476,-863v11,19,18,39,21,62r-28,27v2,8,7,15,14,21r7,41v9,-4,16,-11,20,-21v9,-10,20,-17,34,-20v5,9,12,15,21,20v4,-28,10,-54,21,-75v-10,-16,-39,-33,-62,-34xm791,-870v-1,9,-6,16,-14,21xm326,-863r47,34r-27,-6r0,13xm435,-849v11,18,27,32,48,41v-11,-16,-27,-30,-48,-41xm305,-849v5,1,10,5,14,14xm941,-842r7,27r-14,0xm852,-822v5,29,7,61,7,96r-27,-7xm1153,-794v-1,-7,-5,-11,-13,-14v1,5,6,9,13,14xm319,-794v7,11,11,25,13,41v-9,-12,-13,-26,-13,-41xm948,-781r28,14r-14,34v-9,-13,-14,-29,-14,-48xm134,-740v0,-6,2,-16,-7,-13xm1160,-747v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm305,-747v6,7,11,16,14,28xm524,-719v3,9,10,16,20,20v-3,-9,-10,-15,-20,-20xm421,-692v3,30,21,63,7,89r7,14r27,-14v-9,-33,-22,-60,-41,-89xm928,-678r13,20v-1,-9,-6,-15,-13,-20xm517,-671r-27,61r27,-20r-14,20r14,96r-20,21r-28,-21r-27,69v9,20,23,38,41,54v-1,-12,-6,-23,-14,-34v29,-3,43,-15,48,-34v8,-28,17,-55,21,-82r48,-117xm1003,-671v-28,24,-31,69,-41,109v23,-5,44,-17,61,-34v-3,-24,-10,-49,-20,-75xm791,-658v3,9,10,14,20,14v-3,-7,-10,-11,-20,-14xm1037,-637v0,-7,3,-17,-7,-14xm1099,-644r0,14r13,-7xm401,-623v-3,-18,-26,-12,-41,-7r20,34xm476,-596r7,21r7,-14xm948,-582r14,7r0,-21v-11,-2,-10,9,-14,14xm428,-575v0,-7,3,-17,-7,-14xm524,-589v6,6,11,15,14,27xm866,-562v6,25,17,45,34,62r14,-48xm934,-548v2,9,7,15,14,20xm989,-548v2,6,15,20,21,7xm969,-541v1,9,5,18,13,27v0,-10,-4,-19,-13,-27xm818,-507r14,7r0,-21v-11,-2,-10,9,-14,14xm996,-521v-14,27,-34,53,-68,62r6,41v39,-6,64,-57,62,-103xm134,-500v0,-7,3,-17,-7,-14xm921,-500v0,-7,3,-17,-7,-14xm558,-493r0,41r28,-21xm825,-493r27,48v-3,-19,-12,-35,-27,-48xm599,-480v4,11,11,21,21,28v-2,-12,-9,-21,-21,-28xm866,-480r7,21r0,-21r-7,0xm654,-466v3,15,10,28,20,41v-1,-15,-7,-28,-20,-41xm722,-466r21,14v-4,-7,-11,-11,-21,-14xm893,-466r-47,55r-7,34r34,-7v12,-13,26,-20,41,-20v-1,-21,-8,-41,-21,-62xm538,-439v1,6,6,11,13,14v-1,-6,-5,-11,-13,-14xm736,-425r0,14r14,-7xm524,-418v-5,28,-21,48,-48,61r41,7v-9,13,-23,25,-41,34v6,44,70,47,116,55r0,-27r-89,-21r89,-7v-16,-41,-43,-70,-68,-102xm1044,-404v0,-7,3,-17,-7,-14xm921,-404r-7,41r20,6v-1,-15,-6,-30,-13,-47xm599,-377v0,-7,3,-17,-7,-14xm674,-391v3,11,10,21,21,28v-2,-12,-9,-21,-21,-28xm900,-377v-29,12,-64,18,-96,7v8,11,20,17,35,20v13,9,29,16,48,21v8,-15,12,-31,13,-48xm743,-350r14,0v0,-6,2,-16,-7,-13xm770,-363v4,12,11,23,21,34v-2,-15,-9,-26,-21,-34xm257,-357v-5,16,-10,34,-14,55r14,14v4,-18,28,-59,0,-69xm722,-357v2,9,7,16,14,21v-1,-9,-6,-16,-14,-21xm1085,-329v0,-7,3,-17,-7,-14xm640,-302v2,11,9,21,21,28v-3,-10,-10,-19,-21,-28xm606,-281v1,9,6,15,14,20v-2,-9,-7,-15,-14,-20xm681,-281v-13,-2,-9,13,-13,20r13,0r0,-20xm989,-254r0,14r14,-7xm1092,-192v1,6,6,10,14,13v-1,-6,-6,-10,-14,-13xm592,-165v-1,-6,-5,-11,-13,-14v1,5,6,9,13,14xm716,-165v-1,-6,-6,-11,-14,-14v2,5,7,9,14,14xm1030,-165r14,0v0,-7,3,-17,-7,-14xm702,-97v1,6,6,11,14,14v-2,-5,-7,-9,-14,-14xm832,-69v0,-7,3,-17,-7,-14xm127,-49v0,-6,2,-16,-7,-13xm380,-42v0,-7,3,-17,-7,-14xm825,-56v1,6,6,11,14,14v-1,-6,-6,-11,-14,-14xm572,-21v0,-7,3,-17,-7,-14xm538,-14r0,13r13,-7xm93,-8v2,9,7,15,14,20v-2,-9,-7,-15,-14,-20xm702,26v1,6,5,11,14,14v-2,-5,-7,-9,-14,-14xm757,40v1,6,6,10,13,13v-1,-4,-6,-8,-13,-13xm1106,60v-1,-6,-6,-10,-14,-13v2,4,7,8,14,13xm674,95r14,6r0,-20v-11,-2,-10,9,-14,14xm934,101v-1,-6,3,-16,-6,-13xm497,115r13,0v0,-7,3,-17,-7,-14xm531,115r13,0v-1,-6,3,-17,-6,-14xm743,108r0,14r14,-7xm428,142r14,0v0,-6,2,-16,-7,-13xm517,129r0,13r14,-6xm113,136v2,9,7,15,14,20v-1,-9,-6,-16,-14,-20xm579,142v1,7,5,11,13,14v-1,-5,-6,-9,-13,-14xm798,156v0,-7,3,-17,-7,-14xm189,177v0,-7,3,-17,-7,-14xm510,177r14,13r7,-20r-14,-7xm647,177v-1,-7,-5,-11,-14,-14v2,5,7,9,14,14xm599,170r7,20r7,-20r-14,0xm538,183v1,9,5,16,13,21xm627,204v-1,-6,-6,-11,-14,-14v2,5,7,9,14,14xm654,190r0,14r14,-7","w":1225},"P":{"d":"726,-1812v24,15,41,38,51,68r296,952v7,30,7,65,12,103v13,95,54,173,97,245v15,63,33,113,51,177v14,47,33,92,40,148r-969,319v-13,-25,-25,-51,-34,-80r-525,-1619r12,-11r171,-51v43,-13,89,-29,142,-34v33,-31,85,-36,131,-57v35,-6,74,-4,103,-18v126,-58,283,-93,422,-142xm577,-1407v-100,21,-208,59,-307,85v-28,8,-57,21,-86,40v7,29,23,59,34,97r86,302r216,695v56,-8,149,-10,149,-79v-11,-27,-18,-60,-29,-97r-91,-302v36,-49,113,-53,171,-80v24,-11,53,-27,80,-51v21,-18,40,-44,57,-75v18,-34,29,-90,34,-142v-12,-14,-1,-50,-11,-68v-9,-69,-19,-140,-63,-194r-57,-69v-43,-34,-106,-58,-183,-62xm509,-1253v30,2,70,-6,91,5v20,11,38,25,57,40r40,63r23,68r6,91v-7,24,-17,47,-29,69v-14,17,-31,34,-51,51r-143,46r-114,-371v26,-34,74,-48,120,-62","w":1029},"Q":{"d":"252,-1678r31,18v-12,-1,-22,-7,-31,-18xm289,-1672v10,1,20,5,31,12xm314,-1654v9,9,15,22,18,37r-12,31r-49,0v4,-33,27,-47,43,-68xm216,-1647v21,0,39,8,55,24r-25,-12r-49,12xm406,-1647r24,6r-24,6r0,-12xm448,-1647v10,1,18,7,25,18xm553,-1647v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm369,-1641r12,0r-6,12xm534,-1641r12,0r-6,12xm301,-1623v3,9,10,17,19,25v-2,-11,-8,-19,-19,-25xm406,-1629r30,31v-13,-7,-23,-18,-30,-31xm424,-1629v5,1,9,5,12,12xm595,-1629v5,11,14,19,25,24r37,-12r6,25v33,4,52,15,73,36v-11,1,-19,6,-24,13r-6,-13r-62,25r19,12r-19,31v-11,0,-19,6,-24,18v-11,-1,-22,-5,-31,-12v6,-11,14,-17,25,-18r18,-37v15,-5,30,-14,43,-25v-10,-9,-18,-21,-24,-36v-9,9,-16,19,-19,30v-17,-16,-31,-33,-37,-61xm724,-1629v-4,11,-10,21,-18,31xm350,-1623v9,1,18,5,25,12xm130,-1617v10,3,18,12,24,25xm393,-1611r13,31v-7,-9,-11,-19,-13,-31xm203,-1605v5,1,10,6,13,13v-5,-1,-10,-5,-13,-13xm559,-1605r30,19r-18,24r37,19v-9,2,-20,10,-25,0r-30,36r-7,-30v-11,3,-21,9,-30,18r-25,-6v17,-16,22,-42,43,-55v2,13,10,21,25,24r-13,-30v7,-3,11,-10,13,-19xm173,-1598r6,30r-18,-6v5,-5,9,-13,12,-24xm124,-1580r-6,31r-6,-43xm761,-1592v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm1079,-1592v5,1,9,5,13,12v-5,-1,-10,-5,-13,-12xm130,-1586v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm412,-1586v5,5,9,13,12,24xm1043,-1586v9,1,17,5,24,12xm338,-1580r19,6r-19,6r0,-12xm693,-1562v-1,-5,-5,-9,-12,-12v2,4,6,8,12,12xm969,-1580v9,16,15,34,18,55xm210,-1574v15,3,31,10,42,0v-19,13,-38,28,-61,37v4,-7,8,-14,0,-19xm442,-1574v9,6,15,14,19,25xm761,-1574v5,1,9,5,12,12xm301,-1562v9,1,18,6,25,13v-9,-1,-18,-6,-25,-13xm681,-1556r0,13r12,-6xm148,-1549r-6,18r-6,-25xm265,-1556v-3,17,-12,31,-25,43r55,31r25,61r-12,25r-13,-19r19,-12v-21,-22,-44,-42,-62,-67r-30,12v4,-21,17,-42,6,-61v14,2,34,19,43,6xm418,-1556r24,0v-6,6,-10,14,-12,25xm791,-251v-9,-3,-15,-9,-18,-18r-24,6r18,12v-13,4,-30,6,-49,6v19,-6,21,-28,31,-43r-105,-24v-5,19,-15,33,-24,49r12,12r-24,43v-12,-14,-22,-30,-31,-49r-18,12v1,-19,7,-38,18,-55v8,9,12,22,12,37v20,-10,21,-36,31,-55r-12,12r-6,-12r-43,6v-18,-26,-59,-23,-86,-43v-19,-1,-42,-11,-55,0r-31,-31v-9,8,-15,18,-18,31r-19,-49v-17,14,-22,43,-36,61r6,55r-12,-18r-43,-12r6,-37r-12,-6v16,37,-26,72,-7,116r-24,-18v-12,-2,-24,-6,-37,-13v-9,18,-5,40,12,49v-7,15,-17,30,-30,43r-25,-36v-18,-3,-39,-19,-55,-7r6,25r25,-18v-1,31,-10,61,-25,85r6,-18v-11,-16,-21,-34,-30,-55r-25,12r19,37r-31,6r18,24v-19,2,-28,-18,-30,-36v-21,5,-34,20,-55,24v20,-25,50,-27,73,-55r-37,12r-6,-18r37,-37v-7,-15,-17,-25,-31,-30r7,36v-13,-19,-28,-37,-43,-55r30,-12r13,12v15,-3,27,-9,36,-18r-36,-43r12,-43r37,-6r-19,37v6,0,14,2,12,-6v17,-25,42,-40,56,-68r-37,6r-6,-43v11,-3,21,-9,30,-18v-28,9,-60,3,-92,0r-18,-12r-6,-37r13,-6v1,24,13,36,36,37r18,-19v1,11,5,19,13,25v11,-11,23,-20,36,-25r-6,-43r-24,7v-9,-3,-15,-10,-19,-19r19,-6r18,18v5,-14,9,-30,12,-49v-13,0,-23,-4,-30,-12r30,-6v5,-11,13,-17,25,-18v0,27,-12,60,-25,79r6,13r7,-7r12,25r-19,0v0,17,-5,26,-12,43v9,2,20,10,25,0r-6,-19r55,-18v-9,3,-17,9,-25,18r25,0v9,-9,15,-19,18,-30r-43,-68v8,-1,14,-5,19,-12r-19,-12r12,-31r-36,-18r24,0r25,-31v-10,-15,-23,-33,-43,-36v3,12,9,22,18,30r-18,6r-19,-18v5,-9,13,-17,25,-25r24,-30r-18,0r0,6v-21,15,-40,42,-67,49r36,-43v5,-12,14,-20,25,-24r24,-49v-4,-15,-10,-25,-18,-31r12,-37r-30,-6r6,43v-8,-19,-19,-34,-31,-49r-24,12v7,-9,5,-19,0,-30v13,-2,28,-6,43,-13v12,15,28,25,49,31r-7,-43r25,-30v13,-31,18,-65,43,-86v6,-16,10,-34,12,-55v-9,-12,-15,-26,-18,-43r18,-37v-1,26,-1,46,18,55r19,-18v-17,-5,-23,-24,-25,-43r13,24v3,-15,9,-29,18,-42v5,9,13,15,24,18v-3,-9,-9,-19,0,-25v3,9,10,15,19,19v20,-7,36,-20,49,-37v14,0,28,-4,43,-12r-37,-37r6,-18v15,2,32,10,43,0r18,-49r6,30v11,-11,23,-22,37,-30v-13,-16,-23,-34,-30,-55r18,-31v1,19,9,35,24,49v2,-19,17,-19,37,-18v-21,10,-31,40,-43,61v9,-2,20,-10,25,0v-17,7,-33,17,-49,30v8,10,18,18,30,25r-6,-37r25,-6r6,12r-18,6r12,19r18,-19v6,9,14,15,25,19r-19,-25v-3,-11,-9,-19,-18,-24r18,-6r-18,-31r18,-6v2,7,6,13,13,18v8,-14,15,-30,18,-49v20,15,27,43,37,68v-10,-14,-18,-32,-37,-37r-6,12r12,6v3,14,9,26,18,37v-8,9,-4,20,0,31r43,-31r-18,-24v14,-8,22,-20,24,-37v13,0,26,-6,37,-19r12,19v13,3,27,9,37,0r-18,18v-18,5,-34,13,-49,25v7,14,17,26,30,36v19,4,39,7,56,13v13,-8,-8,-17,-13,-25r19,-6r18,31v6,-3,10,-10,12,-19r19,19r6,-13v13,9,30,16,49,19r18,-31r-12,6r-6,-12r49,-6r-6,18v35,3,59,12,92,19v-5,-40,-13,-68,-37,-92r-37,-12r-6,18r-37,6v19,-14,8,-43,6,-67r37,-6v-3,-19,-9,-38,-18,-56v12,9,24,21,36,37v-4,7,-8,14,0,19v2,12,8,24,19,36r43,19v16,-28,14,-61,43,-80v3,9,9,19,0,25r-7,36r19,31r43,31r6,-19r12,43r-12,-18r-12,6r6,18v-29,-8,-49,-35,-74,-49r-30,0v11,11,22,23,30,37v-7,4,-14,8,-18,0r6,49v-3,11,-13,14,-18,24v37,46,67,95,110,135v4,-18,15,-30,24,-43r6,37v5,-12,11,-20,19,-24r6,30v-11,1,-25,11,-31,0v4,28,41,27,55,49r-24,-12r6,43r18,24r13,-18v9,8,15,16,18,24r-24,7v7,26,50,43,79,30r-24,25r-37,-6v11,37,50,35,67,67v-1,7,-5,13,-12,18r-18,-18v-4,1,-8,5,-13,12v1,11,6,24,13,37r-19,12r13,6r-7,49r13,12r-13,19v1,21,13,47,0,61v-7,28,-13,56,-24,80r12,6r-24,30v1,22,15,51,-6,62v-5,-9,-14,-16,-25,-19r-12,37r-19,18v19,1,22,25,25,43r-25,-18v-10,-1,-20,-5,-30,-12r-6,18v-31,18,-56,34,-92,49r24,12v17,-1,34,-5,49,-12r-6,12v30,3,57,9,80,19v15,-10,31,-16,49,-19r18,31r49,-25v-1,9,-5,15,-12,19v-1,10,-5,20,-12,30v24,25,32,66,49,98v-12,11,-21,24,-31,37r31,-6r6,31r-19,-19r-6,37v-23,-22,-20,-57,-43,-80r-6,37v20,11,18,44,25,68r-31,6r19,-25r-37,-30r-31,18r-37,-12r-73,43r18,18v-10,-1,-20,-5,-30,-12r-6,18r-19,-43r25,12v7,-17,32,-21,36,-42v3,8,10,16,19,24v3,-10,9,-20,18,-31v-5,-9,-15,-3,-24,0r-62,-12r-30,25r-6,-25v-9,7,-16,16,-19,25r6,55v-15,-15,-15,-47,-18,-74v-38,-9,-74,-11,-110,-24r-37,18r-6,-30xm1085,-1556v5,1,10,6,13,13v-5,-1,-10,-5,-13,-13xm399,-1549v5,5,10,13,13,24xm553,-1531r12,0v0,-6,2,-14,-6,-12xm865,-1549r6,24r-12,6xm1477,-1549v10,1,20,5,31,12xm308,-1543r42,0r-30,49r-25,-19r-6,19xm448,-1537r19,24r-25,19r-6,-19r-24,6r24,43r-12,-6r-25,43r-12,-31r19,0v-1,-15,-6,-25,-13,-30v1,-11,6,-21,13,-31v15,-1,29,-7,42,-18xm638,-1519v0,-6,2,-14,-6,-12xm1110,-1537r12,0r-6,12xm1459,-1537v5,6,9,14,12,24xm540,-1519v-5,-1,-9,-5,-12,-12xm1049,-1531v5,1,9,5,12,12xm154,-1525v-1,5,-5,9,-12,12xm210,-1525v-11,11,-3,28,0,43r-31,-25v9,-3,20,-9,31,-18xm675,-1525v0,11,-4,22,-12,31v7,-9,11,-19,12,-31xm822,-1525r31,6r-25,6xm1030,-1507v0,-6,2,-14,-6,-12xm749,-1513v7,-11,21,-3,30,6r-24,7xm1073,-1519v10,15,22,25,37,31r-25,30v8,4,14,10,19,19r-37,-25xm712,-1513v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm1337,-1513r24,13v-9,-1,-17,-6,-24,-13xm491,-1507v5,1,9,5,13,13xm914,-1494v-9,7,-15,17,-18,30r12,19r18,-43xm1428,-1500r13,0r-6,12xm553,-1494v7,6,11,14,12,24r-12,6v-2,-11,-12,-25,0,-30xm1392,-1494v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm314,-1488r18,12v-9,0,-15,-4,-18,-12xm663,-1488v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm822,-1476v-5,-1,-9,-5,-12,-12xm828,-1488v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm1141,-1476v-5,-1,-10,-5,-13,-12xm1465,-1488r12,0r-6,12xm755,-1482v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm1422,-1470v-5,-1,-9,-5,-12,-12xm350,-1470r13,0r-6,12xm1012,-1464v1,5,5,10,12,13v-1,-5,-5,-9,-12,-13xm1171,-1470r12,0r-6,12xm105,-1464v5,1,10,5,13,13v-5,-1,-10,-5,-13,-13xm142,-1464r12,0r-6,13xm246,-1464r37,31r-12,43v-20,-14,-21,-45,-25,-74xm963,-1445v-1,-6,3,-16,-6,-13xm1116,-1464r12,0r-6,13xm1073,-1445v-5,-1,-9,-5,-12,-13xm1226,-1458v-1,6,-5,10,-12,13xm332,-1451v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm853,-1451v5,5,9,13,12,24v-5,-5,-9,-13,-12,-24xm1012,-1445v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm1036,-1445r7,18r0,-18r-7,0xm1134,-1445v6,14,10,30,13,49v-5,-13,-10,-30,-13,-49xm93,-1439v9,1,18,5,25,12xm1061,-1439r12,0r-6,12xm167,-1433v23,9,35,28,36,55r-42,31v7,-10,11,-22,12,-37r-37,24v7,-23,17,-47,31,-73xm350,-1433r19,24r-25,7xm742,-1433v7,0,18,13,7,18xm798,-1433v6,23,37,44,42,67v-19,-9,-45,-5,-55,-24v7,-9,12,-24,13,-43xm1177,-1433r13,0r-7,12xm485,-1409v0,-6,2,-14,-6,-12xm669,-1409v0,-6,2,-14,-6,-12xm779,-1427v-1,5,-5,9,-12,12xm822,-1427r67,37v-25,-3,-47,-15,-67,-37xm951,-1427r12,43r-18,-12r-7,12r-24,-18v13,-5,26,-14,37,-25xm889,-1409v-5,0,-9,-4,-12,-12xm1373,-1409v-5,-1,-9,-5,-12,-12xm1386,-1415r6,19r-13,6xm1159,-1409v12,10,18,22,18,37xm1422,-1409r6,19v-6,-6,-17,-12,-6,-19xm387,-1402v7,1,14,5,19,12v-9,0,-16,-4,-19,-12xm706,-1402v-4,6,-10,10,-19,12xm736,-1390v-5,-1,-9,-5,-12,-12xm1030,-1396v13,11,21,25,25,43xm246,-1384r13,0r-7,12xm265,-1384v5,1,9,5,12,12xm914,-1384r12,0r-6,12xm1122,-1384r12,43v-6,-14,-10,-28,-12,-43xm1220,-1384r25,12v-9,-1,-18,-5,-25,-12xm56,-1378v10,11,16,26,19,43v-8,-12,-14,-26,-19,-43xm553,-1360r12,0v0,-6,2,-14,-6,-12xm289,-1372r12,19v9,-9,19,-15,31,-19v-7,12,-11,26,-12,43r-55,-37xm99,-1366r31,0v-8,13,-18,23,-31,31r0,-31xm448,-1360r-18,13v9,-1,15,-6,18,-13xm1073,-1366r25,6r-25,7r0,-13xm1257,-1366r24,6r-24,7r0,-13xm1386,-1366r6,25r-19,-6xm889,-1353r0,12r13,-6xm908,-1353v1,9,5,17,12,24v0,-9,-4,-17,-12,-24xm1165,-1360v17,13,36,24,55,31r31,-18v-10,8,-10,26,-31,24v-19,5,-38,14,-55,25r31,12r-13,31v-19,-18,-35,-39,-49,-62v19,0,38,-4,56,-12v-9,-7,-18,-18,-25,-31xm1202,-1360v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm510,-1335v0,-6,2,-14,-6,-12xm1147,-1353r12,0r-6,12xm430,-1341v17,13,35,21,55,24v-16,-11,-34,-19,-55,-24xm938,-1329v0,-6,2,-14,-6,-12xm957,-1329v0,-6,2,-14,-6,-12xm969,-1341v1,9,5,17,12,24xm1257,-1347v5,1,9,5,12,12xm234,-1341r25,18v-9,15,-22,30,-37,43r-37,6r-12,-37r30,25r0,-25xm1018,-1341v22,4,34,14,37,30xm271,-1329v7,6,15,14,24,25v-9,-5,-17,-13,-24,-25xm932,-1323v7,7,15,11,25,12xm1079,-1329v5,1,9,5,13,12v-6,0,-10,-4,-13,-12xm1257,-1329v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm216,-1317v1,12,7,22,18,31v-1,-13,-7,-23,-18,-31xm412,-1317r6,25r24,-12xm326,-1317v5,1,9,5,12,13xm951,-1304v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm1257,-1311v23,9,35,28,37,56v-14,-15,-26,-33,-37,-56xm1281,-1311r13,0r-6,13xm1018,-1304v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm1036,-1304v5,1,10,5,13,12v-5,-1,-10,-5,-13,-12xm994,-1292v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm1318,-1298r25,6r-19,6xm44,-1292v7,0,16,14,6,18xm105,-1292v5,1,10,5,13,12v-5,-1,-10,-5,-13,-12xm136,-1292r18,6r-12,6xm1098,-1292r12,0r-6,12xm1024,-1262v0,-6,2,-14,-6,-12xm1061,-1274r31,12v-11,-1,-22,-5,-31,-12xm1098,-1274v19,7,36,15,49,25v-22,-1,-38,-10,-49,-25xm75,-1268r18,6r-18,7r0,-13xm222,-1268r12,31r-24,0xm1343,-1268r24,13v-9,-1,-17,-6,-24,-13xm1373,-1268v5,1,9,5,13,13xm112,-1255r49,0r-43,12xm1245,-1243v-6,0,-10,-4,-13,-12xm1061,-1249v5,1,9,5,12,12xm1386,-1249r6,30r-13,-6xm1306,-1243r-6,37r-25,-31v12,0,27,3,31,-6xm1324,-1243r43,24v-15,-4,-29,-12,-43,-24xm289,-1219r12,13r-6,-25xm308,-1219r12,0v0,-6,2,-14,-6,-12xm38,-1231r12,43r-12,18v-9,-17,-3,-40,0,-61xm63,-1231r24,0r-24,31r0,-31xm1055,-1225v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm1183,-1231r25,12v-9,0,-18,-4,-25,-12xm173,-1225r24,6r-24,6r0,-12xm118,-1219v10,5,18,13,24,25v-10,-3,-18,-12,-24,-25xm1098,-1206v-5,-1,-10,-5,-13,-13xm1232,-1213r19,7r-12,6xm1441,-1213r30,7v-6,65,-9,133,-24,189v12,24,-3,53,-6,80v-3,25,-9,49,-19,74r-24,226v13,39,-15,91,-19,129r-12,122r-49,19v11,-18,16,-42,19,-68r-13,-43r-30,0r24,-12v4,-23,18,-46,6,-67r25,-92v-1,-21,-11,-46,0,-61r24,-68v-9,-17,-3,-40,0,-61v-9,-9,-19,-15,-30,-18v15,-9,30,-21,43,-37r-31,-18v11,2,25,10,31,0v-1,-9,-6,-20,-13,-31r25,12v-3,-11,-11,-19,-25,-24r19,-13xm179,-1206v5,8,13,14,24,18v-1,13,-5,28,-12,43r-30,6v3,-23,9,-46,18,-67xm1294,-1200r12,0r-6,12xm1165,-1188r31,0v-8,12,-18,22,-31,31r0,-31xm1337,-1188r12,0r-6,12xm167,-1176r12,25v-1,-9,-5,-18,-12,-25xm1275,-1182r13,25v-9,-5,-13,-14,-13,-25xm1226,-1176v9,1,18,5,25,12v-9,-1,-18,-5,-25,-12xm1404,-1176v5,1,9,5,12,12xm1202,-1170v5,1,9,5,12,13xm1330,-1157v-5,-1,-9,-5,-12,-13xm87,-1157v13,17,22,37,25,61xm1245,-1157v11,5,21,13,30,24v-13,-2,-23,-10,-30,-24xm32,-1151v15,9,27,19,37,30v-16,1,-30,6,-43,13xm651,-894v16,-4,31,-11,30,-31v7,4,11,10,12,19r31,18r-6,-24r18,-43r-24,0v16,-15,25,-36,37,-55v-16,3,-30,9,-43,18r-19,31v-8,-4,-14,-10,-18,-19v3,-13,11,-26,24,-37v16,-7,28,-17,37,-30r-24,-6v23,-15,20,-48,24,-80r-24,31r-6,43v-12,-32,-25,-57,-49,-80r-105,43v6,8,14,12,25,12v-24,13,-38,34,-49,61v3,11,11,20,24,25v-11,17,-33,12,-36,-6v-15,-10,-31,-16,-49,-19v4,10,12,18,24,25v-9,21,-38,5,-55,0v0,20,26,31,25,55r-19,0r0,6r31,18r-6,-18v14,6,24,16,36,25v-1,-13,4,-32,-6,-37r6,-19r31,7r-18,24r6,31r30,36r31,13v-19,11,-35,23,-49,36r12,13r37,-13v9,-12,15,-26,18,-42r25,-31r-12,-18v-1,9,-6,17,-13,24v-5,-7,-13,-11,-24,-12r-18,18r6,-37v-6,0,-16,-2,-13,7v-11,-10,-8,-33,-12,-49r12,18v14,5,30,9,49,12v5,-15,6,-37,25,-37r24,13v0,-12,3,-27,-6,-31r6,-12r-42,-19v-4,14,-10,24,-19,31v-5,-16,-26,-19,-30,-37r-19,6r12,-36r37,30v-2,-13,-8,-25,-18,-36v12,-11,22,-23,24,-43r43,18r0,-24r25,-19r-19,19v-3,16,-13,28,-30,36r-19,25v30,13,48,-12,74,-19r18,13v-22,17,-21,55,-30,85r6,31r18,-24v4,10,10,18,18,24r-36,6r-19,37v9,16,23,27,37,37r25,-37v-17,2,-37,10,-49,0xm681,-1127v0,-6,2,-14,-6,-12xm749,-1133r18,37r12,-31xm1226,-1139r6,31v-7,-9,-15,-16,-24,-19xm1386,-1127v-5,-1,-10,-5,-13,-12xm167,-1133r6,61r-31,-55r19,6xm203,-1133v5,1,10,5,13,12v-6,0,-10,-4,-13,-12xm828,-1108v-2,-19,-28,-10,-43,-7v3,9,10,17,19,25xm1177,-1115v5,1,9,5,13,13v-6,0,-10,-4,-13,-13xm130,-1108v9,11,15,23,18,36xm657,-1108v9,6,15,14,18,24xm1343,-1108v-3,12,-9,22,-19,30xm773,-1084r12,0r-6,-12xm32,-1096v5,1,9,5,12,12xm528,-1078r12,0v0,-6,2,-14,-6,-12xm828,-1084r-12,37r18,12v4,-17,8,-34,0,-49r-6,0xm847,-1084v1,9,5,17,12,25v-1,-9,-5,-18,-12,-25xm865,-1084r6,49r25,-12xm1306,-1090v-1,5,-5,9,-12,12xm93,-1084v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm785,-1078v5,15,13,30,25,43v-4,-15,-12,-30,-25,-43xm742,-1072v2,5,14,19,19,6xm497,-1066v-8,9,-14,19,-18,31v12,-6,18,-16,18,-31xm632,-1072v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm1300,-1059v-5,-1,-9,-5,-12,-13xm20,-1066r12,31r-18,6xm773,-1059r-37,6v5,7,14,15,25,24v5,-9,15,-3,24,0v-1,-11,-5,-21,-12,-30xm154,-1053r25,6r-25,6r0,-12xm1312,-1053r18,6r-18,6r0,-12xm638,-1029v0,-6,2,-14,-6,-12xm118,-1041r6,18r-12,0xm693,-1041v9,1,18,5,25,12v-9,-1,-18,-5,-25,-12xm736,-1035v1,5,6,9,13,12v-1,-5,-6,-9,-13,-12xm847,-1029v-13,11,-29,19,-49,25r6,43r61,-43v-4,-8,-10,-16,-18,-25xm889,-1029r7,25r6,-25r-13,0xm1386,-1035r12,18v-6,-3,-10,-9,-12,-18xm161,-1029r6,25r-13,0xm638,-1010v-1,-6,3,-16,-6,-13xm779,-1023v-9,8,-15,18,-18,31r24,6xm687,-1010r-6,24r19,6xm1312,-1017v5,1,9,5,12,13xm87,-1010r61,0v-14,5,-29,17,-43,6r7,24v-13,-5,-21,-15,-25,-30xm908,-998v-1,22,-11,36,-31,43v-3,18,-9,34,-18,49v24,-1,42,3,61,6v7,15,17,23,31,24v-3,-15,-9,-32,-19,-49r-43,6r25,-30v15,-1,27,-5,37,-12v-15,-7,-30,-19,-43,-37xm1355,-1004v-1,13,-7,23,-18,30v9,-7,15,-17,18,-30xm179,-992v-11,-1,-8,12,-12,18v7,-3,15,-5,12,-18xm957,-974v-1,-5,-5,-9,-12,-12v1,4,5,8,12,12xm1281,-992r25,6r-25,6r0,-12xm1318,-992r12,61v-6,-18,-10,-38,-12,-61xm742,-980r0,19v12,2,9,-13,13,-19r-13,0xm773,-968v-1,-5,-5,-9,-12,-12v1,4,5,8,12,12xm779,-980r-18,25v11,2,25,11,30,0v0,-9,-4,-18,-12,-25xm822,-974v9,7,19,12,31,13xm859,-974r6,31v10,-11,1,-21,-6,-31xm412,-961v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm442,-949v0,-6,2,-14,-6,-12xm553,-968r30,13v-11,-1,-21,-6,-30,-13xm755,-961v-1,19,-14,40,6,49xm1239,-961v-9,5,-15,13,-19,24xm1281,-968v5,6,10,14,13,25v-5,-6,-10,-14,-13,-25xm626,-937v0,-6,2,-14,-6,-12xm412,-931r12,0v0,-6,2,-14,-6,-12xm638,-943r6,24r7,-24r-13,0xm767,-943r0,12r12,-6xm871,-925v-1,-5,-5,-9,-12,-12v1,4,5,8,12,12xm804,-931v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm840,-931r13,25v-1,-9,-5,-18,-13,-25xm981,-919v0,-6,2,-14,-6,-12xm1306,-937v9,18,15,38,18,61v-7,-13,-19,-25,-36,-36v8,-5,14,-14,18,-25xm56,-931v-3,17,-18,35,-6,49r-12,-37xm399,-912r13,0v-1,-6,3,-16,-6,-13xm436,-925v7,12,17,22,31,31v-7,-11,-18,-22,-31,-31xm565,-912r12,0v-1,-6,3,-16,-6,-13xm583,-925v1,5,5,10,12,13v-1,-6,-5,-10,-12,-13xm957,-925r6,43r24,-6v-7,-15,-17,-27,-30,-37xm810,-912r-31,24v-4,-9,-10,-15,-18,-18r-31,6v10,33,31,54,49,79r37,-12v3,9,9,19,0,25v16,-2,32,-8,49,-19r-61,-18r-19,-37v20,9,39,2,49,-12xm406,-900r-7,61r31,-18v-19,23,-29,52,-31,85r19,-18v-1,21,-5,43,-12,67v15,19,42,23,61,37v3,24,9,49,18,74v12,5,25,17,37,6v-7,-11,-16,-19,-25,-25v11,-5,19,-13,25,-24r0,6v-5,-14,-9,-30,-12,-49r-6,37v-21,-8,-25,-32,-37,-49v15,-3,32,-11,43,0r-49,-80r73,55r6,-24v14,17,24,35,31,55v-3,9,-7,15,-12,18r6,61v8,-3,16,-9,24,-18v22,34,17,79,43,122v19,-1,37,-7,55,-18r-30,6r12,-43r-55,6r12,-6r-18,-67r18,-12r12,-25r-30,6v11,-12,21,-26,30,-43r-43,0v20,-11,39,-25,56,-42v-29,-4,-38,13,-56,24v-2,-11,-10,-25,0,-31r49,-30v-5,-9,-15,-3,-24,0v-14,11,-32,19,-55,24r6,-36r-25,12v-28,-2,-50,-16,-67,-43r6,-31r-30,37r12,-43xm847,-894v-5,14,-10,30,-13,49v15,-2,32,-10,43,0v-1,-23,-11,-40,-30,-49xm1269,-900v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm626,-888r-12,31v8,-9,12,-19,12,-31xm718,-882r0,12r12,-6xm1343,-888v5,1,9,5,12,12xm522,-876r-18,25v11,-5,17,-13,18,-25xm963,-876v1,5,5,10,12,13v-1,-5,-5,-9,-12,-13xm981,-876v1,5,6,10,13,13v-1,-6,-6,-10,-13,-13xm99,-876v9,1,18,5,25,13xm889,-863v5,23,14,44,25,61r37,-31r24,31v9,-11,15,-23,19,-37v-9,-3,-15,-9,-19,-18v-27,11,-57,-2,-86,-6xm1294,-870v11,5,21,9,30,0r-24,19xm651,-857r-19,36r19,13v2,-16,7,-30,6,-49r-6,0xm681,-857v3,9,10,19,0,24r25,-12xm822,-845v0,-6,2,-14,-6,-12xm994,-845v0,0,2,-15,-7,-12xm32,-857v8,3,16,9,24,18v-9,-3,-17,-9,-24,-18xm620,-839v0,-6,2,-14,-6,-12xm742,-851r7,18r6,-12xm1257,-857v5,5,9,13,12,24xm718,-833r12,0v0,-6,2,-14,-6,-12xm528,-827v0,-6,2,-14,-6,-12xm69,-839r30,24v-13,-3,-23,-11,-30,-24xm614,-833v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm706,-827r-13,37r25,0r12,-37r-24,0xm749,-827r-25,31r18,18r25,-37v-4,-5,-10,-9,-18,-12xm871,-827v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm26,-827r30,25v-11,-5,-21,-14,-30,-25xm516,-808v-1,-6,3,-16,-6,-13xm424,-821v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm614,-815r0,13r12,-6xm773,-815v3,11,9,22,18,31v-1,-13,-7,-23,-18,-31xm951,-815r6,31r6,-18xm883,-796v0,-6,2,-14,-6,-12xm902,-796v0,-6,2,-14,-6,-12xm663,-802v3,15,9,29,18,43v9,-5,15,-14,19,-25xm840,-802r-6,24v-8,-9,-18,-15,-30,-18r24,43v11,9,24,21,37,36r24,-6v-2,-26,-8,-52,-18,-79v-5,12,-17,24,-6,36xm1300,-808r12,0r-6,12xm896,-778r12,0v0,-6,2,-14,-6,-12xm1263,-796v0,9,-4,17,-12,24xm1324,-790v-1,11,-7,19,-18,24xm424,-784v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm779,-778v-11,6,-19,14,-24,25v13,-4,21,-12,24,-25xm945,-778v3,18,13,28,30,31v-2,-17,-12,-28,-30,-31xm32,-778v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm718,-759v-1,-6,3,-16,-6,-13xm730,-772v1,5,5,10,12,13v-1,-6,-5,-10,-12,-13xm896,-759r12,0v-1,-6,3,-16,-6,-13xm798,-766v3,9,9,15,18,19v-5,-9,-11,-16,-18,-19xm1269,-766r19,7r-19,6r0,-13xm742,-747v-12,-10,-32,-2,-49,0r31,61v13,-11,29,-19,49,-24r-43,-25xm902,-753v3,11,9,23,18,36r-37,0r6,56r-12,49r49,-19r-6,-55r37,-12v-18,-19,-28,-44,-55,-55xm1343,-753v-1,11,-5,21,-13,30xm448,-747v5,1,10,5,13,12v-5,-1,-10,-5,-13,-12xm675,-741v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm1,-729r13,37r-31,-12xm577,-729v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm810,-723v1,5,5,10,12,13v-1,-6,-5,-10,-12,-13xm969,-710v-1,-6,3,-16,-6,-13xm644,-717r7,25r6,-12xm1232,-723r13,0r-6,13xm700,-710r0,12r12,-6xm834,-710r-6,42r31,-36xm1318,-704v-5,-1,-9,-5,-12,-13xm491,-692v0,-6,2,-14,-6,-12xm969,-692v0,-6,2,-14,-6,-12xm1288,-704r-7,24r-6,-30xm26,-704v5,6,17,12,6,18xm755,-698v12,11,26,19,43,24v-13,-10,-28,-18,-43,-24xm534,-680r12,0v0,-6,2,-14,-6,-12xm693,-680v0,-6,2,-14,-6,-12xm877,-680v0,-6,2,-14,-6,-12xm1294,-698v9,1,17,5,24,12r-24,6r0,-18xm167,-686v1,17,5,33,12,49v-1,-16,-5,-32,-12,-49xm712,-600v28,7,38,32,67,37r49,-7v4,-14,17,-29,6,-42r-43,-19r-6,-37v-8,3,-16,10,-24,19v3,8,9,14,18,18r-24,31v-3,-21,-5,-45,-13,-61r-18,12r-37,-6v0,6,-2,14,6,12v-15,7,-31,11,-49,12r19,-12r12,-43r-24,0r-13,61v4,15,10,29,19,43r18,-18v15,11,27,25,49,30v-2,-15,-6,-25,-12,-30xm81,-686r12,0r-6,12xm442,-668v0,-6,2,-14,-6,-12xm448,-680r7,31r6,-25xm896,-686v5,1,9,5,12,12xm693,-661v-1,-6,3,-16,-6,-13xm712,-661v-1,-6,3,-16,-6,-13xm730,-661v-1,-6,3,-16,-6,-13xm859,-661v7,-1,11,-5,12,-13xm81,-668v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm902,-668v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm540,-655r-12,49r25,6v-13,1,-30,11,-37,0v7,11,17,17,30,18r31,25v2,-14,8,-26,18,-37xm859,-655v-9,14,-15,28,-19,43v11,-13,17,-27,19,-43xm7,-655r13,24r-19,-6r-5,12xm798,-637r12,0v0,-6,2,-14,-6,-12xm-29,-637v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm173,-612r0,12r12,-6xm1220,-606v8,-13,27,7,37,-6r-31,24xm32,-606v5,1,9,5,12,12xm14,-600r18,30v-9,-8,-15,-18,-18,-30xm191,-594v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm1183,-594r0,12r13,-6xm1288,-594v-2,10,-8,18,-19,24v9,-5,15,-13,19,-24xm185,-563v-1,-6,3,-16,-6,-13xm197,-576v1,9,5,17,13,25xm675,-576v1,11,5,22,12,31r6,-25xm-41,-576v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm142,-576v0,10,-4,18,-12,25xm700,-563r24,30v-3,-15,-11,-25,-24,-30xm736,-563v3,15,12,27,25,36v-5,-13,-14,-25,-25,-36xm1,-563r13,0r-7,12xm779,-539v0,-6,2,-14,-6,-12xm1257,-557v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm20,-551v7,0,16,14,6,18xm203,-539r19,18r-19,-6v-4,7,-8,15,0,19v11,-7,19,-18,25,-31r-25,0xm1165,-545r49,12v-9,8,-15,18,-18,31r24,73v-15,-11,-27,-25,-37,-43v-4,-27,-10,-51,-18,-73xm1306,-545v5,1,9,5,12,12xm1232,-539v5,1,10,5,13,12v-5,-1,-10,-5,-13,-12xm240,-527r0,19r6,0r0,-19r-6,0xm1122,-521v5,7,11,11,19,13xm136,-502v0,-6,2,-14,-6,-12xm216,-416v27,-17,33,-43,55,-68r-19,-24v-7,24,-21,38,-42,43r-13,-31r-55,12r-18,31v-2,-8,-6,-14,-12,-19r18,31v-3,19,-18,40,-6,55v5,-7,13,-15,24,-24v17,-3,32,-11,43,-25v9,3,18,10,25,19xm1220,-514r19,24v-9,-6,-16,-14,-19,-24xm-29,-502r30,43v-19,-6,-29,-20,-30,-43xm136,-484v0,-6,2,-14,-6,-12xm1257,-502v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm32,-472r24,19r-24,18v-3,-6,-9,-10,-18,-12v7,-5,13,-14,18,-25xm1147,-472v-1,11,-5,24,-13,37v1,-11,6,-23,13,-37xm1245,-472v9,9,17,22,24,37xm308,-447v0,0,2,-15,-7,-12xm87,-441v0,-6,2,-14,-6,-12xm265,-453v4,11,8,21,0,30v6,-3,10,-9,12,-18v5,6,13,10,24,12v-9,-10,-21,-18,-36,-24xm1067,-447v-5,-1,-9,-5,-12,-12xm148,-453r19,12r-25,18xm1110,-447v5,1,9,5,12,12xm1300,-447r18,37v-3,9,-7,15,-12,18xm-41,-441r24,12r-12,62v9,5,18,13,25,24v-24,-6,-33,-28,-49,-43r18,-6v-3,-14,-5,-30,-6,-49xm320,-435v8,9,18,15,30,19xm1190,-423v-9,-13,-17,7,-25,13r25,12r0,-25xm-4,-429v5,4,9,10,11,19xm301,-423r-12,19r25,-6v-1,-5,-6,-10,-13,-13xm265,-416r12,12v-1,-5,-5,-9,-12,-12xm216,-410r-19,43r-24,-31v-13,9,-22,19,-25,31r-61,36v-9,23,-22,41,-37,55r31,7r24,24v8,-13,12,-27,13,-43r-31,19r18,-37r-6,-31v11,8,26,14,43,19v7,-11,11,-23,12,-37r13,55r-13,37r19,-19r0,19r6,0r12,-62v26,-2,44,-16,55,-42r-30,30v-20,-6,-32,-18,-37,-37r31,13v4,-16,13,-28,12,-49r-6,0xm240,-398v0,-6,2,-14,-6,-12xm308,-404r-37,24v2,9,8,17,18,25v12,-13,18,-30,19,-49xm105,-398v4,11,12,19,25,24xm259,-398r18,12v-3,-6,-9,-10,-18,-12xm1,-398r6,18v-5,-6,-15,-12,-6,-18xm1281,-392v5,1,10,5,13,12xm1294,-374r12,43r-18,-18xm87,-361v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm1361,-355v-5,-1,-9,-5,-12,-12xm338,-361v21,15,43,27,68,36v12,-5,22,-13,30,-24r12,18r-12,31r-55,49r-55,-18v13,-14,25,-29,37,-43v-18,-5,-17,-33,-25,-49xm289,-343v3,9,10,17,19,25v-2,-11,-8,-19,-19,-25xm56,-337v-10,12,0,21,7,31r6,-25xm-35,-318r-6,18r-6,-25xm222,-318r-12,30v9,-3,19,-10,24,0v0,-11,-4,-21,-12,-30xm375,-318v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm522,-312v-5,-1,-9,-5,-12,-13xm197,-300v-1,-5,-5,-9,-12,-12v1,4,5,8,12,12xm1312,-318v5,1,9,5,12,12xm124,-294v0,-6,2,-14,-6,-12xm1269,-306v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm393,-300v1,5,6,9,13,12v-1,-5,-6,-9,-13,-12xm357,-294r-13,31v11,-2,21,-6,31,-13xm210,-282v7,7,15,12,24,13xm387,-269v-1,-6,3,-16,-6,-13xm406,-269v0,-6,2,-16,-7,-13xm700,-288r18,6r-18,6r0,-12xm1263,-269v-1,-6,3,-16,-6,-13xm644,-282v25,12,37,33,37,62xm663,-263v-1,-6,3,-16,-6,-13xm889,-251v0,-6,2,-14,-6,-12xm902,-263v0,6,-2,14,6,12r24,-6xm834,-245v0,-6,2,-14,-6,-12xm975,-257r-18,18v10,-3,16,-9,18,-18xm-60,-257v5,1,10,5,13,12v-5,-1,-9,-5,-13,-12xm136,-251v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm424,-245v-5,-1,-9,-5,-12,-12xm203,-251v13,5,24,13,31,24xm154,-227r13,0v0,-6,2,-14,-6,-12xm350,-245r31,25v-11,-5,-22,-14,-31,-25xm283,-239r25,0r-25,31r0,-31xm742,-233r31,19v-9,9,-15,21,-18,36xm853,-233r36,37v15,-7,29,-11,43,-12r-12,24v10,9,24,3,37,0v-10,9,-20,16,-31,19r-18,-25r-55,12r6,31r-25,12v-11,-13,2,-28,6,-43v-18,19,-23,45,-36,68v8,3,14,9,18,18r-18,-12v1,-21,11,-46,0,-61r24,-31r-30,-6v4,-9,12,-15,24,-18r37,30v-5,-12,-14,-22,-25,-30xm38,-208v0,-6,2,-14,-6,-12xm338,-227v5,13,9,30,12,49v-5,-13,-9,-30,-12,-49xm467,-227v5,6,9,14,12,25xm130,-220v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm161,-214v1,9,5,17,12,24r12,-24r-24,0xm210,-214r24,30v-11,-5,-19,-15,-24,-30xm228,-214v17,1,33,9,49,24xm14,-202v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm522,-208r31,0r-25,18xm559,-208v7,4,13,10,18,18xm614,-202r18,6r-12,6xm675,-202r25,18v-11,0,-20,-6,-25,-18xm932,-202v5,1,9,5,13,12xm87,-190v1,5,5,9,12,12v-1,-4,-5,-8,-12,-12xm381,-196r25,6r-25,6r0,-12xm-35,-190r12,31v-7,-7,-11,-18,-12,-31xm252,-190r7,19r-13,0xm1159,-190v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm1177,-190v15,12,28,28,37,49v-36,-8,-64,-11,-86,-43v15,9,31,15,49,19v2,-9,10,-20,0,-25xm289,-184v-8,14,-20,24,-37,31v13,-8,26,-18,37,-31xm565,-184r12,19r-18,36r-43,-36v11,5,21,13,30,24xm602,-184r30,6r-24,7xm1092,-184v5,9,15,3,24,0r-18,19v-6,-6,-18,-13,-6,-19xm197,-178r25,13v-9,-1,-18,-6,-25,-13xm706,-178v5,1,9,5,12,13r-18,6xm320,-171v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm357,-159v-5,-1,-10,-5,-13,-12xm1202,-153v-1,-5,-5,-9,-12,-12v1,4,5,8,12,12xm-35,-153v-5,-1,-9,-5,-12,-12xm136,-165r31,0v-9,7,-18,17,-25,30xm730,-165v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm1281,-165v11,5,20,15,25,30xm883,-159r13,24v-6,-6,-10,-14,-13,-24xm1018,-153v5,13,9,30,12,49r-24,0v5,-13,9,-30,12,-49xm271,-147r12,31r-24,0r18,-6xm626,-147r6,31r-18,0xm1134,-147v7,1,14,5,19,12xm1257,-147r-12,37v0,-12,4,-24,12,-37xm63,-141v11,1,21,5,30,12v-11,-1,-21,-5,-30,-12xm234,-141v7,1,13,5,18,12v-7,-1,-13,-5,-18,-12xm718,-141r24,12v-9,-1,-17,-5,-24,-12xm908,-141r18,6r-12,25xm1085,-129v-5,-1,-9,-5,-12,-12xm197,-135r13,0r-7,13xm1171,-135r6,31r-30,-25xm945,-129v0,12,-4,22,-13,31xm1122,-116v-5,-1,-9,-5,-12,-13xm1128,-129v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13xm559,-122r24,30v-12,-5,-20,-15,-24,-30xm700,-122v19,7,37,17,55,30r-6,12r-19,-12r12,25r-12,12xm755,-122r18,6r-18,6r0,-12xm669,-116v7,1,13,5,18,12v-7,-2,-13,-6,-18,-12xm871,-116v7,13,18,28,31,43v-19,-5,-29,-20,-31,-43xm1043,-116r42,18v-15,5,-27,15,-36,31xm963,-110v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm1263,-110v-1,5,-5,9,-12,12xm1294,-98v-5,-1,-10,-5,-13,-12xm908,-104v5,1,9,5,12,12v-5,-1,-9,-5,-12,-12xm834,-98r25,12v-9,-1,-18,-5,-25,-12xm626,-92v11,1,22,5,31,12v-11,-1,-21,-5,-31,-12xm926,-92v5,6,9,14,12,25v-6,-6,-10,-14,-12,-25xm1092,-86r18,6r-12,7xm681,-80v5,1,9,5,12,13xm853,-80v5,1,9,5,12,13xm1000,-80v9,8,15,18,18,31xm1171,-80v5,1,9,5,12,13xm1196,-80v9,1,17,6,24,13xm798,-73r30,30r-18,-6v-4,7,-8,14,0,18r-25,-6xm1232,-67v-1,5,-5,9,-12,12xm1177,-43v5,1,9,5,13,12v-5,-1,-10,-5,-13,-12xm1085,-12r25,6r-18,6","w":1313},"R":{"d":"281,-1485v-12,-16,-6,-41,-22,-50v-7,5,-11,12,-11,22v-17,-11,-35,-19,-55,-22v-12,-7,-27,-15,-44,-22r6,28v-8,-7,-17,-10,-28,-11v-3,-7,-9,-10,-17,-11r-5,-11r-22,5r16,6v-18,8,-32,14,-44,33v-3,22,-17,46,-5,66v-4,48,-16,95,-6,143r-11,11v1,19,4,40,11,61v-7,25,-20,63,0,83r-22,16r11,44v-3,17,-11,29,-11,50v11,-2,7,11,11,16r22,-11v-14,11,-21,30,-27,50v6,10,15,15,27,16v1,-32,18,-1,33,-5r6,-28r27,28r17,50v-18,-16,-20,-43,-39,-56r6,28v-4,-1,-8,-5,-11,-11r-17,16v-1,-6,-5,-11,-11,-16r22,44v-10,3,-17,10,-22,22r28,-11r-22,28v1,17,12,38,-6,44r6,16v18,-26,46,-29,72,-44v-3,11,-8,21,-17,28r-6,33r-27,-11r-6,16v-11,1,-22,4,-33,11r39,17v-19,15,-20,37,-39,49r22,28r44,17r-33,11r28,22v-3,11,-13,19,-28,22r-22,22r22,11v-8,11,-15,26,-22,44v2,11,8,20,17,27r-17,17r22,33r28,11r-22,28r11,27v-8,9,-17,15,-28,17r-5,33r-17,-22r-16,11r-6,55r-27,-22v11,0,24,2,27,-6v-4,-17,-11,-33,-22,-49r-32,-11v0,16,2,36,-6,44v3,9,16,20,6,27v-2,21,-10,44,0,61v-10,8,-11,26,-17,39v16,5,10,28,0,44r11,11v-3,24,-17,51,-5,71v-3,8,-9,14,-17,17r88,-1477v3,-20,11,-40,22,-61r154,6v11,4,20,11,28,22v9,-10,17,-20,33,-22r0,11v21,-2,44,-10,61,0v38,-8,68,-7,99,11v13,-5,27,-9,44,-11r33,11v67,-13,140,8,210,11r11,-6v49,5,93,14,143,6v1,5,13,15,17,5r33,-5v-7,6,-14,12,-6,22v-1,14,-7,29,-16,44r11,-22v-9,7,-16,16,-22,27r11,17r27,-22v17,6,33,29,50,16v1,13,5,26,11,39r33,-11r-6,11v22,10,37,26,56,38v21,36,43,71,71,100r-16,44v10,17,7,43,16,60r17,-11v-11,13,-16,32,-22,50r16,11v-2,15,-9,28,-22,39v16,11,31,37,11,49r17,17r-11,16r11,6r-28,33r6,44r-11,16r5,28r-11,-16r-16,33v6,0,13,2,11,-6r-17,50v-11,9,-20,20,-27,33v-13,12,-26,27,-39,44v11,32,42,47,66,66r11,44r-11,-11v20,26,19,73,33,105r-11,-11r11,38r-16,11v4,28,20,60,22,94r-17,-16r-11,27r28,-5v-12,13,-27,34,-17,55v-6,38,-15,76,-5,115r-6,28r17,6v-12,6,-16,14,-28,22r17,22r-11,60r11,44r-28,44v-1,11,-7,19,-16,23v-1,-5,-5,-8,-12,-11r-11,16v5,0,13,2,11,-5v9,10,16,17,23,22v41,4,81,6,121,0r16,5r-16,16r-1263,-11v2,-11,8,-20,17,-27r55,6v24,-9,55,-14,82,-6v12,-9,30,-3,39,6r44,-11v13,4,27,16,39,5r-6,-28r11,-5v-11,-11,-35,-32,-49,-11r-22,33r-6,-17v13,-12,24,-26,44,-33r-11,-16r11,-6r17,17r5,-33r-22,11r17,-33r-28,-6v5,-13,10,-24,17,-33v-1,-15,-5,-29,-11,-44r16,11r11,-88r-22,-6v8,-7,14,-16,17,-27v-18,-23,-50,-31,-72,-50v1,6,-4,20,6,17r-6,5v-16,-21,-14,-51,-22,-77r28,-5r-23,-44v9,-3,15,-8,17,-17r-28,-11r-11,28r-16,-67r16,22v12,-1,27,-9,34,0r-17,-22v12,-3,23,-8,33,-16v-9,-9,-14,-16,-16,-22r22,-6v-3,-9,-8,-15,-17,-16r33,-11v6,32,10,61,-11,82v13,11,27,20,44,28v-13,-1,-25,-5,-38,-11r-11,11r16,33r-16,-5r22,16v14,-17,27,-35,38,-55v-7,-8,-16,-15,-27,-22v10,-6,19,-13,27,-22r-16,-11r5,-28v-14,-17,-40,-22,-60,-33r5,-38r28,-11v1,-11,5,-16,11,-17v9,-11,15,-24,16,-39v9,-20,21,-38,28,-60r-33,-22v6,-27,11,-55,22,-77v-13,-7,-26,-17,-44,-17v5,-11,15,-22,5,-33v12,18,27,31,44,44v5,-5,9,-12,11,-22v-11,-12,-23,-21,-38,-28r33,-11v-5,-9,-13,-14,-22,-16r16,-28r-16,-33r22,17r5,-33v-6,1,-11,5,-16,11v12,-6,25,-12,33,-22r-28,-17v11,-20,26,-36,44,-49v-9,-5,-16,-12,-22,-22v-16,17,-25,41,-44,55v1,-11,11,-28,0,-33r6,-34r-17,-22v-11,17,-13,37,-27,50v7,-9,14,-18,5,-28r11,-44r-22,6v7,-6,12,-14,17,-22r-11,-33r27,16v0,19,-14,42,6,50r-6,-28r6,11v2,-29,5,-57,16,-77v-11,-2,-14,-12,-16,-22r-17,11r22,-16r-5,-33v10,3,21,9,33,16v14,-18,19,-41,38,-55r-5,-22r-28,5r-33,28r6,-44r16,16v22,-21,42,-39,55,-71xm61,-1595v0,-6,2,-13,-6,-11xm116,-1590v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm182,-1590v0,-5,2,-13,-5,-11xm292,-1601v1,5,5,8,11,11v-1,-5,-4,-8,-11,-11xm331,-1595v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm72,-1590r-22,33v1,7,5,13,11,17r27,-33xm359,-1579v0,-6,2,-13,-6,-11xm155,-1568v0,-6,2,-13,-6,-11xm337,-1579v1,5,4,8,11,11v-1,-5,-5,-8,-11,-11xm673,-1579r-17,33v11,-8,17,-19,17,-33xm938,-1584v19,2,37,11,55,27r5,-22v14,3,27,11,39,22r-33,-5r0,27v-11,-6,-20,-15,-28,-27v-13,11,-28,20,-49,22v7,-12,10,-27,11,-44xm314,-1573v-11,12,-23,25,-38,38r16,44v3,-19,9,-35,17,-49v3,11,11,18,22,22v0,-19,-6,-38,-17,-55xm585,-1573r-11,27r22,-5xm634,-1573v4,8,10,15,17,22v1,-5,4,-8,11,-11xm706,-1573r-11,16r17,28r16,-17xm734,-1562v0,-6,2,-13,-6,-11xm783,-1573v-7,-2,-5,6,-5,11v7,2,5,-6,5,-11xm855,-1562v0,-6,2,-13,-6,-11xm899,-1573r-5,33r16,-11xm552,-1568r5,11v0,-5,2,-13,-5,-11xm1059,-1573v8,10,14,23,17,38r-6,-11r-22,6xm1092,-1573v14,6,25,15,33,27xm1136,-1573v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm392,-1551r11,0v0,-6,2,-13,-6,-11xm452,-1551v0,-5,2,-13,-5,-11xm513,-1551v6,0,10,-4,11,-11v-3,1,-7,5,-11,11xm761,-1562r11,16v-1,-7,-5,-13,-11,-16xm789,-1562r-11,16v5,-3,9,-9,11,-16xm816,-1562v1,7,4,15,11,22xm1169,-1568r17,17r-22,11v6,-9,15,-18,5,-28xm838,-1546r22,-5r-11,-6xm1219,-1562v4,1,8,4,11,11xm563,-1540v0,-6,2,-13,-6,-11xm623,-1551v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm678,-1551v1,5,5,8,11,11v-1,-4,-4,-8,-11,-11xm756,-1540v0,-6,2,-13,-6,-11xm871,-1551v1,9,5,18,12,27v-1,-9,-5,-18,-12,-27xm800,-1546r11,17v-1,-7,-5,-13,-11,-17xm408,-1529v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm480,-1529v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm645,-1540v2,8,6,15,11,22v-1,-9,-4,-16,-11,-22xm673,-1529v-1,-5,-4,-8,-11,-11v1,3,5,7,11,11xm783,-1540v4,7,11,15,22,22v-3,-9,-11,-16,-22,-22xm855,-1540v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm441,-1535v5,10,12,17,22,22v-5,-9,-12,-17,-22,-22xm684,-1535r11,28r17,-22xm480,-1518v7,-3,14,-6,5,-11xm723,-1518r11,0r-6,-11xm298,-1507r11,0v0,-6,2,-13,-6,-11xm381,-1507v0,-6,2,-13,-6,-11xm574,-1507v0,-6,2,-13,-6,-11xm645,-1507v0,-5,2,-13,-5,-11xm971,-1524v4,1,8,4,11,11v-5,-1,-8,-4,-11,-11xm816,-1502v0,-5,2,-13,-5,-11xm888,-1502v0,-5,2,-13,-5,-11xm678,-1496v0,-5,2,-13,-5,-11xm932,-1507v-20,-3,-16,17,-5,22xm326,-1502v-8,-2,-6,5,-6,11v8,2,6,-5,6,-11xm177,-1496r16,22r-22,11v5,-11,15,-22,6,-33xm287,-1463v-1,-5,-4,-8,-11,-11v1,3,5,7,11,11xm199,-1474r11,22v-5,-5,-8,-13,-11,-22xm171,-1447v7,11,13,24,17,39r-22,0v4,-13,16,-27,5,-39xm276,-1425r0,11r11,-5xm144,-1425v4,1,8,4,11,11xm1059,-1397r11,0v0,-6,2,-13,-6,-11xm265,-1386r-17,44r17,17r16,-44xm88,-1386v13,7,22,18,28,33xm155,-1386v11,6,18,13,22,22v-9,-3,-17,-11,-22,-22xm226,-1386r11,0r-5,11xm55,-1375r11,28r-16,5xm281,-1342v0,-5,2,-13,-5,-11xm149,-1353v9,4,17,11,22,22v-8,-5,-15,-12,-22,-22xm1125,-1331v0,-5,2,-13,-5,-11xm215,-1336v1,5,4,8,11,11v-1,-5,-4,-9,-11,-11xm232,-1325r-17,11r11,38r-16,17r16,5r11,44r22,11r6,-33v7,0,10,-4,11,-11v-11,-9,-22,1,-33,6r-6,-22v5,1,8,4,11,11v9,-10,15,-23,17,-39v-8,-13,-19,-26,-33,-38xm83,-1325v5,5,8,12,11,22xm138,-1325r17,5r-17,6r0,-11xm1125,-1309v0,-5,2,-13,-5,-11xm77,-1287r11,22v-5,-5,-8,-12,-11,-22xm50,-1259r22,16r-11,28xm745,-1127v3,-14,17,-14,22,-27r-11,-11r16,0v-4,-13,-8,-34,-22,-34r-38,-22r-17,44r6,28v-4,9,-10,16,-17,22v14,21,11,54,5,83v19,16,8,50,6,77r39,11v21,-26,35,-55,44,-94r-22,-44r11,-38xm298,-1204v0,-6,2,-13,-6,-11xm226,-1210r-11,22r22,-11v-1,-3,-5,-7,-11,-11xm265,-1199r-22,17r22,17r11,-12xm50,-1199r11,22v-7,-5,-11,-12,-11,-22xm83,-1199v5,4,8,10,11,17xm232,-1188r5,11v0,-5,2,-13,-5,-11xm723,-1177v-5,0,-8,-4,-11,-11xm83,-1171r5,33v-5,-11,-15,-22,-5,-33xm155,-1171v-1,8,-5,15,-11,22xm684,-1154v0,-6,2,-13,-6,-11xm83,-1132r11,22v-5,-5,-8,-13,-11,-22xm121,-1132r23,11v-9,-1,-16,-4,-23,-11xm783,-1116v0,-5,2,-13,-5,-11xm259,-1121r-11,16r17,11r5,-22xm778,-1110v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm193,-1094r22,-5r-38,33r5,-39xm248,-1088v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm684,-1088v0,-6,2,-13,-6,-11xm783,-1088r0,11r11,-6xm44,-1088r11,27v-7,-8,-10,-17,-11,-27xm684,-1083r0,11r11,-5xm1142,-1072v0,-6,2,-13,-6,-11xm149,-1083v5,5,8,13,11,22r-16,6v6,-9,15,-18,5,-28xm684,-1033v0,-6,2,-13,-6,-11xm1153,-1033v-1,-5,-5,-8,-11,-11v1,3,5,7,11,11xm667,-1028v0,-5,2,-13,-5,-11xm94,-1039v-1,7,-5,12,-11,17xm116,-1039r11,28v-7,-7,-11,-17,-11,-28xm166,-1039r11,0r-6,11xm17,-1022r0,11r11,-6xm226,-1006r11,0v0,-5,2,-13,-5,-11xm254,-1006v0,-6,2,-13,-6,-11xm689,-1017r-5,17r11,0xm678,-989v0,-5,2,-13,-5,-11xm778,-989v0,-6,2,-13,-6,-11xm1120,-995v1,5,4,9,11,11v-1,-5,-5,-8,-11,-11xm11,-962r11,0r-5,-11xm50,-962r-28,39r22,-11r-5,17v9,-9,18,-14,27,-17v-2,-10,-7,-19,-16,-28xm248,-951v0,-5,2,-13,-5,-11xm243,-945v1,5,4,8,11,11v-1,-5,-4,-8,-11,-11xm712,-934v-1,-5,-5,-8,-11,-11v1,4,5,8,11,11xm11,-923v1,5,5,8,11,11v-1,-3,-5,-7,-11,-11xm11,-890r11,6r0,-17v-9,-1,-7,7,-11,11xm33,-901r11,17v-1,-7,-5,-13,-11,-17xm127,-906v4,1,8,4,11,11xm221,-890r11,6v-1,-6,4,-20,-6,-17xm248,-884v0,-5,2,-13,-5,-11xm144,-895v14,9,29,15,44,16r-33,11xm83,-890r22,17v1,-5,4,-8,11,-11v-5,6,-13,13,-22,22xm11,-879r6,17r5,-17r-11,0xm39,-873v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm210,-862v7,8,16,13,27,16xm17,-840v0,-6,2,-13,-6,-11xm33,-851r0,11r11,-6xm50,-840v1,9,5,18,11,27v0,-9,-4,-18,-11,-27xm166,-846v13,11,26,24,38,39v-10,0,-19,4,-27,11r5,16r22,-5v-7,13,-10,27,-11,44r-38,28v14,-27,-13,-35,-28,-45v-9,7,-20,10,-33,11r33,-44v15,11,31,21,50,28r-22,-28r16,17v13,-18,1,-46,-5,-72xm1048,-829v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm99,-835v-10,-1,-7,12,-11,17v6,-3,13,-5,11,-17xm149,-835r11,33v-7,-9,-10,-20,-11,-33xm44,-813v0,-5,2,-13,-5,-11xm22,-813r0,11r11,-5xm6,-807v1,7,5,13,11,16xm1037,-796v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm39,-796r-6,27r22,-5v-1,-8,-7,-15,-16,-22xm0,-769r0,11r11,-5xm50,-769r5,11v0,-5,2,-13,-5,-11xm127,-769v-8,-2,-6,5,-6,11v8,2,6,-5,6,-11xm33,-747r11,6r-5,-17xm1026,-758v1,5,5,9,11,11v-1,-3,-5,-7,-11,-11xm55,-752r0,11r11,-6xm182,-752v-7,-2,-5,6,-5,11v7,2,5,-6,5,-11xm22,-747v1,5,5,9,11,11v-1,-3,-5,-7,-11,-11xm83,-741r16,28r-22,5v5,-11,15,-22,6,-33xm1076,-725v0,-6,2,-13,-6,-11xm215,-725r6,17r5,-17r-11,0xm50,-719r-11,17v12,21,13,54,38,66v1,-5,5,-8,11,-11v-8,-27,-26,-47,-38,-72xm243,-708v0,-6,2,-13,-6,-11xm1092,-719v1,8,4,15,11,22xm204,-708v-10,18,-17,36,-22,55v12,-16,19,-34,22,-55xm248,-691v0,-5,2,-13,-5,-11xm6,-686r11,17v-1,-7,-5,-13,-11,-17xm39,-680v-11,7,-18,16,-22,27r38,-5xm254,-669v-1,-5,-4,-9,-11,-11v1,3,5,7,11,11xm684,-554v-12,13,-14,39,-22,55r5,12r22,-6r-22,44v-3,38,-5,73,-22,99r17,-5r-6,44v22,20,-4,46,-16,61r27,11v-5,15,-13,29,-22,44v11,9,22,17,33,22r-22,11r-5,-11v5,26,-28,79,5,88v-18,25,-28,51,-44,77r33,-16r-11,16v21,12,42,-2,55,-16v5,8,10,13,17,16v20,-6,40,-15,61,-27v-33,-18,-37,-63,-50,-100r11,0v4,-34,8,-68,0,-99r11,11r6,-11v-18,-11,-12,-47,-17,-72v17,-14,22,-40,33,-60r-33,5v10,-7,16,-16,17,-27r-17,-33r22,11v-5,-26,-15,-51,-5,-77r-22,-34r16,-16r-16,-33r22,11r11,-17r-28,-38r22,11v-3,-19,-8,-36,-16,-50r-33,-27r-34,71v13,8,23,19,28,33r-22,-11r-11,28r22,-6r0,11xm215,-675r0,11r11,-5xm149,-647r11,0v0,-5,2,-13,-5,-11xm226,-647v0,-5,2,-13,-5,-11xm662,-642v0,-6,2,-13,-6,-11xm1114,-642v0,-5,2,-13,-5,-11xm1131,-658v4,1,8,4,11,11xm0,-636v0,-5,2,-13,-5,-11xm44,-647v3,9,8,18,17,27v-3,-10,-9,-19,-17,-27xm182,-647v10,9,21,15,33,16xm259,-636v0,-5,2,-13,-5,-11xm83,-636r0,11r11,-6xm166,-625r-6,16v5,-1,15,-12,6,-16xm210,-620v1,5,4,8,11,11v-1,-5,-4,-8,-11,-11xm6,-614r11,16v-1,-7,-5,-13,-11,-16xm99,-620v5,1,8,4,11,11v-4,-1,-8,-4,-11,-11xm1114,-592v0,-5,2,-13,-5,-11xm0,-587v0,-5,2,-13,-5,-11xm55,-581v0,-5,2,-13,-5,-11xm33,-587r0,11r11,-5xm149,-587v1,5,5,8,11,11v-1,-5,-4,-8,-11,-11xm22,-559v0,-5,2,-13,-5,-11xm1114,-570v1,5,5,8,11,11v-1,-4,-5,-8,-11,-11xm39,-565r5,17r0,-17r-5,0xm-5,-548v0,-5,2,-13,-5,-11xm210,-548v3,8,8,15,16,22v-2,-8,-7,-15,-16,-22xm144,-537r16,11v-3,-5,-8,-9,-16,-11xm662,-521v0,-6,2,-13,-6,-11xm1114,-521v0,-5,2,-13,-5,-11xm-5,-526r0,11r11,-6xm39,-504v0,-6,2,-13,-6,-11xm50,-515v2,7,7,11,16,11xm232,-493v0,-6,2,-13,-6,-11xm6,-493v-8,9,-13,20,-16,33v13,-1,25,-4,38,-11v-5,-7,-12,-15,-22,-22xm55,-493v4,11,11,21,22,28xm761,-476v0,-5,2,-13,-5,-11xm39,-482r-11,22r22,-5xm656,-471v0,-5,2,-13,-5,-11xm83,-465r5,11v0,-5,2,-13,-5,-11xm0,-460r-5,17r11,0xm1114,-449v0,-5,2,-13,-5,-11xm66,-454r0,11r11,-6xm155,-449r11,55r-17,11r50,28r5,-33v-11,-2,-22,-8,-33,-17r17,11r5,-22v1,5,4,9,11,11xm204,-449r6,11v0,-6,2,-13,-6,-11xm-16,-443v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm50,-443v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm750,-438v1,5,5,8,11,11v-1,-3,-5,-7,-11,-11xm44,-421v0,-5,2,-13,-5,-11xm127,-421r6,22v6,-9,15,-18,5,-28xm-16,-410r11,0v0,-5,2,-13,-5,-11xm6,-421v9,8,20,13,33,16xm61,-421r0,27v9,-7,16,-16,22,-27v-8,2,-18,8,-22,0xm1114,-377v1,5,4,8,11,11v-1,-4,-5,-8,-11,-11xm88,-372r6,39r22,-6v-8,7,-12,18,-17,28v-5,-17,-9,-38,-11,-61xm1114,-328v-1,-5,-4,-8,-11,-11v1,4,5,8,11,11xm645,-322v0,-5,2,-13,-5,-11xm745,-317v1,5,4,9,11,11v-1,-3,-5,-7,-11,-11xm121,-311r6,33v-5,-11,-15,-22,-6,-33xm144,-311v4,1,8,4,11,11xm-10,-306v7,7,13,17,16,28xm645,-300v1,8,5,15,11,22v-1,-8,-4,-15,-11,-22xm1103,-300v-7,-2,-5,6,-5,11v7,2,5,-6,5,-11xm50,-289v8,16,15,34,22,55v-11,-15,-20,-31,-22,-55xm99,-250v3,9,4,18,6,27v-4,-7,-10,-11,-17,-11xm673,-256v-4,-1,-8,-4,-11,-11xm127,-256r6,55v-7,-11,-13,-23,-17,-38v6,-4,10,-10,11,-17xm634,-234v0,-5,2,-13,-5,-11xm750,-245r6,11v0,-6,2,-13,-6,-11xm22,-245v9,7,16,17,22,28xm210,-239r5,16v-1,-6,4,-18,-5,-16xm149,-239r11,16v-5,-3,-9,-9,-11,-16xm-5,-223r16,17r-16,33v1,-13,5,-26,11,-39xm645,-201v0,-5,2,-13,-5,-11xm55,-212v17,5,34,14,50,28v-13,-6,-26,-10,-39,-11r17,33v-13,-14,-22,-31,-28,-50xm22,-206v4,13,16,26,6,38xm1092,-179v3,8,9,15,17,22v-3,-8,-8,-15,-17,-22xm756,-162v0,-6,2,-13,-6,-11xm204,-157r11,0v0,-5,2,-13,-5,-11xm149,-162v5,3,9,9,11,16xm215,-151v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm-5,-151r44,11r-49,16r-6,-22v5,0,13,2,11,-5xm55,-146r11,22v-5,-5,-8,-13,-11,-22xm105,-146v8,11,2,29,0,44r-17,-33xm645,-140v-7,-2,-5,6,-5,11v7,2,5,-6,5,-11xm226,-124v0,-5,2,-13,-5,-11xm734,-113r0,11r11,-5xm28,-113v12,3,24,9,33,0r-28,11xm66,-107v15,7,26,19,33,38v-19,-5,-30,-18,-33,-38xm1109,-85v0,-6,2,-13,-6,-11xm-49,-69r11,0r-5,11xm127,-63v5,5,8,13,11,22xm61,-58v14,3,28,9,38,0r-27,17v-5,-3,-9,-9,-11,-17xm767,-52r0,11r11,-6xm1087,-52v-8,-2,-6,5,-6,11v8,2,6,-5,6,-11xm-49,-52v6,0,15,12,6,17xm232,-35v0,-6,2,-14,-6,-12xm883,-24v0,-6,2,-13,-6,-11xm905,-24v0,-6,2,-13,-6,-11xm943,-35v1,5,5,8,11,11v-1,-5,-4,-9,-11,-11xm1020,-24v0,-5,2,-13,-5,-11xm596,-30v1,5,4,8,11,11v-1,-3,-5,-7,-11,-11xm938,-19v0,-6,2,-13,-6,-11xm61,-13v5,-1,8,-5,11,-11v-4,1,-8,5,-11,11xm844,-24r-17,16v9,-3,14,-8,17,-16xm965,-24v1,7,4,15,11,22xm1031,-24r-16,16v10,-3,15,-8,16,-16xm237,-8v0,-5,2,-13,-5,-11xm452,-8v-1,-5,-4,-8,-11,-11v2,4,6,8,11,11xm563,-8r11,0v0,-6,2,-13,-6,-11xm590,-8v0,-5,2,-13,-5,-11xm756,-8r11,0v0,-6,2,-13,-6,-11xm888,-19v-10,-1,-7,12,-11,17r11,0r0,-17xm899,-19v1,7,5,13,11,17xm1004,-19r-17,17v9,-3,14,-8,17,-17xm960,-2v-1,-5,-5,-9,-11,-11v1,3,5,7,11,11xm871,69r17,22v-9,-4,-14,-11,-17,-22xm1224,74v40,19,25,70,17,111v-18,-26,-18,-59,-11,-94xm794,96v8,13,14,28,17,44v-11,11,-22,24,-33,39v-4,-13,-11,-28,-22,-44v14,-9,27,-22,38,-39xm-5,118v25,6,45,21,60,44r-49,-38r-55,44v11,-18,26,-35,44,-50xm110,118v4,13,16,27,6,39v13,-9,26,-20,39,-33v12,-1,27,-11,33,0v-1,47,-55,32,-89,44r-22,-28xm259,118v9,6,17,15,22,28v-15,-3,-31,-16,-44,-6r6,28r-28,-6v12,-15,27,-29,44,-44xm348,124r44,5r-6,39r-22,-33r-50,38xm430,124v10,5,17,14,22,27v10,-12,24,-20,44,-22v-16,20,-46,33,-66,50r0,-33v-9,0,-15,3,-22,5xm530,124r22,5v-6,17,-15,32,-28,44v-3,-13,-9,-24,-16,-33xm601,124r11,16r-11,39r-11,-17xm689,124r45,0r-11,44r-34,-28r-49,28xm855,129r22,6r-22,50v-3,-14,-8,-27,-17,-39xm916,129r27,6r-16,50v-7,-17,-10,-36,-11,-56xm987,129v7,3,13,9,17,17v-5,12,-13,23,-22,33xm1070,129r39,11r-17,39r-11,-44r-50,50v9,-20,22,-39,39,-56","w":1239},"S":{"d":"1118,-1943v22,3,52,-1,65,11v-8,74,3,167,-7,240r4,11r-8,548v-2,4,-4,8,0,11r0,374v-15,-15,-23,-37,-32,-58r-102,-124v-47,-29,-91,-60,-142,-87v-42,-22,-90,-40,-134,-62v-18,-20,-35,-34,-62,-47v-38,-32,-23,-112,4,-145r58,-25v50,9,92,26,138,39v20,33,53,55,76,84v21,27,46,53,58,87v14,-16,14,-41,19,-69r72,-370r4,-37v-30,-22,-74,-30,-109,-47r-244,-40v-13,2,-26,6,-36,0v-94,9,-192,9,-261,47r-73,40r-62,51v-25,33,-52,64,-72,102r-48,171v-7,69,-18,140,0,207r37,138v22,36,35,75,69,101v28,39,62,74,116,88v15,16,41,28,58,43v47,19,86,48,124,76r25,33r15,58v-6,41,-21,75,-55,91v-55,12,-88,-13,-131,-25v-9,-9,-19,-15,-32,-19v-21,-36,-52,-61,-80,-90r-55,-88v-2,8,-6,16,0,22r-87,480v6,9,14,18,25,21r215,66v4,-1,13,3,11,-4v11,12,38,6,47,-7v3,2,6,6,7,11v14,3,29,21,40,7v25,13,48,-5,73,-7v10,-11,28,-3,43,0r22,-11r-4,18r26,7v86,-17,183,-17,247,-61r65,-44v58,-46,95,-112,131,-182r11,330r-4,15r-821,94r-301,30v-16,-6,-32,-6,-47,-19r-29,-257v-1,-15,3,-35,-4,-44r4,-3r-15,-240r4,-11r-4,-352r54,-1032v1,-17,3,-35,8,-54r1035,-87r51,0r0,-4xm954,-1474v3,0,6,2,8,7xm446,-1416v4,1,8,3,11,7v-5,-1,-8,-3,-11,-7xm700,-1282v3,1,5,3,7,7xm820,-1049r4,10v-3,-3,-11,-7,-4,-10xm896,-1006v-2,-4,-5,-9,4,-7xm707,-348v3,3,11,7,4,10xm675,-232v6,3,11,9,14,18v-6,-5,-11,-11,-14,-18xm791,-200v-3,0,-5,-2,-7,-7xm744,-98r7,11v-4,-2,-6,-6,-7,-11xm693,-80v12,11,1,24,-4,37xm737,-76v5,5,8,11,10,18v-5,-5,-9,-11,-10,-18xm573,-72v3,0,5,2,7,7v-3,-1,-5,-3,-7,-7xm526,-36v2,5,4,9,3,0r-3,0xm635,-29v-4,5,-4,9,3,11","w":1157},"T":{"d":"556,-1769r532,5v63,-8,135,-7,139,50r5,74v-13,7,-35,5,-55,5v21,26,51,49,50,95r-20,1018v-8,4,-2,13,0,20r-10,159r-5,10r-15,288v0,65,-84,40,-139,40v-25,-1,-55,-8,-89,-10r-825,-55v-44,8,-88,0,-124,-10v-3,-149,15,-284,15,-422r0,-179r5,-15r0,-198r5,-85r0,-99r15,-457r0,-179v5,-13,7,-29,10,-45v19,-2,39,-8,54,0v27,0,59,-10,80,0v69,-8,162,-9,233,0v37,-11,94,-2,139,-5r0,-5xm124,-1590r-35,233r20,0r30,-69v19,-15,41,-28,65,-40v96,-12,172,9,263,15v26,3,54,9,84,20r-44,343r-40,358v-17,86,-20,167,-35,263v-14,87,2,198,-69,233v-19,10,-42,2,-65,0r0,20r343,40r35,0v-26,-26,-65,-29,-95,-55v-9,-25,2,-64,5,-89r50,-447r40,-318v16,-95,26,-225,39,-333r303,35v22,10,44,23,65,39r35,65v3,16,11,31,25,45v-1,-42,10,-76,10,-115v0,-25,3,-55,9,-89v-15,-55,-94,-44,-149,-50r-357,-40v-26,-5,-56,-4,-90,-9v-136,-21,-296,-37,-442,-55","w":1325},"U":{"d":"358,-1662v5,1,9,5,13,13xm179,-1649r19,19v-8,-4,-14,-10,-19,-19xm345,-1636v-6,0,-10,-4,-13,-13xm205,-1636r19,12v-8,-1,-14,-5,-19,-12xm352,-1636v7,1,14,5,19,12v-8,-1,-14,-5,-19,-12xm237,-1630r6,19r-13,7xm332,-1611v-5,-1,-9,-5,-12,-13xm524,-1624r32,32v-29,2,-42,-5,-57,-19r19,7xm198,-1611v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm422,-1611v9,1,18,5,26,13xm70,-1598v8,1,15,6,20,13xm454,-1598v21,5,40,14,57,25xm96,-1560v-17,-34,10,-22,25,-13xm332,-1585v5,1,10,5,13,12v-5,-1,-9,-5,-13,-12xm652,-1585v8,0,17,14,7,19xm716,-1585r13,0r-7,12xm799,-1585r-6,38r-26,-13v13,-5,23,-14,32,-25xm217,-1579v22,10,43,23,64,38r-44,-12r-52,6xm825,-1579v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13xm531,-1573v5,1,9,6,12,13v-5,-1,-9,-5,-12,-13xm627,-1566v-2,5,-6,10,-13,13xm844,-1566v20,19,43,36,70,51v25,6,45,23,58,51r25,13v32,-22,85,-37,128,-51r-13,45r-51,-20r-38,64r-45,-6v-1,5,-5,9,-13,13r13,-39v-16,3,-31,9,-45,20r-32,-26r-12,32v-11,-14,-19,-31,-26,-51r90,25r6,-38v-42,-13,-76,-34,-115,-51v-20,19,-46,31,-77,38v6,-15,15,-30,26,-45r-7,39xm1004,-1566v10,3,18,9,25,19xm940,-1560v-3,10,-9,19,-19,26v7,-6,14,-15,19,-26xm582,-1553v11,3,22,10,32,19v-13,-3,-23,-10,-32,-19xm646,-1553v10,3,18,9,25,19xm901,-1547v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm1042,-1547v8,1,14,6,19,13xm320,-1541r38,26v-15,-4,-27,-13,-38,-26xm371,-1541r77,58r-39,19r7,-19r-20,-6v-11,-16,-20,-33,-25,-52xm690,-1541r20,13v-8,-1,-15,-6,-20,-13xm1074,-1541r13,0r-7,13xm550,-1534r6,38r-38,-13xm639,-1534r13,19v-7,-3,-12,-10,-13,-19xm722,-1534r32,25v-17,0,-28,-8,-32,-25xm1106,-1534v12,6,23,14,32,25v-13,-3,-24,-12,-32,-25xm575,-1528v23,13,44,30,64,51r13,-32v20,8,39,19,58,32v11,-3,21,-10,32,-19r19,45r-39,0r-38,-19r-13,38v30,15,73,-4,109,-6v3,-14,9,-28,0,-39r38,26v-12,1,-25,6,-38,13v-15,25,-35,37,-58,38r7,64r19,26r-19,57r13,83r-13,13v-1,28,-13,61,0,83r-19,13v2,19,8,38,19,57r-26,26r7,64v-11,-7,-21,-18,-32,-6r25,70v-10,45,-16,94,-38,128r25,32r-31,-7v5,17,16,32,31,45v-9,6,-17,15,-25,26r-6,83r19,6v-24,27,-34,59,-58,83v-20,13,-42,-1,-64,-6v-23,-23,-36,-53,-38,-90r-13,-19r83,-754v1,-29,10,-56,26,-83v-17,-32,-56,-61,-103,-45r-12,-6v15,-8,32,-15,51,-20r45,7xm825,-1515v14,3,27,10,38,19v-12,-4,-25,-10,-38,-19xm1144,-1515v6,4,10,10,13,19xm160,-1509r38,20v-14,-3,-27,-10,-38,-20xm607,-1502v4,7,11,12,20,13xm102,-1502r32,19v-11,-3,-22,-10,-32,-19xm332,-1502r13,0r-6,13xm1100,-1496v1,9,5,15,12,19xm818,-1496r20,13v-8,-1,-15,-6,-20,-13xm876,-1496v15,4,30,10,45,19v-15,-3,-30,-10,-45,-19xm275,-1489v12,3,25,10,38,19v-12,-4,-25,-10,-38,-19xm217,-1483v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm173,-1477r51,26r-51,-6v-1,5,-5,9,-13,12xm876,-1457v3,7,10,11,19,12v-3,-6,-10,-10,-19,-12xm1036,-1445v-1,-5,-6,-9,-13,-12v2,4,6,8,13,12xm83,-1457r32,25r-25,-6xm371,-1457v5,1,9,5,13,12v-5,-1,-10,-5,-13,-12xm454,-1445v-5,-1,-10,-5,-13,-12xm646,-1451v1,5,6,10,13,13v-1,-6,-6,-10,-13,-13xm1080,-1438r-19,19r7,-32xm614,-1438v3,8,10,12,19,13v-3,-7,-10,-11,-19,-13xm128,-1432v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13xm825,-1432v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13xm147,-1425r19,12v-7,-1,-14,-5,-19,-12xm665,-1419r32,25v-7,-9,-18,-18,-32,-25xm121,-1406v6,6,18,12,7,19xm179,-1406v-3,11,-9,19,-19,25xm901,-1406r13,0r-6,12xm205,-1400r44,13v-14,-1,-29,-6,-44,-13xm652,-1394v11,11,26,17,45,20xm1017,-1394v5,1,9,6,12,13v-5,-1,-9,-5,-12,-13xm1061,-1394v10,3,21,11,26,0r-19,13xm1157,-1394v5,1,10,6,13,13xm556,-128v20,20,43,39,71,51r-13,19v-14,-5,-25,-16,-32,-31r-39,-20v8,13,15,28,20,45r-39,-19v-10,4,-18,10,-25,19v-29,-10,-59,-17,-83,-32r12,26r-12,6v-9,-19,-20,-35,-32,-51r-20,26v5,-20,18,-35,39,-45r6,-13r19,13v-9,-14,-22,-23,-38,-26v-11,7,-23,12,-38,13v-8,-5,-12,-12,-13,-19r38,13r7,-45v15,10,27,16,38,19v-3,-23,-15,-40,-38,-51r19,-32v82,24,190,17,275,38r140,-32v42,-35,102,-59,115,-121v31,-43,65,-104,71,-166r70,-761v11,-25,20,-52,26,-83v48,14,37,67,64,96v0,29,-4,61,-13,96v11,116,-3,245,-26,345v8,42,6,85,0,128r7,19v-8,14,-12,29,-13,45r-19,32r25,-7v-9,15,-20,27,-32,39v5,17,10,36,13,57r-19,64r13,19v-3,17,-6,36,-7,58v-9,22,-15,47,-19,76r-38,52r19,38r32,32v-49,35,-109,56,-173,77v-18,-13,-39,-22,-64,-26v11,11,19,23,26,38r-26,26r20,38v-13,-7,-24,-17,-32,-32v-36,-15,-62,-14,-96,-25r19,51v-6,7,-12,11,-19,13v-11,-15,-20,-32,-26,-51v-49,-17,-91,-41,-134,-64r25,38xm716,-1362v0,-6,2,-14,-6,-12xm77,-1368r44,45r45,-7v25,6,48,17,71,32v3,13,10,26,19,39v-44,4,-74,29,-109,44v-7,-20,-18,-41,-32,-63r0,25v-15,-13,-25,-30,-32,-51r26,6r6,-12r-51,-20xm224,-1368r19,13v-8,-2,-14,-6,-19,-13xm1100,-1330r12,0v0,-6,2,-14,-6,-12xm665,-1336r6,19r7,-13xm1125,-1336v2,9,6,15,13,19v-1,-9,-6,-15,-13,-19xm601,-1323v2,5,14,19,19,6xm141,-1291v-1,-6,-6,-10,-13,-13v1,4,6,8,13,13xm1119,-1266v-1,-5,-6,-9,-13,-12v2,4,6,8,13,12xm141,-1272v1,6,5,10,12,13v-1,-6,-5,-10,-12,-13xm166,-1259v4,6,10,10,19,12xm1125,-1253v1,5,6,10,13,13v-1,-6,-5,-10,-13,-13xm64,-1253v5,1,9,5,13,13v-6,0,-10,-4,-13,-13xm83,-1247v7,4,11,11,13,20xm237,-1247v-8,19,-15,41,-20,64r-32,-12v14,-17,31,-34,52,-52xm652,-1221v1,5,6,10,13,13v-1,-6,-6,-10,-13,-13xm83,-1221v29,14,63,27,102,38v-7,13,-18,24,-32,32r-57,7r6,-64v-7,-2,-14,-6,-19,-13xm70,-1195v5,1,10,5,13,12v-5,-1,-9,-5,-13,-12xm134,-1183v1,6,6,10,13,13v-1,-5,-5,-10,-13,-13xm185,-1151r26,7r-13,57r26,7v-12,13,-29,21,-51,25v1,17,5,34,12,51v-31,-3,-60,-13,-89,-32r13,-6r-19,-45r83,7xm102,-1125r19,13v-7,-2,-14,-6,-19,-13xm153,-1106v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm121,-1074v1,5,6,10,13,13v-1,-5,-5,-10,-13,-13xm185,-1074r7,19r6,-19r-13,0xm115,-1048v1,5,6,9,13,12v-1,-5,-6,-9,-13,-12xm147,-1023v-1,-6,3,-16,-6,-13xm179,-1036r19,13v-7,-1,-14,-6,-19,-13xm205,-1023v7,2,14,6,19,13v-8,-1,-14,-6,-19,-13xm102,-1004v-5,-1,-9,-5,-12,-12xm121,-997v27,7,53,20,77,38v3,10,10,21,19,32r-44,19r19,-19r-51,13r-26,-45r19,-25xm141,-978v3,9,10,15,19,19v-3,-9,-10,-16,-19,-19xm652,-952v-1,-6,3,-16,-6,-13xm147,-952v-12,-1,-8,13,-13,19r13,0r0,-19xm70,-940v7,3,15,6,26,7v-3,15,-10,30,-19,44xm659,-914v0,-6,2,-16,-7,-13xm115,-920v5,1,10,5,13,12v-6,0,-10,-4,-13,-12xm64,-901v-5,-1,-10,-5,-13,-13xm652,-889v0,-6,2,-14,-6,-12xm678,-895r12,19v-1,-9,-5,-15,-12,-19xm51,-889r32,26v-13,-5,-23,-14,-32,-26xm153,-869r13,0r-6,12xm601,-863v1,5,6,10,13,13v-1,-5,-6,-9,-13,-13xm58,-857v5,4,9,11,12,20v-5,-4,-9,-11,-12,-20xm121,-857v21,9,42,19,64,32r13,32r-57,-12v-12,-14,-19,-31,-20,-52xm1112,-837v-1,-6,-5,-10,-12,-13v1,4,5,8,12,13xm1080,-831v1,5,6,10,13,13v-1,-6,-5,-10,-13,-13xm556,-812r13,0v-1,-6,3,-16,-6,-13xm639,-818r0,13r13,-7xm671,-812v1,6,5,10,13,13v-1,-4,-6,-8,-13,-13xm607,-793r13,7r0,-19v-10,-1,-9,8,-13,12xm141,-793r19,20v-9,-3,-15,-10,-19,-20xm179,-780r13,0r-7,13xm134,-761v5,1,10,5,13,13xm90,-754r31,19v-12,-3,-22,-10,-31,-19xm45,-742v5,1,9,6,13,13v-5,-1,-10,-5,-13,-13xm128,-735v5,1,9,5,13,13xm646,-716v-1,-5,-6,-10,-13,-13v2,5,6,9,13,13xm64,-729v8,2,14,6,19,13xm153,-729r26,96v-22,9,-45,13,-70,13v-7,15,-15,30,-26,45v47,3,66,-14,96,-32v-3,18,-9,33,-19,44r25,39v-9,-9,-23,-31,-32,-7r7,71r-13,6r-6,-13r-7,13v19,3,34,7,45,13r-58,19v21,7,42,17,64,32v-33,-7,-66,-21,-95,0v5,-14,9,-31,12,-51v-22,-33,-26,-72,-51,-115r19,-32v-16,-21,-24,-47,-25,-77r76,-25r20,32xm102,-722r32,19v-12,-3,-23,-9,-32,-19xm1068,-716v1,5,5,10,12,13v-1,-6,-5,-10,-12,-13xm173,-716v5,1,9,5,12,13xm627,-710v1,6,5,10,12,13v-1,-5,-5,-10,-12,-13xm102,-678v8,9,19,16,32,20xm652,-678v-9,-2,-6,7,-6,13v9,2,6,-7,6,-13xm70,-652v-1,-6,-5,-10,-12,-13v1,5,5,9,12,13xm1055,-652v-1,-6,3,-16,-6,-13xm1080,-658v1,5,6,9,13,12v-1,-5,-5,-9,-13,-12xm83,-652v1,5,6,10,13,13v-1,-6,-6,-10,-13,-13xm109,-646v1,9,5,15,12,20v-1,-9,-5,-15,-12,-20xm633,-646v2,6,14,18,19,7xm70,-633v4,9,11,15,20,19v-4,-8,-11,-14,-20,-19xm627,-556r12,6r7,-13r-13,-6xm102,-556v4,6,10,10,19,13xm128,-537r13,0v0,-6,2,-16,-7,-13xm556,-524v-1,-6,3,-16,-6,-13xm102,-531r7,20r6,-13xm607,-511r0,12r13,-6xm1074,-499r13,0v0,0,2,-15,-7,-12xm58,-499v-5,-1,-10,-5,-13,-12xm556,-486v-1,-6,3,-16,-6,-13xm102,-473r13,19v-1,-9,-6,-15,-13,-19xm64,-473v5,1,9,5,13,13xm38,-454v9,3,15,10,20,19xm26,-422v-5,-1,-10,-5,-13,-13xm32,-396v5,1,9,5,13,12v-6,0,-10,-4,-13,-12xm198,-390v6,4,10,10,13,19v-6,-4,-10,-10,-13,-19xm77,-384v5,1,9,6,13,13v-5,-1,-10,-5,-13,-13xm166,-384r58,39v-21,-7,-40,-20,-58,-39xm134,-364r32,25v-11,1,-21,5,-32,13v-12,0,-25,-4,-38,-13v16,-4,29,-12,38,-25xm70,-352v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm1042,-320v-1,-5,-5,-9,-13,-12v2,4,6,8,13,12xm978,-307v-1,-5,-5,-10,-13,-13v2,5,6,9,13,13xm1049,-320v1,6,5,10,12,13v-1,-4,-5,-8,-12,-13xm90,-320v21,11,42,24,63,39r-32,13xm921,-300v0,-6,2,-16,-7,-13xm1023,-300v1,5,6,9,13,12v-1,-5,-6,-9,-13,-12xm230,-300r32,25r-32,-6r-6,13xm275,-300r19,12v-7,-1,-14,-5,-19,-12xm70,-294v8,1,15,6,20,13v-8,-2,-15,-6,-20,-13xm870,-275v1,5,5,10,12,13v-1,-4,-5,-8,-12,-13xm953,-256v0,0,2,-15,-7,-12xm1061,-275v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm358,-268r19,6r-13,6xm991,-249v-1,-6,3,-16,-6,-13xm96,-256v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13xm256,-256r25,0r-25,39r-26,-13v11,-3,20,-12,26,-26xm326,-256r38,13v-12,-1,-25,-6,-38,-13xm921,-249v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm115,-249v22,8,45,19,70,32r-38,-13r-19,25xm1010,-230v-1,-6,3,-16,-6,-13xm58,-243v5,1,9,5,12,13v-5,-1,-9,-5,-12,-13xm313,-237v7,4,11,11,13,20v-6,-4,-10,-11,-13,-20xm441,-230r32,25v-8,-9,-19,-18,-32,-25xm518,-217v0,-6,2,-16,-7,-13xm595,-217r12,0v-1,-6,3,-16,-6,-13xm703,-211r13,0r-6,-13xm499,-217v1,8,5,14,12,19v-1,-8,-5,-14,-12,-19xm1017,-217v1,5,5,9,12,12v-1,-5,-5,-9,-12,-12xm192,-217r19,6r-13,26v-14,-3,-27,-10,-38,-20v11,0,22,-4,32,-12xm281,-217r71,25r-52,-13r-6,26r13,6r-51,-12xm575,-211v1,5,6,10,13,13v-1,-5,-6,-9,-13,-13xm876,-211r0,13r13,-7xm959,-211v1,6,5,10,13,13v-1,-6,-6,-10,-13,-13xm77,-211r13,19v-6,-4,-10,-10,-13,-19xm217,-211v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm435,-205r13,20v-2,-9,-6,-15,-13,-20xm614,-205v1,9,5,15,13,20v-2,-9,-6,-15,-13,-20xm646,-205r19,13v-3,-6,-10,-10,-19,-13xm1042,-205r0,13r13,-6xm518,-198v1,5,6,10,13,13v-1,-6,-6,-10,-13,-13xm690,-198v2,8,6,14,13,19xm550,-192r19,19v-3,-8,-10,-14,-19,-19xm735,-179v-1,-6,3,-16,-6,-13xm761,-192v1,6,14,18,19,7xm978,-192v1,12,6,23,13,32r6,-32r-19,0xm1010,-192v1,9,6,18,13,26r13,-26r-26,0xm115,-192v8,2,14,6,19,13xm480,-185v10,11,2,29,0,44r38,7r6,-19xm633,-185r6,19r7,-19r-13,0xm217,-185r32,25v-11,-4,-24,-20,-32,-6r7,19r-26,-6xm665,-179v1,6,5,10,13,13v-1,-5,-6,-9,-13,-13xm812,-166v-1,-6,3,-16,-6,-13xm946,-179v4,9,10,15,19,19v-3,-9,-9,-16,-19,-19xm0,-179v5,1,9,5,13,13v-5,-1,-10,-5,-13,-13xm64,-179v15,4,30,10,45,19v-15,-3,-30,-9,-45,-19xm754,-160v-1,-5,-5,-10,-12,-13v1,5,5,9,12,13xm914,-173v2,9,6,15,13,20v-1,-9,-6,-15,-13,-20xm684,-166r6,19r7,-13xm780,-153v-1,-6,3,-16,-6,-13xm262,-160v15,4,28,15,38,32xm652,-153r26,32v-5,-13,-14,-24,-26,-32xm793,-153r0,12r13,-6xm454,-147v-12,-1,-8,13,-13,19r13,0r0,-19xm531,-141r12,20v-1,-9,-5,-15,-12,-20xm761,-141v7,9,18,18,32,26v-8,-9,-19,-18,-32,-26xm166,-141r13,0r-6,13xm326,-141v9,3,15,10,19,20xm697,-121r13,0v0,-6,2,-16,-7,-13xm895,-141r13,20v-9,-3,-13,-9,-13,-20xm1049,-128v-6,0,-10,-4,-13,-13xm460,-128r-6,39v6,-1,10,-5,13,-13v10,7,21,12,32,13r12,-32xm652,-128v-12,-1,-8,13,-13,19r13,0r0,-19xm722,-115r13,6r7,-19v-14,-3,-17,5,-20,13xm812,-128r-6,19r19,0v-2,-8,-6,-14,-13,-19xm972,-134r13,19v-7,-4,-12,-10,-13,-19xm997,-121v7,13,18,25,32,38r-19,45r19,12r-32,7v8,-33,6,-67,0,-102xm965,-109r20,13r-13,26v-10,3,-20,9,-26,0v9,-11,16,-24,19,-39xm1029,-109v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm901,-96v5,1,10,5,13,13v-5,-1,-9,-5,-13,-13xm927,-89v5,1,10,5,13,12v-5,-1,-10,-5,-13,-12xm639,-83v17,6,34,14,51,25v-17,-5,-34,-14,-51,-25xm1049,-77r12,19v-5,-4,-9,-10,-12,-19xm518,-70v5,1,9,5,13,12v-5,-1,-10,-5,-13,-12xm895,-70r13,0r-7,12xm978,-70v5,1,10,5,13,12xm665,-38v-5,-1,-10,-5,-13,-13xm799,-45v12,1,23,5,32,13v-12,-2,-23,-6,-32,-13xm761,-38v5,1,9,5,13,12v-5,-1,-10,-5,-13,-12xm908,-38v7,1,14,5,19,12xm972,-6v-5,-1,-10,-5,-13,-13xm985,-13r19,7r-19,6r0,-13","w":1055},"V":{"d":"-224,-1688v32,79,36,194,51,291r30,194v30,123,44,266,62,403r96,720r-25,-66v-10,-65,-26,-129,-41,-199r-61,-291r-97,-730r-26,-281xm1067,-1494v40,0,92,-13,143,-10r-332,1062v-23,61,-130,41,-199,56r-10,10v-35,-3,-69,-7,-102,0v-14,-76,-41,-125,-67,-199r-255,-715v-79,-48,-186,-69,-285,-97v56,-39,166,-18,239,-41v89,-2,190,-20,271,0r51,51r46,164v9,24,11,52,20,81r107,342r11,46r15,-15v8,-55,29,-102,41,-148r81,-306v17,-50,27,-110,46,-159v9,-24,16,-53,21,-86v35,-34,94,-36,158,-36xm689,-361r10,0r-5,10","w":1399},"W":{"d":"1627,-1748v4,29,18,49,19,81r19,583v9,49,-2,115,6,166r-3,7r-3,373v-10,49,4,120,-7,169r-6,284v-6,17,-2,45,-3,67v-104,10,-221,8,-330,14v-18,-9,-44,11,-60,0r-195,0r0,4r-101,0v-3,-3,-7,-5,-9,0v-18,-1,-56,-6,-76,0v-160,-13,-350,4,-513,-7v-22,-2,-51,4,-66,-4r-242,0v-26,-74,-17,-195,-22,-291r-7,-144v0,-47,1,-96,0,-140r-28,-952r82,332v9,43,18,80,28,122r57,251v6,17,6,39,12,62r145,605r107,7r0,-3v41,5,100,15,110,-30r76,-310v46,-129,78,-286,113,-420r47,-181v8,8,16,18,19,30r167,656r31,122v3,18,12,37,16,59r13,66v32,20,90,21,135,15v15,6,46,3,79,4v18,-14,18,-40,25,-70r176,-742r139,-575r-227,-3v-18,6,-23,21,-28,44r-173,815v-2,19,-8,36,-19,51r-123,-486r-88,-373v-3,-17,-9,-36,-19,-55r-201,0v-18,3,-26,17,-32,40r-204,786r-19,55v-33,-92,-43,-204,-70,-302v-1,-19,-7,-41,-12,-67r-63,-317r-35,-195v-51,-17,-131,-4,-195,-8r35,-14r472,-78v69,0,119,-10,186,-18r358,-44r22,3v7,41,-13,62,-31,89v-17,5,-40,16,-57,7v-26,8,-21,50,-28,78v26,7,50,18,82,11v40,9,58,-30,82,-52r37,-114v7,-21,20,-32,41,-33","w":1662},"X":{"d":"2,-2392v42,2,93,-6,124,7r256,8v25,1,56,13,73,0r388,7v27,17,88,-3,117,15r7,-8r117,15v14,29,24,63,30,102v-12,20,-1,47,0,73r7,300v-3,25,-11,52,0,73r15,212v-16,56,0,139,7,198r-7,14r14,519v12,25,6,68,7,103r8,0v-14,35,-2,82,0,124v4,8,10,17,0,22r29,570r7,22r15,204r-102,22r-564,44r-21,-7r-103,15r-132,0v-57,-27,-59,-106,-87,-161r-132,-1360v13,-40,19,-88,29,-131r-7,-117r-37,-95r-43,-220r22,-51v-9,-6,-19,-16,-30,-29v5,-21,12,-43,22,-66v-2,-8,-7,-15,-14,-22r-29,-88v13,-71,-8,-132,-8,-204v0,-35,11,-71,22,-110xm938,-1281v-50,9,-106,14,-168,15v-57,52,-80,146,-110,227v-27,-25,-43,-60,-66,-95r-73,-110r-73,-7r-73,14v-54,2,-118,-6,-161,7r-15,37r191,278v23,29,44,63,65,102v-13,38,-37,75,-58,117r-161,322r15,22r307,-15v42,-68,54,-162,102,-234r66,110v16,33,38,70,66,110r314,-22v10,-5,17,-12,22,-22r-44,-81r-212,-307v-8,-14,-15,-31,-22,-51v14,-19,23,-42,37,-66v43,-74,89,-129,124,-219r66,-102v-41,-19,-87,-29,-139,-30xm141,-784v0,-7,3,-17,-7,-14","w":1261},"Y":{"d":"-25,-2043v18,57,33,116,36,187v-15,-56,-23,-127,-36,-187xm1789,-1983v7,1,13,6,18,15v-7,-1,-13,-6,-18,-15xm1540,-1886v21,27,50,50,89,67r-53,15xm1104,-1632v63,-4,128,-22,187,-8r-284,702v-22,50,-31,112,-27,187r9,15r-9,7r9,15r9,224r9,22r26,314v-1,20,-7,40,-17,60r-276,22r-18,-15r-53,-500v-11,-7,-17,-14,-18,-23r27,-82r-9,-7v3,-77,-9,-138,-18,-202r222,-515r36,-112r53,-97r116,-15xm357,-1595v54,-5,108,-22,160,-8v14,-3,26,-8,45,-7v54,105,119,199,178,299r-125,291r-9,37v-18,-11,-36,-26,-53,-45r-151,-268r-62,-83r-45,-97r-62,-82r9,-37r115,0xm188,-781v13,33,21,72,27,119r107,814v-15,-25,-32,-51,-36,-83","w":1335},"Z":{"d":"-250,-1662v16,43,26,89,32,141r184,1605r-4,16v-7,-7,-12,-17,-16,-29r-28,-344r0,-59r-4,0xm718,-1612v3,1,6,3,8,8v-3,0,-6,-3,-8,-8xm726,-1600v3,1,6,4,8,9v-4,0,-7,-3,-8,-9xm82,-1117v-9,-53,-4,-109,-4,-167v0,-46,-12,-92,-4,-137v-9,-27,7,-67,-8,-91r8,-13v45,-2,93,-12,136,-4v26,-11,67,8,92,-8v30,3,60,5,88,0v23,9,59,-6,84,4v24,-4,65,-4,96,0v41,-15,90,5,128,-13v45,3,91,13,136,5v13,9,36,-5,48,4v8,33,-4,73,4,108v-10,30,13,71,-4,100v9,32,-7,73,-8,108r-28,33v-19,38,-37,85,-56,121r-88,170v-5,11,-11,22,-20,33r-16,50r-28,38v-31,84,-77,157,-120,232v-13,44,-37,79,-56,117v47,15,108,-1,156,8v6,-6,22,0,24,-12v-2,-7,-6,-12,-12,-17v11,-32,14,-77,8,-116v6,-9,14,-16,32,-13v4,-6,9,-3,12,4v28,-5,56,-12,80,0v30,-10,74,6,104,-8v19,6,43,9,52,29v-8,25,-9,53,-4,83v-8,10,1,23,0,38r4,0v-4,8,-4,17,0,25v-4,15,-5,38,0,54v-8,3,-10,7,0,12v-7,12,-11,33,0,42v-11,36,8,94,-4,133v1,3,3,5,8,8v-8,29,-43,36,-76,29v-27,14,-66,0,-96,8v-19,-11,-53,6,-72,-4v-33,2,-65,6,-96,0v-2,8,-6,10,-12,4v-43,-8,-89,4,-128,-4r-8,9v-31,-2,-64,-8,-92,0v-20,-14,-60,8,-80,-5v-20,0,-47,10,-60,0v-26,11,-54,5,-92,5v-13,0,-27,-5,-40,-13v5,-71,4,-140,-4,-212v8,-16,0,-41,0,-62v14,-24,25,-51,32,-83r28,-34v10,-28,25,-59,48,-79v24,-95,78,-163,120,-241r8,-41v39,-44,63,-105,88,-163v38,-44,55,-109,84,-162r16,-16v-23,-29,-75,-3,-108,-13v-15,3,-29,7,-44,13v4,39,10,77,-20,95v-36,6,-59,-4,-92,9v-40,-16,-89,4,-128,-13xm1038,-1018v2,25,17,53,8,75v0,24,8,52,0,71v8,37,9,89,8,137r-32,-4v-31,-44,-15,-126,-12,-191v10,-26,14,-54,28,-88xm1118,-822r32,0v4,21,4,41,-4,58r-36,-21xm234,-772v3,0,6,3,8,8v-3,-1,-6,-3,-8,-8xm1046,-652v10,34,12,74,12,121v0,30,6,79,0,112r4,8r4,242r4,0v-3,5,-5,11,-4,20v-6,-3,-11,-8,-16,-16v-15,-9,-28,-23,-40,-42r-20,-58v0,-21,9,-47,-4,-58v5,-19,14,-53,0,-67v1,-21,15,-49,0,-62r8,-117xm438,17v37,0,49,61,12,75v-47,-1,-103,9,-144,0v-41,1,-88,13,-124,4r-84,9r4,-34r-12,-8v5,-1,7,-3,8,-8v5,-36,54,-23,88,-29v15,7,39,1,52,-5v44,6,97,14,136,0v19,10,42,-4,64,-4","w":1109},"[":{"w":569},"\\":{"w":569},"]":{"w":569},"^":{"w":961},"_":{"d":"1057,-164v31,41,30,107,32,184r4,0r-8,12r-360,28r-564,60v-21,-50,-28,-113,-36,-176r724,-84v51,-3,85,-13,140,-16r68,-4r0,-4","w":1332},"`":{"d":"372,-2130v13,5,29,1,44,0v20,20,13,68,10,103v9,14,-5,41,3,55v-6,32,2,67,-3,95v10,26,-3,68,3,92r3,259r3,0v-3,41,-1,102,3,147r-3,5v4,65,0,137,10,196r-19,6r-283,29v-12,-7,-18,-17,-19,-32r-13,-196v6,-13,-2,-31,-3,-46r-10,-207r-3,0v1,-22,5,-46,-3,-63v15,-8,-7,-30,6,-38v-12,-36,-14,-97,-9,-141v-8,-25,-1,-65,-3,-95r-3,0v13,-48,-23,-129,12,-161r277,-5r0,-3xm92,-1759v1,5,3,10,6,14v0,-5,-2,-10,-6,-14xm98,-1742v-5,0,-9,8,0,6r0,-6xm272,-1696v-34,8,-63,5,-95,12v4,33,1,63,10,92v-8,4,1,12,6,14r-10,3v5,14,9,29,22,35v12,-2,24,-9,35,-3r6,31r-18,46v-11,9,-29,12,-29,32v0,19,-1,40,13,49v47,-8,74,-35,97,-66v4,-30,17,-58,10,-89v8,-12,-9,-26,3,-35v-7,-17,-1,-33,-10,-46v8,-17,-9,-44,0,-69v-12,-4,-30,-9,-40,0r0,-6xm202,-1670v3,1,5,3,7,6xm275,-1667v2,0,4,2,6,6v-3,-1,-5,-3,-6,-6xm187,-1638v-3,-4,-6,-7,3,-6xm224,-1434v3,1,5,3,7,6xm237,-1397v2,-7,7,-4,13,-2","w":536},"a":{"d":"-65,-1325r118,7v28,3,57,10,86,4v42,7,91,1,140,7v84,10,178,15,252,33v37,9,88,-3,86,38r-56,1059v-1,17,-6,33,-15,49r-285,-8v-35,-12,-95,0,-134,-7v-38,-7,-85,1,-118,-8v-26,9,-62,-3,-92,-3v-1,-28,4,-52,3,-78r-3,-111r-37,0v-46,-90,-38,-243,-26,-371r48,-519v7,-36,13,-67,33,-92xm331,-996v-25,4,-52,7,-78,19v-47,22,-80,77,-77,156v34,-1,62,4,92,7v13,-28,13,-58,34,-85v17,-11,38,-18,63,-19v21,7,39,19,55,37v0,28,11,64,-4,82v-12,15,-29,29,-51,41v-105,16,-202,37,-215,148v-3,24,-7,52,-8,85v5,21,12,43,22,67v12,16,28,31,49,44v47,17,99,12,144,-7v14,-13,28,-29,41,-48v8,17,19,36,33,55v21,9,44,15,71,19v48,-10,45,-81,3,-100v-7,-120,26,-250,19,-378v-5,-91,-93,-119,-193,-123xm402,-703v20,31,5,80,3,122r-26,71v-19,13,-41,23,-66,30v-12,-4,-24,-9,-37,-15v-22,-25,-30,-69,-23,-115v12,-21,23,-41,45,-52v34,-17,71,-23,104,-41","w":614},"b":{"d":"355,-1341v71,6,162,-33,191,27r68,982r36,413v-14,13,-32,20,-54,22r-636,37r-59,9v-18,-6,-30,-20,-37,-41v0,-17,-9,-33,-27,-46v-27,-98,-25,-239,-27,-349r-5,-282r-4,0r4,-4r-13,-277r-18,-291r-5,-146v4,-34,52,-53,91,-41v12,-1,27,-7,36,0r445,-9xm100,-1200v-8,27,-7,55,-4,86v5,58,3,125,4,177r19,664v35,8,75,-3,113,-5r0,-73v22,21,30,51,59,69v44,27,98,26,155,4r54,-45v24,-43,42,-92,55,-146v1,-25,4,-54,9,-86v-9,-126,1,-253,-50,-345r-41,-60v-35,-22,-106,-44,-154,-22v-20,9,-39,22,-60,36r-31,41r-9,-291v-34,-7,-79,-3,-119,-4xm319,-887v23,1,45,10,68,27v50,71,41,201,45,319r-9,81r-27,64v-17,12,-37,23,-59,32v-22,-6,-43,-17,-64,-32v-29,-56,-51,-119,-45,-209v-15,-51,5,-114,4,-168v9,-27,17,-51,32,-77v17,-13,35,-26,55,-37","w":644},"c":{"d":"471,-1241r185,5v30,55,5,158,21,231v-15,22,9,65,-6,87v3,12,6,26,6,41r0,637v-9,60,-3,126,0,190v-7,15,-17,27,-31,36r-693,20v-24,-37,-4,-115,-41,-138v-12,-54,-35,-104,-31,-169r15,-247r-5,-524r11,-123v7,-14,17,-26,30,-36v16,-3,42,-8,57,0r292,0v6,-4,12,-7,16,0v52,-7,115,-5,174,-5r0,-5xm445,-969v-51,13,-102,19,-138,51r-98,88r-46,138v-4,64,10,111,21,165r30,61v64,81,173,123,319,124v31,-9,70,-8,92,-26v-2,-35,-6,-69,-15,-98v-27,14,-69,13,-108,16r-77,-16v-19,-9,-39,-20,-57,-36v-16,-14,-28,-35,-41,-56r-15,-77r5,-87r31,-62r46,-46r67,-26r92,0r72,21r26,-67v-2,-24,-14,-41,-36,-52r-77,-15r-93,0","w":747},"d":{"d":"-42,-1813v4,32,23,68,7,96v-2,47,7,105,-7,140r0,111r-7,14r-15,480v-17,37,10,95,-7,133r-15,479r-8,22r-7,361r-7,15v-1,33,-19,56,-52,67v-30,-95,-24,-234,-30,-354r8,-15r118,-1438xm695,-1238r74,8r-111,996r-51,-8r-8,-103v-48,18,-85,61,-140,74r-96,22r-103,-22r-81,-44v-42,-36,-74,-90,-103,-141v-7,-47,-10,-98,-23,-140r8,-81r29,-96v30,-54,53,-102,96,-147r81,-45r126,-29v62,9,113,29,162,51v33,23,62,60,96,89xm349,-928v-33,11,-67,26,-104,44r-66,74r-37,104v-4,88,-25,174,15,243r51,88r89,52r118,8r96,-45v23,-21,45,-46,66,-74v14,-31,32,-64,37,-103r15,-125v-5,-42,-2,-92,-15,-126r-52,-81v-58,-36,-121,-59,-213,-59","w":971},"e":{"d":"375,-1528v18,3,37,11,50,0r14,7r0,-7v57,7,115,7,172,0v15,13,27,27,36,43v-2,42,-12,86,0,122v-16,27,4,78,0,115r-7,71v5,34,20,69,7,101v4,8,9,15,7,28v5,5,5,10,0,15r15,122r-7,21r21,208v-12,14,-2,37,0,57r-7,36r14,22r29,208r-7,14r36,294v-21,24,20,58,0,85r14,158r-115,22v-20,-21,-67,12,-86,-8v-60,3,-124,23,-179,8r-7,14v-18,-13,-42,1,-72,0r-21,-14r-51,28r-79,0r0,8r-86,-8r-28,-64r-150,-953r-8,-545r15,-165v59,-33,150,-24,229,-36v23,12,47,0,79,0r172,0r0,-7xm-69,-1291r0,50v7,0,17,3,14,-7r43,7v-7,-27,-26,-44,-57,-50xm325,-1062r-108,29r-93,57r-43,72r-36,107v-12,72,4,135,7,208r36,108r50,79r86,71v30,11,64,21,101,29r93,-7v66,-21,145,-50,179,-115v22,-43,36,-93,50,-143r-7,-22r-36,15v-21,21,-35,49,-43,86v-17,31,-40,60,-71,86r-87,28v-32,-1,-68,-13,-93,0r-93,-57r-57,-86r-36,-115v137,-38,306,-38,459,-57v25,-3,49,-10,71,-29r-21,-107v-32,-61,-61,-114,-108,-165v-27,-19,-58,-35,-93,-50xm289,-1005v24,1,55,15,71,0v42,-1,62,20,94,29r50,50r29,58r21,86v-12,17,-29,31,-50,43r-294,35v-29,0,-60,-5,-93,-14v4,-87,23,-159,57,-215v29,-31,77,-49,115,-72xm-48,-990r0,43v5,-2,10,-7,15,-15xm647,-854v0,-7,3,-17,-7,-14xm669,-739v-1,-7,3,-18,-7,-15xm633,-661v0,-7,3,-17,-7,-14xm23,-295v0,-7,3,-17,-7,-14xm274,128v-1,-7,3,-18,-7,-15","w":794},"f":{"d":"60,-979v-16,3,-35,6,-34,-14r23,-315v11,-39,1,-98,11,-139v21,4,38,-1,60,3r0,-3v36,1,75,12,108,6v43,11,108,-3,150,11v58,-10,120,14,175,6v20,9,60,0,77,14v-14,39,-13,90,-34,122r-88,-17v-58,6,-141,-15,-187,17v-55,15,-89,55,-116,99r-23,74v5,33,-17,88,-8,124v-5,34,-50,10,-80,17xm335,-1135v41,-60,154,-65,233,-34v3,0,6,2,8,5r-147,811v-5,62,-12,115,-23,173v-46,-7,-102,2,-144,-11v2,-50,14,-104,8,-151v10,-69,8,-150,17,-221r-3,-8r12,-196v4,-25,6,-52,5,-82v44,-23,124,9,179,0v4,2,6,8,8,0v7,-31,2,-58,6,-91v-37,-22,-105,-11,-156,-22r-23,3v-13,-58,7,-126,20,-176xm-155,-1067v3,3,5,6,6,11xm-152,-1045v-3,-3,-4,-6,3,-5xm-24,-203v-3,34,-1,58,-9,94r3,11v-11,3,-15,-5,-28,0v7,-27,-2,-44,-23,-59r-8,-29r65,-391r17,-125r28,-184r5,12v42,-6,93,7,139,8r-11,128r3,5r-14,204v4,17,-1,38,-3,54r3,0r-3,3v-2,52,-12,106,-6,156v-4,41,-5,86,-14,122v-6,-7,-16,-6,-26,-3v-28,-3,-56,-8,-85,-3v-8,-4,-21,-3,-33,-3xm-7,-546v2,4,4,8,3,0r-3,0xm-16,-492v2,4,4,8,3,0r-3,0xm-18,-463v0,2,2,4,5,5v0,-3,-2,-4,-5,-5","w":615},"g":{"d":"-432,-2112r9,157r-36,472r-10,-57xm69,-294v70,48,150,85,247,113v53,-7,111,-22,173,-45v35,-39,62,-92,82,-157r9,-101r-54,44v-48,25,-103,45,-165,45v-52,0,-102,-11,-146,-33v-44,-22,-89,-56,-127,-101v-34,-40,-60,-95,-82,-157v-31,-87,-40,-202,-46,-315r19,-33r-10,-12v19,-60,18,-126,46,-190r73,-169r118,-112v43,-10,88,-32,137,-67v45,5,97,14,155,33v46,15,91,47,137,90r37,56v6,-36,18,-73,36,-112r155,11r37,-11r45,22r-45,539r9,34r-55,640v-35,112,-90,229,-182,302v-42,33,-97,51,-155,68r-201,11v-55,-7,-111,-27,-174,-45v-49,-14,-98,-40,-145,-89v12,-75,51,-173,72,-259xm553,-1573r18,0r-9,22xm-478,-1382r9,146v-12,132,-32,255,-27,404r-18,-90r9,-34xm434,-1281r-82,45r-45,89v-19,57,-43,124,-37,202r9,124v13,25,26,55,37,90v46,34,101,53,164,56r82,-45r37,-90r18,-213v-5,-53,-14,-109,-27,-169v-39,-45,-91,-75,-156,-89xm1128,-978r9,56r-18,-11xm1119,-877v3,147,14,297,0,437v-4,35,-12,65,-28,90r19,-280r-9,-34xm-523,-810r18,135r-18,146v-15,-87,-3,-186,0,-281xm-542,-395r10,45r-10,124v-2,-57,-16,-119,0,-169xm-605,537v2,31,16,66,0,89r0,-89xm-615,649v8,74,12,152,10,236","w":1199},"h":{"d":"407,-1278v54,-8,97,-33,160,-18r142,1042v-13,16,-35,26,-51,39r-278,55r-22,-36r4,-25v-14,9,-34,10,-55,6v-3,4,-7,7,-12,3r-94,10v-17,-8,-38,6,-63,6v-53,0,-103,9,-154,15r-12,3v2,14,3,30,3,48v-14,-29,-15,-65,-18,-106r-24,-308r-54,-610v-7,-15,-3,-43,6,-54v88,-26,193,-32,289,-43xm374,-647v4,18,10,37,15,58v-23,7,10,38,-6,48v10,21,9,50,24,67v-5,-1,-10,-3,-15,-6v-3,36,14,57,6,90v7,13,4,35,6,52r12,-9v-5,7,-8,16,-9,27r3,-12r30,3v4,-7,6,-14,6,-22v7,11,11,23,12,37r21,-6r-6,-21v5,9,12,2,18,-3r-3,18v15,-1,46,6,34,-15v5,5,13,9,24,12v8,-9,13,-21,15,-34r-18,6v12,-4,14,-18,15,-33v-5,1,-9,4,-12,9r-15,-33v4,-6,10,-11,18,-15r-6,-18r15,-3r-6,-21v-7,12,-23,20,-15,39v-5,-5,-12,-8,-21,-9v3,-10,5,-21,6,-33v-15,-16,-6,-26,9,-37v12,3,25,10,33,0r-9,-15v-7,5,-14,9,-21,12v1,-19,10,-30,18,-42r-21,-21r12,-3r-15,-27r12,-18v-11,-6,-5,-27,-15,-31v-3,8,-8,15,-15,19v-1,-5,-3,-8,-6,-10v25,-17,5,-71,-3,-96v8,-7,18,-13,30,-18r9,12r-9,-9r-12,9v-2,24,-7,47,12,57v-5,-14,0,-28,3,-42r21,6v-6,-20,-14,-39,-24,-57v13,4,24,19,39,12r-15,-22v-7,0,-14,-2,-21,-6v14,-5,26,0,39,3v-1,-14,-17,-16,-27,-21v-4,5,-9,8,-15,9v3,-3,5,-7,6,-12r-12,6v4,-22,13,-32,27,-45r-24,3v-1,-11,-6,-17,-15,-18r9,15r-18,3r-10,-18v-4,3,-8,7,-12,12v-3,-7,-6,-15,-9,-24r12,9v7,-6,11,-13,12,-21v-5,-1,-9,-3,-12,-6r9,-6v-3,-5,-8,-9,-15,-12r12,-19r-21,-3r-9,22v4,2,8,6,12,12r-21,3v7,-20,-3,-49,-3,-73v-7,1,-13,4,-18,9v-1,-18,-9,-29,-18,-45v-67,-8,-113,38,-145,78r-12,31v-4,-2,-7,-5,-9,-9r-28,-248v-31,-33,-89,-11,-139,-6r-99,9v-12,66,5,132,12,199r69,683v39,7,73,-9,115,-9v18,-9,39,-9,61,-3v5,-9,26,-7,39,-9r21,-15r-9,-9v2,-10,15,-22,3,-28r-3,3r12,-24v-7,-11,-10,-23,-3,-36v-14,-22,-11,-60,-18,-88v15,-15,-8,-39,-6,-63v0,-3,2,-5,6,-6r-3,-27r0,15r-15,-181v5,-18,19,-27,30,-40v15,-3,31,-10,42,0r21,28v6,35,24,66,16,105r12,3r-9,3v2,6,5,10,9,12v-3,4,-7,15,-6,3r-3,0xm425,-1018r6,15v5,-8,1,-12,-6,-15xm455,-991r21,24v-4,-9,-11,-17,-21,-24xm482,-970v2,4,4,8,3,0r-3,0xm-73,-967v-6,11,1,29,3,40v6,43,0,91,15,126r-12,-132xm422,-958v7,1,6,6,3,12v-7,-1,-6,-6,-3,-12xm437,-958v4,2,8,5,12,9v-5,0,-9,-3,-12,-9xm504,-940r-16,16r16,6r9,-15xm419,-937r3,10v-3,-3,-8,-6,-3,-10xm531,-927v1,2,3,4,6,6v-1,-3,-3,-5,-6,-6xm516,-909v1,4,4,7,9,9xm425,-903v-3,-1,-5,-3,-6,-6xm452,-903r15,6v-8,3,-14,4,-15,-6xm446,-897r6,9v-3,-2,-5,-5,-6,-9xm507,-891r-6,15v7,-4,13,-9,18,-15r-12,0xm525,-891v1,3,7,8,9,3xm437,-867v3,6,7,11,12,15v-6,7,-14,5,-21,0xm561,-849v2,4,4,8,3,0r-3,0xm504,-837v3,-7,6,-15,15,-9v-4,4,-9,7,-15,9xm440,-840v4,6,9,11,15,15r-9,12xm543,-831v2,4,4,8,3,0r-3,0xm504,-831v7,8,14,18,21,30r-15,-12r-31,9v10,-7,18,-17,25,-27xm561,-825v-6,-5,-9,1,-12,6xm464,-819v5,1,9,3,12,6v-5,0,-9,-2,-12,-6xm579,-813v2,4,4,8,3,0r-3,0xm497,-804v3,4,8,2,13,0v-1,8,-3,16,-6,25xm470,-782r6,9v-3,-2,-5,-5,-6,-9xm497,-773r7,12v-3,-3,-6,-7,-7,-12xm558,-767v2,3,5,5,9,6v-1,-3,-4,-5,-9,-6xm404,-767v2,0,4,2,6,6v-3,-1,-5,-3,-6,-6xm476,-764v-1,6,-5,11,-12,15xm561,-755v-6,0,-6,6,-9,9r9,0r0,-9xm567,-752v1,6,4,12,9,18v-1,-7,-4,-13,-9,-18xm416,-728v9,2,2,13,-3,18xm455,-728r24,18v-11,-1,-19,-7,-24,-18xm531,-722r3,12v3,-6,4,-11,-3,-12xm552,-722v1,3,3,5,6,6v-1,-3,-3,-5,-6,-6xm555,-713v-4,24,-21,36,-18,66v18,8,23,29,45,34v11,-18,4,-57,-12,-67v-5,6,-1,16,0,24r-21,-18v13,-5,22,-21,27,-36xm491,-713v5,7,9,16,10,27v-5,-7,-9,-16,-10,-27xm368,-707v2,4,4,8,3,0r-3,0xm591,-707v2,4,4,8,3,0r-3,0xm368,-698r3,9v-1,-3,2,-10,-3,-9xm470,-701v13,10,5,25,0,39v-1,-13,-5,-29,0,-39xm404,-689v2,1,4,3,6,6v-3,0,-5,-2,-6,-6xm485,-683r12,6r-15,3xm525,-680v1,3,3,5,6,6v-1,-2,-3,-4,-6,-6xm434,-668v3,1,5,3,6,6v-3,0,-5,-2,-6,-6xm488,-668r9,6v-3,-1,-6,-3,-9,-6xm597,-662v2,4,4,8,3,0r-3,0xm446,-653v3,1,5,3,6,6v-2,0,-4,-2,-6,-6xm389,-650v2,1,4,3,6,6xm567,-650v5,5,9,12,12,19v-6,3,-13,10,-15,0xm437,-640r21,3v-9,2,-20,11,-21,-3xm507,-622r9,6r-12,3xm488,-619v5,1,9,4,13,9v-5,-1,-10,-4,-13,-9xm585,-613v1,9,5,18,12,27v-1,-9,-5,-18,-12,-27xm504,-610v2,0,4,2,6,6v-3,-1,-5,-3,-6,-6xm570,-607v-11,-3,-19,6,-12,12xm464,-601v7,5,11,12,12,21xm567,-595v1,3,3,5,6,6v-1,-3,-3,-5,-6,-6xm507,-595r9,24r-15,-6xm546,-592v2,6,3,11,6,3xm455,-586v-2,-4,-5,-7,3,-6xm522,-586v2,0,4,2,6,6v-3,-1,-5,-3,-6,-6xm558,-568r-6,24r12,0v0,-8,-2,-16,-6,-24xm452,-568v3,2,5,5,6,9xm573,-565v1,7,5,12,12,15v-2,-6,-6,-11,-12,-15xm525,-517v-11,-6,-18,-16,-24,-27r12,-18v0,19,7,31,12,45xm467,-553v3,2,5,5,6,9xm540,-538v1,4,7,8,9,3xm561,-538r-3,12r9,-3xm573,-532v1,3,3,5,6,6v-1,-3,-3,-5,-6,-6xm398,-532r6,9v-3,-2,-5,-5,-6,-9xm467,-532r12,6v-5,2,-11,9,-15,3xm446,-529v3,3,5,7,6,12v-3,-3,-5,-7,-6,-12xm485,-529v3,3,5,7,6,12v-3,-3,-5,-7,-6,-12xm431,-526v4,1,8,7,3,9xm386,-520r3,18v0,-7,2,-16,-3,-18xm585,-505v-4,-2,-7,-5,-6,3xm603,-502v-6,-8,-19,-4,-12,7xm416,-508v4,7,7,15,9,25v-5,0,-14,7,-12,-3r-12,-9v5,-3,10,-8,15,-13xm528,-502v1,3,4,6,9,7xm416,-499v1,3,3,5,6,7v-1,-2,-3,-4,-6,-7xm431,-502v3,2,5,5,6,10xm567,-495r0,18v2,-7,10,-16,0,-18xm531,-486r-3,12v9,2,11,-3,12,-9xm443,-483v8,1,5,8,3,15v-8,-1,-5,-8,-3,-15xm504,-483v3,6,4,11,-3,12xm564,-474v2,4,4,8,3,0r-3,0xm582,-474v4,11,11,20,21,27xm531,-468r3,9v-1,-3,2,-10,-3,-9xm289,-465r0,21v1,-7,3,-13,3,-21r-3,0xm395,-462r9,21v-4,-6,-7,-13,-9,-21xm576,-441v1,4,7,8,9,3xm422,-441v2,0,4,2,6,6xm612,-417v-15,-4,-32,-23,-42,-6r9,39v8,-8,13,-25,3,-33v8,1,23,6,30,0xm491,-432v3,2,5,5,6,9xm549,-417v1,4,4,6,9,6xm609,-414v-3,5,-8,9,-3,15v8,-1,5,-8,3,-15xm564,-411v-5,0,-9,8,0,6r0,-6xm407,-411v2,12,9,25,3,36v-9,-7,-4,-23,-3,-36xm513,-405v1,4,6,11,-3,9xm618,-399v-5,0,-9,8,0,6r0,-6xm422,-396r6,15r-9,0xm597,-390v1,3,3,5,6,6v0,-3,-2,-5,-6,-6xm434,-384v6,2,11,5,15,9v-5,-1,-10,-4,-15,-9xm612,-381v-6,0,-4,8,-6,12v8,2,6,-6,6,-12xm582,-363v2,4,4,8,3,0r-3,0xm470,-360r18,13v-7,-3,-13,-8,-18,-13xm570,-341v1,3,3,6,6,9v-1,-4,-3,-7,-6,-9xm413,-326v-3,6,-8,12,-3,18v5,-6,13,-13,3,-18xm431,-317v2,3,5,5,9,6","w":689},"i":{"d":"422,-1404v19,-5,37,-11,53,2r157,1140v2,10,8,20,2,28r-26,8r-683,123r-29,3v-4,-6,-8,-13,-13,-21r-133,-882r-16,-126r-24,-152v6,-5,13,-10,21,-13r236,-39r183,-27v87,-19,187,-22,272,-44xm142,-1312r-42,178v11,-1,21,-5,32,-11r138,-167r-128,0xm126,-1056r-125,102v11,25,31,40,47,61r0,523v9,28,16,60,34,79v21,23,46,43,76,57r154,-125v-3,-6,-7,-12,-13,-19v-11,7,-22,12,-31,21v-22,-10,-37,-27,-47,-49r-3,-490v14,-16,30,-29,42,-47v-40,-43,-90,-74,-134,-113","w":609},"j":{"d":"223,-2132r307,0r-126,72r-869,36v35,-30,78,-54,127,-72r235,0r55,-18r198,0xm458,-1445r-109,199r55,977v-5,93,-23,196,-55,307v-47,59,-107,119,-181,180r-253,37r-54,-19r-54,-180r72,-55v77,25,143,79,199,163r72,-36r18,-144r-18,-55r0,-307r-18,-36r-18,-705v-3,-89,-45,-161,-126,-217r144,-91r326,0r0,-18xm639,-740v12,109,39,203,36,326r-18,-18r-36,-145","w":844},"k":{"d":"-245,-1523r133,735r0,13r-5,-4r-133,-732xm66,-1307v8,12,15,26,21,42r45,344v7,24,17,47,9,75v26,42,15,133,33,191v3,10,8,17,17,21r245,-337v-12,-19,-46,-8,-71,-8v-22,-10,-21,-36,-25,-62r254,-38v19,9,17,39,25,59v-28,11,-53,12,-84,25r-174,232v1,12,3,25,8,38r154,195v9,11,17,23,25,37v37,38,66,86,104,125r54,-4v24,6,28,30,33,54v-9,14,-32,7,-50,16r-195,25v-14,-14,-18,-37,-25,-58v26,-12,60,-14,91,-21v-38,-49,-79,-96,-116,-145r-125,-166r-16,-13r-108,154r25,187v1,16,9,27,25,33v33,-2,70,-17,99,-8r9,50v-79,33,-199,26,-283,54r-37,0v-1,-23,-17,-53,0,-67r99,-16r4,-13r-128,-901v-29,-30,-88,6,-125,-9r-8,-49v50,-29,127,-27,191,-42xm743,-966v22,61,30,140,42,211r50,287v3,12,13,26,0,33v-15,-25,-33,-47,-50,-70r-46,-121r-25,-195v8,-22,5,-56,8,-83xm-62,-468r33,179v13,21,22,46,29,75r-13,29r54,415r-21,-63","w":1089},"l":{"d":"6,-1813v22,5,41,13,56,24v-21,-3,-40,-11,-56,-24xm341,-1805v7,5,13,13,16,24xm-160,-1789r16,0r-8,16xm-97,-1773v-6,-1,-11,-6,-16,-16xm-136,-1741v-7,-1,-12,-6,-16,-16xm22,-1757v7,1,12,6,16,16xm46,-1717v-6,-1,-11,-7,-16,-16xm293,-1709v7,5,13,13,16,24xm14,-1701v7,5,13,12,16,23xm166,-1701r16,0r-8,16xm245,-1693v7,1,12,6,16,15v-6,-1,-11,-6,-16,-15xm-57,-1646v-6,-1,-11,-6,-16,-16xm460,-1622v-6,-1,-11,-6,-16,-16xm452,-1614v17,17,30,39,40,64r32,183v-17,15,-38,23,-64,24v-32,-43,-36,-126,-24,-191r-16,-16v7,-21,17,-42,32,-64xm-81,-1606r16,24v-7,-5,-13,-13,-16,-24xm182,-1606v73,16,173,-1,175,88v-8,5,-13,13,-16,24r16,55v-6,65,-16,127,16,175v-11,2,-19,7,-24,16r16,207v-17,39,3,85,16,127r-24,88r16,95r-8,64r16,56v-1,27,-15,61,0,79v9,81,-5,164,31,223v-11,5,-24,13,-39,24v-22,6,-41,17,-56,32r-8,-24v-11,7,-22,17,-32,32r-56,-32r-103,8v-16,-25,-27,-54,-32,-87r-48,-24r32,-8r0,16v5,-30,16,-53,16,-88r-8,0r16,-16r-8,-56r-8,0v16,-33,0,-85,0,-127v16,-19,-3,-44,0,-72r-8,0v24,-36,-30,-93,8,-119r-24,-95r24,-16r-24,-56r16,-24v-5,-9,-11,-18,0,-24r-16,-223v17,-33,-4,-66,-16,-103r24,-16r-16,-119v3,-22,11,-43,24,-64v35,-1,72,-7,112,-16xm-152,-1590r8,32r-16,0v4,-8,7,-19,8,-32xm-97,-1590v7,10,18,21,32,32v-13,-4,-23,-15,-32,-32xm-152,-1463r23,64r-15,24v6,46,10,92,0,135v17,39,17,103,8,151v16,56,16,133,7,199v3,18,8,37,16,56v-5,2,-11,7,-16,16r16,95r-16,48r24,16r-16,24r16,48r-16,71r32,48r-24,-8r16,80r-8,63r16,24r-24,48r16,88v-7,61,-9,122,0,182r-8,-15r-47,-868v16,-187,0,-393,0,-589xm-121,-1399v7,1,12,6,16,16v-6,-1,-11,-6,-16,-16xm-89,-1391v17,5,30,16,40,32xm-89,-1327r32,24v-15,-5,-25,-13,-32,-24xm-89,-1112v-6,-1,-11,-7,-16,-16xm460,-1105v7,5,13,13,16,24xm381,-1057r16,40v-9,-12,-14,-25,-16,-40xm373,-898v6,1,11,7,16,16xm-73,-882v7,1,12,7,16,16v-6,-1,-11,-6,-16,-16xm14,-834r32,56v-16,-13,-27,-32,-32,-56xm-57,-810r16,0r-8,16xm-17,-699v6,1,11,7,16,16v-6,-1,-11,-6,-16,-16xm46,-667r16,0r-8,16xm-1,-651r23,8r-16,8xm404,-563v9,5,14,12,16,23v-7,-5,-13,-12,-16,-23xm468,-524v6,1,11,7,16,16v-6,-1,-11,-6,-16,-16xm54,-492v-2,7,-7,13,-16,16xm190,-444v1,11,6,22,15,32v0,-11,-5,-22,-15,-32xm397,-444r15,0r-8,16xm397,-420v6,1,11,6,15,16xm397,-349v6,1,11,7,15,16xm22,-253v7,1,12,6,16,16v-6,-1,-11,-6,-16,-16xm508,-253r32,32v-13,-4,-24,-15,-32,-32xm166,-229v-7,-1,-12,-6,-16,-16xm564,-221r24,8r-16,8xm651,-197r16,0r-8,16xm604,-166r15,24v-7,-5,-12,-13,-15,-24xm309,-134r-16,32v2,-11,7,-22,16,-32xm205,-110r-23,8r8,-24xm14,-110r24,24v-10,-5,-18,-13,-24,-24xm349,-102v-5,17,-12,35,0,48r-24,-24xm253,-94v-2,6,-7,11,-16,16xm341,-46v6,1,11,6,16,16v-7,-1,-12,-7,-16,-16xm341,1v-6,-1,-11,-6,-16,-15xm564,49v-7,-1,-12,-6,-16,-16","w":774},"m":{"d":"5,-1450r-6,20r-121,906r7,94r-21,6r-87,631r-7,-21r188,-1422r7,-13r27,-208xm132,-1054v21,4,39,15,54,33r0,74v27,-13,42,-40,67,-54r61,-33r94,-7r67,27r53,47r41,60r40,-13r47,-47r74,-27r87,7r74,27r47,46r33,68r14,87r-47,436r-61,7v-3,-10,-10,-21,0,-27r41,-416v-12,-29,-14,-67,-21,-101r-47,-54r-73,-26r-81,13v-18,11,-36,24,-54,40r-40,54v-37,125,-39,288,-60,429v-5,27,-20,40,-47,41v-11,-20,-17,-42,-20,-67r40,-349r-7,-88v-7,-21,-18,-43,-33,-67r-54,-40r-87,-7r-67,27r-54,47r-34,67r-47,436r-60,0r-7,-33xm1226,-799r7,26r-34,269v-3,23,-9,43,-20,60r-20,-87r7,-107","w":1454},"n":{"d":"161,-218v-15,-26,-18,-66,-13,-106v-14,-21,1,-63,-10,-90v9,-21,-10,-47,0,-66v-11,-65,-5,-132,-17,-196r7,-33v-4,-13,-6,-28,-7,-43v-26,-9,-53,-6,-66,-30v7,-18,3,-28,0,-46r-10,13r10,216v11,48,-6,143,20,189v0,32,9,68,3,96r7,93v-8,30,-11,73,-4,106v-23,-51,-4,-142,-20,-202r-16,-339v-8,-17,3,-52,-7,-69v-3,-39,-4,-85,-6,-120r-17,-358v28,96,16,235,27,348v15,-8,9,-44,6,-63r7,0v-14,-10,-8,-27,0,-43v17,-2,35,-14,50,-6v40,-2,81,-13,119,-7v35,-7,76,-10,119,-7v5,20,13,40,7,63v5,6,8,12,3,20v62,-19,62,-113,153,-93v21,-9,46,0,66,-10v9,10,32,6,47,10r39,24r30,33v3,32,15,58,17,89r23,382v16,6,40,0,60,0v13,62,12,138,20,205v-47,1,-95,10,-140,4v-15,12,-45,-2,-63,6v-22,3,-52,-1,-66,10r-30,-6v-6,-31,-15,-65,-10,-97v0,-3,-2,-5,-6,-6v7,-22,-10,-49,0,-73v-7,-7,-1,-20,0,-30r-10,-3v12,-11,-2,-38,6,-53v-5,-40,-12,-74,-6,-117v-13,-36,-4,-81,-14,-119r4,-40v-26,-6,-53,9,-83,0v-2,7,-7,7,-14,4r-16,6v4,25,3,55,10,77r-3,3r16,235v-8,16,8,37,0,53r13,136v-1,59,-85,33,-136,44v-26,-1,-60,9,-89,3xm814,-891r7,20v-3,-6,-6,-13,-7,-20xm814,-868v3,3,6,8,7,13v-4,-3,-6,-7,-7,-13xm811,-851r13,6v6,16,-2,34,4,43r-4,4v11,57,10,125,20,185r-3,10r23,236r-3,10v-28,-24,-23,-81,-30,-126v1,-11,6,-25,-3,-30v8,-35,-9,-63,0,-96v-13,-54,4,-121,-17,-176v5,-23,9,-46,0,-66xm403,-145v-3,0,-5,-2,-7,-6","w":919},"o":{"d":"198,-1567v8,27,13,57,16,91r-84,564v47,-13,82,-42,129,-61r38,-30r16,8v18,-6,37,-23,53,-8r76,-15v29,2,61,12,84,0r61,15r23,-38r30,38v-6,-13,-19,-3,-30,0v31,28,74,41,107,69r91,76v-4,-11,-13,-25,0,-31v26,96,84,174,84,298r-54,236r-15,-15r-7,22v11,2,18,7,22,16r-61,23r-30,53v-92,35,-179,75,-297,84r-15,7r-8,-15r-168,-38r-144,-84v-8,-17,-21,-29,-39,-38r-15,38r38,0v-16,14,-29,29,-38,46r-7,76v13,7,23,20,30,38r-15,-23r-31,54r-7,61r15,23r-23,68v-1,27,-9,55,-23,84r-15,-100xm290,-1552v6,1,11,6,15,15xm846,-1437r15,0r-7,15xm671,-1430v6,1,11,6,15,15xm625,-1422v6,1,11,6,15,15xm960,-1399v-6,-1,-11,-7,-15,-16xm762,-1399r31,7r-38,8xm823,-1384v-8,17,-21,29,-38,38v15,-9,28,-21,38,-38xm930,-1384r38,0v-17,9,-29,21,-38,38r0,-38xm617,-1376r31,7r-38,8xm587,-1369v6,1,11,6,15,15xm709,-1369v6,1,11,6,15,15v-6,-1,-11,-6,-15,-15xm412,-1346v-6,-1,-11,-6,-16,-15xm541,-1361v6,1,11,6,16,15xm884,-1354r31,8r-31,8r0,-16xm739,-1323v6,1,11,6,16,15xm549,-1315v6,1,11,6,15,15xm831,-1300v-6,-1,-11,-6,-15,-15xm640,-1293v-6,-1,-11,-6,-15,-15xm846,-1300v6,1,11,6,15,15v-6,-1,-11,-6,-15,-15xm739,-1262v-5,-1,-10,-6,-15,-15xm564,-1270r31,8r-31,7r0,-15xm854,-1255v6,1,11,7,15,16v-6,-1,-11,-7,-15,-16xm526,-1239r31,7r-39,8xm854,-1232v2,21,12,46,0,61v-13,-17,-31,-29,-54,-38xm884,-1232r38,31v-16,-5,-29,-15,-38,-31xm694,-1224r53,0v-19,6,-36,16,-53,30r0,-30xm663,-1216v6,1,11,6,15,15xm953,-1186v-6,-1,-11,-6,-15,-15xm526,-1194v6,1,11,7,15,16xm549,-1194v6,1,11,7,15,16v-6,-1,-11,-7,-15,-16xm701,-1178r16,0r-8,15xm777,-1163r23,53r-15,23xm579,-1155v6,1,11,6,16,15xm755,-1140v6,1,11,6,15,15v-6,-1,-11,-6,-15,-15xm724,-1117v-6,-1,-11,-7,-15,-16xm656,-1117v5,1,10,6,15,15xm404,-1072r15,0r-7,16xm915,-1072r15,0r-8,16xm671,-1049v6,1,11,7,15,16xm777,-1049r39,0r-39,38r0,-38xm869,-1041r30,8r-22,7xm572,-1018v-6,-1,-11,-6,-15,-15xm823,-1011v6,1,11,7,15,16xm877,-995r30,7r-23,8xm701,-973v-6,-1,-11,-6,-15,-15xm800,-965v-6,-1,-11,-6,-15,-15xm412,-950v-99,36,-178,111,-221,206r-23,107v19,19,-11,58,8,76v1,19,-5,31,-8,46r15,7r-7,16v19,76,54,138,99,190r61,46r60,15r138,-15v16,-9,31,-25,45,-46r38,-7v30,-37,57,-76,77,-122v0,-40,19,-81,38,-107v-1,-13,-6,-29,-15,-46r22,0r-7,-99r-31,-68v-3,-20,-13,-40,-30,-61r-8,-39v-5,3,-10,8,-15,16r8,7v-18,-16,-19,-46,-31,-68v-13,-4,-29,-24,-38,-8r8,23v-22,-56,-109,-62,-183,-69xm816,-957r15,0r-8,15xm884,-950v6,1,11,7,15,16v-5,-1,-10,-7,-15,-16xm938,-927v7,20,12,43,15,69r-15,23r-46,7r-8,-15v-7,13,-16,6,-23,-8r-7,-45v9,11,22,19,38,23xm572,-896v-6,-1,-11,-7,-15,-16xm800,-912r31,8r-31,8r0,-16xm511,-881v6,1,11,6,15,15xm610,-873r15,0r-8,15xm869,-866v1,7,6,12,15,15v-1,-7,-6,-12,-15,-15xm678,-828r0,16r8,0r0,-16r-8,0xm861,-828v6,1,11,7,16,16v-6,-1,-11,-7,-16,-16xm534,-790r30,8r-30,8r0,-16xm396,-767r16,0r-8,16xm671,-698v11,1,21,6,30,15xm678,-652v6,1,11,6,16,15v-6,-1,-11,-6,-16,-15xm663,-622r31,8r-31,7r0,-15xm587,-607v6,1,11,7,15,16xm686,-607r15,0r-7,16xm671,-530v6,1,11,6,15,15xm701,-477v2,7,7,12,16,15v-1,-7,-7,-12,-16,-15xm69,-386v2,16,10,29,23,38xm808,-248r15,0r-7,15xm84,-233v6,1,11,6,15,15v-6,-1,-11,-6,-15,-15xm861,-233r54,0v-2,23,-10,46,-23,68r-31,8v-1,-26,-13,-57,0,-76xm777,-218v9,2,17,7,23,15xm229,-210v6,1,11,6,15,15xm267,-195v-5,16,-15,29,-31,38v7,-14,18,-27,31,-38xm762,-195v6,1,11,6,15,15xm732,-172v-6,-1,-11,-6,-15,-15xm831,-165v-6,-1,-11,-6,-15,-15xm739,-149v-5,-1,-10,-7,-15,-16xm747,-165v6,1,11,7,15,16v-6,-1,-11,-7,-15,-16xm800,-149r16,0r-8,15xm99,-142v6,1,11,6,16,15xm61,-134r31,7r-31,8r0,-15xm198,-96v-6,-1,-11,-6,-15,-15xm762,-73r38,7r-30,8xm84,-43r31,8r-39,8xm214,-43v5,1,10,7,15,16xm671,-35v6,1,11,6,15,15xm130,-27r15,0r-8,15xm785,18r15,0r-7,15","w":915},"p":{"d":"-456,-1349r218,1376r-87,-508r-58,-344v-5,-50,-22,-103,-29,-164xm587,-1324v23,21,37,51,43,90v-33,-20,-81,-18,-123,-8r0,-50xm167,-1292r123,9v32,12,66,28,101,49r73,90r65,237r7,123v-14,92,-34,178,-79,254r-80,82r-131,25r-108,-33v-27,-23,-54,-50,-80,-82r-14,98r29,213r65,0r43,-16v0,25,-5,50,-14,74r-261,32r-21,-57v31,-8,59,-19,101,-16v15,-88,-4,-158,-14,-254r-73,-680v-35,-3,-72,-14,-109,-33r-7,-41r181,-24v1,17,15,40,0,49r15,90v37,-30,57,-90,86,-131xm181,-1226r-108,49r-51,98r-29,230v14,45,12,100,29,147r43,115r80,74r94,24v42,-15,78,-25,123,-49r66,-90r29,-131r0,-139r-8,0r-21,-123v-13,-34,-28,-72,-51,-107v-20,-30,-49,-53,-80,-74v-34,-12,-73,-20,-116,-24xm681,-612v7,32,12,68,15,107r-87,8v-15,-16,-28,-35,-37,-57v62,5,91,-10,109,-58xm399,60v-6,-1,-11,-7,-15,-17","w":897},"q":{"d":"921,-306v-1,56,13,100,13,156v0,19,-12,27,-32,29r-551,45v-37,14,-81,5,-123,20r-49,3r-6,-13r-101,-771r-42,-295v58,-33,145,-36,224,-49r515,-87v24,14,31,46,35,81r-19,3v8,26,32,42,36,72r51,349xm409,-1002v-40,41,-84,78,-136,107v-9,6,-17,15,-23,26r65,372v10,37,37,57,58,84v18,9,36,25,59,10r94,-100v17,-14,30,-29,48,-42v11,71,35,129,33,213v-9,29,-24,52,-29,85v45,-12,71,-44,94,-78v6,-8,16,-13,29,-16v30,11,52,30,90,32v-15,-24,-42,-37,-51,-65r-23,-74r-68,-415v-14,-29,7,-46,16,-68r-117,-19xm367,-892v57,20,134,12,165,61r39,247v-33,23,-55,57,-84,84v-15,-1,-30,-7,-46,-16v-9,-16,-16,-34,-19,-55","w":725},"r":{"d":"165,-2050r621,37v17,1,35,-1,55,0r432,26v17,4,27,15,31,34r-204,1693v-24,-34,-28,-90,-44,-133r-13,-205v1,-14,5,-30,-4,-37r-8,-90r-4,0r-33,-111v-37,-60,-67,-126,-111,-178r-11,-22v44,-19,86,-42,127,-62r197,-95r-144,-445v-6,-15,-15,-29,-26,-43r-405,182v12,-120,-16,-217,-79,-273v-29,-17,-61,-31,-95,-42r-110,-4v-61,19,-119,32,-164,70r39,19r68,-1v35,11,67,24,95,42r32,43r18,53r-12,120r-33,104r-288,148r-36,13r91,-795v3,-15,9,-31,18,-48xm836,-1546v9,12,17,25,22,40r119,364v-95,74,-219,116,-328,180v-5,0,-8,-3,-10,-8r128,-528v19,-17,42,-33,69,-48xm709,-1484v5,1,10,3,14,8v-3,17,-5,35,-14,47r-215,888v-41,-6,-79,-9,-87,-52r203,-823v19,-32,63,-51,99,-68xm358,-1312r10,13r-58,225r-45,-46r-74,-113v27,-19,59,-23,92,-45v23,-7,48,-18,75,-34xm45,-1120v36,33,70,67,93,116r67,145v8,63,23,123,8,192v6,63,-81,55,-131,75r-105,41xm623,-900r62,27r49,36v27,34,48,74,65,118r32,208r4,0r-3,18v19,109,16,231,56,320v14,31,21,68,40,93r18,3v46,-31,87,-68,138,-95r-16,121v-3,34,-15,80,-17,120r-106,-5v-23,0,-48,-6,-78,-7r-931,-24v-23,-4,-22,-34,-19,-61v12,-124,40,-234,41,-370r7,-24r133,3r139,29v110,43,179,130,252,211v88,-48,163,-114,246,-168v6,-8,10,-18,11,-29v-6,-7,-14,-12,-24,-16r-34,26v-60,-39,-105,-92,-159,-137v3,-20,7,-42,13,-65","w":1117},"s":{"d":"-36,-1552v4,52,-2,114,8,159v-4,3,-4,5,0,8v-11,22,7,63,-4,85v5,39,11,78,0,113v5,41,2,89,12,124r-4,4v0,25,8,54,0,74v1,27,12,58,4,82v5,56,1,121,12,171v-1,12,-7,26,0,34r11,288v3,5,6,9,0,12v4,68,20,137,11,205v3,10,7,24,-4,28r-46,-793r4,-11r-4,-187r-4,-11r0,-373xm418,-1536v4,1,7,3,8,7r-12,4xm38,-1315r4,23r-16,-15v5,-1,9,-4,12,-8xm313,-1074v56,-13,106,-33,175,-24v43,-7,79,2,112,20r-7,167v-42,-5,-87,-23,-132,-12v-51,-9,-93,12,-128,31v-11,11,-21,24,-31,39v8,30,31,49,54,70v136,55,291,91,279,295v-11,38,-15,70,-38,101r-59,78r-31,15v-1,13,15,29,0,35v-8,-6,-7,-21,-11,-31v-51,33,-121,48,-187,66v-13,-7,-38,-2,-50,4v-3,-6,-10,-2,-16,0v-64,-7,-130,-6,-182,-27v-1,-32,9,-71,0,-97r4,-12r-4,0v12,-18,1,-56,15,-74v59,9,118,43,187,28v30,14,52,-25,93,-20v15,-5,31,-13,47,-23v9,-17,14,-35,15,-54r-19,-39v-45,-23,-85,-50,-152,-51v-14,-27,-44,-34,-70,-54r-46,-35v-21,-29,-39,-60,-51,-97v1,-152,74,-231,183,-276v17,-7,32,-19,50,-23xm403,-822v3,1,5,3,7,8xm313,-511v3,1,6,3,8,8xm228,-499v3,0,5,2,8,7v-3,0,-6,-2,-8,-7xm290,-476v2,-9,8,-8,15,-4xm309,-484v5,3,9,7,12,12xm115,-437r8,0v-3,7,-5,7,-8,0xm674,-360r8,66r-19,8r-8,-11xm406,-212v-3,-1,-5,-3,-7,-8xm414,-193v-3,0,-5,-2,-8,-7xm271,-181r11,8r-11,23v3,-11,11,-24,0,-31xm10,-154v9,33,8,72,12,109","w":819},"t":{"d":"95,-1312r-50,320v-9,31,-15,67,-17,107v5,29,24,44,56,45v24,25,49,48,50,95r6,0v-2,18,-7,34,-6,56r-28,73v-19,-4,-38,-16,-56,-5v-33,-23,-29,-67,-17,-107r-11,-28v-25,61,-37,128,-50,219r-78,550v18,15,33,33,44,56v-19,10,-38,23,-56,39r-17,-22r45,-331v2,-33,11,-68,17,-107r34,-219v3,-32,10,-67,17,-106xm286,-981v13,7,28,11,45,12v18,7,35,18,50,33r-22,135r50,22r6,57v-8,28,-47,38,-79,45r-50,264v10,31,42,40,67,56v-12,29,-16,66,-22,101r-56,-11v-35,-21,-70,-36,-101,-62r-12,-56r23,-57v-13,-46,10,-75,11,-123v16,-42,19,-97,28,-146v-12,-3,-24,-9,-33,0v-11,-10,-19,-23,-23,-39r11,-68v6,-5,12,-16,17,-5r45,5v14,-60,17,-113,45,-163xm-45,46r45,12r-17,56r-45,-11xm219,103v15,-17,30,-34,39,-57v34,5,32,52,50,74v-10,-2,-23,-10,-28,0r-56,0xm39,58r39,11r-17,45r-33,-6xm140,75v22,6,57,15,67,39v-12,10,-25,3,-39,-6r-67,6v11,-15,24,-28,39,-39","w":505},"u":{"d":"92,-1429r961,92r18,128v-13,27,-35,51,-64,73v-30,9,-44,31,-46,64r-46,631v9,28,24,53,46,74v14,32,23,68,28,109v-33,23,-72,37,-119,37r-833,0r0,-220xm275,-1182r-18,64v11,-19,17,-40,18,-64xm641,-1164r9,119r-18,65r45,27r-54,55r18,73r-18,46r36,9v-1,7,-7,13,-18,18r-28,37r28,73v-33,31,-73,61,-119,92r-37,64r101,73r64,-73r-9,45r27,-18v39,-73,85,-137,92,-247v4,-53,18,-98,18,-156r-18,10v17,-49,26,-104,27,-165v-2,-11,-8,-20,-18,-28v11,-31,20,-68,27,-109xm147,-1154v15,21,33,36,55,45r9,83r9,-92xm641,-1118r9,28r0,-28r-9,0xm147,-1090r0,45r36,-27xm293,-1072r0,-18r-9,0xm165,-1045v3,12,9,21,18,28v-2,-12,-8,-21,-18,-28xm220,-1026v7,14,19,23,37,27xm147,-980v1,7,7,13,18,18v-2,-6,-8,-12,-18,-18xm192,-971v5,11,15,17,28,18v-5,-9,-15,-15,-28,-18xm229,-962v-11,14,-17,29,-18,46v11,-14,17,-29,18,-46xm257,-962r9,73v9,-15,15,-34,18,-55xm174,-926r0,-18r-9,0xm632,-944r0,18r9,0r0,-18r-9,0xm202,-898r-19,36r28,-9r18,9v-5,-16,-14,-28,-27,-36xm623,-852r9,27r0,-27r-9,0xm128,-816v2,8,8,14,19,19v-2,-7,-8,-13,-19,-19xm192,-788v24,17,52,29,83,36xm138,-752r0,-18r-10,0xm156,-733r0,-19r-9,0xm128,-743r-9,28r19,18v0,-18,3,-40,-10,-46xm174,-733r28,36v-13,15,-26,34,-37,55r-37,-36r0,64r19,-10v28,6,52,15,73,28r-46,55r37,9v23,26,45,56,64,91r36,-45r74,100r36,-9r-45,-55r73,-27v-3,-28,-18,-43,-46,-46v-26,-11,-50,-26,-73,-46v0,19,-6,38,-19,55v-21,-9,-33,-21,-36,-36r27,-46v-13,-11,-28,-17,-45,-18r-28,-74v-1,-30,-20,-45,-55,-45xm732,-743v7,1,14,8,19,19v-7,-1,-14,-8,-19,-19xm696,-733r18,27r-27,9xm714,-697r18,0r-9,19xm696,-605v7,1,13,7,18,18r-27,9xm659,-587v7,1,13,7,18,18xm156,-550r0,-19r-9,0xm623,-578v11,5,23,15,36,28v-14,-3,-26,-12,-36,-28xm476,-450r-36,64v16,0,31,-6,45,-18v12,-1,21,-7,28,-18v-13,-6,-25,-15,-37,-28","w":980},"v":{"d":"613,-1757r31,0r0,482r-13,-56r-12,-413xm-163,-1337r25,68r106,432v4,23,14,45,19,69v17,76,34,154,50,219r87,351v-29,-94,-50,-196,-87,-282v-7,-51,-26,-95,-37,-137r-163,-645v-2,-26,-12,-55,0,-75xm425,-968v46,-48,113,-35,181,-63r38,0r0,57r-31,6v-15,24,-28,51,-38,81v-3,33,-14,68,-19,107v-14,112,-33,214,-50,319v-5,29,-10,63,-25,100r-75,13r-269,-507v-21,-17,-46,-29,-75,-38v5,-33,26,-43,62,-50r138,-25r6,56v-19,8,-47,7,-75,7v25,77,68,141,100,212v52,72,90,156,132,238r25,-68r69,-426r-88,6xm325,2v9,1,17,5,25,13","w":774},"w":{"d":"-76,44v-17,-7,-26,-26,-24,-48r80,-912v7,-13,-1,-26,0,-44r48,-620v16,1,35,7,48,0r520,52v18,-4,34,-3,48,4v15,-3,31,-7,40,4r12,-4r128,16v51,-12,108,19,160,8v22,9,53,14,80,8v50,14,116,12,172,20v4,19,3,34,-4,48v-6,80,-22,150,-36,220v-18,90,-35,187,-48,272r-40,264r-52,256v-2,33,-11,61,-16,88v-15,76,-17,157,-48,216v-7,5,-12,11,-16,20r-8,-20v-9,8,-20,15,-36,16v5,-5,7,-11,8,-16r-36,20v-9,-6,-22,-13,-24,4v-19,-13,-49,0,-68,-8r-28,16v3,7,8,11,16,12v-21,11,-35,29,-64,32v5,-9,25,-21,8,-28r-20,8r8,20v-17,7,-39,10,-52,20r-4,-16r-24,24r-16,-12v-1,6,-5,11,-12,16r-24,-8r12,8r-24,8v-5,-9,-12,-17,-20,-24v-8,5,-15,16,-24,8v-45,38,-137,40,-212,40v-70,0,-160,2,-232,8v-14,-10,-41,6,-56,-4v-39,12,-79,1,-120,8xm48,-1068r-16,48v5,11,15,21,28,28v19,1,36,5,52,12r96,512v8,25,20,53,20,88v22,1,54,22,68,4r28,16v19,0,35,-8,48,-24v8,-42,27,-72,32,-116r24,-40v6,-38,19,-69,36,-96v14,-55,35,-99,60,-144v7,-49,28,-91,44,-132v4,-10,11,-19,20,-28r104,560v8,8,17,13,28,16r-24,4v7,56,86,22,128,40r24,-36v10,-30,26,-68,32,-104v15,-27,27,-62,44,-88v1,-13,6,-26,12,-40r112,-280v3,-13,13,-24,28,-32r56,4v5,-18,8,-37,8,-56r-36,-24r-52,4v-19,-5,-40,-18,-56,-4r-32,-12v-35,10,-70,-10,-100,0v-8,20,-21,50,-12,72v33,-9,67,5,100,8v-5,33,-20,59,-24,96v-8,15,-13,32,-20,52r-88,252v-6,35,-16,66,-32,92v-32,-42,-33,-121,-44,-180r-40,-208v-3,-18,-11,-40,-20,-56r12,0r-16,-40v-4,-45,4,-97,-36,-108v-29,-2,-62,-17,-88,-8v-9,-3,-19,-4,-32,-4v-11,35,-33,64,-44,96r-92,264v-28,37,-31,95,-56,136r-16,56r-16,12v-1,-6,-5,-11,-12,-16r12,-4v-16,-36,-15,-84,-32,-120v1,-18,7,-38,0,-52r-32,-180v6,-26,2,-64,-20,-76r8,-28v-4,-13,-9,-25,-16,-36v5,-9,8,-19,8,-28v16,17,49,17,76,24v11,-1,22,-6,32,-16v1,-8,3,-16,8,-24r-12,-20v-36,-15,-89,-10,-128,-24v-13,15,-34,0,-52,-4v-34,6,-64,1,-92,-8xm328,-1036v0,-4,2,-10,-4,-8xm240,-1000r8,0v-3,8,-5,8,-8,0xm132,-980v3,4,6,9,8,16v-6,-4,-13,-11,-20,-4xm196,-980r16,4r-16,4r0,-8xm196,-968r8,20v-5,-6,-12,-10,-20,-12xm632,-924v3,1,6,3,8,8xm228,-908v0,-4,2,-10,-4,-8xm408,-672r8,0v-3,8,-5,8,-8,0xm656,-648v-3,-1,-6,-3,-8,-8xm440,-608v-3,-1,-6,-3,-8,-8xm420,-580v-3,-1,-6,-3,-8,-8xm688,-576v3,1,6,3,8,8v-3,-1,-6,-3,-8,-8xm404,-548r12,4v-6,5,-10,4,-12,-4xm228,-528v3,1,6,3,8,8xm876,-440v-3,-1,-6,-3,-8,-8xm748,-356v-3,-1,-6,-3,-8,-8xm728,-360v3,1,6,3,8,8v-3,-1,-6,-3,-8,-8xm776,-356v3,1,6,3,8,8v-3,-1,-6,-3,-8,-8xm-64,-172v0,-4,2,-10,-4,-8xm-68,-168v1,3,4,6,8,8v-1,-3,-3,-5,-8,-8xm-68,-156v1,3,4,6,8,8v0,-3,-3,-6,-8,-8xm-72,-140v-3,27,-12,54,-4,80r20,-4v-7,-25,-8,-50,-16,-76xm-56,-124v0,-4,2,-10,-4,-8xm-52,-112v0,-3,-3,-6,-8,-8v1,3,4,5,8,8xm-52,-100v0,-4,2,-10,-4,-8xm912,-104v-5,3,-7,7,-8,12r16,-4v-1,-3,-3,-6,-8,-8xm-48,-88v0,-3,-3,-6,-8,-8v1,3,4,5,8,8xm-48,-76v0,-4,2,-10,-4,-8xm936,-88r20,16v-9,-3,-15,-8,-20,-16xm912,-84r8,0v-3,8,-5,8,-8,0xm824,-72v-3,-1,-6,-3,-8,-8xm736,-64r8,0v0,-4,2,-10,-4,-8xm748,-72v1,3,3,6,8,8v-1,-3,-3,-6,-8,-8xm924,-76v3,1,6,3,8,8v-3,-1,-6,-3,-8,-8xm724,-68v1,3,3,6,8,8v-1,-3,-3,-6,-8,-8xm912,-72v3,1,6,3,8,8xm764,-64v1,3,3,6,8,8v-1,-3,-3,-5,-8,-8xm780,-56v-1,-3,-3,-6,-8,-8v1,3,4,5,8,8xm-56,-52v0,-4,2,-10,-4,-8xm936,-56v-3,-1,-6,-3,-8,-8xm-68,-48v0,-4,2,-10,-4,-8xm916,-60r8,0v-3,8,-5,8,-8,0xm692,-52v1,3,3,6,8,8v-1,-3,-3,-5,-8,-8xm704,-52r0,8v8,-3,8,-5,0,-8xm680,-48r-12,8v7,0,11,-3,12,-8xm-80,-44r4,12v-1,-4,3,-14,-4,-12xm-64,-36v0,-4,2,-10,-4,-8xm656,-44v1,3,3,6,8,8v-1,-3,-3,-5,-8,-8xm784,-48r8,0v-3,8,-5,8,-8,0xm964,-32v21,24,15,68,8,104v-44,13,-97,-1,-152,0v7,-24,24,-37,32,-60v-32,-3,-65,-5,-96,0r0,-16r24,8v28,-6,53,-25,84,-16v-3,-5,-6,-9,0,-12r4,8v24,-5,45,-9,52,-32v6,8,10,16,12,24xm632,-40v1,3,3,6,8,8v-1,-3,-3,-5,-8,-8xm712,-32v0,-4,2,-10,-4,-8xm608,-36v1,3,3,6,8,8v-1,-3,-3,-5,-8,-8xm624,-28v0,-4,2,-10,-4,-8xm688,-28v0,-4,2,-10,-4,-8xm-64,-24v0,-4,2,-10,-4,-8xm656,-24r8,0v0,-4,2,-10,-4,-8xm632,-28v-5,3,-7,7,-8,12r16,-4v-1,-3,-3,-6,-8,-8xm908,-20v0,-4,2,-10,-4,-8xm604,-12v0,-4,2,-10,-4,-8xm580,-8v0,-4,2,-10,-4,-8xm764,-20r20,4v-9,2,-18,7,-20,-4xm624,-12v1,3,3,6,8,8v-1,-3,-3,-6,-8,-8xm744,-4v3,3,6,9,8,16v-6,-4,-13,-11,-20,-4xm720,0v3,0,6,3,8,8v-3,-1,-6,-3,-8,-8xm-80,16v0,-4,2,-10,-4,-8xm-80,28r4,12v-1,-4,3,-14,-4,-12","w":1239},"x":{"d":"673,-1768v28,8,51,25,69,52r86,714v-4,10,-13,16,-26,17r-34,-26r-43,0r26,43r60,52v21,44,28,97,34,155r-26,17r-43,69r-8,103r43,69r69,52r103,920v-1,21,-10,41,-26,61r-103,-18v-27,15,-56,3,-95,0r-637,-51v-27,-4,-55,-13,-86,-26r-94,-938r9,-26v-5,-19,-8,-42,-9,-68r-52,-964v2,-24,8,-50,18,-78xm587,-1002r-129,215v-10,19,-24,36,-43,52r-60,-60v-13,-21,-30,-42,-52,-61r-43,-69r-69,-43v3,17,5,37,17,52r147,189v15,19,27,42,34,69r-129,215v-4,13,-14,28,0,35v44,-6,56,-51,78,-86r86,-138r111,121v14,20,31,40,52,60r35,17v3,-12,13,-27,0,-34r-95,-129r-60,-61r-9,-26r17,-60r129,-206r18,-52r-35,0xm837,-692v14,39,25,85,34,138v-5,11,-13,17,-26,17r-34,-43v4,-37,13,-75,26,-112","w":805},"y":{"d":"117,-1845r-68,493v11,50,18,114,20,191v-38,136,-107,263,-131,425v-12,82,-20,174,-46,244r-19,228r-46,189r-21,-26r25,-216r13,-30r86,-501r41,-267r93,-499r25,-160xm730,-1631v-6,-3,-10,-11,-13,-25xm118,-1481r126,48r25,-6r124,58r26,-5v31,14,63,26,102,32r23,15r33,161v2,113,23,248,35,360r92,-113r165,-264v47,-11,99,-20,150,-2r290,104v-17,41,-39,81,-68,118r-463,588v-29,41,-55,87,-79,138v-13,92,-52,205,-72,305r-63,-24r-74,-4v-16,-19,-53,-17,-69,-36r-127,-37r-22,-16r-19,-37r60,-285v-11,-156,-49,-311,-78,-457v-10,-50,-17,-107,-32,-172r-74,-324v-9,-45,-12,-93,-11,-145","w":1369},"z":{"d":"558,-1371v20,-8,38,-16,61,-3r267,1181v2,11,11,21,6,32r-762,211v-25,-17,-22,-63,-36,-91v-10,-54,-18,-111,-38,-155r683,-59v3,-2,4,-5,5,-9r2,-170v-29,-6,-22,57,-41,79v-12,13,-31,28,-53,30r-435,40r7,-22r130,-225v28,-38,47,-86,75,-124v32,-72,72,-130,113,-198r119,-196v9,-20,9,-44,5,-70v-10,-3,-20,-7,-31,-6r-598,53v-11,1,-18,8,-17,20r9,144r14,-1v5,-46,13,-90,61,-94r400,-35r-447,768v-4,9,-7,19,-8,29r-7,-11r-79,-345r-108,-443r-29,-136v33,-35,108,-30,154,-52","w":939},"{":{"d":"2112,-1292r40,0r20,16v-1,17,-7,35,-16,52r-36,4r-20,-16r-4,-36xm724,-1288r48,0r4,188r72,-52v36,-7,73,-9,112,-4v89,31,152,107,132,236v-34,83,-112,154,-232,124v-29,-8,-56,-28,-76,-48v-7,13,-15,25,-12,48r-40,0r-8,-56r0,-436xm1932,-1284r52,0r0,120v19,7,42,11,68,12r4,40r-72,4r0,300v-16,6,-33,10,-52,12r0,-312r-44,0v-10,-11,-15,-25,-16,-44r60,0r0,-132xm80,-1160v61,-2,98,21,128,52r-24,32r-36,-28v-14,-3,-30,-6,-48,-8v-23,5,-58,41,-36,68v45,56,138,61,148,152r-12,48r-28,32r-40,20r-56,4v-30,-12,-56,-27,-76,-48r24,-36r36,28v14,3,30,6,48,8v14,-4,27,-11,40,-20v7,-13,13,-28,16,-44r-24,-36v-38,-22,-78,-42,-108,-72r-20,-40v-1,-56,29,-93,68,-112xm416,-1160r72,0v38,9,69,24,96,44v25,38,56,69,56,132v-1,6,-3,11,-8,16r-308,0v1,35,13,59,24,84r40,32r52,16r64,-4v30,-15,56,-36,76,-64r16,-12r28,16v-8,34,-33,59,-56,80r-48,24v-41,8,-82,8,-124,0v-33,-14,-61,-32,-84,-56v-17,-30,-30,-63,-40,-100r4,-68r20,-48v29,-41,66,-75,120,-92xm1472,-1108v14,-13,11,-44,36,-44r28,0r0,348v-14,4,-30,7,-48,8r-4,-52v-7,6,-14,16,-24,24v-46,39,-152,50,-208,12v-58,-40,-116,-124,-80,-220v14,-38,37,-67,64,-92r72,-36v77,-5,129,14,164,52xm1684,-1160r60,4v28,12,52,28,72,48r-32,32r-32,-28v-16,-4,-33,-7,-52,-8v-13,6,-25,14,-36,24v-3,14,-6,34,4,44r32,32r76,44r28,32v5,14,9,30,12,48r-12,48r-28,32r-40,20v-61,0,-108,-15,-136,-48r28,-32v25,14,48,28,84,32v12,-3,25,-9,40,-16v7,-13,12,-27,16,-44v-6,-13,-14,-27,-24,-40v-38,-22,-78,-42,-108,-72r-20,-40v-1,-56,29,-93,68,-112xm2548,-1108v14,-13,11,-44,36,-44r28,0r0,348v-14,4,-30,7,-48,8r-4,-52v-7,6,-14,16,-24,24v-46,39,-152,50,-208,12v-58,-40,-116,-124,-80,-220v14,-38,37,-67,64,-92r72,-36v77,-5,129,14,164,52xm2852,-1160r68,0v29,15,54,34,76,56v33,72,16,200,20,304r-48,4v-8,-108,27,-248,-40,-304v-31,-12,-74,-21,-104,0r-40,28v-40,61,-26,177,-28,276r-52,0v4,-118,-10,-251,8,-356r44,0r0,56v26,-28,57,-49,96,-64xm2112,-1152r48,0r0,356r-48,0r0,-356xm420,-1112v-19,8,-39,20,-60,36r-32,56v73,15,174,5,260,8r-28,-60r-56,-36xm876,-1112v-33,12,-61,33,-84,56v-9,28,-31,62,-20,96v-1,30,14,45,20,68v23,23,49,41,80,56r72,0v31,-15,57,-33,80,-56v13,-27,34,-74,20,-112r-20,-52v-23,-23,-49,-41,-80,-56r-68,0xm1316,-1112r-48,24r-36,36r-20,48r0,52r24,60r36,36r48,20r64,0r48,-24r36,-36r20,-48r0,-56r-24,-56v-18,-23,-51,-41,-80,-56r-68,0xm2392,-1112r-48,24r-36,36r-20,48r0,52r24,60r36,36r48,20r64,0r48,-24r36,-36r20,-48r0,-56r-24,-56v-18,-23,-51,-41,-80,-56r-68,0xm1432,-496v31,1,69,-5,84,12r-4,44v-24,-6,-50,-12,-72,0r-4,88r76,0r0,40v-20,5,-50,4,-76,4r0,308r-48,0r0,-308r-44,0r-4,-44r48,0r0,-92v10,-18,25,-35,44,-52xm1612,-484r52,0r0,132r68,0v2,13,7,32,0,44r-68,0r0,296v-16,6,-33,10,-52,12r0,-308r-44,0v-10,-11,-15,-25,-16,-44r60,0r0,-132xm1752,-352r52,4r108,248r112,-252v8,7,16,17,24,28r92,216r16,-16r96,-216v15,-6,40,-20,52,-4v-57,108,-97,233,-152,344v-9,-7,-18,-15,-24,-28r-96,-216r-20,28r-96,212v-9,-5,-19,-12,-24,-24xm516,-8v10,-22,41,-27,40,-60r-4,-184v-9,-11,-21,-20,-36,-28v-17,1,-36,4,-56,8v-21,17,-48,43,-48,80v0,61,-13,135,20,168r16,0v-17,25,-62,14,-100,16v5,-9,12,-17,20,-24v7,-77,3,-165,4,-248r-36,-4v5,-23,42,-21,64,-28v6,16,10,33,12,52v32,-30,79,-56,140,-36v11,9,22,21,32,36v24,62,1,161,20,232v11,3,20,10,28,20r-116,0xm116,-304v98,-10,143,47,168,120v7,74,-23,119,-60,156r-48,24r-60,0r-56,-32r-32,-40v-11,-34,-28,-78,-12,-116r20,-48r36,-40xm788,-304v76,-7,115,22,144,64v3,28,18,60,8,88r-208,0v1,83,32,135,128,124v26,-12,46,-42,64,-64v18,12,-4,33,-8,48v-17,17,-39,31,-64,40v-89,6,-144,-30,-160,-96v-16,-65,3,-126,36,-160v17,-17,35,-34,60,-44xm124,-284r-36,24v-33,36,-40,117,-24,180v15,23,33,41,56,56r56,0r32,-20v15,-23,26,-52,32,-84r-12,-96r-20,-36v-17,-16,-49,-24,-84,-24xm792,-284r-40,32v-8,26,-17,49,-20,80r160,0v9,-20,-3,-48,-4,-72r-32,-36v-19,-3,-40,-4,-64,-4","w":3185},"|":{"w":532},"}":{"d":"2112,-1292r40,0r20,16v-1,17,-7,35,-16,52r-36,4r-20,-16r-4,-36xm724,-1288r48,0r4,188r72,-52v36,-7,73,-9,112,-4v89,31,152,107,132,236v-34,83,-112,154,-232,124v-29,-8,-56,-28,-76,-48v-7,13,-15,25,-12,48r-40,0r-8,-56r0,-436xm1932,-1284r52,0r0,120v19,7,42,11,68,12r4,40r-72,4r0,300v-16,6,-33,10,-52,12r0,-312r-44,0v-10,-11,-15,-25,-16,-44r60,0r0,-132xm80,-1160v61,-2,98,21,128,52r-24,32r-36,-28v-14,-3,-30,-6,-48,-8v-23,5,-58,41,-36,68v45,56,138,61,148,152r-12,48r-28,32r-40,20r-56,4v-30,-12,-56,-27,-76,-48r24,-36r36,28v14,3,30,6,48,8v14,-4,27,-11,40,-20v7,-13,13,-28,16,-44r-24,-36v-38,-22,-78,-42,-108,-72r-20,-40v-1,-56,29,-93,68,-112xm416,-1160r72,0v38,9,69,24,96,44v25,38,56,69,56,132v-1,6,-3,11,-8,16r-308,0v1,35,13,59,24,84r40,32r52,16r64,-4v30,-15,56,-36,76,-64r16,-12r28,16v-8,34,-33,59,-56,80r-48,24v-41,8,-82,8,-124,0v-33,-14,-61,-32,-84,-56v-17,-30,-30,-63,-40,-100r4,-68r20,-48v29,-41,66,-75,120,-92xm1472,-1108v14,-13,11,-44,36,-44r28,0r0,348v-14,4,-30,7,-48,8r-4,-52v-7,6,-14,16,-24,24v-46,39,-152,50,-208,12v-58,-40,-116,-124,-80,-220v14,-38,37,-67,64,-92r72,-36v77,-5,129,14,164,52xm1684,-1160r60,4v28,12,52,28,72,48r-32,32r-32,-28v-16,-4,-33,-7,-52,-8v-13,6,-25,14,-36,24v-3,14,-6,34,4,44r32,32r76,44r28,32v5,14,9,30,12,48r-12,48r-28,32r-40,20v-61,0,-108,-15,-136,-48r28,-32v25,14,48,28,84,32v12,-3,25,-9,40,-16v7,-13,12,-27,16,-44v-6,-13,-14,-27,-24,-40v-38,-22,-78,-42,-108,-72r-20,-40v-1,-56,29,-93,68,-112xm2548,-1108v14,-13,11,-44,36,-44r28,0r0,348v-14,4,-30,7,-48,8r-4,-52v-7,6,-14,16,-24,24v-46,39,-152,50,-208,12v-58,-40,-116,-124,-80,-220v14,-38,37,-67,64,-92r72,-36v77,-5,129,14,164,52xm2852,-1160r68,0v29,15,54,34,76,56v33,72,16,200,20,304r-48,4v-8,-108,27,-248,-40,-304v-31,-12,-74,-21,-104,0r-40,28v-40,61,-26,177,-28,276r-52,0v4,-118,-10,-251,8,-356r44,0r0,56v26,-28,57,-49,96,-64xm2112,-1152r48,0r0,356r-48,0r0,-356xm420,-1112v-19,8,-39,20,-60,36r-32,56v73,15,174,5,260,8r-28,-60r-56,-36xm876,-1112v-33,12,-61,33,-84,56v-9,28,-31,62,-20,96v-1,30,14,45,20,68v23,23,49,41,80,56r72,0v31,-15,57,-33,80,-56v13,-27,34,-74,20,-112r-20,-52v-23,-23,-49,-41,-80,-56r-68,0xm1316,-1112r-48,24r-36,36r-20,48r0,52r24,60r36,36r48,20r64,0r48,-24r36,-36r20,-48r0,-56r-24,-56v-18,-23,-51,-41,-80,-56r-68,0xm2392,-1112r-48,24r-36,36r-20,48r0,52r24,60r36,36r48,20r64,0r48,-24r36,-36r20,-48r0,-56r-24,-56v-18,-23,-51,-41,-80,-56r-68,0xm1432,-496v31,1,69,-5,84,12r-4,44v-24,-6,-50,-12,-72,0r-4,88r76,0r0,40v-20,5,-50,4,-76,4r0,308r-48,0r0,-308r-44,0r-4,-44r48,0r0,-92v10,-18,25,-35,44,-52xm1612,-484r52,0r0,132r68,0v2,13,7,32,0,44r-68,0r0,296v-16,6,-33,10,-52,12r0,-308r-44,0v-10,-11,-15,-25,-16,-44r60,0r0,-132xm1752,-352r52,4r108,248r112,-252v8,7,16,17,24,28r92,216r16,-16r96,-216v15,-6,40,-20,52,-4v-57,108,-97,233,-152,344v-9,-7,-18,-15,-24,-28r-96,-216r-20,28r-96,212v-9,-5,-19,-12,-24,-24xm516,-8v10,-22,41,-27,40,-60r-4,-184v-9,-11,-21,-20,-36,-28v-17,1,-36,4,-56,8v-21,17,-48,43,-48,80v0,61,-13,135,20,168r16,0v-17,25,-62,14,-100,16v5,-9,12,-17,20,-24v7,-77,3,-165,4,-248r-36,-4v5,-23,42,-21,64,-28v6,16,10,33,12,52v32,-30,79,-56,140,-36v11,9,22,21,32,36v24,62,1,161,20,232v11,3,20,10,28,20r-116,0xm116,-304v98,-10,143,47,168,120v7,74,-23,119,-60,156r-48,24r-60,0r-56,-32r-32,-40v-11,-34,-28,-78,-12,-116r20,-48r36,-40xm788,-304v76,-7,115,22,144,64v3,28,18,60,8,88r-208,0v1,83,32,135,128,124v26,-12,46,-42,64,-64v18,12,-4,33,-8,48v-17,17,-39,31,-64,40v-89,6,-144,-30,-160,-96v-16,-65,3,-126,36,-160v17,-17,35,-34,60,-44xm124,-284r-36,24v-33,36,-40,117,-24,180v15,23,33,41,56,56r56,0r32,-20v15,-23,26,-52,32,-84r-12,-96r-20,-36v-17,-16,-49,-24,-84,-24xm792,-284r-40,32v-8,26,-17,49,-20,80r160,0v9,-20,-3,-48,-4,-72r-32,-36v-19,-3,-40,-4,-64,-4","w":3124},"~":{"d":"2112,-1292r40,0r20,16v-1,17,-7,35,-16,52r-36,4r-20,-16r-4,-36xm724,-1288r48,0r4,188r72,-52v36,-7,73,-9,112,-4v89,31,152,107,132,236v-34,83,-112,154,-232,124v-29,-8,-56,-28,-76,-48v-7,13,-15,25,-12,48r-40,0r-8,-56r0,-436xm1932,-1284r52,0r0,120v19,7,42,11,68,12r4,40r-72,4r0,300v-16,6,-33,10,-52,12r0,-312r-44,0v-10,-11,-15,-25,-16,-44r60,0r0,-132xm80,-1160v61,-2,98,21,128,52r-24,32r-36,-28v-14,-3,-30,-6,-48,-8v-23,5,-58,41,-36,68v45,56,138,61,148,152r-12,48r-28,32r-40,20r-56,4v-30,-12,-56,-27,-76,-48r24,-36r36,28v14,3,30,6,48,8v14,-4,27,-11,40,-20v7,-13,13,-28,16,-44r-24,-36v-38,-22,-78,-42,-108,-72r-20,-40v-1,-56,29,-93,68,-112xm416,-1160r72,0v38,9,69,24,96,44v25,38,56,69,56,132v-1,6,-3,11,-8,16r-308,0v1,35,13,59,24,84r40,32r52,16r64,-4v30,-15,56,-36,76,-64r16,-12r28,16v-8,34,-33,59,-56,80r-48,24v-41,8,-82,8,-124,0v-33,-14,-61,-32,-84,-56v-17,-30,-30,-63,-40,-100r4,-68r20,-48v29,-41,66,-75,120,-92xm1472,-1108v14,-13,11,-44,36,-44r28,0r0,348v-14,4,-30,7,-48,8r-4,-52v-7,6,-14,16,-24,24v-46,39,-152,50,-208,12v-58,-40,-116,-124,-80,-220v14,-38,37,-67,64,-92r72,-36v77,-5,129,14,164,52xm1684,-1160r60,4v28,12,52,28,72,48r-32,32r-32,-28v-16,-4,-33,-7,-52,-8v-13,6,-25,14,-36,24v-3,14,-6,34,4,44r32,32r76,44r28,32v5,14,9,30,12,48r-12,48r-28,32r-40,20v-61,0,-108,-15,-136,-48r28,-32v25,14,48,28,84,32v12,-3,25,-9,40,-16v7,-13,12,-27,16,-44v-6,-13,-14,-27,-24,-40v-38,-22,-78,-42,-108,-72r-20,-40v-1,-56,29,-93,68,-112xm2548,-1108v14,-13,11,-44,36,-44r28,0r0,348v-14,4,-30,7,-48,8r-4,-52v-7,6,-14,16,-24,24v-46,39,-152,50,-208,12v-58,-40,-116,-124,-80,-220v14,-38,37,-67,64,-92r72,-36v77,-5,129,14,164,52xm2852,-1160r68,0v29,15,54,34,76,56v33,72,16,200,20,304r-48,4v-8,-108,27,-248,-40,-304v-31,-12,-74,-21,-104,0r-40,28v-40,61,-26,177,-28,276r-52,0v4,-118,-10,-251,8,-356r44,0r0,56v26,-28,57,-49,96,-64xm2112,-1152r48,0r0,356r-48,0r0,-356xm420,-1112v-19,8,-39,20,-60,36r-32,56v73,15,174,5,260,8r-28,-60r-56,-36xm876,-1112v-33,12,-61,33,-84,56v-9,28,-31,62,-20,96v-1,30,14,45,20,68v23,23,49,41,80,56r72,0v31,-15,57,-33,80,-56v13,-27,34,-74,20,-112r-20,-52v-23,-23,-49,-41,-80,-56r-68,0xm1316,-1112r-48,24r-36,36r-20,48r0,52r24,60r36,36r48,20r64,0r48,-24r36,-36r20,-48r0,-56r-24,-56v-18,-23,-51,-41,-80,-56r-68,0xm2392,-1112r-48,24r-36,36r-20,48r0,52r24,60r36,36r48,20r64,0r48,-24r36,-36r20,-48r0,-56r-24,-56v-18,-23,-51,-41,-80,-56r-68,0xm1432,-496v31,1,69,-5,84,12r-4,44v-24,-6,-50,-12,-72,0r-4,88r76,0r0,40v-20,5,-50,4,-76,4r0,308r-48,0r0,-308r-44,0r-4,-44r48,0r0,-92v10,-18,25,-35,44,-52xm1612,-484r52,0r0,132r68,0v2,13,7,32,0,44r-68,0r0,296v-16,6,-33,10,-52,12r0,-308r-44,0v-10,-11,-15,-25,-16,-44r60,0r0,-132xm1752,-352r52,4r108,248r112,-252v8,7,16,17,24,28r92,216r16,-16r96,-216v15,-6,40,-20,52,-4v-57,108,-97,233,-152,344v-9,-7,-18,-15,-24,-28r-96,-216r-20,28r-96,212v-9,-5,-19,-12,-24,-24xm516,-8v10,-22,41,-27,40,-60r-4,-184v-9,-11,-21,-20,-36,-28v-17,1,-36,4,-56,8v-21,17,-48,43,-48,80v0,61,-13,135,20,168r16,0v-17,25,-62,14,-100,16v5,-9,12,-17,20,-24v7,-77,3,-165,4,-248r-36,-4v5,-23,42,-21,64,-28v6,16,10,33,12,52v32,-30,79,-56,140,-36v11,9,22,21,32,36v24,62,1,161,20,232v11,3,20,10,28,20r-116,0xm116,-304v98,-10,143,47,168,120v7,74,-23,119,-60,156r-48,24r-60,0r-56,-32r-32,-40v-11,-34,-28,-78,-12,-116r20,-48r36,-40xm788,-304v76,-7,115,22,144,64v3,28,18,60,8,88r-208,0v1,83,32,135,128,124v26,-12,46,-42,64,-64v18,12,-4,33,-8,48v-17,17,-39,31,-64,40v-89,6,-144,-30,-160,-96v-16,-65,3,-126,36,-160v17,-17,35,-34,60,-44xm124,-284r-36,24v-33,36,-40,117,-24,180v15,23,33,41,56,56r56,0r32,-20v15,-23,26,-52,32,-84r-12,-96r-20,-36v-17,-16,-49,-24,-84,-24xm792,-284r-40,32v-8,26,-17,49,-20,80r160,0v9,-20,-3,-48,-4,-72r-32,-36v-19,-3,-40,-4,-64,-4","w":3124},"\u00c4":{"w":1366},"\u00c5":{"w":1366},"\u00c7":{"w":1479},"\u00c9":{"w":1366},"\u00d1":{"w":1479},"\u00d6":{"w":1593},"\u00dc":{"w":1479},"\u00e1":{},"\u00e0":{},"\u00e2":{},"\u00e4":{},"\u00e3":{},"\u00e5":{},"\u00e7":{"w":1024},"\u00e9":{},"\u00e8":{},"\u00ea":{},"\u00eb":{},"\u00ed":{"w":569},"\u00ec":{"w":569},"\u00ee":{"w":569},"\u00ef":{"w":569},"\u00f1":{},"\u00f3":{},"\u00f2":{},"\u00f4":{},"\u00f6":{},"\u00f5":{},"\u00fa":{},"\u00f9":{},"\u00fb":{},"\u00fc":{},"\u2020":{},"\u00b0":{"w":819},"\u00a2":{},"\u00a3":{},"\u00a7":{},"\u2022":{"w":717},"\u00b6":{"w":1100},"\u00df":{"w":1251},"\u00ae":{"w":1509},"\u00a9":{"w":1509},"\u2122":{"w":2048},"\u00b4":{"w":682},"\u00a8":{"w":682},"\u2260":{"w":1124},"\u00c6":{"w":2048},"\u00d8":{"w":1593},"\u221e":{"w":1460},"\u00b1":{"w":1124},"\u2264":{"w":1124},"\u2265":{"w":1124},"\u00a5":{},"\u00b5":{"w":1180},"\u2202":{"w":1012},"\u2211":{"w":1460},"\u220f":{"w":1686},"\u222b":{"w":561},"\u00aa":{"w":758},"\u00ba":{"w":748},"\u2126":{"w":1573},"\u00e6":{"w":1821},"\u00f8":{"w":1251},"\u00bf":{"w":1251},"\u00a1":{"w":682},"\u00ac":{"w":1196},"\u221a":{"w":1124},"\u0192":{},"\u2248":{"w":1124},"\u2206":{"w":1253},"\u00ab":{},"\u00bb":{},"\u2026":{"d":"33,-478v13,15,-2,32,-7,49xm303,-395v37,4,72,20,104,49v-3,39,-21,72,-55,97v-36,-2,-68,-16,-97,-42v4,-38,20,-73,48,-104xm824,-353v39,1,72,20,97,55v2,20,12,42,0,56r-49,35v-33,-1,-63,-17,-90,-49v3,-35,17,-68,42,-97xm1344,-311v41,1,75,19,104,55v-3,34,-19,64,-48,90v-36,-1,-68,-17,-97,-48v9,-33,23,-66,41,-97xm-15,-277v12,14,-1,28,-7,42xm-36,-200r-84,381v13,-137,57,-256,84,-381xm-36,63v9,9,13,23,14,42r-28,-7xm74,70v9,9,13,23,14,42r-28,-14xm178,84v15,6,25,17,28,34v-13,-6,-22,-17,-28,-34xm296,91v15,5,26,14,35,27r-28,14v-6,-14,-19,-27,-7,-41xm414,98v13,9,20,23,21,41v-11,-9,-18,-23,-21,-41xm539,105r21,34v-14,1,-35,13,-42,0xm650,118v11,4,21,13,28,28v-14,1,-35,13,-42,0xm761,125v13,7,22,18,28,35v-14,-6,-23,-18,-28,-35xm872,139v14,6,23,18,28,35v-13,-6,-22,-18,-28,-35xm983,146r42,14v-11,10,-25,17,-42,21r0,-35xm1108,153v11,7,21,19,28,35r-28,7v-1,-14,-13,-35,0,-42xm1219,167v15,6,27,18,35,35v-16,-5,-28,-17,-35,-35xm1344,174r28,7r-14,35r-28,-14xm1462,181r28,7r-14,35r-28,-14xm1566,195v11,-15,28,4,42,14r-35,21","w":1786},"\u00c0":{"w":1366},"\u00c3":{"w":1366},"\u00d5":{"w":1593},"\u0152":{"w":2048},"\u0153":{"w":1933},"\u2013":{},"\u2014":{"w":2048},"\u201c":{"d":"60,-1819v83,8,180,2,248,24v64,-7,135,0,192,12v19,19,23,66,16,100v1,14,16,33,0,40v-12,53,-28,105,-28,168v0,81,-18,170,16,228v12,20,14,44,8,72v12,43,-12,109,0,152v-6,26,2,45,-4,72v4,8,4,16,0,24v7,25,0,44,-8,64v7,41,0,80,-4,120r-36,8v-102,-23,-218,-32,-308,-68r-4,8v-27,-6,-53,-8,-76,-20r0,-168v-5,-32,0,-64,0,-96v0,-71,1,-145,0,-212r-4,-268v1,-8,8,-20,0,-24xm192,-1475v25,12,52,1,88,4v6,-37,-2,-68,4,-104r-24,0v-5,-12,-7,-25,-8,-40r24,-20v6,-15,10,-33,12,-52r-20,-4v-19,9,-37,23,-56,40v-13,33,-21,73,-24,116v7,14,3,40,4,60xm420,-1687v-40,-2,-50,21,-72,44v-13,48,-24,97,-16,156v17,13,39,19,64,20v14,-15,22,-35,24,-60v-4,-21,-16,-40,-36,-56v7,-21,19,-41,36,-60v1,-15,7,-32,0,-44","w":682},"\u201d":{"d":"651,-1899v16,42,23,101,16,152v14,52,0,102,16,160v-4,15,-3,25,0,40r4,0v-9,50,16,102,4,152v3,13,8,24,8,40r4,0v-13,7,-2,21,-4,36r4,0v-3,10,-5,19,0,28r24,236v-9,36,7,67,12,100v-8,9,2,21,4,32v-31,19,-84,17,-124,28r-8,-4r-124,20v-13,2,-28,3,-44,4v-9,-7,-15,-17,-20,-28r-128,-932xm579,-1691v-7,-12,-6,-27,-16,-40r8,-32r-12,-60v-26,8,-66,2,-72,28v-6,27,-2,52,4,76v15,7,29,15,48,8v-14,11,-14,37,-16,60v-17,19,-12,36,4,52v19,-17,35,-37,48,-60v-2,-13,-7,-27,4,-32xm399,-1663v-10,15,-18,32,-32,44r16,40v13,-5,25,-12,36,-20v12,-21,14,-47,28,-64v-2,-9,-6,-19,-12,-28v8,-38,-3,-72,-8,-108v-25,-6,-45,-1,-64,8v-28,5,-10,46,-8,68v1,11,5,22,12,32v7,-1,16,-7,20,0xm507,-1783v-3,-1,-6,-3,-8,-8xm415,-1767v3,1,6,3,8,8xm411,-1727v-3,-1,-6,-3,-8,-8xm551,-1719r12,16v-7,-4,-11,-9,-12,-16xm555,-1655r8,0v-3,8,-5,8,-8,0xm379,-1607v3,1,6,3,8,8v-3,-1,-6,-3,-8,-8xm371,-1583v1,3,3,6,8,8v-1,-3,-3,-6,-8,-8","w":682},"\u2018":{"d":"108,-2107v58,1,46,84,52,136r44,416v-1,22,3,49,-4,64r12,8v23,99,37,213,56,316v-58,21,-114,39,-184,52r-124,-380r-160,-524r4,-12r4,12v82,-50,203,-51,300,-88xm140,-1795v-13,6,-25,15,-36,28v-9,44,-14,93,-28,132r0,12r60,-16r12,-144xm-4,-1415v1,3,4,6,8,8v-1,-3,-3,-5,-8,-8xm24,-1335v0,-4,2,-10,-4,-8xm60,-1231r-4,12r8,0","w":449},"\u2019":{"d":"77,-2049v60,-12,69,75,86,118r150,390v4,21,15,39,12,63r14,5v48,90,90,196,136,290v-52,35,-102,69,-164,98r-218,-335r-290,-465r1,-12r7,10v71,-72,182,-101,266,-162xm189,-1756v-11,9,-21,21,-28,36v2,45,12,90,7,135r3,12r54,-31r-25,-143xm148,-1352v2,3,5,5,10,6v-2,-3,-5,-5,-10,-6xm196,-1282v-1,-4,-1,-10,-6,-7xm257,-1191r0,13v11,-1,3,-8,0,-13","w":315},"\u00f7":{"w":1124},"\u25ca":{"w":1012},"\u00ff":{"w":1024},"\u0178":{"w":1366},"\u2044":{"w":342},"\u2215":{"w":342},"\u20ac":{},"\u2039":{"w":682},"\u203a":{"w":682},"\uf001":{"w":1024},"\ufb01":{"w":1024},"\uf002":{"w":1024},"\ufb02":{"w":1024},"\u2021":{},"\u00b7":{"w":569},"\u2219":{"w":569},"\u201a":{"w":455},"\u201e":{"w":682},"\u2030":{"w":2048},"\u00c2":{"w":1366},"\u00ca":{"w":1366},"\u00c1":{"w":1366},"\u00cb":{"w":1366},"\u00c8":{"w":1366},"\u00cd":{"w":569},"\u00ce":{"w":569},"\u00cf":{"w":569},"\u00cc":{"w":569},"\u00d3":{"w":1593},"\u00d4":{"w":1593},"\u00d2":{"w":1593},"\u00da":{"w":1479},"\u00db":{"w":1479},"\u00d9":{"w":1479},"\u0131":{"w":569},"\u02c6":{"w":682},"\u02dc":{"w":682},"\u02c9":{"w":682},"\u02d8":{"w":682},"\u02d9":{"w":682},"\u02da":{"w":682},"\u00b8":{"w":682},"\u02dd":{"w":682},"\u02db":{"w":682},"\u02c7":{"w":682},"\u0141":{},"\u0142":{"w":455},"\u0160":{"w":1366},"\u0161":{"w":1024},"\u017d":{"w":1251},"\u017e":{"w":1024},"\u00a6":{"w":532},"\u00d0":{"w":1479},"\u00f0":{},"\u00dd":{"w":1366},"\u00fd":{"w":1024},"\u00de":{"w":1366},"\u00fe":{},"\u2212":{"w":1196},"\u00d7":{"w":1196},"\u00b9":{"w":682},"\u00b2":{"w":682},"\u00b3":{"w":682},"\u00bd":{"w":1708},"\u00bc":{"w":1708},"\u00be":{"w":1708},"\u20a3":{},"\u011e":{"w":1593},"\u011f":{},"\u0130":{"w":569},"\u015e":{"w":1366},"\u015f":{"w":1024},"\u0106":{"w":1479},"\u0107":{"w":1024},"\u010c":{"w":1479},"\u010d":{"w":1024},"\u0111":{},"\u00af":{"w":1131},"\u0102":{"w":1366},"\u0103":{},"\u0104":{"w":1366},"\u0105":{},"\u010e":{"w":1479},"\u010f":{"w":1259},"\u0110":{"w":1479},"\u0118":{"w":1366},"\u0119":{},"\u011a":{"w":1366},"\u011b":{},"\u0139":{},"\u013a":{"w":455},"\u013d":{},"\u013e":{"w":597},"\u013f":{},"\u0140":{"w":684},"\u0143":{"w":1479},"\u0144":{},"\u0147":{"w":1479},"\u0148":{},"\u0150":{"w":1593},"\u0151":{},"\u0154":{"w":1479},"\u0155":{"w":682},"\u0158":{"w":1479},"\u0159":{"w":682},"\u015a":{"w":1366},"\u015b":{"w":1024},"\u0162":{"w":1251},"\u0163":{"w":569},"\u0164":{"w":1251},"\u0165":{"w":768},"\u016e":{"w":1479},"\u016f":{},"\u0170":{"w":1479},"\u0171":{},"\u0179":{"w":1251},"\u017a":{"w":1024},"\u017b":{"w":1251},"\u017c":{"w":1024},"\u0393":{"w":1128},"\u0398":{"w":1593},"\u03a6":{"w":1634},"\u03b1":{"w":1184},"\u03b4":{"w":1140},"\u03b5":{"w":913},"\u03c3":{"w":1264},"\u03c4":{"w":809},"\u03c6":{"w":1328},"\u2017":{"w":1131},"\u203c":{"w":1024},"\u207f":{"w":747},"\u20a7":{"w":2240},"\u2190":{"w":2048},"\u2191":{"w":1024},"\u2192":{"w":2048},"\u2193":{"w":1024},"\u2194":{"w":2048},"\u2195":{"w":1024},"\u21a8":{"w":1024},"\u221f":{"w":2005},"\u2229":{"w":1472},"\u2261":{"w":1195},"\u2302":{"w":1237},"\u2310":{"w":1196},"\u2320":{"w":1237},"\u2321":{"w":1237},"\u2500":{"w":1451},"\u2502":{"w":1280},"\u250c":{"w":1451},"\u2510":{"w":1451},"\u2514":{"w":1451},"\u2518":{"w":1451},"\u251c":{"w":1451},"\u2524":{"w":1451},"\u252c":{"w":1451},"\u2534":{"w":1451},"\u253c":{"w":1451},"\u2550":{"w":1451},"\u2551":{"w":1451},"\u2552":{"w":1451},"\u2553":{"w":1451},"\u2554":{"w":1451},"\u2555":{"w":1451},"\u2556":{"w":1451},"\u2557":{"w":1451},"\u2558":{"w":1451},"\u2559":{"w":1451},"\u255a":{"w":1451},"\u255b":{"w":1451},"\u255c":{"w":1451},"\u255d":{"w":1451},"\u255e":{"w":1451},"\u255f":{"w":1451},"\u2560":{"w":1451},"\u2561":{"w":1451},"\u2562":{"w":1451},"\u2563":{"w":1451},"\u2564":{"w":1451},"\u2565":{"w":1451},"\u2566":{"w":1451},"\u2567":{"w":1451},"\u2568":{"w":1451},"\u2569":{"w":1451},"\u256a":{"w":1451},"\u256b":{"w":1451},"\u256c":{"w":1451},"\u2580":{"w":1451},"\u2584":{"w":1451},"\u2588":{"w":1451},"\u258c":{"w":1451},"\u2590":{"w":1451},"\u2591":{"w":1451},"\u2592":{"w":1451},"\u2593":{"w":1493},"\u25a0":{"w":1237},"\u25ac":{"w":2048},"\u25b2":{"w":2027},"\u25ba":{"w":2027},"\u25bc":{"w":2027},"\u25c4":{"w":2027},"\u25cb":{"w":1237},"\u25d8":{"w":1237},"\u25d9":{"w":1237},"\u263a":{"w":2091},"\u263b":{"w":2155},"\u263c":{"w":1877},"\u2640":{"w":1536},"\u2642":{"w":1536},"\u2660":{"w":1088},"\u2663":{"w":1344},"\u2665":{"w":1216},"\u2666":{"w":1045},"\u266a":{"w":1024},"\u266b":{"w":1536},"\u0132":{"w":1505},"\u0133":{"w":909},"\u0149":{"w":1237},"\u2032":{"w":384},"\u2033":{"w":725},"\u2105":{"w":1813},"\u2113":{"w":662},"\u25a1":{"w":1237},"\u25aa":{"w":726},"\u25ab":{"w":726},"\u25cf":{"w":1237},"\u25e6":{"w":726},"\u0100":{"w":1366},"\u0101":{},"\u0108":{"w":1479},"\u0109":{"w":1024},"\u010a":{"w":1479},"\u010b":{"w":1024},"\u0112":{"w":1366},"\u0113":{},"\u0114":{"w":1366},"\u0115":{},"\u0116":{"w":1366},"\u0117":{},"\u011c":{"w":1593},"\u011d":{},"\u0120":{"w":1593},"\u0121":{},"\u0122":{"w":1593},"\u0123":{},"\u0124":{"w":1479},"\u0125":{},"\u0126":{"w":1479},"\u0127":{},"\u0128":{"w":569},"\u0129":{"w":569},"\u012a":{"w":569},"\u012b":{"w":569},"\u012c":{"w":569},"\u012d":{"w":569},"\u012e":{"w":569},"\u012f":{"w":455},"\u0134":{"w":1024},"\u0135":{"w":455},"\u0136":{"w":1366},"\u0137":{"w":1024},"\u0138":{"w":1024},"\u013b":{},"\u013c":{"w":455},"\u0145":{"w":1479},"\u0146":{},"\u014a":{"w":1481},"\u014b":{},"\u014c":{"w":1593},"\u014d":{},"\u014e":{"w":1593},"\u014f":{},"\u0156":{"w":1479},"\u0157":{"w":682},"\u015c":{"w":1366},"\u015d":{"w":1024},"\u0166":{"w":1251},"\u0167":{"w":569},"\u0168":{"w":1479},"\u0169":{},"\u016a":{"w":1479},"\u016b":{},"\u016c":{"w":1479},"\u016d":{},"\u0172":{"w":1479},"\u0173":{},"\u0174":{"w":1933},"\u0175":{"w":1479},"\u0176":{"w":1366},"\u0177":{"w":1024},"\u017f":{"w":455},"\u01fa":{"w":1366},"\u01fb":{},"\u01fc":{"w":2048},"\u01fd":{"w":1821},"\u01fe":{"w":1593},"\u01ff":{"w":1251},"\u0387":{"w":569},"\u1e80":{"w":1933},"\u1e81":{"w":1479},"\u1e82":{"w":1933},"\u1e83":{"w":1479},"\u1e84":{"w":1933},"\u1e85":{"w":1479},"\u1ef2":{"w":1366},"\u1ef3":{"w":1024},"\u201b":{"w":455},"\u203e":{"w":682},"\u20a4":{},"\u212e":{"w":1229},"\u215b":{"w":1708},"\u215c":{"w":1708},"\u215d":{"w":1708},"\u215e":{"w":1708},"\uf004":{"w":682},"\uf005":{"w":682},"\u0384":{"w":682},"\u0385":{"w":682},"\u0386":{"w":1367},"\u0388":{"w":1606},"\u0389":{"w":1716},"\u038a":{"w":786},"\u038c":{"w":1586},"\u038e":{"w":1752},"\u038f":{"w":1541},"\u0390":{"w":455},"\u0391":{"w":1366},"\u0392":{"w":1366},"\u0394":{"w":1368},"\u0395":{"w":1366},"\u0396":{"w":1251},"\u0397":{"w":1479},"\u0399":{"w":569},"\u039a":{"w":1366},"\u039b":{"w":1368},"\u039c":{"w":1706},"\u039d":{"w":1479},"\u039e":{"w":1331},"\u039f":{"w":1593},"\u03a0":{"w":1479},"\u03a1":{"w":1366},"\u03a3":{"w":1266},"\u03a4":{"w":1251},"\u03a5":{"w":1366},"\u03a7":{"w":1366},"\u03a8":{"w":1711},"\u03a9":{"w":1531},"\u03aa":{"w":569},"\u03ab":{"w":1366},"\u03ac":{"w":1184},"\u03ad":{"w":913},"\u03ae":{},"\u03af":{"w":455},"\u03b0":{"w":1120},"\u03b2":{"w":1178},"\u03b3":{"w":1024},"\u03b6":{"w":903},"\u03b7":{},"\u03b8":{},"\u03b9":{"w":455},"\u03ba":{"w":1024},"\u03bb":{"w":1024},"\u03bc":{"w":1180},"\u03bd":{"w":1024},"\u03be":{"w":917},"\u03bf":{},"\u03c1":{"w":1165},"\u03c2":{"w":987},"\u03c5":{"w":1120},"\u03c7":{"w":1075},"\u03c8":{"w":1460},"\u03c9":{"w":1599},"\u03ca":{"w":455},"\u03cb":{"w":1120},"\u03cc":{},"\u03cd":{"w":1120},"\u03ce":{"w":1599},"\u0401":{"w":1367},"\u0402":{"w":1771},"\u0403":{"w":1109},"\u0404":{"w":1472},"\u0405":{"w":1366},"\u0406":{"w":569},"\u0407":{"w":569},"\u0408":{"w":1024},"\u0409":{"w":2165},"\u040a":{"w":2069},"\u040b":{"w":1749},"\u040c":{"w":1193},"\u040e":{"w":1301},"\u040f":{"w":1472},"\u0410":{"w":1366},"\u0411":{"w":1344},"\u0412":{"w":1366},"\u0413":{"w":1109},"\u0414":{"w":1387},"\u0415":{"w":1366},"\u0416":{"w":1891},"\u0417":{"w":1237},"\u0418":{"w":1472},"\u0419":{"w":1472},"\u041a":{"w":1193},"\u041b":{"w":1344},"\u041c":{"w":1706},"\u041d":{"w":1479},"\u041e":{"w":1593},"\u041f":{"w":1472},"\u0420":{"w":1366},"\u0421":{"w":1479},"\u0422":{"w":1251},"\u0423":{"w":1301},"\u0424":{"w":1557},"\u0425":{"w":1366},"\u0426":{"w":1515},"\u0427":{"w":1365},"\u0428":{"w":1877},"\u0429":{"w":1920},"\u042a":{"w":1621},"\u042b":{"w":1813},"\u042c":{"w":1344},"\u042d":{"w":1472},"\u042e":{"w":2069},"\u042f":{"w":1479},"\u0430":{},"\u0431":{"w":1173},"\u0432":{"w":1088},"\u0433":{"w":747},"\u0434":{"w":1195},"\u0435":{},"\u0436":{"w":1370},"\u0437":{"w":939},"\u0438":{"w":1144},"\u0439":{"w":1144},"\u043a":{"w":896},"\u043b":{"w":1195},"\u043c":{"w":1408},"\u043d":{"w":1131},"\u043e":{},"\u043f":{"w":1109},"\u0440":{},"\u0441":{"w":1024},"\u0442":{"w":938},"\u0443":{"w":1024},"\u0444":{"w":1685},"\u0445":{"w":1024},"\u0446":{"w":1173},"\u0447":{"w":1067},"\u0448":{"w":1643},"\u0449":{"w":1685},"\u044a":{"w":1280},"\u044b":{"w":1472},"\u044c":{"w":1067},"\u044d":{"w":1045},"\u044e":{"w":1536},"\u044f":{"w":1109},"\u0451":{},"\u0452":{},"\u0453":{"w":747},"\u0454":{"w":1045},"\u0455":{"w":1024},"\u0456":{"w":455},"\u0457":{"w":569},"\u0458":{"w":455},"\u0459":{"w":1856},"\u045a":{"w":1664},"\u045b":{},"\u045c":{"w":896},"\u045e":{"w":1024},"\u045f":{"w":1131},"\u0490":{"w":1001},"\u0491":{"w":842},"\u2015":{"w":2048},"\u2116":{"w":2197},"\u03c0":{"w":1413}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Hand Of Sean ? Sean Johnson 2009. Free for personal use.
 * 
 * Description:
 * This font was created using Font Creator 5.0 from High-Logic.com
 */
Cufon.registerFont({"w":1805,"face":{"font-family":"Hand Of Sean","font-weight":400,"font-stretch":"normal","units-per-em":"2048","panose-1":"0 0 0 0 0 0 0 0 0 0","ascent":"1638","descent":"-410","x-height":"29","cap-height":"150","bbox":"-460 -2652.62 2942 1010.77","underline-thickness":"150","underline-position":"-142","unicode-range":"U+0020-U+2122"},"glyphs":{" ":{"w":625},"\u00a0":{"w":625},"!":{"d":"357,-1993r78,68v3,388,-17,501,-54,1228v-11,221,-20,332,-44,332v-41,38,-69,61,-129,57v-81,-6,-94,-115,-94,-230v0,-63,21,-264,54,-606v19,-194,25,-348,23,-460r-6,-301v60,-64,97,-71,172,-88xm232,-60v62,-2,112,40,112,104v0,64,-47,106,-142,126r-51,0v-40,-31,-51,-61,-51,-116v0,-62,23,-97,68,-104","w":569},"\"":{"d":"0,-1810v-12,-121,46,-175,174,-174v103,126,53,477,52,701v-44,79,-70,111,-144,106v-55,-15,-82,-61,-82,-137v21,-100,31,-162,31,-185v0,-42,-13,-137,-31,-311xm448,-1953v33,-30,133,-25,147,3v7,107,10,203,10,287r0,34v-4,237,-14,356,-31,356v-48,34,-79,51,-92,51v-55,0,-89,-146,-103,-437r0,-34v0,-148,23,-235,69,-260","w":615},"#":{"d":"420,-1734v95,-60,144,-26,216,72r-4,224r264,12r20,-308v87,-61,156,-23,212,76r-4,248r260,12v26,35,28,50,28,96v0,37,-35,77,-104,120r-196,-4r-12,268v195,9,292,17,292,24v41,84,19,140,-76,204r-212,0r8,192v-10,97,-20,128,-88,128v-47,0,-92,-40,-136,-120v-13,-63,-20,-133,-20,-212r-260,-12r12,200v-13,108,-18,144,-88,144v-50,0,-97,-41,-140,-124v-12,-65,-17,-138,-16,-216v-2,-2,-5,-3,-4,-8v-71,10,-153,12,-232,12v-96,0,-121,-21,-120,-84v0,-49,40,-95,120,-140v71,-13,151,-20,240,-20r8,-260r-228,12v-101,-9,-140,-21,-140,-84v0,-43,34,-86,100,-132v31,-22,171,-30,284,-28xm620,-1210r-12,264v80,12,178,6,264,12r12,-260v-2,-2,-3,-5,-8,-4","w":1395},"$":{"d":"824,-1820v30,-24,42,-20,84,-20v35,0,69,25,100,76r-32,408r-4,4v138,31,208,40,240,112v-69,91,-111,136,-128,136v-22,7,-45,-1,-68,-4v-19,6,-30,23,-28,52r16,208v107,40,283,91,524,160v139,39,258,111,360,208v-32,131,-91,229,-176,288v-120,83,-210,116,-260,116v-64,21,-189,40,-376,56v-13,74,12,133,44,288v-75,137,-187,145,-304,48v-19,-69,-39,-183,-60,-344v-240,21,-459,-22,-588,-160v-92,-99,-59,-191,20,-308v53,-1,57,10,84,-40v0,5,20,12,60,20r0,32v0,103,84,170,252,208v41,9,89,16,144,16v13,-143,-8,-287,-32,-432v-35,0,-168,-28,-388,-112v-204,-77,-305,-146,-308,-180v-5,-51,9,-89,8,-140v152,-132,397,-185,676,-196r56,-360v23,-67,51,-113,84,-140xm464,-1036v-3,-1,-5,1,-4,4v21,0,84,20,188,60r40,4r-12,-112v-141,13,-212,27,-212,44xm1032,-572v-9,105,12,211,16,316v186,1,350,-43,496,-132r0,-4v-65,-20,-191,-68,-380,-144","w":1865},"%":{"d":"436,-1742v32,-54,70,-76,132,-76v71,0,161,45,272,136v11,29,24,74,24,136v0,157,-71,287,-212,388v-81,-13,-141,-13,-228,-12v-56,0,-88,-13,-100,-36v-47,-92,-72,-193,-72,-304v0,-147,34,-220,76,-220v54,-20,66,-26,108,-12xm1952,-1750v15,0,27,57,36,172v5,0,8,9,8,28v-604,605,-1004,999,-1208,1172r-576,488v-97,47,-168,8,-212,-80r0,-32v0,-42,88,-109,252,-220v216,-147,827,-766,1104,-1048v176,-179,287,-308,360,-360v77,-54,155,-94,236,-120xm464,-1470v9,9,21,31,36,68v106,-22,130,-39,128,-124v0,-29,-12,-44,-36,-44v-36,0,-79,33,-128,100xm1156,-430v123,-111,194,-146,360,-136v125,133,188,224,188,272v0,135,-24,213,-100,324v-51,40,-114,60,-188,60v-139,0,-238,-56,-288,-172v-11,-26,-12,-53,-12,-76v0,-93,39,-169,40,-272xm1332,-286v-4,53,30,87,96,96v46,-13,21,-166,0,-156v-56,-4,-92,7,-96,60","w":2025},"&":{"d":"496,-180v-243,0,-373,-73,-496,-204v0,-165,108,-289,324,-372r0,-4v-47,-6,-133,-65,-256,-176v-4,-197,99,-311,312,-380r152,-36v25,-269,74,-404,148,-404v86,0,112,51,112,140v0,80,-16,157,-32,232v44,15,144,41,300,80v76,42,88,42,88,116v0,66,-64,92,-152,92v-35,0,-111,-12,-228,-36v-39,57,-19,115,-20,192v49,0,102,28,160,84v-3,44,-14,91,0,128v-27,0,-56,21,-92,60v-13,14,-32,13,-56,12v-20,71,-14,164,0,236v99,1,200,-36,376,-88v59,-17,92,-23,92,-44v7,0,14,-20,16,-60v1,-19,-4,-41,20,-36v27,4,53,21,80,12v30,35,40,71,40,124v0,145,-160,251,-480,320r-120,12v0,37,17,125,40,304v8,65,-18,112,-76,112v-10,0,-22,8,-36,24r-16,0r-44,-40v-3,19,-7,28,-12,28v-44,-55,-72,-134,-84,-236v-16,-128,-36,-192,-60,-192xm356,-1036v57,32,108,48,152,48v-3,-34,11,-102,-16,-108v-55,0,-100,20,-136,60xm504,-564v-105,21,-165,46,-196,84r0,4v72,10,132,31,212,32v1,-35,0,-123,-16,-120","w":1366},"'":{"d":"0,-1870v40,-72,92,-102,178,-102v55,0,83,20,83,61r4,242v0,222,-45,367,-140,424v-32,19,-64,23,-91,23v-13,-3,-15,-251,-15,-349v0,-124,-9,-224,-19,-299","w":305},"(":{"d":"672,-1696v58,0,75,6,76,76v0,110,-88,214,-252,328v-108,76,-156,160,-156,236v-68,195,-96,271,-96,372v0,245,159,491,476,740v3,105,-35,171,-116,200r-44,4v-97,0,-209,-127,-364,-364v-129,-197,-196,-357,-196,-580v0,-220,72,-461,236,-708v138,-207,290,-304,436,-304","w":765},")":{"d":"0,-1436v-7,-114,44,-200,160,-200v101,0,234,152,428,436v229,336,197,786,-20,1148v-155,259,-322,375,-516,372v-19,-10,-28,-37,-28,-80v0,-113,28,-168,52,-168v108,-65,219,-178,332,-340v0,-32,27,-132,80,-300v4,-40,12,-75,12,-120v0,-248,-163,-492,-488,-732","w":765},"*":{"d":"424,-1982v24,29,51,80,72,156v33,119,44,189,44,208r252,-36v12,-1,32,22,32,56v0,64,-11,96,-32,96v-31,21,-88,42,-172,64v18,41,78,95,180,164r60,60v-23,69,-42,104,-56,104v-114,4,-182,-38,-276,-132r-72,-60v-27,12,-87,57,-188,124v-41,27,-90,36,-140,36v-24,-25,-36,-51,-36,-80v0,-43,40,-96,120,-160v-28,-13,-87,-33,-176,-60v-24,-20,-36,-33,-36,-40v-3,-66,49,-122,120,-136v50,24,99,36,148,36v58,0,37,-49,48,-88v4,-129,-58,-321,108,-312","w":875},"+":{"d":"616,-1164v150,-25,92,205,92,328r0,132v135,-13,265,-20,392,-20v56,55,84,109,84,164v0,56,-20,82,-40,84r-420,36v11,121,16,223,16,304r0,68v-47,59,-101,88,-160,88v-59,0,-87,-19,-88,-36r-32,-412v-53,8,-120,4,-180,4v-133,0,-207,-24,-232,-68v-35,-61,-48,-77,-48,-132v0,-53,40,-80,120,-80v120,0,213,16,280,16r44,0r-4,-164v4,-163,21,-244,52,-244v39,-40,80,-61,124,-68","w":1196},",":{"d":"207,-368v56,-57,198,-69,258,-7r0,54v0,217,-96,413,-288,590v-20,48,-76,51,-145,51v-21,0,-22,-10,-22,-30v0,-72,59,-183,149,-349v59,-108,64,-189,48,-309","w":605},"-":{"d":"98,-704v45,-18,123,-20,196,-20v127,0,371,15,732,44v49,81,20,164,-56,220r-640,-32r-232,12v-64,-1,-88,-24,-88,-80v0,-53,29,-101,88,-144","w":1055},"\u00ad":{"d":"98,-704v45,-18,123,-20,196,-20v127,0,371,15,732,44v49,81,20,164,-56,220r-640,-32r-232,12v-64,-1,-88,-24,-88,-80v0,-53,29,-101,88,-144","w":1055},".":{"d":"186,-230v35,-5,65,-15,104,-16v80,21,116,49,116,108v0,76,-53,137,-160,184v-79,14,-131,-10,-152,-88v-24,-87,15,-145,92,-188","w":525},"\/":{"d":"1500,-1700v73,-92,171,-111,248,-20v0,85,-40,186,-120,304v-59,49,-121,115,-184,200v-12,26,-289,294,-812,824v-174,176,-290,333,-368,452v-99,42,-131,61,-160,60v-24,-9,-15,-46,-8,-68r-48,8v-19,-8,-35,-26,-24,-40v-12,0,-25,-7,-24,-24v45,-122,188,-345,472,-624r680,-668v181,-188,289,-329,348,-404","w":1745,"k":{"\u00c1":343,"\u00c2":343,"\u20ac":318,"\u0153":423,"\u00c3":343,"\u00c0":343,"\u00f8":423,"\u00e6":571,"\u00c6":353,"\u00a3":161,"\u00a2":476,"\u00fc":97,"\u00f9":97,"\u00e7":413,"\u00e4":67,"\u00e1":193,"\u00c5":343,"\u00c4":343,"z":382,"y":98,"x":426,"w":287,"v":287,"u":393,"s":319,"r":224,"q":443,"p":213,"o":423,"n":329,"m":445,"g":445,"e":90,"d":153,"c":413,"a":539,"A":233,"4":287,"\/":886}},"0":{"d":"260,-1824v84,-105,169,-148,300,-148v159,0,305,76,416,244r176,268v101,182,152,353,152,512v0,231,-64,482,-236,720v-127,176,-268,228,-480,228v-210,0,-377,-129,-492,-392v-74,-170,-96,-357,-96,-580v0,-133,30,-312,92,-536v24,-86,103,-191,188,-272v-13,-9,-20,-24,-20,-44xm580,-1720v0,24,-12,36,-36,36v-187,95,-288,343,-288,744v0,149,27,271,80,368v48,155,88,232,120,232v74,64,143,96,208,96v78,0,180,-78,276,-252v95,-172,116,-293,116,-456v0,-165,-107,-384,-324,-652v-61,-76,-100,-98,-152,-116","w":1315},"1":{"d":"364,-1996v66,-6,69,21,92,104v11,10,16,18,16,24v0,33,-41,287,-124,764v-13,79,-24,154,-20,224r28,528v0,207,-47,337,-140,392v0,-23,-32,-41,-96,-52v-67,-197,-24,-918,-24,-1164v0,-25,-31,-75,-92,-152v-2,-11,-5,-22,-4,-36v0,-22,42,-89,112,-208v37,-62,79,-187,140,-368v11,-13,49,-31,112,-56","w":515},"2":{"d":"348,-1548v186,-207,381,-288,636,-288v187,0,315,76,384,228v23,51,28,105,28,172v0,187,-102,381,-304,584v-137,138,-272,246,-392,340v-82,64,-129,120,-156,152r0,4v289,32,495,48,620,48v58,1,163,-28,304,-28v86,0,115,34,108,112v-9,85,-22,128,-40,128v-113,64,-293,96,-540,96v-528,0,-792,-33,-792,-48v-133,-29,-200,-62,-200,-100v0,-98,10,-113,72,-236v188,-125,418,-299,668,-544v168,-164,268,-307,324,-404v-8,-35,-4,-83,-4,-124v0,-33,-25,-50,-72,-60v-225,-49,-382,37,-516,240v-43,65,-54,105,-60,108v-39,20,-79,32,-120,32v-75,0,-112,-23,-112,-48v0,-105,46,-233,164,-364","w":1585,"k":{"4":127}},"3":{"d":"836,-1740v212,-80,407,-73,580,32v1,11,9,23,24,36v9,45,13,88,12,136v0,206,-108,383,-324,532v-10,12,-26,16,-32,32v101,39,231,116,360,260v216,242,144,488,-152,640v-116,60,-236,72,-384,72v-279,0,-543,-101,-788,-304v-73,-60,-108,-110,-108,-148v0,-14,-14,-56,-24,-108v0,-5,15,-15,44,-32v27,-43,50,-64,68,-64v51,0,153,64,304,192v228,123,401,172,628,172v81,0,150,-37,208,-112r4,-32v-13,-60,-91,-140,-240,-228v-39,-23,-140,-38,-292,-80v-103,-29,-152,-85,-152,-148v0,-87,114,-175,344,-260v51,-19,110,-69,176,-156r-4,-56r36,-128v-11,-8,-38,-20,-80,-20v-71,0,-209,57,-420,164v-107,54,-222,54,-224,-92v0,-13,15,-37,44,-72v3,-41,129,-129,392,-228","w":1585},"4":{"d":"1224,-1874v65,0,108,37,128,112v3,65,-13,56,-56,160v-18,43,-28,221,-36,532r-20,116v75,1,199,-36,440,-88v119,-26,247,-16,324,48v-15,0,-45,62,-96,184v-6,14,-20,20,-36,20v-111,0,-287,73,-536,132v-57,14,-88,14,-88,24v-16,34,-30,81,-24,140r44,408v4,89,-17,144,-76,200v-13,12,-29,16,-44,16v-59,0,-110,-69,-144,-208v-9,-39,-7,-191,-20,-452v-3,-54,-16,-80,-20,-80v-433,66,-584,90,-904,76v-44,-37,-60,-77,-60,-140v0,-75,94,-184,272,-340r664,-580v171,-187,267,-280,288,-280xm516,-890v243,-17,404,-31,484,-44v3,-131,37,-269,-8,-380r-4,0v-69,67,-184,155,-336,276v-73,58,-115,111,-136,148","k":{"\/":95}},"5":{"d":"-114,-324v16,-20,180,-98,192,-88v29,0,65,35,110,106v121,51,196,84,262,74v258,-38,426,-162,544,-318v96,-126,150,-245,125,-384r-43,-132v-33,-41,-123,-62,-270,-62v-93,0,-242,47,-456,112v-138,42,-250,37,-344,-44v-42,-260,-5,-394,104,-652v93,-48,143,-72,152,-72v19,0,59,13,120,40v233,-51,413,-76,540,-76v28,0,145,-33,352,-84v0,13,23,27,68,44v16,11,27,25,32,44v0,197,-149,296,-448,296v-134,0,-610,-31,-604,10v-35,74,-53,123,-40,198v235,-45,427,-68,576,-68v231,0,382,60,452,180v57,47,86,127,86,242v0,153,-14,307,-100,466v-92,171,-211,307,-366,396v-201,115,-333,156,-516,156v-169,0,-342,-83,-520,-248v1,-36,8,-66,12,-100v-7,-12,-22,-16,-20,-36","w":1345},"6":{"d":"392,-1704v141,-186,254,-260,388,-260v48,0,72,9,72,28v11,48,13,76,12,124v0,154,-81,298,-244,432v-5,0,-8,-7,-8,-20v-9,-37,-27,-56,-52,-56v-36,19,-84,60,-124,136v-88,164,-127,338,-136,512v7,5,14,10,28,8v245,-251,377,-376,396,-376v183,-120,283,-168,440,-168v99,0,186,53,252,164v43,72,61,168,60,284v0,233,-57,469,-212,680v-264,360,-818,382,-1116,44v-122,-138,-148,-305,-148,-512v0,-314,121,-662,392,-1020xm480,-568v-41,62,-52,75,-52,108v0,80,79,149,240,200v33,10,67,12,100,12v160,0,299,-92,404,-284v44,-81,60,-170,60,-260v0,-131,-30,-195,-64,-196r-92,-4v-207,0,-409,139,-596,424","w":1485},"7":{"d":"1260,-1862v15,25,21,79,20,140v0,119,-53,285,-160,496v-17,33,-38,86,-64,160v75,7,160,1,240,4v138,6,160,-1,160,88v0,91,-67,143,-200,160v-46,6,-137,13,-276,16v-37,22,-88,139,-152,352v-69,228,-128,382,-192,448v-48,50,-105,68,-156,68v-73,0,-108,-23,-108,-40v1,-65,94,-307,272,-728v7,-17,13,-32,16,-52v-89,-51,-170,-20,-280,-20v-59,0,-111,-35,-156,-104v9,-31,30,-72,64,-124v0,-19,44,-28,132,-28v97,0,212,-15,344,-44v53,-97,80,-173,80,-228v25,-123,50,-212,76,-268v-310,26,-700,-1,-1020,44v-75,11,-116,-18,-116,-104v0,-19,-8,-33,-24,-44v56,-38,84,-67,84,-88v145,-31,1252,-116,1416,-104","w":1420,"k":{"x":121,"d":131,"3":108,"\/":265}},"8":{"d":"68,-1696v122,-100,300,-140,528,-140v275,0,485,65,632,196v37,51,56,107,56,168v0,125,-109,258,-324,404v-51,35,-86,69,-108,100v32,43,108,101,228,172v192,115,280,238,280,424v0,173,-93,317,-288,416v-100,50,-182,56,-300,56v-126,0,-203,-27,-232,-80v-26,-16,-81,-31,-164,-44v-153,-96,-220,-211,-220,-388v0,-169,76,-338,228,-508r0,-4v-256,-191,-384,-367,-384,-528v0,-104,18,-181,68,-244xm304,-1492v28,115,97,200,196,272r128,92v111,-67,201,-133,272,-200v10,-16,26,-25,32,-44v-23,0,-55,-39,-96,-116v-68,-62,-155,-80,-276,-80v-103,0,-189,25,-256,76xm604,-772v-109,125,-160,230,-160,356v0,59,23,96,60,124v108,81,202,124,372,124v91,0,154,-39,188,-116v3,-24,9,-45,8,-72v0,-106,-122,-218,-364,-340v-34,-17,-67,-44,-104,-76","w":1385},"9":{"d":"328,-1686v150,-137,317,-189,540,-180v129,5,211,39,236,112v0,9,-19,31,-56,64r-4,20v58,18,72,84,72,168v0,57,-36,208,-76,456v-44,269,-36,365,-36,584v0,232,24,395,72,488v-35,83,-87,124,-156,124v-83,0,-150,-51,-180,-160v-23,-83,-29,-172,-24,-260r36,-680v-2,-2,-5,-3,-4,-8v-135,79,-234,134,-300,160v-224,88,-448,-21,-448,-296v0,-180,102,-385,328,-592xm428,-1458v-110,124,-154,250,-136,424r40,0v131,0,256,-81,376,-244r96,-116v-2,-52,16,-79,56,-180r4,-32v-183,-39,-318,14,-436,148","w":1125},":":{"d":"0,-790v-11,-127,51,-182,192,-192v92,16,128,45,128,120v0,79,-54,136,-164,152v-78,11,-115,-17,-156,-80xm204,-366v90,27,120,44,120,116v0,73,-52,131,-156,176v-93,17,-160,-21,-160,-120v0,-71,33,-123,100,-156","w":325},";":{"d":"224,-1012v100,-23,184,20,184,120v0,83,-57,140,-172,156v-57,8,-106,-5,-116,-48v-21,-39,-32,-65,-32,-80v0,-68,43,-126,136,-148xm144,-344v67,-114,190,-128,300,-56v8,13,12,30,12,52v0,111,-83,292,-248,544v-30,22,-42,24,-80,24v-42,0,-85,-45,-128,-136v62,-229,111,-372,144,-428","w":465},"\u037e":{"d":"224,-1012v100,-23,184,20,184,120v0,83,-57,140,-172,156v-57,8,-106,-5,-116,-48v-21,-39,-32,-65,-32,-80v0,-68,43,-126,136,-148xm144,-344v67,-114,190,-128,300,-56v8,13,12,30,12,52v0,111,-83,292,-248,544v-30,22,-42,24,-80,24v-42,0,-85,-45,-128,-136v62,-229,111,-372,144,-428","w":465},"<":{"d":"312,-658v136,76,395,258,748,532v6,87,-36,118,-136,152r-32,4v-91,-57,-270,-189,-544,-384v-74,-53,-162,-95,-252,-144v-74,-40,-96,-88,-96,-176v0,-58,49,-104,132,-160v106,-71,453,-257,680,-372v56,29,84,79,84,148v0,49,-15,74,-40,88r-448,244r-96,64r0,4","w":1055},"=":{"d":"112,-988v71,-11,128,-13,200,-12v135,0,395,15,780,44v52,84,19,160,-60,216r-680,-32r-236,16v-81,-2,-116,-23,-116,-80v0,-63,37,-113,112,-152xm224,-556v255,0,406,7,824,44v44,89,12,153,-56,208r-12,4r-596,-32r-220,12v-71,-8,-95,-29,-84,-92v18,-97,71,-144,144,-144","w":1095},">":{"d":"252,-1176v215,107,437,223,660,356v100,59,148,118,148,168v0,118,-43,158,-160,216v-134,66,-329,211,-600,412v-80,59,-128,84,-136,84v-114,0,-167,-64,-164,-152v10,-13,147,-120,416,-316v204,-149,317,-220,332,-220r0,-4v-78,-53,-236,-139,-472,-264v-70,-37,-104,-66,-104,-80v-24,-86,6,-170,80,-200","w":1065},"?":{"d":"896,-1506v13,-62,-458,-216,-600,-216v-41,0,-97,23,-168,68v-80,19,-125,-31,-128,-132v0,-29,31,-70,92,-124v5,-21,17,-32,36,-32v407,0,721,13,972,244v48,44,68,75,68,84v0,253,-177,413,-532,480r-284,52v29,230,44,363,44,400v2,80,-9,165,-36,156v-40,38,-89,63,-148,76v-12,-3,-45,-30,-100,-80r8,-72v0,-73,-45,-230,-100,-480v-26,-117,7,-216,88,-264v489,-43,751,-96,788,-160xm156,118v0,-107,51,-176,156,-200v79,1,116,37,116,124v0,84,-36,144,-108,180r-52,8v-75,-9,-112,-46,-112,-112","w":1165},"@":{"d":"1379,-645v0,210,-77,346,-283,346v-103,0,-188,-98,-253,-294r-12,-11v-108,183,-205,275,-290,275r-23,4v-94,-13,-126,-54,-126,-145v0,-93,64,-206,193,-339v53,-36,135,-82,246,-138v0,-6,15,-10,45,-11r15,0v39,0,64,67,74,201v44,145,60,203,161,235v55,-4,71,-82,71,-157v0,-127,-25,-239,-90,-324v-53,-69,-134,-97,-227,-97v-173,0,-304,25,-391,75v-129,115,-194,274,-194,477v0,185,71,311,216,369v163,65,267,89,380,89v183,0,358,-64,510,-205v36,-34,58,-79,79,-123v60,-59,214,-19,201,60v-8,46,-35,123,-119,201v-335,311,-912,366,-1305,82v-153,-111,-197,-278,-197,-499v0,-229,71,-425,224,-578v88,-88,312,-123,611,-123v195,0,331,73,395,224v63,150,89,287,89,406xm768,-783v-145,99,-215,183,-212,298r11,0v39,0,99,-71,182,-212v7,-11,17,-37,26,-79","w":1755},"A":{"d":"740,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824v65,8,136,-4,204,-4v51,0,76,15,76,44v11,1,16,5,16,12v0,67,-44,113,-132,136r-84,20v114,289,213,489,308,588v66,69,104,129,104,188v0,35,-16,59,-48,72v0,9,-20,17,-60,24r-24,0v-87,0,-185,-148,-320,-432v-61,-127,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-71,114,-152,292v-59,79,-102,108,-188,108v-57,0,-94,-14,-100,-44v-20,-96,-3,-108,28,-256v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm896,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328","w":1650,"k":{"\\":89}},"B":{"d":"168,66v-44,3,-117,-71,-118,-164v0,-47,37,-82,112,-92v66,-9,101,-14,100,-28r-46,-500r-116,-56v-7,-46,-22,-84,-24,-136v0,-19,36,-55,108,-108v-4,-221,-10,-405,-18,-552r-76,4v-123,0,-184,-25,-184,-76v-15,-45,-16,-58,-16,-100v0,-45,87,-72,260,-80v5,-3,16,0,16,-8v0,-77,48,-131,144,-160v101,-7,162,18,180,104v0,19,5,27,16,28r500,40v139,27,237,67,292,124v37,39,53,58,52,80v-43,139,-146,270,-316,384v-79,53,-188,120,-320,212v1,8,6,13,16,12v217,0,371,-8,460,-8v258,0,402,37,432,84v31,31,40,64,40,116v0,119,-88,254,-272,392v-190,142,-363,238,-510,298v-147,60,-233,89,-260,88v27,66,4,121,-68,166r-102,0v-41,-4,-76,-55,-104,-92v-60,9,-113,25,-178,28xm462,-1590r20,396v98,-44,375,-226,472,-332v6,-14,19,-21,20,-40v-162,-45,-321,-51,-512,-24xm518,-742r0,24r36,412v257,-95,458,-194,600,-300v61,-46,107,-94,140,-140v-84,-8,-157,-12,-220,-12r-20,0v-153,0,-331,5,-536,16","w":1555},"C":{"d":"628,-1632v229,-151,367,-206,520,-196v129,8,188,49,188,132v0,87,-133,143,-384,216v-139,40,-298,152,-460,320v-154,160,-204,289,-204,468v0,195,136,331,412,388v388,80,712,-34,964,-260v42,-37,135,-122,280,-260v129,-122,248,-176,344,-176v3,6,8,9,8,20v0,103,-57,209,-172,320v0,16,-66,99,-208,236v-297,287,-645,424,-1032,424v-385,0,-640,-129,-780,-380v-69,-125,-104,-234,-104,-380v0,-285,200,-590,628,-872"},"D":{"d":"230,-1568v-2,-121,59,-190,184,-196v105,-5,155,122,112,232v75,51,250,65,476,176r632,312v204,115,296,206,296,356v0,231,-272,429,-816,592r-348,80v-1,19,4,35,4,52v0,15,-43,39,-132,60v-62,15,-72,-4,-148,-44v-36,-10,-139,-18,-308,-24v-70,-18,-110,-40,-128,-96v27,-101,64,-137,128,-176v110,26,144,38,200,36v-43,-326,-81,-582,-108,-768v-15,-104,-20,-204,-20,-300v-36,-29,-166,-45,-384,-84v-122,-22,-160,-59,-160,-156v0,-30,41,-69,124,-116r16,-16v201,53,327,80,380,80xm518,-1216v-4,1,-14,-3,-12,4v0,256,49,579,148,968v209,-32,382,-74,516,-124v237,-89,366,-157,396,-192v40,-48,56,-68,56,-116v0,-87,-143,-198,-428,-335v-285,-137,-511,-205,-676,-205","w":1834,"k":{"\\":99}},"E":{"d":"956,-1792v83,-28,221,-39,280,8r0,32v0,147,-168,241,-504,276v-195,20,-292,35,-292,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v-25,256,18,478,108,648r20,4v85,0,239,-59,468,-164v237,-108,428,-156,568,-156v99,0,148,13,148,24r0,132v0,6,-55,9,-160,32v-294,65,-550,214,-796,392v-107,78,-175,88,-288,88v-102,0,-182,-97,-252,-288v-44,-121,-77,-321,-88,-604v-47,0,-96,-20,-148,-60v-2,-68,26,-116,96,-196v21,-25,11,-40,12,-72r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92","w":1515,"k":{"4":106}},"F":{"d":"846,-1832v83,-28,221,-39,280,8r0,32v0,147,-166,241,-500,276v-197,21,-296,34,-296,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v-17,243,-16,446,-2,612v6,70,33,145,88,224v35,95,-9,143,-124,164r-32,0v-115,0,-169,-154,-184,-460r-22,-436v-53,0,-101,-19,-144,-56v-2,-68,26,-116,96,-196v21,-25,11,-40,12,-72r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92","w":1013,"k":{"\u0153":259,"\u00f8":196,"\u00e6":249,"\u00e7":218,"z":186,"x":73,"w":249,"v":249,"u":135,"r":155,"o":259,"m":186,"g":249,"c":218,"a":155,"3":92,"\/":155}},"G":{"d":"1118,-1432v-85,101,-73,119,-152,140v-39,0,-95,-69,-152,-212v-44,-111,-87,-169,-160,-204v-86,22,-149,62,-192,116v-112,140,-160,337,-160,592v0,355,96,659,300,900v59,70,127,100,192,100v149,0,287,-182,412,-548v28,-82,52,-195,76,-336v-76,11,-235,41,-476,92v3,-43,-20,-54,-76,-76v-25,-20,-37,-34,-36,-56v0,-102,128,-175,384,-212v140,-21,271,-28,392,-28v40,0,60,8,60,24v8,39,16,84,16,136v0,183,-77,464,-248,836v-85,185,-219,311,-384,384v-38,18,-76,24,-124,24v-143,0,-304,-47,-424,-192v-264,-318,-356,-653,-356,-1048v0,-337,77,-621,260,-824v109,-122,219,-160,368,-160v171,0,320,109,424,336v45,98,56,173,56,216","w":1488},"H":{"d":"177,-508v-115,24,-272,3,-272,-94v0,-93,18,-140,50,-140r144,0v43,-2,64,-7,64,-16v-3,-357,-30,-737,-30,-1140v0,-184,45,-297,96,-292r48,-4v83,3,124,17,124,44v51,54,20,168,20,256v0,151,3,491,10,1020r12,108v209,1,397,-11,512,-36v-9,-628,-22,-1039,-34,-1232v-7,-113,25,-201,104,-212v91,-13,159,18,172,84v18,92,28,261,28,372v0,86,-2,379,-2,880v0,72,17,108,28,108v282,0,430,93,450,172v2,74,-56,105,-148,100v-206,-11,-308,-9,-306,-32r-8,8v9,0,12,45,10,136v6,24,29,397,58,792v-33,37,-83,56,-152,56v-75,0,-112,-16,-112,-48v0,-122,-37,-368,-64,-744v-8,-112,-19,-167,-24,-168v-163,-9,-328,9,-492,12v12,199,18,326,18,380v0,147,-17,220,-66,220v-57,0,-117,-14,-168,0v-35,0,-41,-97,-41,-291v0,-191,-15,-290,-29,-299","w":1566},"I":{"d":"20,-1934v96,-93,256,-54,292,84v-4,57,-28,97,-36,148v-15,96,-13,194,-12,300v0,192,5,579,16,1160r32,328v-32,43,-81,64,-148,64v-72,0,-108,-23,-108,-48v0,-759,-48,-1254,-48,-1488v-9,-3,-8,-336,-8,-436v0,-58,5,-97,20,-112","w":332},"J":{"d":"1014,-2086v63,-7,94,12,156,52r50,966v16,172,24,304,24,396v0,296,-78,543,-204,748v-89,144,-158,204,-300,204v-129,0,-250,-85,-376,-244v-61,-77,-152,-172,-212,-316v-121,-289,-156,-461,-152,-628v3,-119,26,-152,120,-152v93,0,165,49,216,148v16,60,5,88,-36,144v45,266,152,486,320,660r128,84v140,-135,215,-374,220,-716v3,-216,-25,-730,-58,-1190v13,-93,47,-149,104,-156","w":1255},"K":{"d":"254,-1814v55,-36,212,-31,212,40v0,148,-10,154,-52,436r-4,88v260,-108,579,-289,816,-480v128,12,192,43,192,92r0,24v0,60,-112,140,-324,260v-117,66,-295,179,-544,316v-15,0,-61,20,-140,60v-26,118,28,149,140,228v274,194,472,346,612,428v147,86,251,136,320,136v131,0,196,15,196,36v24,17,36,49,36,96v-92,43,-160,56,-260,56v-187,0,-438,-129,-768,-364v-134,-95,-215,-132,-228,-132v-13,107,12,185,44,480r0,92v-34,41,-71,58,-132,52v-62,-6,-93,-24,-96,-48r-72,-528v-6,-169,-23,-261,-52,-276v-15,-20,-73,-65,-172,-136v-40,-43,-48,-76,-48,-140v0,-25,61,-61,184,-108r68,-48r-4,-80v-5,-212,16,-347,76,-580","w":1510,"k":{"\u00a3":59,"4":248}},"L":{"d":"48,-1724v95,-64,264,-24,248,96r-32,240r-8,192v0,176,33,525,100,1048v120,-27,249,-96,408,-152v345,-120,627,-152,824,-152v77,0,140,9,188,28r-4,148v0,7,-56,6,-164,28v-376,76,-602,121,-924,248v-133,53,-256,93,-368,120v-139,-9,-208,-26,-208,-52v0,-567,-121,-1114,-104,-1728v14,-9,29,-31,44,-64","w":1532,"k":{"\\":389,"4":295}},"M":{"d":"1400,-1986r68,0v51,56,102,156,140,304v46,177,136,432,252,772v167,491,311,835,452,1028v23,31,34,51,28,84v-16,87,-61,108,-140,108v-113,0,-204,-126,-304,-364v-79,-187,-230,-549,-424,-1100r-56,-144r-4,0v-42,164,-75,435,-144,804v-67,359,-124,589,-124,700v-29,9,-44,28,-44,56v0,9,-43,27,-132,40v-55,8,-82,-3,-100,-52v-21,-57,-37,-175,-68,-352r-116,-664v-50,-195,-96,-336,-164,-456r-4,0v-48,123,-98,374,-160,752v-28,170,-61,274,-96,308v-38,37,-75,44,-136,44v-51,0,-76,-16,-76,-48v-35,-116,-12,-244,-12,-376v0,-27,-19,-100,-36,-220v-13,-93,31,-140,128,-140r16,4v29,-59,69,-227,144,-496v55,-197,146,-292,248,-292v126,0,228,172,324,512v26,93,76,279,132,564r4,0v45,-116,93,-286,128,-512v67,-434,120,-720,176,-856","w":2165,"k":{"\\":77}},"N":{"d":"1028,-1938v93,-91,260,-54,272,92v-15,61,-21,111,-22,150r-16,910v0,252,13,497,38,736r0,52v0,120,-23,175,-68,180r-80,8v-137,0,-267,-119,-408,-344v-62,-99,-340,-600,-462,-810v-6,283,2,384,2,798v0,139,-11,208,-24,208v-35,24,-84,32,-144,32v-45,0,-67,-13,-76,-36v-29,-79,-40,-151,-40,-248v0,-90,-2,-315,-2,-676v0,-73,5,-216,20,-428v8,-112,36,-185,72,-228r4,4r92,0r60,-4v134,141,257,399,402,760v116,288,208,429,352,572r4,0","w":1298},"O":{"d":"368,-1850v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm468,-1490v-30,-2,-51,-13,-84,-12v-17,4,-30,63,-56,172v-30,126,-52,249,-52,372v-1,382,88,640,288,736v187,90,299,1,384,-204v26,-62,20,-171,20,-272v0,-237,-37,-482,-160,-708v-84,-155,-155,-212,-236,-212v-43,0,-77,43,-104,128","w":1192},"P":{"d":"130,-1874v36,-82,84,-112,176,-112v65,0,107,29,124,88v0,24,13,36,40,36v238,53,467,139,688,256v188,99,276,213,276,388v0,177,-82,340,-256,476v-131,103,-268,214,-432,252r-332,76v0,216,18,374,30,476v13,114,-21,208,-88,228v-109,0,-183,-140,-200,-420v-8,-136,-8,-214,-22,-234r-44,2v-18,-13,-33,-49,-44,-108v-4,-6,-14,-8,-12,-20v1,-9,38,-41,112,-96v-7,-132,-15,-387,-22,-764r-2,-250v-128,-30,-192,-56,-192,-78r0,-24v26,-85,45,-128,56,-128xm406,-1606v-7,547,-5,861,6,940v216,-59,379,-121,490,-188v124,-75,205,-180,248,-312v4,-13,8,-33,8,-56v0,-147,-251,-275,-752,-384","w":1426,"k":{"\u00e6":70,"d":124,"\/":385}},"Q":{"d":"702,-1816r36,0v153,0,321,152,504,456v188,313,272,513,272,728v0,123,-33,249,-100,380v57,82,116,145,180,180v36,19,91,28,160,36v29,35,44,82,44,140v0,106,-23,136,-116,136v-111,0,-227,-63,-348,-188r-100,-68v-318,184,-760,143,-1012,-92v-146,-136,-192,-318,-192,-556v0,-285,93,-604,280,-956v177,-131,307,-196,392,-196xm306,-616v-11,289,209,504,528,504v86,0,162,-25,228,-76v-77,-106,-202,-222,-368,-360v-142,-118,-212,-192,-204,-264v10,-91,59,-132,140,-132v65,0,167,80,304,240v5,0,74,65,208,196r72,76v31,2,40,-59,44,-184v8,-217,-109,-468,-364,-804v-79,-104,-168,-144,-240,-144v16,120,36,203,-20,272v-29,2,-39,-23,-96,-76v-9,-9,-22,-12,-36,-12v-87,0,-153,228,-196,684r0,80","w":1599},"R":{"d":"256,-1674v33,-69,80,-96,160,-96v77,0,116,37,116,112v99,0,427,73,976,244v115,36,164,75,164,136v0,226,-157,397,-468,524v-122,50,-219,103,-296,148v181,87,482,221,912,380v257,95,429,151,508,192v12,117,-99,172,-248,172v-177,0,-524,-164,-1076,-412v-265,-119,-441,-138,-494,-138r6,340v18,118,-33,198,-148,202v-46,-27,-85,-89,-116,-188r-30,-392r-134,0v-72,0,-108,-27,-108,-80v0,-93,71,-161,212,-204r0,-4v7,-110,9,-481,8,-708v-86,0,-159,14,-240,20v-61,-8,-80,-33,-80,-92v0,-87,140,-144,376,-156xm476,-1410v-25,193,-9,455,4,664v316,-69,539,-137,664,-212v109,-66,185,-144,232,-224r0,-4v-369,-128,-579,-192,-632,-192v-94,-21,-183,-32,-268,-32","w":1929,"k":{"4":182}},"S":{"d":"1232,-1646v56,84,-74,115,-184,112r-324,-8v-99,0,-212,50,-328,160v-34,32,-59,75,-88,120v41,60,104,103,188,132v137,47,359,115,664,208v377,115,564,255,564,412r0,28v0,205,-262,376,-788,504v-143,35,-273,48,-388,48v-253,0,-422,-50,-476,-164v-75,-159,5,-285,156,-376v42,-25,85,-32,124,-32v28,82,-8,184,-12,272v364,100,708,29,992,-148v43,-27,69,-61,92,-88v-67,-75,-139,-126,-212,-160v-107,-50,-351,-119,-728,-228v-325,-94,-484,-229,-484,-376r0,-28v0,-148,122,-294,372,-428v143,-77,270,-100,436,-100v214,0,360,44,424,140","w":1735,"k":{"\\":57}},"T":{"d":"1338,-1694r152,-4v96,0,157,24,184,72v1,11,4,20,4,32v4,95,-204,208,-588,208v-67,0,-138,-8,-200,0v-21,157,-38,296,-32,416r36,736r0,220v0,47,-10,76,-32,84v-72,27,-135,40,-188,40v-61,-186,-92,-425,-92,-716v0,-110,-14,-214,-12,-312r8,-424v-39,-16,-97,-26,-172,-24r-480,12v-117,0,-176,-19,-176,-56v0,-82,27,-116,104,-172v199,-35,449,-52,752,-52v213,0,457,-20,732,-60","w":1287},"U":{"d":"982,-2038v26,33,63,119,104,260v80,277,116,548,116,812v0,413,-82,720,-268,896v-108,102,-233,140,-352,140v-179,0,-308,-109,-408,-316v-110,-229,-164,-517,-164,-868v0,-259,36,-489,108,-688v7,-5,48,-20,124,-20v69,0,117,35,104,100r-44,224v-15,115,-24,229,-24,344v0,507,101,830,304,968r48,12v67,0,145,-63,212,-200v67,-137,84,-332,84,-556v0,-408,-54,-728,-148,-964v-27,-68,-3,-144,84,-144r120,0","w":1235},"V":{"d":"1490,-2196v19,12,53,27,104,44r12,20v0,55,-91,241,-268,560v-67,120,-130,398,-248,816v-86,307,-156,499,-156,592v0,204,-92,304,-196,304v-47,0,-77,-12,-92,-36v-45,-71,-86,-159,-116,-268v-45,-163,-86,-299,-144,-400v-124,-213,-234,-396,-296,-564v-53,-143,-64,-228,-60,-352v18,-12,39,-33,64,-64v25,-3,51,-5,80,-4v72,0,106,24,120,68v107,327,272,602,424,888v13,-19,53,-121,112,-308v186,-586,338,-985,488,-1176v68,-87,133,-120,172,-120","w":1435,"k":{"\/":73}},"W":{"d":"1586,-2240v51,55,90,117,116,184v27,301,40,575,40,820v1,455,-28,879,-116,1268v-20,87,-68,146,-124,172v-31,15,-66,16,-100,16v-150,-131,-246,-259,-304,-376v-66,-133,-174,-363,-308,-700r-40,-88r-4,0v-35,79,-84,269,-84,572v0,153,-19,325,-68,512v-12,46,-27,68,-36,68v-77,0,-222,15,-212,-56v-232,-630,-336,-1054,-336,-1492v0,-172,47,-280,140,-324v63,-12,100,7,156,48v1,345,-16,759,76,992r4,0v59,-179,88,-311,88,-396v0,-229,61,-383,96,-468v41,-100,53,-127,128,-128v29,0,81,20,156,60v168,593,339,1035,512,1324v-1,3,1,5,4,4v80,-314,100,-643,100,-1020v0,-237,-19,-543,-56,-916v17,-18,66,-37,148,-56","w":1785},"X":{"d":"712,-442v-229,197,-323,347,-436,584v0,11,-21,23,-64,36v-99,66,-212,39,-212,-104v0,-76,71,-196,208,-364v153,-187,244,-315,276,-380v-4,-25,-90,-116,-240,-288v-155,-178,-224,-317,-224,-400v0,-91,20,-137,100,-176v109,16,164,37,164,64v85,181,227,405,376,568r4,0r372,-448v155,-163,253,-258,296,-284v141,31,191,44,192,120v0,77,-73,143,-180,244v-241,228,-377,425,-448,544r-24,32v34,59,110,155,244,268v82,69,172,99,256,108r100,112v0,59,-33,102,-100,128r-44,40v-79,0,-193,-45,-336,-144v-51,-35,-142,-125,-280,-260","w":1475},"Y":{"d":"1150,-2040v21,1,32,11,49,15v74,-4,139,0,134,75v43,195,83,515,146,956v53,368,86,684,86,1023v0,258,-76,506,-250,728v-116,147,-258,209,-433,209v-276,0,-521,-173,-721,-527v-96,-169,-131,-313,-131,-485v0,-125,46,-214,138,-269v31,-5,41,-5,56,27r19,0v14,0,26,77,52,227v29,172,70,296,112,373v162,293,315,437,452,437v69,0,157,-49,247,-160v132,-164,190,-418,190,-747v0,-308,-31,-476,-60,-504v-20,-82,-45,-245,-74,-489v-4,0,-44,75,-127,220v-163,285,-364,426,-594,426v-151,0,-250,-59,-288,-179v-16,-50,-18,-112,-18,-183v0,-179,52,-420,194,-702v55,-109,108,-142,198,-142v54,0,96,24,127,71v20,86,-15,105,-71,220v-86,178,-120,350,-120,508v0,95,10,142,15,142v111,-33,233,-156,351,-377v108,-203,194,-486,232,-826v7,-7,17,-11,30,-11xm476,-1856v-4,3,-13,0,-12,8r12,4r0,-12","w":1565},"Z":{"d":"1945,-1707v146,-29,204,-54,268,-52v23,0,34,12,34,36v21,34,30,69,28,116v-160,102,-322,224,-478,376v-246,239,-450,412,-612,524v-79,55,-284,216,-624,468r982,32r684,80r400,64v86,40,118,69,118,144v0,60,-31,103,-92,128r-48,4v-252,-66,-452,-98,-652,-96v-135,-33,-396,-71,-784,-80r-544,-12v-197,-20,-376,8,-544,58v-85,25,-172,12,-192,-76v-6,-25,-8,-48,-8,-76v0,-66,93,-133,280,-202v272,-172,548,-371,836,-584v156,-115,377,-298,656,-560v-175,-1,-517,34,-1028,106r-256,54v-53,-51,-80,-111,-80,-182v0,-67,29,-108,88,-122v42,8,128,8,192,8v124,0,374,-46,756,-96v295,-38,505,-37,620,-60","w":2257,"k":{"4":131}},"[":{"d":"36,-1604v10,-295,38,-395,284,-380r464,29v54,114,25,129,-36,278v-341,5,-512,18,-512,39v-27,124,-40,261,-40,410v0,93,20,397,52,912v3,51,2,104,-12,141v37,62,143,93,316,93v82,0,315,-9,320,24v33,51,40,70,40,126v0,49,-13,73,-40,73v-176,112,-522,78,-784,30v-65,-449,-92,-935,-88,-1453","w":935},"\\":{"d":"96,-1678v-7,-23,-19,-71,16,-68v25,2,78,26,160,64v47,91,175,266,408,500v515,517,784,776,784,800v64,79,120,138,168,176v77,119,116,219,116,300v-34,42,-60,56,-112,56v-66,0,-140,-79,-244,-220v-106,-144,-387,-397,-796,-800v-304,-300,-472,-519,-528,-632v-9,-8,-31,-44,-68,-108v-3,-22,8,-37,24,-36v-11,-40,38,-46,72,-32","w":1735,"k":{"\\":876,"V":118,"T":153,"9":277}},"]":{"d":"947,-1604r38,322v4,519,-24,1004,-94,1453v-173,30,-327,45,-483,44v-161,0,-279,-25,-355,-74v-37,5,-43,-51,-43,-102v0,-27,14,-59,43,-97v4,-33,258,-24,342,-24v185,0,297,-31,338,-93v-15,-37,-16,-89,-13,-141v34,-515,55,-819,55,-912v0,-149,-14,-286,-42,-410v0,-21,-183,-34,-548,-39v-65,-149,-95,-163,-38,-278r496,-29v254,-7,269,82,304,380","w":1010},"^":{"d":"376,-1920v44,-47,81,-56,156,-52v48,91,146,248,304,464v40,55,23,72,8,124v1,12,12,28,4,36v-9,-2,-8,-11,-32,-16r-64,20v-21,0,-76,-40,-148,-132v-53,-67,-93,-129,-136,-172v-158,127,-256,229,-256,308v0,24,-47,36,-140,36r-24,4v-22,-34,-28,-61,-28,-104v0,-68,72,-164,208,-296v42,-41,89,-117,148,-220","w":885},"_":{"d":"1820,402v-28,47,-121,128,-235,128v-29,0,-47,-7,-55,-12v-67,11,-164,13,-252,12v-58,0,-292,-19,-703,-40v-159,-8,-294,5,-435,36r-110,-76v-4,-30,18,-54,32,-52v-30,-34,-44,-45,-20,-80r-3,-20v0,-29,115,-60,347,-80v269,-23,514,48,1057,48v50,0,133,-20,252,-20v83,0,125,52,125,156","w":1900},"`":{"d":"226,-1920v59,103,107,178,148,220v142,144,208,216,208,312v0,31,-9,60,-28,88r-24,-4v-93,0,-140,-12,-140,-36v0,-79,-98,-181,-256,-308v-49,-23,-84,-91,-104,-204r88,-120v40,0,76,17,108,52","w":682},"a":{"d":"712,-1038v103,-77,256,-90,256,80v0,49,23,199,84,448v35,143,102,257,172,356v55,78,68,112,68,180v0,32,-20,48,-60,48v-39,24,-65,36,-76,36v-74,-26,-144,-83,-200,-176v-37,-63,-89,-190,-164,-376r-24,-32v-98,153,-180,271,-252,348v-87,93,-189,136,-300,136v-108,0,-179,-56,-212,-168r-4,-68v0,-151,86,-350,292,-560v109,-111,261,-183,420,-252xm284,-266v2,2,3,5,8,4v65,0,121,-62,196,-168v111,-156,180,-265,180,-348v-2,-3,-6,-6,-12,-4v-46,13,-137,80,-256,212v-83,91,-116,197,-116,304","w":1147,"k":{"\\":162}},"b":{"d":"80,-1830v21,-116,86,-156,192,-156v49,0,80,35,84,100v0,15,-23,85,-48,212v-46,236,-58,398,-56,560v-7,21,0,43,0,68v0,81,11,167,32,260v114,-139,261,-208,440,-208v139,0,256,23,352,44v32,86,44,155,44,240v0,237,-122,464,-388,648v-150,104,-280,132,-432,132v-89,0,-175,-40,-256,-120v-52,-143,-13,-284,-20,-448r-24,-580v0,-131,12,-385,80,-752xm328,-206v332,-50,501,-191,500,-416r-4,-60v-249,-54,-384,26,-456,260v-16,51,-29,123,-40,216","w":1063},"c":{"d":"252,-884v109,-88,238,-89,356,-20v-5,11,-8,25,-8,44v7,25,23,41,20,76v-23,47,-72,84,-148,108v-78,25,-132,55,-152,96v-36,75,-44,112,-44,176v0,94,71,140,192,140v89,0,243,-51,464,-148v100,-44,148,-61,192,-60v45,46,69,81,72,104v-3,14,-43,58,-120,132v-20,37,-40,56,-60,56v-247,147,-457,220,-632,220v-188,0,-313,-89,-376,-268v-35,-290,36,-488,244,-656","w":980,"k":{"\\":404}},"d":{"d":"716,-1676v25,-16,49,-11,84,-12v0,21,17,39,52,52v26,17,50,123,48,316r-4,396v0,191,67,417,200,676v65,79,84,99,84,164v0,16,-23,56,-68,120v-152,11,-207,-37,-260,-184v-18,-48,-49,-95,-92,-140v-35,89,-107,176,-224,244v-129,75,-285,104,-456,104v-67,-49,-100,-76,-100,-80v-16,-88,-20,-110,-20,-164v0,-76,73,-207,244,-368v149,-140,282,-204,376,-216v32,-13,48,-36,48,-68v0,-322,-44,-530,-44,-628r0,-112xm272,-188r36,4v115,0,209,-92,284,-276v12,-30,20,-51,20,-64v-127,41,-219,111,-276,208v-42,72,-64,114,-64,128","w":1091},"e":{"d":"88,-988v270,-139,455,-83,584,196v25,54,24,101,24,132v0,134,-104,242,-312,324r0,4v55,93,127,140,216,140v120,0,241,-104,388,-292v81,-103,140,-142,200,-140v24,15,-13,80,20,80v17,0,29,-15,36,-44v4,0,10,-2,8,4v0,45,-43,118,-120,224v-15,21,-21,49,-28,80v-37,7,-56,22,-56,44v-73,122,-183,213,-332,260v-59,19,-96,16,-156,16v-195,0,-389,-141,-580,-424r-20,-356v0,-132,47,-206,128,-248xm208,-672v0,80,23,136,68,168v31,0,78,-24,140,-72v40,-111,5,-214,-92,-248v-38,-13,-98,-2,-92,36v-16,27,-24,66,-24,116","w":1025,"k":{"\\":206}},"f":{"d":"274,-1724v357,-75,590,52,712,384v26,71,36,123,36,152v-20,69,-89,90,-184,84r-40,4v-26,-104,-51,-186,-84,-240v-79,-127,-127,-180,-212,-180v-76,0,-127,70,-136,212r-20,320v86,10,275,14,564,32v83,5,124,22,124,32v0,13,8,29,24,48r0,8v-19,0,-31,15,-36,44v-97,86,-343,72,-540,72v-57,0,-99,5,-128,16v35,476,71,793,108,952v-18,15,-31,6,-56,-12r-32,76v-47,3,-55,-11,-116,-48v-32,0,-48,-20,-48,-60v-26,-78,-46,-328,-76,-748v-6,-86,-19,-127,-24,-128r-244,-44v-31,-14,-49,-26,-56,-36r0,-116v0,-7,28,-15,84,-24v79,-35,139,-53,196,-52v-1,-361,61,-614,184,-748","w":941,"k":{"\/":83}},"g":{"d":"344,-890v181,-91,457,-80,580,44v16,7,24,17,24,32v-24,17,-37,29,-40,36v16,353,24,615,24,788v0,334,-34,543,-84,636v-86,160,-190,244,-328,244v-131,0,-246,-52,-344,-156v-5,-9,-8,-17,-8,-32v0,-39,-39,-99,-104,-188v-34,-46,-44,-93,-44,-132v0,-37,11,-64,32,-80v37,-2,35,10,80,44v32,0,48,7,48,20v25,78,91,155,200,232v6,0,42,24,108,72v54,-15,105,-50,140,-112v119,-214,43,-643,60,-956v-28,26,-78,124,-184,268v-78,107,-145,136,-252,136v-48,0,-101,-31,-160,-92v-45,-29,-68,-64,-68,-104v-19,-50,-24,-113,-24,-184v0,-223,112,-400,344,-516xm364,-618v-107,103,-128,210,-104,372v72,-40,133,-110,188,-208v67,-121,121,-205,156,-256v-3,-11,-8,-16,-16,-16v-61,0,-142,29,-224,108","w":985,"k":{"\\":220,"T":128}},"h":{"d":"216,-1592r8,0v45,23,68,41,68,52v0,331,-73,699,-60,1076v44,-36,101,-170,188,-396v29,-77,68,-112,100,-112v62,-34,74,-44,120,-44v31,0,51,32,72,92v30,87,60,254,112,500v43,205,79,284,200,396r0,4v-35,49,-71,83,-108,100v-55,0,-127,-28,-200,-100v-48,-48,-87,-124,-108,-220r-64,-300v-39,49,-96,185,-188,400v-43,100,-99,172,-152,224v-64,4,-75,-14,-132,-68r-40,-20v10,-72,-3,-108,-32,-196v7,0,5,-295,20,-884v5,-222,33,-371,56,-448v35,-1,63,-16,72,-52v24,13,43,20,56,20v8,0,12,-8,12,-24","w":918,"k":{"\\":185}},"i":{"d":"30,-1428v23,-71,84,-99,180,-96v92,3,129,27,136,100v6,56,-77,108,-192,108v-80,0,-120,-31,-120,-72v-4,-11,-5,-25,-4,-40xm194,-1116v53,0,80,13,80,40v66,328,47,729,40,1108v-21,16,-53,28,-96,36v-13,10,-19,26,-36,32v-23,0,-45,-17,-64,-52v0,16,-3,24,-8,24v-40,-35,-69,-113,-60,-232r36,-492v-5,-70,-8,-169,-8,-296v0,-112,39,-168,116,-168","w":385},"j":{"d":"348,-1438v89,-7,153,17,160,96v5,64,-80,112,-200,112v-80,0,-120,-41,-120,-96v0,-63,53,-104,160,-112xm36,558v275,-94,210,-568,204,-924r16,-260r-8,-272v0,-133,39,-200,116,-200v56,0,84,19,84,56v0,194,56,516,44,816r8,28v0,397,-28,634,-84,712v-82,185,-196,276,-352,276v-136,0,-252,-53,-352,-156v-15,-15,-24,-45,-24,-92v-99,-133,-148,-223,-148,-268v0,-49,3,-75,32,-104v33,-2,37,13,88,48v12,4,28,4,44,4v15,62,52,126,116,184v49,44,123,93,216,152","w":535},"k":{"d":"122,-2008v49,-30,76,-43,124,-40v56,4,84,17,84,36v0,300,23,657,-12,972r460,-148r124,-16v61,0,108,15,140,44v-8,29,-12,63,-12,104r4,4v-61,51,-161,98,-300,136v-163,45,-302,70,-412,160r0,8v23,45,94,90,216,128v89,28,157,59,200,100v63,-4,54,15,140,56v238,114,371,170,388,220v-8,0,-15,29,-20,88v-12,24,-41,36,-88,36r-56,20v-299,-140,-500,-232,-604,-272v-72,-28,-129,-44,-168,-52v-46,106,-12,273,-12,408v0,56,-13,95,-40,116v-7,6,-14,18,-20,36v7,4,0,10,0,16v-3,-6,-15,-3,-24,-4r-40,48r-16,4v-55,-16,-83,-15,-76,-40r12,-44r-20,0r0,36r-12,12v-76,-167,-17,-486,-36,-716r-124,-84r4,-52r-16,-60v0,-37,51,-86,152,-148v19,0,26,-313,36,-940v2,-115,15,-172,24,-172","w":1119},"l":{"d":"44,-2164v54,-38,86,-52,140,-52v51,0,76,21,76,64v0,100,32,205,28,320r-28,732v-4,304,34,558,96,992v10,67,-2,160,-44,160v-22,0,-62,9,-120,28v-17,-17,-44,-37,-80,-60v-81,-532,-108,-854,-108,-1260v0,-197,17,-403,52,-616v-9,0,-17,-35,-24,-104r-32,-24v16,0,31,-60,44,-180","w":375},"m":{"d":"904,-912v87,5,164,35,164,56v102,168,211,597,316,816v0,10,-16,29,-48,56v0,13,-5,20,-16,20v-129,0,-218,-70,-260,-212v-44,-150,-79,-255,-112,-312r-4,0v-123,352,-212,528,-268,528r-36,0v-100,0,-158,-104,-176,-312v-14,-165,-29,-248,-40,-248v-34,37,-73,133,-116,288v-48,176,-109,264,-184,264v-32,0,-67,-13,-104,-40v3,-12,5,-25,4,-40r-24,-28v49,-143,4,-321,20,-488v36,4,47,-45,44,-96v0,-6,21,-17,64,-32v14,-46,44,-9,72,-4v15,-3,57,-55,140,-144v29,-31,53,-40,60,-40v129,0,218,85,268,256r16,40r8,0v26,-53,50,-126,84,-212v15,-38,39,-63,60,-80r36,4","w":1405,"k":{"\\":483,"V":72,"T":170}},"n":{"d":"654,-1166v85,22,128,37,128,44v39,90,77,190,96,304v63,379,99,625,128,736v7,0,15,25,20,76v5,55,-31,76,-96,76v-85,0,-128,-16,-128,-48v-105,-209,-132,-555,-184,-828r-4,0v-93,115,-197,339,-332,664v-46,112,-82,163,-88,164v-12,-36,-146,14,-136,-52r-48,-84v37,-134,56,-369,56,-704v57,-33,86,-53,88,-60v0,-13,5,-20,16,-20v100,0,148,29,148,44v0,13,-17,30,-8,40r4,0v51,-48,94,-117,144,-196v68,-107,139,-156,196,-156","w":1035,"k":{"\\":134,"T":136}},"o":{"d":"462,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm339,-151v98,-39,180,-166,180,-304v0,-80,-29,-147,-88,-201v-44,0,-82,29,-121,84v-17,23,-31,34,-38,36v7,71,-4,148,-4,222v0,109,31,163,71,163","w":795,"k":{"\\":367,"T":117}},"p":{"d":"192,-1004v297,0,513,57,648,172v61,85,92,161,92,228v0,110,-72,234,-228,356v-122,96,-236,134,-364,132v0,481,13,784,40,908v-13,9,-44,2,-64,4v-9,5,-16,13,-20,24v-115,-29,-172,-63,-172,-100v-43,-165,-83,-417,-64,-756r28,-500v0,-66,-9,-129,-28,-188v-5,0,-9,9,-12,28v-21,5,-28,-18,-28,-48v0,-24,15,-52,44,-84v-18,-2,-25,5,-28,24v-4,0,-10,2,-8,-4v0,-49,39,-94,116,-136xm344,-344v65,0,143,-18,220,-76v72,-54,100,-147,100,-260v-97,-75,-177,-112,-240,-112v-40,0,-59,11,-60,32r-16,396","w":955,"k":{"\\":328,"T":109}},"q":{"d":"194,-772v156,-175,305,-259,508,-248v131,7,196,31,196,52v93,95,140,154,140,176v-85,221,-120,790,-104,1270v237,-204,403,-294,500,-270v9,-9,51,-23,128,-44v-5,29,75,35,120,32v1,15,-11,18,-16,28v0,13,13,20,40,20r0,8v-68,77,-128,123,-180,140v-141,45,-253,101,-320,184v-88,109,-145,197,-188,250v-56,42,-84,90,-84,144v-9,7,-11,21,-24,24v0,-11,-9,-16,-28,-16r0,-4v-19,0,-28,11,-28,32v-21,13,-39,-2,-48,-28r-40,20v-56,-6,-84,-17,-84,-32v0,-16,-12,-29,-36,-40v-9,-419,-4,-874,44,-1230v-186,187,-342,280,-468,280v-54,0,-98,-35,-132,-104v-35,-24,-52,-65,-52,-124v-4,0,-7,-29,-8,-88v-3,-105,12,-185,56,-256v27,0,40,-15,40,-44v0,-35,23,-82,68,-132xm278,-352v0,59,13,88,24,88v211,-117,362,-283,440,-520v-35,-16,-56,-20,-92,-20v-52,0,-125,47,-220,140v-22,8,-41,35,-56,80v-64,97,-96,174,-96,232","w":1086,"k":{"\\":197,"T":136}},"r":{"d":"540,-928v95,-98,181,-132,280,-132v83,0,124,19,124,56v9,41,24,70,44,88r0,8v-238,120,-414,313,-516,584v-54,143,-76,261,-76,348v-80,37,-133,56,-160,56v0,-31,-33,-62,-100,-92v0,-44,-36,-226,-112,-544v-20,-84,-26,-161,-24,-256v13,-45,59,-72,132,-76v94,-6,161,103,144,236v62,-53,143,-152,264,-276","w":930,"k":{"\/":71}},"s":{"d":"253,-925v99,-45,168,-60,268,-60v97,0,146,25,160,71v15,50,28,78,28,89v-19,29,-60,56,-124,68v-192,34,-289,56,-289,78v29,46,100,88,217,118v200,51,348,88,435,135v86,46,125,117,125,200v0,139,-122,233,-367,278v-72,13,-139,18,-200,18v-248,0,-371,-45,-371,-86v-68,-82,-48,-191,43,-256v140,67,257,100,350,100v77,0,140,-23,189,-68r0,-4v-76,-42,-216,-79,-414,-132v-204,-54,-303,-134,-303,-221v0,-154,80,-249,253,-328","w":1019,"k":{"\\":412,"T":67}},"t":{"d":"306,-1784v69,-95,238,-98,284,24v-66,426,-86,618,-80,952v152,13,280,-11,448,-52r68,-4v61,0,92,29,92,88v0,87,-59,136,-176,156v-55,10,-189,27,-404,44v0,5,-9,8,-28,8r24,264v0,37,-8,71,-24,100v48,36,31,273,0,284v-59,1,-115,-29,-148,20v-72,-29,-108,-145,-108,-348v0,-181,-9,-272,-28,-272v-25,-27,-110,-40,-256,-40v-68,0,-115,-35,-140,-104r0,-12v33,-72,108,-108,224,-108v61,0,92,7,92,12v21,0,35,-17,44,-52v8,-10,29,-8,48,-8v-14,-277,21,-557,68,-952","w":941},"u":{"d":"216,2v-7,-5,-75,27,-128,40v-57,0,-94,-62,-104,-188v-19,-235,12,-442,120,-588v67,-90,137,-63,208,28v0,39,-23,132,-68,280v-9,30,-13,76,-12,124v61,-30,114,-110,164,-240v64,-166,109,-248,132,-248v78,0,137,1,172,60v23,249,62,452,116,608v45,56,56,89,56,160v0,23,-8,40,-24,52r-52,0v-100,0,-183,-95,-248,-284r-28,-44v-119,130,-198,216,-264,248","w":846,"k":{"\\":448,"T":135}},"v":{"d":"784,-990v96,0,145,-5,188,80v-23,74,-41,90,-24,144v-57,47,-111,226,-192,528v-56,208,-147,308,-244,308v-87,0,-172,-118,-296,-332v-131,-225,-216,-352,-216,-404v0,-118,56,-151,212,-156r216,396r36,52v81,-54,143,-198,208,-424v38,-130,83,-192,112,-192","w":1005,"k":{"\\":114,"T":116}},"w":{"d":"1004,-1068v31,-25,49,-32,88,-32v65,0,110,43,136,128v-26,248,-7,264,48,632r8,112v0,131,-16,196,-48,196v-46,32,-94,48,-144,48v-98,0,-225,-91,-388,-264v-43,-46,-86,-75,-120,-96v-84,219,-151,349,-200,388v-63,51,-115,76,-156,76v-28,0,-79,-48,-124,-156v-85,-204,-104,-364,-104,-560v0,-148,36,-245,108,-292v25,-7,49,-12,84,-12v58,0,98,48,92,128r-20,280v0,51,9,87,28,108v34,-15,65,-49,84,-104v26,-74,39,-112,48,-112v74,-26,123,-47,148,-64v51,7,125,53,212,144v114,120,177,184,196,184v45,-200,-12,-406,-12,-612v0,-80,12,-120,36,-120","w":1285,"k":{"\\":79,"T":113}},"x":{"d":"757,-732v102,-94,267,-85,285,66v-170,188,-253,233,-424,348v77,65,180,146,310,243v-7,31,-7,62,0,94v-51,37,-96,55,-136,55v-69,0,-166,-54,-292,-163r-87,-52v-39,5,-105,48,-195,132v-67,62,-130,94,-191,94v-8,27,-8,37,-25,35v-22,3,-52,-41,-52,-98v0,-53,60,-132,174,-243v44,-44,63,-76,63,-90v-18,-29,-56,-74,-108,-140v-30,-38,-42,-78,-42,-114v0,-58,21,-87,56,-105r87,-45r17,0v45,0,99,65,164,195v22,28,40,42,55,42v31,0,151,-79,341,-254","w":1035,"k":{"\\":320,"T":102}},"y":{"d":"764,-1328v81,0,145,-9,180,48v27,503,40,858,40,1064r0,32r44,632v-3,264,-106,442,-312,528v-44,18,-90,24,-136,24v-169,0,-344,-99,-516,-304v-45,-54,-64,-108,-64,-156v31,-32,65,-48,100,-48v27,0,82,32,164,96v9,8,33,13,72,16r192,116v144,53,211,-24,240,-208v52,-333,14,-695,-56,-1056v-46,51,-115,153,-208,304v-85,91,-145,136,-180,136v-41,20,-108,29,-184,28v-43,0,-95,-53,-120,-168v-61,-278,-19,-481,76,-784v40,-126,140,-125,236,-44v1,86,-24,199,-80,424v-19,78,-29,180,-20,276v59,3,88,-39,168,-128v11,0,20,-33,48,-88v139,-275,220,-441,220,-508v11,-39,16,-84,16,-136v31,-27,58,-59,80,-96","w":1024,"k":{"T":135}},"z":{"d":"1056,-970v100,-10,160,49,160,120v0,125,-130,276,-400,432v-129,74,-237,131,-312,192r0,4v67,13,235,20,504,40v69,5,124,23,168,36v-10,86,-42,148,-64,144v-281,37,-603,54,-848,-4r-84,8v-105,0,-165,-31,-180,-92v0,-17,20,-64,60,-140v0,-15,56,-44,156,-104r400,-240v63,-46,108,-83,136,-112v-121,11,-309,21,-564,32v-40,-17,-60,-55,-60,-112v0,-79,43,-129,128,-152r108,16v59,0,290,-30,692,-68","w":1215,"k":{"\\":104,"T":74}},"{":{"d":"692,-1820v35,59,48,95,48,152v0,35,-85,68,-248,120v-72,23,-104,89,-104,176v0,79,47,185,140,320r16,40v0,37,-19,87,-68,140v-39,42,-89,65,-140,80r0,4v17,19,70,48,148,104v52,38,72,78,72,104v-10,42,-65,138,-140,300v-80,173,-26,296,180,336v88,17,132,33,132,48v0,44,8,130,-28,128v-12,6,-50,8,-96,8v-237,0,-379,-76,-428,-228r-8,-72v0,-75,35,-210,104,-404r8,-56v-94,-50,-170,-99,-228,-148v-39,-51,-52,-82,-52,-140v0,-81,68,-149,204,-204r40,-28v-40,-95,-60,-194,-60,-296v0,-235,76,-395,236,-460v78,-31,180,-1,272,-24","w":755},"|":{"d":"182,-1978v68,63,123,186,136,332r-8,64v49,357,24,782,24,1176v0,263,21,510,64,740v-33,86,-57,138,-72,156v-34,-2,-52,-31,-52,-44r-4,0v-17,45,-43,58,-76,28r-8,8v-24,0,-31,-35,-48,-100v-103,-392,-73,-1096,-72,-1624v0,-186,-16,-370,-36,-552v-11,-105,28,-164,120,-184r32,0","w":435},"}":{"d":"424,-792v-116,-34,-194,-109,-208,-220v8,-23,61,-95,128,-232v61,-125,40,-259,-72,-300v-158,-59,-245,-86,-252,-108v-3,-77,7,-107,52,-168v67,16,122,12,196,12v171,0,307,210,308,468v0,106,-21,207,-64,304v158,71,241,141,240,180v6,12,8,33,8,56v0,97,-84,183,-252,260r-32,24v0,15,36,135,108,360r8,100v9,189,-197,298,-440,296v-77,0,-116,-9,-116,-28v-19,-36,-13,-137,24,-128v184,-49,276,-86,276,-112v16,0,40,-37,40,-112v0,-68,-53,-192,-152,-376v-16,-30,-20,-55,-20,-72v0,-48,74,-106,196,-176v7,-10,20,-14,24,-28","w":765},"~":{"d":"520,-896v71,-78,125,-108,220,-108v47,0,127,39,240,116v71,28,92,38,148,36v11,0,19,20,24,60v-4,53,-11,80,-20,80v-33,-3,-52,29,-40,60v-3,6,-15,3,-24,4v-205,0,-308,-31,-308,-92v-94,-4,-136,74,-216,224v-34,65,-53,76,-116,76v-135,0,-257,-41,-368,-124v-17,-69,-21,-85,-20,-140v2,-79,17,-103,76,-104v30,0,101,25,212,76v28,3,52,9,84,8","w":1196},"\u00c4":{"d":"850,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824v65,8,136,-4,204,-4v51,0,76,15,76,44v11,1,16,5,16,12v0,67,-44,113,-132,136r-84,20v114,289,213,489,308,588v66,69,104,129,104,188v0,35,-16,59,-48,72v0,9,-20,17,-60,24r-24,0v-87,0,-185,-148,-320,-432v-61,-127,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-71,114,-152,292v-59,79,-102,108,-188,108v-57,0,-94,-14,-100,-44v-20,-96,-3,-108,28,-256v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm1006,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328xm849,-1983v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm1199,-1983v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","k":{"\\":102}},"\u00c5":{"d":"850,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824v65,8,136,-4,204,-4v51,0,76,15,76,44v11,1,16,5,16,12v0,67,-44,113,-132,136r-84,20v114,289,213,489,308,588v66,69,104,129,104,188v0,35,-16,59,-48,72v0,9,-20,17,-60,24r-24,0v-87,0,-185,-148,-320,-432v-61,-127,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-71,114,-152,292v-59,79,-102,108,-188,108v-57,0,-94,-14,-100,-44v-20,-96,-3,-108,28,-256v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm1006,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328xm786,-2232v96,-88,158,-120,286,-113v12,0,35,34,86,86v125,126,94,263,4,406v-49,38,-99,53,-170,53v-109,0,-193,-45,-229,-143v-32,-88,-3,-92,23,-252r0,-37xm922,-2071v11,84,49,121,122,117v21,-13,31,-33,31,-61v0,-91,-14,-137,-31,-137v-73,0,-131,12,-122,81","k":{"\\":102}},"\u00c7":{"d":"628,-1632v229,-151,367,-206,520,-196v129,8,188,49,188,132v0,87,-133,143,-384,216v-139,40,-298,152,-460,320v-154,160,-204,289,-204,468v0,195,136,331,412,388v388,80,712,-34,964,-260v42,-37,135,-122,280,-260v129,-122,248,-176,344,-176v3,6,8,9,8,20v0,103,-57,209,-172,320v0,16,-66,99,-208,236v-297,287,-645,424,-1032,424v-385,0,-640,-129,-780,-380v-69,-125,-104,-234,-104,-380v0,-285,200,-590,628,-872xm1028,505v-63,-2,-130,6,-130,-38v0,-15,24,-51,73,-107v3,-14,9,-24,8,-42v-89,-36,-269,-64,-269,-166v0,-24,37,-64,112,-121v26,-35,36,-44,34,-74v0,-5,19,-12,57,-12v51,0,77,5,77,10v-5,21,38,21,61,22v2,103,-27,168,-88,165v-2,51,71,66,215,109v56,17,72,22,72,58v0,68,-39,130,-118,186v-48,7,-83,10,-104,10"},"\u00c9":{"d":"956,-1792v83,-28,221,-39,280,8r0,32v0,147,-168,241,-504,276v-195,20,-292,35,-292,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v60,255,116,458,208,648r20,4v85,0,239,-59,468,-164v237,-108,428,-156,568,-156v99,0,148,13,148,24r0,132v0,6,-55,9,-160,32v-294,65,-550,214,-796,392v-107,78,-175,88,-288,88v-102,0,-182,-97,-252,-288v-44,-121,-111,-321,-188,-604v-47,0,-96,-20,-148,-60v-2,-68,26,-116,96,-196v21,-25,11,-40,12,-72r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92xm814,-2485r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":1515,"k":{"4":106}},"\u00d1":{"d":"1028,-1938v93,-91,260,-54,272,92v-21,61,-32,108,-32,140v-5,563,-45,1137,32,1656r0,52v0,120,-23,175,-68,180r-80,8v-137,0,-270,-117,-408,-344r-280,-488r-92,-132r-4,0v-37,116,-69,318,-84,608v-7,138,-11,208,-24,208v-35,24,-84,32,-144,32v-45,0,-67,-13,-76,-36v-29,-79,-40,-151,-40,-248v0,-90,33,-315,88,-676v11,-72,5,-216,20,-428v8,-112,36,-185,72,-228r4,4r92,0r60,-4v74,141,167,399,312,760v116,288,208,429,352,572r4,0xm632,-2247v53,-48,96,-66,165,-66v36,0,96,24,181,71v53,16,71,22,112,21v8,0,14,12,18,37v-3,33,-8,49,-15,49v-25,-2,-39,17,-30,36v-2,5,-11,3,-18,3v-155,0,-232,-19,-232,-56v-70,-2,-105,46,-163,136v-26,41,-43,46,-88,46v-101,0,-194,-25,-277,-75v-13,-43,-16,-51,-15,-86v0,-50,17,-62,57,-63v23,0,76,15,160,46v21,2,40,6,63,5","w":1335},"\u00d6":{"d":"368,-1850v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm468,-1510v-30,-2,-51,-13,-84,-12v-17,4,-45,60,-76,172v-38,137,-52,269,-52,392v0,409,108,680,308,776v187,90,298,1,384,-204v40,-97,40,-195,40,-312v0,-237,-46,-488,-180,-728v-86,-154,-155,-212,-236,-212v-43,0,-77,43,-104,128xm339,-1993v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm689,-1993v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":1255},"\u00dc":{"d":"982,-2038v26,33,63,119,104,260v80,277,116,548,116,812v0,413,-82,720,-268,896v-108,102,-233,140,-352,140v-179,0,-308,-109,-408,-316v-110,-229,-164,-517,-164,-868v0,-259,36,-489,108,-688v7,-5,48,-20,124,-20v69,0,117,35,104,100r-44,224v-15,115,-24,229,-24,344v0,507,101,830,304,968r48,12v67,0,145,-63,212,-200v67,-137,84,-332,84,-556v0,-408,-54,-728,-148,-964v-27,-68,-3,-144,84,-144r120,0xm209,-1993v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm559,-1993v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":1235},"\u00e1":{"d":"712,-1038v103,-77,256,-90,256,80v0,49,23,199,84,448v35,143,102,257,172,356v55,78,68,112,68,180v0,32,-20,48,-60,48v-39,24,-65,36,-76,36v-74,-26,-144,-83,-200,-176v-37,-63,-89,-190,-164,-376r-24,-32v-98,153,-180,271,-252,348v-87,93,-189,136,-300,136v-108,0,-179,-56,-212,-168r-4,-68v0,-151,86,-350,292,-560v109,-111,261,-183,420,-252xm284,-266v2,2,3,5,8,4v65,0,121,-62,196,-168v111,-156,180,-265,180,-348v-2,-3,-6,-6,-12,-4v-46,13,-137,80,-256,212v-83,91,-116,197,-116,304xm794,-1672r88,120v-20,113,-55,181,-104,204v-158,127,-256,229,-256,308v0,24,-47,36,-140,36r-24,4v-22,-34,-28,-61,-28,-104v0,-68,72,-164,208,-296v42,-41,89,-117,148,-220v32,-35,68,-52,108,-52","w":1295},"\u00e0":{"d":"712,-1038v103,-77,256,-90,256,80v0,49,23,199,84,448v35,143,102,257,172,356v55,78,68,112,68,180v0,32,-20,48,-60,48v-39,24,-65,36,-76,36v-74,-26,-144,-83,-200,-176v-37,-63,-89,-190,-164,-376r-24,-32v-98,153,-180,271,-252,348v-87,93,-189,136,-300,136v-108,0,-179,-56,-212,-168r-4,-68v0,-151,86,-350,292,-560v109,-111,261,-183,420,-252xm284,-266v2,2,3,5,8,4v65,0,121,-62,196,-168v111,-156,180,-265,180,-348v-2,-3,-6,-6,-12,-4v-46,13,-137,80,-256,212v-83,91,-116,197,-116,304xm566,-1666v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":1295,"k":{"\\":89}},"\u00e2":{"d":"712,-1038v103,-77,256,-90,256,80v0,49,23,199,84,448v35,143,102,257,172,356v55,78,68,112,68,180v0,32,-20,48,-60,48v-39,24,-65,36,-76,36v-74,-26,-144,-83,-200,-176v-37,-63,-89,-190,-164,-376r-24,-32v-98,153,-180,271,-252,348v-87,93,-189,136,-300,136v-108,0,-179,-56,-212,-168r-4,-68v0,-151,86,-350,292,-560v109,-111,261,-183,420,-252xm284,-266v2,2,3,5,8,4v65,0,121,-62,196,-168v111,-156,180,-265,180,-348v-2,-3,-6,-6,-12,-4v-46,13,-137,80,-256,212v-83,91,-116,197,-116,304xm524,-1640v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-20,3v-17,-27,-22,-49,-22,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","w":1295,"k":{"\\":121}},"\u00e4":{"d":"712,-1038v103,-77,256,-90,256,80v0,49,23,199,84,448v35,143,102,257,172,356v55,78,68,112,68,180v0,32,-20,48,-60,48v-39,24,-65,36,-76,36v-74,-26,-144,-83,-200,-176v-37,-63,-89,-190,-164,-376r-24,-32v-98,153,-180,271,-252,348v-87,93,-189,136,-300,136v-108,0,-179,-56,-212,-168r-4,-68v0,-151,86,-350,292,-560v109,-111,261,-183,420,-252xm284,-266v2,2,3,5,8,4v65,0,121,-62,196,-168v111,-156,180,-265,180,-348v-2,-3,-6,-6,-12,-4v-46,13,-137,80,-256,212v-83,91,-116,197,-116,304xm439,-1203v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm789,-1203v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":1295,"k":{"\\":89}},"\u00e3":{"d":"742,-1038v103,-77,256,-90,256,80v0,49,23,199,84,448v35,143,102,257,172,356v55,78,68,112,68,180v0,32,-20,48,-60,48v-39,24,-65,36,-76,36v-74,-26,-144,-83,-200,-176v-37,-63,-89,-190,-164,-376r-24,-32v-98,153,-180,271,-252,348v-87,93,-189,136,-300,136v-108,0,-179,-56,-212,-168r-4,-68v0,-151,86,-350,292,-560v109,-111,261,-183,420,-252xm314,-266v2,2,3,5,8,4v65,0,121,-62,196,-168v111,-156,180,-265,180,-348v-2,-3,-6,-6,-12,-4v-46,13,-137,80,-256,212v-83,91,-116,197,-116,304xm622,-1417v53,-48,96,-66,165,-66v36,0,96,24,181,71v53,16,71,22,112,21v8,0,14,12,18,37v-3,33,-8,49,-15,49v-25,-2,-39,17,-30,36v-2,5,-11,3,-18,3v-155,0,-232,-19,-232,-56v-70,-2,-105,46,-163,136v-26,41,-43,46,-88,46v-101,0,-194,-25,-277,-75v-13,-43,-16,-51,-15,-86v0,-50,17,-62,57,-63v23,0,76,15,160,46v21,2,40,6,63,5","w":1295},"\u00e5":{"d":"712,-1038v103,-77,256,-90,256,80v0,49,23,199,84,448v35,143,102,257,172,356v55,78,68,112,68,180v0,32,-20,48,-60,48v-39,24,-65,36,-76,36v-74,-26,-144,-83,-200,-176v-37,-63,-89,-190,-164,-376r-24,-32v-98,153,-180,271,-252,348v-87,93,-189,136,-300,136v-108,0,-179,-56,-212,-168r-4,-68v0,-151,86,-350,292,-560v109,-111,261,-183,420,-252xm284,-266v2,2,3,5,8,4v65,0,121,-62,196,-168v111,-156,180,-265,180,-348v-2,-3,-6,-6,-12,-4v-46,13,-137,80,-256,212v-83,91,-116,197,-116,304xm416,-1612v96,-88,158,-120,286,-113v12,0,35,34,86,86v125,126,94,263,4,406v-49,38,-99,53,-170,53v-109,0,-193,-45,-229,-143v-32,-88,-3,-92,23,-252r0,-37xm552,-1451v11,84,49,121,122,117v21,-13,31,-33,31,-61v0,-91,-14,-137,-31,-137v-73,0,-131,12,-122,81","w":1295},"\u00e7":{"d":"252,-884v109,-88,238,-89,356,-20v-5,11,-8,25,-8,44v7,25,23,41,20,76v-23,47,-72,84,-148,108v-78,25,-132,55,-152,96v-36,75,-44,112,-44,176v0,94,71,140,192,140v89,0,243,-51,464,-148v100,-44,148,-61,192,-60v45,46,69,81,72,104v-3,14,-43,58,-120,132v-20,37,-40,56,-60,56v-247,147,-457,220,-632,220v-188,0,-313,-89,-376,-268v-35,-290,36,-488,244,-656xm568,505v-63,-2,-130,6,-130,-38v0,-15,24,-51,73,-107v3,-14,9,-24,8,-42v-89,-36,-269,-64,-269,-166v0,-24,37,-64,112,-121v26,-35,36,-44,34,-74v0,-5,19,-12,57,-12v51,0,77,5,77,10v-5,21,38,21,61,22v2,103,-27,168,-88,165v-2,51,71,66,215,109v56,17,72,22,72,58v0,68,-39,130,-118,186v-48,7,-83,10,-104,10","w":1185,"k":{"\\":609,"T":107,"9":168,"4":137}},"\u00e9":{"d":"128,-988v270,-139,455,-83,584,196v25,54,24,101,24,132v0,134,-104,242,-312,324r0,4v55,93,127,140,216,140v120,0,241,-104,388,-292v81,-103,140,-142,200,-140v24,15,-13,80,20,80v17,0,29,-15,36,-44v4,0,10,-2,8,4v0,45,-43,118,-120,224v-15,21,-21,49,-28,80v-37,7,-56,22,-56,44v-73,122,-183,213,-332,260v-59,19,-96,16,-156,16v-195,0,-389,-141,-580,-424r-20,-356v0,-132,47,-206,128,-248xm248,-672v0,80,23,136,68,168v31,0,78,-24,140,-72v40,-111,5,-214,-92,-248v-38,-13,-98,-2,-92,36v-16,27,-24,66,-24,116xm534,-1605r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":1025},"\u00e8":{"d":"128,-988v270,-139,455,-83,584,196v25,54,24,101,24,132v0,134,-104,242,-312,324r0,4v55,93,127,140,216,140v120,0,241,-104,388,-292v81,-103,140,-142,200,-140v24,15,-13,80,20,80v17,0,29,-15,36,-44v4,0,10,-2,8,4v0,45,-43,118,-120,224v-15,21,-21,49,-28,80v-37,7,-56,22,-56,44v-73,122,-183,213,-332,260v-59,19,-96,16,-156,16v-195,0,-389,-141,-580,-424r-20,-356v0,-132,47,-206,128,-248xm248,-672v0,80,23,136,68,168v31,0,78,-24,140,-72v40,-111,5,-214,-92,-248v-38,-13,-98,-2,-92,36v-16,27,-24,66,-24,116xm276,-1576v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":1025,"k":{"\\":166}},"\u00ea":{"d":"98,-988v270,-139,455,-83,584,196v25,54,24,101,24,132v0,134,-104,242,-312,324r0,4v55,93,127,140,216,140v120,0,241,-104,388,-292v81,-103,140,-142,200,-140v24,15,-13,80,20,80v17,0,29,-15,36,-44v4,0,10,-2,8,4v0,45,-43,118,-120,224v-15,21,-21,49,-28,80v-37,7,-56,22,-56,44v-73,122,-183,213,-332,260v-59,19,-96,16,-156,16v-195,0,-389,-141,-580,-424r-20,-356v0,-132,47,-206,128,-248xm218,-672v0,80,23,136,68,168v31,0,78,-24,140,-72v40,-111,5,-214,-92,-248v-38,-13,-98,-2,-92,36v-16,27,-24,66,-24,116xm294,-1620v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-20,3v-17,-27,-22,-49,-22,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","w":1025,"k":{"\\":133}},"\u00eb":{"d":"128,-988v270,-139,455,-83,584,196v25,54,24,101,24,132v0,134,-104,242,-312,324r0,4v55,93,127,140,216,140v120,0,241,-104,388,-292v81,-103,140,-142,200,-140v24,15,-13,80,20,80v17,0,29,-15,36,-44v4,0,10,-2,8,4v0,45,-43,118,-120,224v-15,21,-21,49,-28,80v-37,7,-56,22,-56,44v-73,122,-183,213,-332,260v-59,19,-96,16,-156,16v-195,0,-389,-141,-580,-424r-20,-356v0,-132,47,-206,128,-248xm248,-672v0,80,23,136,68,168v31,0,78,-24,140,-72v40,-111,5,-214,-92,-248v-38,-13,-98,-2,-92,36v-16,27,-24,66,-24,116xm159,-1163v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm509,-1163v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":1025,"k":{"\\":134}},"\u00ed":{"d":"174,-1116v53,0,80,13,80,40v66,328,47,729,40,1108v-21,16,-53,28,-96,36v-13,10,-19,26,-36,32v-23,0,-45,-17,-64,-52v0,16,-3,24,-8,24v-40,-35,-69,-113,-60,-232r36,-492v-5,-70,-8,-169,-8,-296v0,-112,39,-168,116,-168xm384,-1645r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":385},"\u00ec":{"d":"174,-1116v53,0,80,13,80,40v66,328,47,729,40,1108v-21,16,-53,28,-96,36v-13,10,-19,26,-36,32v-23,0,-45,-17,-64,-52v0,16,-3,24,-8,24v-40,-35,-69,-113,-60,-232r36,-492v-5,-70,-8,-169,-8,-296v0,-112,39,-168,116,-168xm116,-1606v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":385},"\u00ee":{"d":"224,-1116v53,0,80,13,80,40v66,328,47,729,40,1108v-21,16,-53,28,-96,36v-13,10,-19,26,-36,32v-23,0,-45,-17,-64,-52v0,16,-3,24,-8,24v-40,-35,-69,-113,-60,-232r36,-492v-5,-70,-8,-169,-8,-296v0,-112,39,-168,116,-168xm164,-1630v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-19,3v-18,-27,-23,-49,-23,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","w":480},"\u00ef":{"d":"174,-1116v53,0,80,13,80,40v66,328,47,729,40,1108v-21,16,-53,28,-96,36v-13,10,-19,26,-36,32v-23,0,-45,-17,-64,-52v0,16,-3,24,-8,24v-40,-35,-69,-113,-60,-232r36,-492v-5,-70,-8,-169,-8,-296v0,-112,39,-168,116,-168xm39,-1243v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,102,-111,128xm389,-1243v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":385},"\u00f1":{"d":"694,-1166v85,22,128,37,128,44v39,90,77,190,96,304v63,379,99,625,128,736v7,0,15,25,20,76v5,55,-31,76,-96,76v-85,0,-128,-16,-128,-48v-105,-209,-132,-555,-184,-828r-4,0v-93,115,-197,339,-332,664v-46,112,-82,163,-88,164v-12,-36,-146,14,-136,-52r-48,-84v37,-134,56,-369,56,-704v57,-33,86,-53,88,-60v0,-13,5,-20,16,-20v100,0,148,29,148,44v0,13,-17,30,-8,40r4,0v51,-48,94,-117,144,-196v68,-107,139,-156,196,-156xm462,-1557v53,-48,96,-66,165,-66v36,0,96,24,181,71v53,16,71,22,112,21v8,0,14,12,18,37v-3,33,-8,49,-15,49v-25,-2,-39,17,-30,36v-2,5,-11,3,-18,3v-155,0,-232,-19,-232,-56v-70,-2,-105,46,-163,136v-26,41,-43,46,-88,46v-101,0,-194,-25,-277,-75v-13,-43,-16,-51,-15,-86v0,-50,17,-62,57,-63v23,0,76,15,160,46v21,2,40,6,63,5","w":1035},"\u00f3":{"d":"462,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm339,-151v98,-39,180,-166,180,-304v0,-80,-29,-147,-88,-201v-44,0,-82,29,-121,84v-17,23,-31,34,-38,36v7,71,-4,148,-4,222v0,109,31,163,71,163xm574,-1505r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":795},"\u00f2":{"d":"532,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm409,-151v98,-39,180,-166,180,-304v0,-80,-29,-147,-88,-201v-44,0,-82,29,-121,84v-17,23,-31,34,-38,36v7,71,-4,148,-4,222v0,109,31,163,71,163xm376,-1466v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":795},"\u00f4":{"d":"462,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm339,-151v98,-39,180,-166,180,-304v0,-80,-29,-147,-88,-201v-44,0,-82,29,-121,84v-17,23,-31,34,-38,36v7,71,-4,148,-4,222v0,109,31,163,71,163xm324,-1500v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-20,3v-17,-27,-22,-49,-22,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","w":795},"\u00f6":{"d":"462,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm339,-151v98,-39,180,-166,180,-304v0,-80,-29,-147,-88,-201v-44,0,-82,29,-121,84v-17,23,-31,34,-38,36v7,71,-4,148,-4,222v0,109,31,163,71,163xm199,-983v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm549,-983v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":795,"k":{"T":117}},"\u00f5":{"d":"462,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm339,-151v98,-39,180,-166,180,-304v0,-80,-29,-147,-88,-201v-44,0,-82,29,-121,84v-17,23,-31,34,-38,36v7,71,-4,148,-4,222v0,109,31,163,71,163xm332,-1277v53,-48,96,-66,165,-66v36,0,96,24,181,71v53,16,71,22,112,21v8,0,14,12,18,37v-3,33,-8,49,-15,49v-25,-2,-39,17,-30,36v-2,5,-11,3,-18,3v-155,0,-232,-19,-232,-56v-70,-2,-105,46,-163,136v-26,41,-43,46,-88,46v-101,0,-193,-25,-276,-75v-14,-43,-17,-51,-16,-86v0,-50,17,-62,57,-63v23,0,76,15,160,46v21,2,40,6,63,5","w":795},"\u00fa":{"d":"266,2v-7,-5,-75,27,-128,40v-57,0,-94,-62,-104,-188v-19,-235,12,-442,120,-588v67,-90,137,-63,208,28v0,39,-23,132,-68,280v-9,30,-13,76,-12,124v61,-30,114,-110,164,-240v64,-166,109,-248,132,-248v78,0,137,1,172,60v23,249,62,452,116,608v45,56,56,89,56,160v0,23,-8,40,-24,52r-52,0v-100,0,-183,-95,-248,-284r-28,-44v-119,130,-198,216,-264,248xm346,-1426v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":955,"k":{"\\":192}},"\u00f9":{"d":"266,2v-7,-5,-75,27,-128,40v-57,0,-94,-62,-104,-188v-19,-235,12,-442,120,-588v67,-90,137,-63,208,28v0,39,-23,132,-68,280v-9,30,-13,76,-12,124v61,-30,114,-110,164,-240v64,-166,109,-248,132,-248v78,0,137,1,172,60v23,249,62,452,116,608v45,56,56,89,56,160v0,23,-8,40,-24,52r-52,0v-100,0,-183,-95,-248,-284r-28,-44v-119,130,-198,216,-264,248xm624,-1465r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":955},"\u00fb":{"d":"276,2v-7,-5,-75,27,-128,40v-57,0,-94,-62,-104,-188v-19,-235,12,-442,120,-588v67,-90,137,-63,208,28v0,39,-23,132,-68,280v-9,30,-13,76,-12,124v61,-30,114,-110,164,-240v64,-166,109,-248,132,-248v78,0,137,1,172,60v23,249,62,452,116,608v45,56,56,89,56,160v0,23,-8,40,-24,52r-52,0v-100,0,-183,-95,-248,-284r-28,-44v-119,130,-198,216,-264,248xm386,-1560v44,-47,81,-56,156,-52v48,91,146,248,304,464v40,55,23,72,8,124v1,12,12,28,4,36v-9,-2,-8,-11,-32,-16r-64,20v-21,0,-76,-40,-148,-132v-53,-67,-93,-129,-136,-172v-158,127,-256,229,-256,308v0,24,-47,36,-140,36r-24,4v-22,-34,-28,-61,-28,-104v0,-68,72,-164,208,-296v42,-41,89,-117,148,-220","w":955},"\u00fc":{"d":"266,2v-7,-5,-75,27,-128,40v-57,0,-94,-62,-104,-188v-19,-235,12,-442,120,-588v67,-90,137,-63,208,28v0,39,-23,132,-68,280v-9,30,-13,76,-12,124v61,-30,114,-110,164,-240v64,-166,109,-248,132,-248v78,0,137,1,172,60v23,249,62,452,116,608v45,56,56,89,56,160v0,23,-8,40,-24,52r-52,0v-100,0,-183,-95,-248,-284r-28,-44v-119,130,-198,216,-264,248xm279,-973v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm629,-973v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":955,"k":{"\\":129,"T":194}},"\u00a2":{"d":"740,-1232v91,-16,152,9,146,116r-11,207r82,-4v101,0,166,22,197,65v11,45,-22,77,-85,108v-42,21,-111,24,-200,24r-4,85r0,105v0,122,9,183,27,183v234,12,281,-54,642,-54v14,0,23,21,27,64v0,5,-16,21,-48,48r7,17v-171,92,-221,89,-370,112v-17,29,-19,33,-47,27r-38,7r-3,-17v-44,28,-92,24,-156,24v-23,101,34,224,-24,305v-104,-9,-156,-21,-156,-38v-54,-30,-81,-118,-81,-264v0,-39,-14,-37,-78,-51v-241,-53,-401,-105,-472,-163v-66,-54,-95,-95,-95,-112v0,-55,26,-129,95,-210v73,-86,214,-146,407,-193r126,-38v-2,-2,-5,-2,-4,-7v0,-63,19,-163,58,-302v38,3,52,-4,58,-44xm268,-516r0,7v188,91,219,95,346,115v9,-91,-2,-277,-3,-251v-157,0,-271,43,-343,129","w":1545,"k":{"\\":497,"T":89}},"\u00a3":{"d":"104,-384v-12,-41,-44,-64,-80,-84v1,-12,8,-18,12,-28r-12,-20v123,-99,241,-148,356,-148v123,0,177,-47,172,-128v-229,29,-366,44,-412,44r-60,0r-80,-100v0,-36,35,-81,108,-128v44,-29,177,-51,388,-100v90,-21,132,-56,132,-80r76,-240v26,-192,51,-288,76,-288v43,-53,89,-72,164,-72v63,0,105,58,104,152v0,49,-40,148,-108,300v-18,40,-20,71,-20,100r596,-108v78,-4,108,23,108,100v0,124,-126,201,-376,236v-180,25,-304,58,-376,84v-40,14,-47,63,-44,120v357,-67,567,-100,632,-100v19,27,28,61,28,100v0,109,-119,179,-356,216r-304,48v0,47,29,99,88,156v68,37,131,52,212,52v180,0,376,-42,556,-168v128,-89,176,-156,232,-152v26,2,34,2,32,20v-4,55,-21,100,24,128v-93,122,-196,209,-304,272v-225,130,-435,200,-636,200v-233,0,-397,-140,-492,-420v-83,0,-228,12,-436,36","w":1945,"k":{"\\":109,"T":80,"7":58}},"\u00a7":{"w":1139},"\u2022":{"d":"43,-882v96,-88,158,-120,286,-113v12,0,35,34,86,86v125,126,94,263,4,406v-49,38,-99,53,-170,53v-109,0,-193,-45,-229,-143v-32,-88,-3,-92,23,-252r0,-37xm179,-731v11,84,49,121,122,117v21,-13,31,-33,31,-61v0,-91,-14,-137,-31,-137v-73,0,-131,12,-122,81","w":505},"\u00b6":{"w":1100},"\u00df":{"d":"589,-2081r120,0v125,0,218,101,278,302r-2,106v-33,181,-145,353,-336,517v-11,29,-32,44,-32,86v0,63,115,176,327,360v107,93,139,175,139,303v0,117,-70,222,-224,270v-195,61,-351,-20,-465,-172v-19,-83,5,-138,70,-189r8,0v61,52,130,78,207,78v71,0,77,-55,77,-130v0,-38,-58,-127,-185,-257v-126,-128,-194,-223,-194,-295v0,-60,102,-185,272,-401v91,-116,71,-258,-102,-287v-71,25,-145,98,-200,229v-115,274,-124,380,-124,646v0,356,45,681,106,981v16,77,-13,124,-94,124r-115,0v-85,-87,-128,-379,-128,-875v0,-104,-12,-214,-9,-328v15,-561,174,-909,472,-1044","w":1052},"\u00ae":{"d":"376,-1456v127,-27,280,-50,456,-49v275,0,498,138,673,413v120,189,171,323,171,508v0,127,-42,250,-134,364v-100,124,-402,220,-667,220v-231,0,-437,-65,-606,-208v-189,-160,-269,-340,-269,-581v0,-216,58,-407,193,-557v68,-75,136,-100,183,-110xm382,-1205v-95,123,-143,262,-143,437v0,223,106,405,333,517v123,61,217,67,346,67v137,0,265,-39,388,-113v82,-49,162,-191,162,-345v0,-161,-74,-330,-226,-505v-106,-122,-240,-181,-398,-181v-247,0,-399,42,-462,123xm756,-567v-3,29,25,77,25,162v0,43,-24,64,-73,64v-55,-35,-63,-167,-83,-246v-49,-1,-133,9,-133,-34v0,-42,41,-66,107,-89v-12,-47,-14,-199,-13,-300v-50,-5,-136,35,-136,-31v0,-37,59,-61,159,-66v14,-53,120,-61,118,7v42,0,181,31,414,103v49,15,70,33,70,58v0,96,-67,169,-199,223v-52,21,-93,44,-125,63v77,37,205,93,387,161v109,40,182,65,216,82v6,50,-44,73,-105,73v-75,0,-225,-64,-458,-175v-89,-43,-149,-55,-171,-55xm722,-713v188,-49,290,-73,363,-187v-240,-78,-218,-82,-382,-95v-11,91,-5,196,19,282","w":1665},"\u00a9":{"d":"376,-1456v127,-27,280,-50,456,-49v275,0,498,138,673,413v120,189,171,323,171,508v0,127,-42,250,-134,364v-100,124,-402,220,-667,220v-231,0,-437,-65,-606,-208v-189,-160,-269,-340,-269,-581v0,-216,58,-407,193,-557v68,-75,136,-100,183,-110xm382,-1205v-95,123,-143,262,-143,437v0,223,106,405,333,517v123,61,217,67,346,67v137,0,265,-39,388,-113v82,-49,162,-191,162,-345v0,-161,-74,-330,-226,-505v-106,-122,-240,-181,-398,-181v-247,0,-399,42,-462,123xm691,-1013v63,-44,131,-43,196,-3v-11,22,2,42,9,62v0,24,-30,50,-91,73v-59,21,-89,42,-89,67v-42,69,-32,172,76,172v55,0,138,-24,248,-71r31,0v81,0,122,13,122,40v-22,55,-103,109,-242,165v-180,72,-351,62,-413,-110v-25,-171,23,-303,153,-395","w":1665},"\u2122":{"d":"891,-1645v17,-2,33,-4,52,-3v15,17,31,48,43,93v14,54,41,133,77,237v52,150,94,257,138,315v20,27,0,59,-34,59v-35,0,-61,-40,-93,-112v-23,-52,-90,-233,-148,-381v-13,50,-24,133,-45,246v-21,110,-38,181,-38,215v-9,3,-13,8,-13,17v0,3,-13,9,-41,13v-17,2,-25,-1,-30,-16v-35,-125,-43,-354,-108,-452v-22,27,-43,267,-79,325v-12,11,-22,14,-41,14v-35,0,-26,-35,-30,-58v4,-62,2,-79,-8,-148v-4,-24,20,-40,44,-33v9,-19,21,-70,44,-152v17,-61,45,-90,76,-90v39,0,69,53,99,157v8,28,22,89,42,173v37,-81,64,-375,93,-419xm437,-1543v41,-6,103,-9,104,31v1,29,-62,51,-180,63r-62,0v-21,146,2,269,2,421v0,40,-48,34,-68,38v-36,-111,-33,-298,-29,-445v-52,-17,-134,-1,-200,-4v-40,-2,-54,-2,-54,-24v0,-17,11,-32,32,-46v131,-24,301,-12,455,-34","w":1040},"\u00b4":{"d":"494,-1972r88,120v-20,113,-55,181,-104,204v-158,127,-256,229,-256,308v0,24,-47,36,-140,36r-24,4v-22,-34,-28,-61,-28,-104v0,-68,72,-164,208,-296v42,-41,89,-117,148,-220v32,-35,68,-52,108,-52","w":682},"\u00c6":{"d":"860,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824r44,4r-4,644v-69,-123,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-58,121,-152,292v-84,152,-174,218,-234,218v-61,0,-120,-9,-124,-44r-8,-64v47,-101,82,-201,106,-302v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm1016,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328xm2066,-1822v83,-28,221,-39,280,8r0,32v0,147,-168,241,-504,276v-195,20,-292,35,-292,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v60,255,116,458,208,648r20,4v85,0,239,-59,468,-164v237,-108,428,-156,568,-156v99,0,148,13,148,24r0,132v0,6,-55,9,-160,32v-294,65,-550,214,-796,392v-107,78,-175,88,-288,88v-102,0,-182,-97,-252,-288v-44,-121,-111,-321,-188,-604v-47,0,-96,-20,-148,-60v-4,-59,26,-70,96,-26v12,-174,9,-165,12,-242r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92","w":2650},"\u00d8":{"d":"368,-1850v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm468,-1510v-30,-2,-51,-13,-84,-12v-17,4,-45,60,-76,172v-38,137,-52,269,-52,392v0,409,108,680,308,776v187,90,298,1,384,-204v40,-97,40,-195,40,-312v0,-237,-46,-488,-180,-728v-86,-154,-155,-212,-236,-212v-43,0,-77,43,-104,128xm1124,-1700v53,-90,129,-111,186,-20v0,85,-30,186,-90,304v-45,49,-94,114,-138,200v-12,24,-218,296,-608,824v-132,178,-217,333,-276,452v-75,41,-98,61,-120,60v-19,-10,-11,-47,-6,-68r-36,8v-14,-8,-26,-26,-18,-40v-9,0,-19,-9,-18,-24v34,-122,138,-340,354,-624r509,-668v135,-188,215,-327,261,-404","w":1255},"\u00a5":{"d":"784,-1910v96,0,145,-5,188,80v-23,74,-41,90,-24,144v-57,47,-111,226,-192,528v-56,208,-147,308,-244,308v-87,0,-172,-118,-296,-332v-131,-225,-216,-352,-216,-404v0,-118,56,-151,212,-156r216,396r36,52v81,-54,143,-198,208,-424v38,-130,83,-192,112,-192xm78,-844v45,-18,123,-20,196,-20v127,0,371,15,732,44v49,81,20,164,-56,220r-640,-32r-232,12v-64,-1,-88,-24,-88,-80v0,-53,29,-101,88,-144xm78,-494v45,-18,123,-20,196,-20v127,0,371,15,732,44v49,81,20,164,-56,220r-640,-32r-232,12v-64,-1,-88,-24,-88,-80v0,-53,29,-101,88,-144xm378,10v-18,-45,-20,-123,-20,-196v0,-127,15,-371,44,-732v81,-49,164,-20,220,56r-32,640r12,232v-1,64,-24,88,-80,88v-53,0,-101,-29,-144,-88","w":1005},"\u00e6":{"d":"712,-963v98,-59,256,-78,256,65v0,39,23,161,84,362v35,116,101,207,172,288v54,62,68,89,68,145v0,26,-20,39,-60,39v-39,19,-65,29,-76,29v-74,-21,-144,-66,-200,-142v-37,-50,-89,-154,-164,-304r-24,-26v-98,123,-180,219,-252,281v-87,75,-189,110,-300,110v-108,0,-179,-45,-212,-136v-1,-18,-4,-35,-4,-55v0,-122,88,-284,292,-452v111,-92,261,-148,420,-204xm264,-328v70,13,128,-49,204,-135v113,-128,180,-218,180,-286v-2,-3,-7,-3,-12,-3v-46,11,-136,65,-256,174v-82,74,-116,162,-116,250xm918,-1018v270,-139,455,-83,584,196v25,54,24,101,24,132v0,134,-104,242,-312,324r0,4v55,93,127,140,216,140v120,0,241,-104,388,-292v81,-103,140,-142,200,-140v24,15,-13,80,20,80v17,0,29,-15,36,-44v4,0,10,-2,8,4v0,45,-43,118,-120,224v-15,21,-21,49,-28,80v-37,7,-56,22,-56,44v-73,122,-183,213,-332,260v-59,19,-96,16,-156,16v-195,0,-389,-141,-580,-424r-20,-356v0,-132,47,-206,128,-248xm1038,-702v0,80,23,136,68,168v31,0,78,-24,140,-72v40,-111,5,-214,-92,-248v-38,-13,-98,-2,-92,36v-16,27,-24,66,-24,116","w":1750,"k":{"\\":72}},"\u00f8":{"d":"472,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm335,-95v128,-46,245,-189,245,-362v0,-95,-40,-175,-120,-239v-60,0,-113,35,-165,100v-23,28,-43,40,-52,43v11,82,-5,177,-5,264v0,130,42,194,97,194xm647,-872v30,-51,73,-63,106,-11v0,48,-17,105,-51,172v-25,28,-53,65,-78,114v-7,14,-124,168,-345,467v-75,101,-124,188,-157,255v-43,24,-55,36,-68,35v-11,-6,-6,-27,-3,-39v-16,8,-39,-1,-31,-18v-6,0,-12,-6,-10,-14v18,-69,79,-192,201,-353r288,-379v77,-107,122,-185,148,-229","w":795,"k":{"\\":146,"T":85}},"\u00bf":{"d":"272,-230v-13,62,458,216,600,216v41,0,97,-23,168,-68v80,-19,125,31,128,132v0,29,-31,70,-92,124v-5,21,-17,32,-36,32v-407,0,-721,-13,-972,-244v-48,-44,-68,-75,-68,-84v0,-253,177,-413,532,-480r284,-52v-29,-230,-44,-363,-44,-400v-2,-80,9,-165,36,-156v40,-38,89,-63,148,-76v12,3,45,30,100,80r-8,72v0,73,45,230,100,480v26,117,-7,216,-88,264v-489,43,-751,96,-788,160xm1012,-1854v0,107,-51,176,-156,200v-79,-1,-116,-37,-116,-124v0,-84,36,-144,108,-180r52,-8v75,9,112,46,112,112","w":1165},"\u00a1":{"d":"178,170r-78,-68v-3,-388,17,-501,54,-1228v11,-221,20,-332,44,-332v41,-38,69,-61,129,-57v81,6,94,115,94,230v0,63,-21,264,-54,606v-19,194,-25,348,-23,460r6,301v-60,64,-97,71,-172,88xm303,-1763v-62,2,-112,-40,-112,-104v0,-64,47,-106,142,-126r51,0v40,31,51,61,51,116v0,62,-23,97,-68,104","w":569},"\u00ab":{"d":"576,-475v22,-4,444,444,411,417v2,66,-28,103,-90,118v-5,0,-32,-20,-75,-65v-149,-157,-254,-271,-329,-321v-64,-43,-88,-84,-88,-168v0,-39,26,-84,81,-131v122,-103,244,-194,363,-277v42,23,44,93,44,156v0,11,-19,32,-58,62v-129,96,-216,164,-259,205r0,4xm171,-505v22,-4,444,444,411,417v2,66,-28,103,-90,118v-5,0,-32,-20,-75,-65v-149,-157,-254,-271,-329,-321v-64,-43,-88,-84,-88,-168v0,-39,26,-84,81,-131v122,-103,244,-194,363,-277v42,23,57,95,43,156v0,11,-18,33,-57,62v-129,97,-216,164,-259,205r0,4","w":991},"\u00bb":{"d":"138,-902v119,83,243,172,363,277v65,57,81,87,81,159v0,61,-32,103,-88,140v-75,50,-180,164,-329,321v-43,45,-70,65,-75,65v-62,-15,-92,-53,-90,-118v5,-10,80,-93,228,-246v112,-115,174,-171,183,-171r0,-4v-43,-41,-133,-106,-259,-205v-60,-48,-62,-39,-62,-106v0,-53,16,-91,48,-112xm543,-932v119,83,243,172,363,277v65,57,81,87,81,159v0,61,-32,103,-88,140v-75,50,-180,164,-329,321v-43,45,-70,65,-75,65v-62,-15,-92,-53,-90,-118v5,-10,80,-93,228,-246v112,-115,174,-171,183,-171r0,-4v-43,-41,-132,-105,-259,-205v-60,-47,-62,-40,-62,-106v0,-53,16,-91,48,-112","w":991},"\u00c0":{"d":"850,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824v65,8,136,-4,204,-4v51,0,76,15,76,44v11,1,16,5,16,12v0,67,-44,113,-132,136r-84,20v114,289,213,489,308,588v66,69,104,129,104,188v0,35,-16,59,-48,72v0,9,-20,17,-60,24r-24,0v-87,0,-185,-148,-320,-432v-61,-127,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-71,114,-152,292v-59,79,-102,108,-188,108v-57,0,-94,-14,-100,-44v-20,-96,-3,-108,28,-256v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm1006,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328xm866,-2446v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","k":{"\\":102}},"\u00c3":{"d":"850,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824v65,8,136,-4,204,-4v51,0,76,15,76,44v11,1,16,5,16,12v0,67,-44,113,-132,136r-84,20v114,289,213,489,308,588v66,69,104,129,104,188v0,35,-16,59,-48,72v0,9,-20,17,-60,24r-24,0v-87,0,-185,-148,-320,-432v-61,-127,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-71,114,-152,292v-59,79,-102,108,-188,108v-57,0,-94,-14,-100,-44v-20,-96,-3,-108,28,-256v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm1006,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328xm852,-2167v53,-48,96,-66,165,-66v36,0,96,24,181,71v53,16,71,22,112,21v8,0,14,12,18,37v-3,33,-8,49,-15,49v-25,-2,-39,17,-30,36v-2,5,-11,3,-18,3v-155,0,-232,-19,-232,-56v-70,-2,-105,46,-163,136v-26,41,-43,46,-88,46v-101,0,-194,-25,-277,-75v-13,-43,-16,-51,-15,-86v0,-50,17,-62,57,-63v23,0,76,15,160,46v21,2,40,6,63,5","k":{"\\":102}},"\u00d5":{"d":"368,-1850v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm468,-1510v-30,-2,-51,-13,-84,-12v-17,4,-45,60,-76,172v-38,137,-52,269,-52,392v0,409,108,680,308,776v187,90,298,1,384,-204v40,-97,40,-195,40,-312v0,-237,-46,-488,-180,-728v-86,-154,-155,-212,-236,-212v-43,0,-77,43,-104,128xm392,-2247v53,-48,96,-66,165,-66v36,0,96,24,181,71v53,16,71,22,112,21v8,0,14,12,18,37v-3,33,-8,49,-15,49v-25,-2,-39,17,-30,36v-2,5,-11,3,-18,3v-155,0,-232,-19,-232,-56v-70,-2,-105,46,-163,136v-26,41,-43,46,-88,46v-101,0,-194,-25,-277,-75v-13,-43,-16,-51,-15,-86v0,-50,17,-62,57,-63v23,0,76,15,160,46v21,2,40,6,63,5","w":1255},"\u0152":{"d":"1626,-1822v83,-28,221,-39,280,8r0,32v0,147,-168,241,-504,276v-195,20,-292,35,-292,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v60,255,116,458,208,648r20,4v85,0,239,-59,468,-164v237,-108,428,-156,568,-156v99,0,148,13,148,24r0,132v0,6,-55,9,-160,32v-294,65,-550,214,-796,392v-107,78,-175,88,-288,88v-102,0,-182,-97,-252,-288v-44,-121,-111,-321,-188,-604v60,0,64,-20,12,-60v2,-65,-19,-114,-64,-196v24,-22,11,-40,12,-72r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92xm198,-1750v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm298,-1410v-30,-2,-51,-13,-84,-12v-17,4,-45,60,-76,172v-38,137,-52,269,-52,392v0,409,108,680,308,776v187,90,298,1,384,-204v40,-97,40,-195,40,-312v0,-237,-46,-488,-180,-728v-86,-154,-155,-212,-236,-212v-43,0,-77,43,-104,128","w":2200},"\u0153":{"d":"462,-865v190,0,312,189,312,435v0,190,-64,355,-216,459v-224,153,-447,75,-527,-201v-48,-166,-16,-359,32,-509v7,-10,40,-28,99,-53v12,-9,37,-38,74,-89v43,-28,119,-42,226,-42xm339,-151v98,-39,180,-166,180,-304v0,-80,-29,-147,-88,-201v-44,0,-82,29,-121,84v-17,23,-31,34,-38,36v7,71,-4,148,-4,222v0,109,31,163,71,163xm676,-791v229,-117,378,-67,495,166v13,49,20,86,20,112v0,113,-88,205,-264,275v41,83,108,121,183,122v101,0,203,-89,328,-248v68,-87,119,-120,170,-118v21,12,-12,67,17,67v14,0,24,-12,30,-37v0,0,9,-1,7,4v0,38,-37,99,-102,189v-13,18,-18,42,-23,68v-32,6,-48,18,-48,37v-62,103,-155,180,-281,220v-51,16,-81,15,-132,14v-165,0,-329,-120,-491,-359r-17,-302v0,-111,39,-175,108,-210xm778,-523v0,68,19,115,57,142v27,0,66,-20,119,-61v35,-93,4,-182,-78,-210v-33,-11,-83,-1,-78,31v-13,23,-20,55,-20,98","w":1410,"k":{"\\":352}},"\u201c":{"d":"0,-1810v-12,-121,46,-175,174,-174v103,126,53,477,52,701v-44,79,-70,111,-144,106v-55,-15,-82,-61,-82,-137v21,-100,31,-162,31,-185v0,-42,-13,-137,-31,-311xm448,-1953v33,-30,133,-25,147,3v7,107,10,203,10,287r0,34v-4,237,-14,356,-31,356v-48,34,-79,51,-92,51v-55,0,-89,-146,-103,-437r0,-34v0,-148,23,-235,69,-260","w":615},"\u201d":{"d":"0,-1810v-12,-121,46,-175,174,-174v103,126,53,477,52,701v-44,79,-70,111,-144,106v-55,-15,-82,-61,-82,-137v21,-100,31,-162,31,-185v0,-42,-13,-137,-31,-311xm448,-1953v33,-30,133,-25,147,3v7,107,10,203,10,287r0,34v-4,237,-14,356,-31,356v-48,34,-79,51,-92,51v-55,0,-89,-146,-103,-437r0,-34v0,-148,23,-235,69,-260","w":615},"\u2018":{"d":"0,-1870v40,-72,92,-102,178,-102v55,0,83,20,83,61r4,242v0,222,-45,367,-140,424v-32,19,-64,23,-91,23v-13,-3,-15,-251,-15,-349v0,-124,-9,-224,-19,-299","w":305},"\u2019":{"d":"0,-1870v40,-72,92,-102,178,-102v55,0,83,20,83,61r4,242v0,222,-45,367,-140,424v-32,19,-64,23,-91,23v-13,-3,-15,-251,-15,-349v0,-124,-9,-224,-19,-299","w":305},"\u00f7":{"d":"1820,-808v-28,47,-121,128,-235,128v-29,0,-47,-7,-55,-12v-67,11,-164,13,-252,12v-58,0,-292,-19,-703,-40v-159,-8,-294,5,-435,36r-110,-76v-4,-30,18,-54,32,-52v-30,-34,-44,-45,-20,-80r-3,-20v0,-29,115,-60,347,-80v269,-23,514,48,1057,48v50,0,133,-20,252,-20v83,0,125,52,125,156xm896,-520v35,-5,65,-15,104,-16v80,21,116,49,116,108v0,76,-53,137,-160,184v-79,14,-131,-10,-152,-88v-24,-87,15,-145,92,-188xm916,-1390v35,-5,65,-15,104,-16v80,21,116,49,116,108v0,76,-53,137,-160,184v-79,14,-131,-10,-152,-88v-24,-87,15,-145,92,-188","w":1900},"\u20ac":{"d":"609,-1253v163,-79,298,-100,480,-100v119,0,201,43,244,128r0,32v0,51,-64,81,-192,92r-108,-12v-223,0,-417,92,-584,276r0,4v106,-13,277,-49,516,-88v125,-21,259,-42,316,36v-21,55,-61,111,-132,148v-103,55,-187,72,-240,72v-267,0,-391,52,-512,96v20,78,56,144,116,188v104,76,225,104,372,104v74,0,186,-42,340,-120v59,-30,88,-38,140,-36v11,0,16,19,16,56v0,139,-128,268,-396,344v-336,95,-624,-7,-804,-260v-60,-84,-77,-152,-80,-184r-68,4v-83,0,-124,-23,-124,-68v-3,-10,-5,-22,-4,-36v0,-56,69,-108,208,-156v101,-230,264,-407,496,-520","w":1393},"\u2030":{"d":"436,-1742v32,-54,70,-76,132,-76v71,0,161,45,272,136v11,29,24,74,24,136v0,157,-71,287,-212,388v-81,-13,-141,-13,-228,-12v-56,0,-88,-13,-100,-36v-47,-92,-72,-193,-72,-304v0,-147,34,-220,76,-220v54,-20,66,-26,108,-12xm1872,-1750v15,0,27,57,36,172v5,0,8,9,8,28v-604,605,-1004,999,-1208,1172r-576,488v-97,47,-168,8,-212,-80r0,-32v0,-42,88,-109,252,-220v216,-147,827,-766,1104,-1048v176,-179,287,-308,360,-360v77,-54,155,-94,236,-120xm464,-1470v9,9,21,31,36,68v106,-22,130,-39,128,-124v0,-29,-12,-44,-36,-44v-36,0,-79,33,-128,100xm1046,-430v123,-111,194,-146,360,-136v125,133,188,224,188,272v0,135,-24,213,-100,324v-51,40,-114,60,-188,60v-139,0,-238,-56,-288,-172v-11,-26,-12,-53,-12,-76v0,-93,39,-169,40,-272xm1192,-265v-8,73,53,118,158,130v34,-20,43,-35,40,-76v-6,-122,-3,-135,-92,-135v-61,0,-100,27,-106,81xm1696,-430v123,-111,194,-146,360,-136v125,133,188,224,188,272v0,135,-24,213,-100,324v-51,40,-114,60,-188,60v-139,0,-238,-56,-288,-172v-11,-26,-12,-53,-12,-76v0,-93,39,-169,40,-272xm1850,-271v-6,75,44,124,138,136v29,-21,36,-39,34,-79v-8,-124,6,-142,-80,-142v-53,0,-87,28,-92,85","w":2270,"k":{"9":105}},"\u00c2":{"d":"850,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824v65,8,136,-4,204,-4v51,0,76,15,76,44v11,1,16,5,16,12v0,67,-44,113,-132,136r-84,20v114,289,213,489,308,588v66,69,104,129,104,188v0,35,-16,59,-48,72v0,9,-20,17,-60,24r-24,0v-87,0,-185,-148,-320,-432v-61,-127,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-71,114,-152,292v-59,79,-102,108,-188,108v-57,0,-94,-14,-100,-44v-20,-96,-3,-108,28,-256v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm1006,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328xm904,-2470v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-20,3v-17,-27,-22,-49,-22,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","k":{"\\":102}},"\u00ca":{"d":"956,-1792v83,-28,221,-39,280,8r0,32v0,147,-168,241,-504,276v-195,20,-292,35,-292,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v60,255,116,458,208,648r20,4v85,0,239,-59,468,-164v237,-108,428,-156,568,-156v99,0,148,13,148,24r0,132v0,6,-55,9,-160,32v-294,65,-550,214,-796,392v-107,78,-175,88,-288,88v-102,0,-182,-97,-252,-288v-44,-121,-111,-321,-188,-604v-47,0,-96,-20,-148,-60v-2,-68,26,-116,96,-196v21,-25,11,-40,12,-72r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92xm524,-2470v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-20,3v-17,-27,-22,-49,-22,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","w":1515,"k":{"4":106}},"\u00c1":{"d":"850,-1724v27,-77,77,-104,148,-104v71,0,153,48,248,144v-4,231,55,440,180,824v65,8,136,-4,204,-4v51,0,76,15,76,44v11,1,16,5,16,12v0,67,-44,113,-132,136r-84,20v114,289,213,489,308,588v66,69,104,129,104,188v0,35,-16,59,-48,72v0,9,-20,17,-60,24r-24,0v-87,0,-185,-148,-320,-432v-61,-127,-136,-263,-200,-420r-124,-8v-360,23,-540,56,-540,100v-20,17,-71,114,-152,292v-59,79,-102,108,-188,108v-57,0,-94,-14,-100,-44v-20,-96,-3,-108,28,-256v0,-13,-67,-30,-200,-52v-40,-19,-60,-41,-60,-64v17,-38,52,-78,112,-96r284,-84v21,-7,53,-45,96,-116v220,-359,299,-506,428,-872xm1006,-1252v-101,160,-180,300,-236,420v-1,3,1,5,4,4v39,0,145,-20,320,-60r56,-4v-47,-181,-84,-290,-112,-328xm1104,-2465r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","k":{"\\":102}},"\u00cb":{"d":"956,-1792v83,-28,221,-39,280,8r0,32v0,147,-168,241,-504,276v-195,20,-292,35,-292,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v60,255,116,458,208,648r20,4v85,0,239,-59,468,-164v237,-108,428,-156,568,-156v99,0,148,13,148,24r0,132v0,6,-55,9,-160,32v-294,65,-550,214,-796,392v-107,78,-175,88,-288,88v-102,0,-182,-97,-252,-288v-44,-121,-111,-321,-188,-604v-47,0,-96,-20,-148,-60v-2,-68,26,-116,96,-196v21,-25,11,-40,12,-72r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92xm369,-1963v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128xm719,-1963v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":1515,"k":{"4":106}},"\u00c8":{"d":"986,-1792v83,-28,221,-39,280,8r0,32v0,147,-168,241,-504,276v-195,20,-292,35,-292,48v-34,93,-47,209,-44,340v316,-80,555,-120,716,-120v120,0,180,12,180,24v-1,35,-2,57,20,76v-33,58,-104,108,-216,140v-79,22,-252,38,-512,76v-54,8,-108,31,-164,52v60,255,116,458,208,648r20,4v85,0,239,-59,468,-164v237,-108,428,-156,568,-156v99,0,148,13,148,24r0,132v0,6,-55,9,-160,32v-294,65,-550,214,-796,392v-107,78,-175,88,-288,88v-102,0,-182,-97,-252,-288v-44,-121,-111,-321,-188,-604v-47,0,-96,-20,-148,-60v-2,-68,26,-116,96,-196v21,-25,11,-40,12,-72r12,-280r4,-4r-84,4v-100,-3,-120,-22,-120,-104v0,-105,95,-178,284,-220v5,0,29,-24,72,-72v7,0,35,-21,84,-64v77,-2,133,31,196,100v92,1,209,-27,400,-92xm486,-2416v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":1515,"k":{"4":76}},"\u00cd":{"d":"20,-1934v96,-93,256,-54,292,84v-4,57,-28,97,-36,148v-15,96,-13,194,-12,300v0,192,52,579,156,1160r32,328v-32,43,-81,64,-148,64v-72,0,-108,-23,-108,-48v0,-768,-188,-1254,-188,-1488v-9,-3,-8,-336,-8,-436v0,-58,5,-97,20,-112xm364,-2605r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":475},"\u00ce":{"d":"20,-1934v96,-93,256,-54,292,84v-4,57,-28,97,-36,148v-15,96,-13,194,-12,300v0,192,52,579,156,1160r32,328v-32,43,-81,64,-148,64v-72,0,-108,-23,-108,-48v0,-768,-188,-1254,-188,-1488v-9,-3,-8,-336,-8,-436v0,-58,5,-97,20,-112xm114,-2570v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-204,183,-204,246v0,19,-37,29,-112,29r-19,3v-18,-27,-23,-49,-23,-83v0,-55,58,-131,167,-237v34,-32,70,-93,117,-175","w":475},"\u00cf":{"d":"20,-1934v96,-93,256,-54,292,84v-4,57,-28,97,-36,148v-15,96,-13,194,-12,300v0,192,52,579,156,1160r32,328v-32,43,-81,64,-148,64v-72,0,-108,-23,-108,-48v0,-768,-188,-1254,-188,-1488v-9,-3,-8,-336,-8,-436v0,-58,5,-97,20,-112xm-11,-2143v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,102,-111,128xm339,-2143v-60,20,-109,-20,-109,-92v0,-43,22,-76,67,-100v24,-3,45,-11,72,-11v56,15,81,34,81,75v0,53,-35,103,-111,128","w":475},"\u00cc":{"d":"20,-1934v96,-93,256,-54,292,84v-4,57,-28,97,-36,148v-15,96,-13,194,-12,300v0,192,52,579,156,1160r32,328v-32,43,-81,64,-148,64v-72,0,-108,-23,-108,-48v0,-768,-188,-1254,-188,-1488v-9,-3,-8,-336,-8,-436v0,-58,5,-97,20,-112xm86,-2526v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":475},"\u00d3":{"d":"368,-1850v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm468,-1510v-30,-2,-51,-13,-84,-12v-17,4,-45,60,-76,172v-38,137,-52,269,-52,392v0,409,108,680,308,776v187,90,298,1,384,-204v40,-97,40,-195,40,-312v0,-237,-46,-488,-180,-728v-86,-154,-155,-212,-236,-212v-43,0,-77,43,-104,128xm654,-2535r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":1255},"\u00d4":{"d":"368,-1850v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm468,-1510v-30,-2,-51,-13,-84,-12v-17,4,-45,60,-76,172v-38,137,-52,269,-52,392v0,409,108,680,308,776v187,90,298,1,384,-204v40,-97,40,-195,40,-312v0,-237,-46,-488,-180,-728v-86,-154,-155,-212,-236,-212v-43,0,-77,43,-104,128xm444,-2500v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-20,3v-17,-27,-22,-49,-22,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","w":1255},"\u00d2":{"d":"368,-1850v102,-18,167,-29,240,-28v255,0,462,290,588,876v70,326,43,678,-120,884v-127,161,-255,208,-444,208v-170,0,-329,-95,-456,-300v-134,-216,-176,-453,-176,-748v0,-317,60,-577,180,-780v61,-65,124,-101,188,-112xm468,-1510v-30,-2,-51,-13,-84,-12v-17,4,-45,60,-76,172v-38,137,-52,269,-52,392v0,409,108,680,308,776v187,90,298,1,384,-204v40,-97,40,-195,40,-312v0,-237,-46,-488,-180,-728v-86,-154,-155,-212,-236,-212v-43,0,-77,43,-104,128xm456,-2446v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":1255},"\u00da":{"d":"1102,-2038v26,33,63,119,104,260v80,277,116,548,116,812v0,413,-82,720,-268,896v-108,102,-233,140,-352,140v-179,0,-308,-109,-408,-316v-110,-229,-164,-517,-164,-868v0,-259,36,-489,108,-688v7,-5,48,-20,124,-20v69,0,117,35,104,100r-44,224v-15,115,-24,229,-24,344v0,507,101,830,304,968r48,12v67,0,145,-63,212,-200v67,-137,84,-332,84,-556v0,-408,-54,-728,-148,-964v-27,-68,-3,-144,84,-144r120,0xm804,-2565r88,90v-20,85,-55,136,-104,153v-158,96,-243,173,-256,232v0,18,-47,27,-140,27r-24,3v-21,-26,-28,-45,-28,-78v0,-51,71,-124,208,-223v41,-30,89,-87,148,-165v32,-26,68,-39,108,-39","w":1235},"\u00db":{"d":"982,-2038v26,33,63,119,104,260v80,277,116,548,116,812v0,413,-82,720,-268,896v-108,102,-233,140,-352,140v-179,0,-308,-109,-408,-316v-110,-229,-164,-517,-164,-868v0,-259,36,-489,108,-688v7,-5,48,-20,124,-20v69,0,117,35,104,100r-44,224v-15,115,-24,229,-24,344v0,507,101,830,304,968r48,12v67,0,145,-63,212,-200v67,-137,84,-332,84,-556v0,-408,-54,-728,-148,-964v-27,-68,-3,-144,84,-144r120,0xm394,-2610v36,-38,65,-45,125,-42v39,73,117,198,243,371v32,43,18,58,6,99v1,10,10,22,4,29v-9,-1,-7,-10,-26,-13r-51,16v-17,0,-60,-33,-118,-106v-42,-54,-75,-102,-109,-137v-126,102,-205,183,-205,246v0,19,-37,29,-111,29r-20,3v-17,-27,-22,-49,-22,-83v0,-55,57,-132,166,-237v34,-33,71,-93,118,-175","w":1235},"\u00d9":{"d":"982,-2038v26,33,63,119,104,260v80,277,116,548,116,812v0,413,-82,720,-268,896v-108,102,-233,140,-352,140v-179,0,-308,-109,-408,-316v-110,-229,-164,-517,-164,-868v0,-259,36,-489,108,-688v7,-5,48,-20,124,-20v69,0,117,35,104,100r-44,224v-15,115,-24,229,-24,344v0,507,101,830,304,968r48,12v67,0,145,-63,212,-200v67,-137,84,-332,84,-556v0,-408,-54,-728,-148,-964v-27,-68,-3,-144,84,-144r120,0xm306,-2546v59,78,107,135,148,165v137,99,208,172,208,223v0,34,-7,52,-28,78r-24,-3v-93,0,-140,-9,-140,-27v-13,-59,-98,-136,-256,-232v-49,-17,-84,-68,-104,-153r88,-90v40,0,76,13,108,39","w":1235},"\u00bd":{"d":"272,-1876v34,-11,33,33,48,57v0,15,-15,129,-55,340v-30,160,56,431,-59,509v0,-11,-14,-18,-43,-23v-29,-88,-10,-409,-10,-518v0,-11,-14,-34,-41,-68v-8,-36,12,-40,48,-108v15,-29,35,-84,62,-164v5,-6,22,-15,50,-25xm1023,-634v-2,-29,-41,-33,-76,-33v-69,0,-135,34,-180,112v-30,53,-29,54,-78,61v-33,-3,-49,-10,-49,-21v0,-46,20,-102,71,-159v81,-90,166,-126,277,-125v105,1,176,59,180,174v5,147,-203,325,-303,402v-37,28,-58,50,-68,68v211,19,227,9,402,9v37,0,50,14,47,48v-4,37,-10,56,-17,56v-49,28,-128,42,-235,42v-230,0,-345,-14,-345,-21v-71,-21,-91,-18,-89,-66v0,-15,11,-41,33,-80v82,-55,182,-130,291,-237v73,-71,116,-133,141,-176v-4,-15,-1,-36,-2,-54xm732,-1647v27,-79,69,-101,98,-18v0,77,-16,170,-47,278v-23,44,-50,104,-73,182v-7,23,-116,273,-321,753v-70,165,-114,304,-145,412v-39,38,-51,56,-63,55v-10,-11,-5,-44,-3,-62r-19,7v-7,-7,-13,-22,-10,-36v-5,1,-10,-11,-9,-22v18,-111,69,-306,186,-570r269,-610v71,-171,112,-296,137,-369","w":1290},"\u00bc":{"d":"182,-1876v34,-11,33,33,48,57v0,15,-15,129,-55,340v-30,160,56,431,-59,509v0,-11,-14,-18,-43,-23v-29,-88,-10,-409,-10,-518v0,-11,-14,-34,-41,-68v-8,-36,12,-40,48,-108v15,-29,35,-84,62,-164v5,-6,22,-15,50,-25xm1091,104v2,50,-16,98,-62,111v-30,0,-55,-35,-73,-107v-5,-20,-4,-98,-11,-232v-1,-28,-8,-41,-10,-41v-222,34,-300,46,-464,39v-23,-19,-31,-40,-31,-72v0,-38,48,-94,140,-174r341,-298v88,-96,137,-144,147,-144v37,0,66,25,66,74v0,5,-11,27,-29,66v-10,22,-14,114,-18,273r-10,59v38,0,102,-18,226,-45v61,-13,126,-8,166,25v-8,0,-23,32,-49,94v-3,8,-10,11,-19,11v-57,0,-147,37,-275,67v-29,7,-45,8,-45,13v-30,80,7,191,10,281xm705,-309v125,-9,207,-16,248,-22v0,-66,24,-143,-6,-195v-36,42,-198,147,-242,217xm722,-1647v27,-79,69,-101,98,-18v0,77,-16,170,-47,278v-23,44,-50,104,-73,182v-7,23,-116,273,-321,753v-70,165,-114,304,-145,412v-39,38,-51,56,-63,55v-10,-11,-5,-44,-3,-62r-19,7v-7,-7,-13,-22,-10,-36v-5,1,-10,-11,-9,-22v18,-111,69,-306,186,-570r269,-610v71,-171,112,-296,137,-369","w":1480},"\u00be":{"d":"932,-1647v27,-79,69,-101,98,-18v0,77,-16,170,-47,278v-23,44,-50,104,-73,182v-7,23,-116,273,-321,753v-70,165,-114,304,-145,412v-39,38,-51,56,-63,55v-10,-11,-5,-44,-3,-62r-19,7v-7,-7,-13,-22,-10,-36v-5,1,-10,-11,-9,-22v18,-111,69,-306,186,-570r269,-610v71,-171,112,-296,137,-369xm1231,104v2,50,-16,98,-62,111v-30,0,-55,-35,-73,-107v-5,-20,-4,-98,-11,-232v-1,-28,-8,-41,-10,-41v-222,34,-300,46,-464,39v-23,-19,-31,-40,-31,-72v0,-38,48,-94,140,-174r341,-298v88,-96,137,-144,147,-144v37,0,66,25,66,74v0,5,-11,27,-29,66v-10,22,-14,114,-18,273r-10,59v38,0,102,-18,226,-45v61,-13,126,-8,166,25v-8,0,-23,32,-49,94v-3,8,-10,11,-19,11v-57,0,-147,37,-275,67v-29,7,-45,8,-45,13v-30,80,7,191,10,281xm845,-309v125,-9,207,-16,248,-22v0,-66,24,-143,-6,-195v-36,42,-198,147,-242,217xm362,-1085v-110,0,-215,-38,-310,-119v-50,-42,-38,-41,-52,-101v0,-2,6,-6,17,-12v11,-17,20,-26,27,-26v20,0,60,25,120,76v89,48,157,70,247,68v31,0,59,-15,82,-45r1,-12v-5,-24,-35,-56,-94,-90v-15,-9,-55,-14,-115,-31v-41,-11,-60,-34,-60,-59v0,-34,45,-69,135,-102v20,-7,44,-27,70,-61v-5,-28,7,-49,12,-73v-62,-20,-93,9,-197,57v-42,20,-87,21,-88,-36v0,-5,6,-15,18,-28v1,-17,50,-51,154,-90v83,-31,160,-29,228,12v49,121,-29,217,-126,290v40,15,90,47,142,102v132,139,-30,280,-211,280","w":1620},"\u00a4":{"w":1139}}});

    Cufon.registerFont({w:267,face:{"font-family":"Quake Cyr","font-weight":400,"font-stretch":"normal","units-per-em":"360","panose-1":"2 0 5 4 9 0 0 2 0 4",ascent:"288",descent:"-72","x-height":"4",bbox:"10.37 -358 428.519 123","underline-thickness":"7.2","underline-position":"-44.28","unicode-range":"U+0020-U+0451"},glyphs:{" ":{w:180},"%":{d:"172,5v24,0,42,-14,42,-39v0,-26,-17,-43,-40,-43v-25,0,-42,17,-42,43v0,25,17,39,40,39xm51,-73v24,0,42,-14,42,-39v0,-25,-16,-42,-40,-42v-26,0,-42,17,-42,42v0,24,17,39,40,39xm51,-142v15,-1,28,15,28,30v0,15,-14,25,-28,25v-15,0,-27,-12,-27,-26v0,-15,12,-29,27,-29xm172,-64v15,-1,28,15,28,30v0,14,-14,24,-28,24v-15,0,-27,-11,-27,-26v0,-15,13,-28,27,-28xm162,-151r-9,-5r-93,162r9,6",w:225},"&":{d:"11,-40v0,46,61,46,94,31v7,1,14,15,19,7v2,-25,-15,-80,20,-76v3,0,4,-1,4,-3v-21,-12,-106,17,-105,-33v0,-24,12,-35,35,-35v25,0,35,23,39,43v8,-5,2,-27,3,-39v-25,-14,-99,-20,-99,25v0,23,18,34,46,41v-33,5,-56,9,-56,39xm37,-40v0,-29,26,-38,58,-35v16,14,11,67,-25,67v-18,0,-34,-13,-33,-32",w:159},"'":{d:"11,-112v39,-3,66,-74,18,-85v-7,0,-17,6,-16,16v2,13,20,14,20,30v0,15,-13,25,-22,39",w:66},"(":{d:"92,0v-83,-34,-70,-263,0,-288v-95,21,-104,204,-38,266v11,9,23,17,38,22",w:102},")":{d:"11,-288v77,36,79,251,0,288v113,-22,105,-269,0,-288",w:102},"*":{d:"55,-284r-6,27r-23,-17r13,25r-28,1r26,11r-21,20r27,-9r-3,28r15,-24r15,24r-4,-28r27,9r-21,-20r27,-11r-29,-1r13,-25r-22,17",w:109},"+":{d:"196,-87v4,0,5,-4,5,-9v0,-4,-2,-6,-4,-6r-84,0r0,-83v-1,-5,-16,-7,-15,2r0,81r-83,0v-5,1,-7,16,2,15r81,0r0,83v0,4,4,4,9,4v4,0,6,-1,6,-3r0,-84r83,0",w:211},",":{d:"17,53v21,-18,36,-28,39,-56v3,-25,-37,-42,-42,-14v1,15,20,15,20,31v3,14,-17,28,-22,39r5,0",w:66},"-":{d:"104,-82v7,0,9,-3,8,-10v0,-4,-2,-6,-6,-6r-87,0v-12,-2,-10,15,-3,16r88,0",w:122},".":{d:"31,4v11,0,21,-10,21,-21v0,-10,-10,-20,-21,-20v-10,0,-21,10,-20,20v0,11,10,21,20,21",w:62},"/":{d:"103,-288r-92,288r122,-278",w:143},"0":{d:"299,-144v0,-86,-58,-144,-144,-144v-86,0,-144,58,-144,144v0,87,57,144,144,144v86,0,144,-59,144,-144xm266,-144v0,68,-45,112,-111,112v-66,0,-112,-46,-112,-112v0,-66,45,-112,112,-112v66,0,111,45,111,112",w:309},"1":{d:"31,-27v0,14,-8,25,-20,27r82,0v-14,-4,-21,-13,-21,-27r0,-232v-1,-15,9,-26,20,-29r-81,0v13,3,20,12,20,29r0,232",w:103},"2":{d:"174,-135v-3,-77,-17,-148,-93,-151v-25,0,-42,4,-55,16r-15,-18r0,77v13,-37,78,-63,112,-24v11,12,21,27,25,46v-85,2,-132,48,-136,131v13,-47,34,-87,96,-87v21,0,43,3,66,10xm12,-41r0,41r150,0r21,-67v-17,44,-114,20,-171,26",w:194},"3":{d:"37,0v68,-3,128,-30,128,-95v0,-47,-42,-69,-81,-82v35,-30,57,-61,73,-111r-146,0r0,66r26,-59r94,0v-17,43,-41,95,-95,96v42,14,90,37,90,90v0,57,-46,79,-89,95",w:175},"4":{d:"131,-85v-2,35,11,86,-27,85r85,0v-45,-8,-28,-43,-31,-85r40,0r1,6r30,-56v-11,20,-39,22,-71,21r0,-174r-147,203r120,0xm46,-114r85,-119r0,119r-85,0",w:239},"5":{d:"157,-82v0,-69,-49,-101,-118,-104r7,-56r90,0r0,-46r-15,17r-84,0r-26,123v64,-14,117,17,118,79v0,31,-14,54,-43,69v46,-3,71,-35,71,-82",w:167},"6":{d:"57,-164v4,-59,34,-107,81,-124v-114,2,-155,153,-107,249v11,22,33,39,65,39v-61,-23,-61,-155,0,-177v-17,0,-29,6,-39,13xm126,0v72,1,104,-100,57,-150v-13,-14,-32,-27,-57,-27v60,20,61,157,0,177",w:217},"7":{d:"141,-252v11,0,16,9,13,19r17,-55r-139,0r-21,63v12,-38,81,-25,130,-27xm151,-222r-105,222r73,0v-12,-3,-18,-15,-18,-37v0,-39,17,-101,50,-185",w:181},"8":{d:"98,0v-60,-16,-65,-144,0,-161v-48,-13,-46,-114,1,-127v-39,3,-68,25,-68,66v0,37,30,57,65,61v-73,-2,-113,93,-56,138v14,12,35,23,58,23xm121,-288v44,13,47,113,3,127v30,13,48,39,48,78v0,44,-17,70,-50,83v49,-4,87,-33,87,-84v0,-47,-37,-72,-83,-77v68,0,84,-104,20,-122v-8,-3,-17,-5,-25,-5",w:219},"9":{d:"161,-124v-4,59,-33,110,-81,124v98,-6,142,-108,121,-211v-8,-39,-33,-75,-80,-77v61,22,62,156,0,177v18,0,28,-6,40,-13xm91,-288v-88,-1,-105,140,-31,170v10,4,20,7,31,7v-60,-20,-61,-157,0,-177",w:217},":":{d:"31,-100v10,0,19,-10,19,-20v0,-11,-9,-20,-19,-20v-11,0,-20,9,-20,20v0,10,9,20,20,20xm33,3v11,0,20,-8,20,-20v0,-11,-8,-20,-20,-19v-10,0,-19,9,-19,19v0,11,9,20,19,20",w:64},";":{d:"11,52v39,-2,67,-76,19,-84v-9,-1,-16,6,-16,15v1,15,19,15,20,31v1,14,-12,27,-23,38xm35,-100v11,1,20,-10,20,-20v0,-11,-9,-20,-20,-20v-10,0,-21,9,-20,20v-1,10,10,21,20,20",w:66},"=":{d:"195,-109v6,0,5,-5,5,-11v0,-2,-1,-3,-3,-3r-182,0v-6,0,-3,6,-4,11v0,2,1,3,2,3r182,0xm195,-63v6,0,3,-5,4,-10v0,-2,-1,-3,-2,-3r-186,3v0,3,-1,10,2,10r182,0",w:210},"?":{d:"59,-129v93,25,126,-108,49,-145v-9,-5,-18,-7,-28,-7v25,10,43,34,43,67v1,58,-47,83,-104,69r48,98xm63,-16v0,8,8,16,17,16v23,0,18,-33,0,-33v-10,0,-17,7,-17,17xm62,-283r-43,-5r-8,51v9,-24,26,-39,51,-46",w:163},"@":{d:"145,-50v48,9,77,-29,77,-72v0,-59,-42,-94,-101,-94v-66,0,-110,45,-110,111v0,65,44,105,110,110v40,3,64,-29,98,-38r2,-5r-36,0v-52,48,-159,13,-154,-67v3,-54,37,-86,90,-90v71,-6,110,79,61,126v-5,3,-11,5,-17,6r0,-103r-18,7v-42,-18,-87,10,-86,54v0,43,41,71,84,55xm82,-105v0,-32,39,-50,64,-31r0,62v-25,18,-64,2,-64,-31",w:232},A:{d:"218,-55v7,16,29,51,-2,55r84,0v-49,-38,-69,-109,-94,-168r-51,-120r-100,229v-17,34,-32,53,-44,59r57,0v-26,-4,-10,-42,-5,-54v9,-24,18,-39,51,-40v-47,-11,3,-70,11,-95v11,-34,23,-22,33,0v11,23,24,48,29,76v-1,12,-13,15,-23,19v33,-1,43,15,54,39",w:310},B:{d:"257,-76v0,-45,-33,-65,-73,-72v29,-10,52,-34,52,-71v0,-46,-40,-74,-89,-67v63,13,59,131,-6,139v37,8,68,30,68,70v0,45,-34,65,-73,73v60,13,121,-12,121,-72xm71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23"},C:{d:"145,4v-50,-24,-84,-72,-84,-142v0,-75,32,-126,84,-151v-118,1,-176,167,-93,249v22,23,53,44,93,44xm172,4v51,-2,47,-9,76,-9v10,0,17,2,21,8r0,-87v-29,56,-62,85,-97,88xm175,-289v49,11,88,38,93,91r0,-91r-93,0",w:279},D:{d:"31,-29v1,15,-10,24,-20,29r82,0v-14,-3,-21,-12,-21,-29r0,-230v-1,-16,10,-25,20,-29r-81,0v13,3,20,12,20,29r0,230xm141,-288v51,25,82,75,82,148v0,70,-34,116,-83,140v120,3,171,-158,95,-242v-21,-25,-53,-45,-94,-46",w:283},E:{d:"74,-87v-5,-46,16,-58,58,-58v-29,-5,-60,2,-58,-30v3,-40,-14,-104,21,-113r-84,0v11,3,22,16,22,32v0,80,-21,187,31,228v18,14,42,27,70,28v-34,-13,-56,-45,-60,-87xm167,0v38,4,69,-23,96,-1r0,-93v-31,60,-62,91,-96,94xm150,-288v52,11,92,40,98,97r0,-97r-98,0",w:273},F:{d:"130,-145v-42,-1,-59,-11,-55,-56v4,-40,26,-75,59,-87v-51,5,-101,35,-101,87r0,173v0,14,-11,26,-22,28r85,0v-37,-9,-16,-73,-21,-113v3,-27,23,-28,55,-32xm157,-288v39,9,71,31,75,75r0,-75r-75,0",w:243},G:{d:"181,1v-72,-13,-122,-65,-122,-145v0,-75,38,-123,98,-142v-88,6,-146,61,-146,150v0,90,75,144,170,137xm265,-112v-1,-17,11,-29,22,-32r-85,0v14,3,22,14,22,32v-3,89,18,200,-60,215v57,-2,101,-33,101,-86r0,-129xm183,-286v42,10,78,32,82,80r0,-80r-82,0",w:298},H:{d:"201,-288v33,8,16,70,20,109v-2,19,-16,31,-41,34v55,5,39,63,41,117v0,16,-6,25,-20,28r82,0v-12,-2,-21,-14,-21,-28r0,-230v0,-17,7,-27,20,-30r-81,0xm31,-29v0,15,-8,26,-20,29r81,0v-34,-7,-15,-70,-20,-107v2,-21,16,-33,42,-38v-56,-3,-40,-62,-42,-115v-1,-15,10,-26,21,-28r-82,0v13,3,20,13,20,29r0,230",w:293},I:{d:"31,-29v-1,15,-10,25,-20,29r82,0v-14,-3,-21,-12,-21,-29r0,-230v1,-14,9,-24,20,-29r-81,0v13,3,20,12,20,29r0,230",w:103},J:{d:"50,-288v13,5,23,15,23,33r0,237v0,50,-18,82,-62,90v56,-5,107,-35,107,-90r0,-237v-1,-16,13,-28,23,-33r-91,0",w:151},K:{d:"91,0v-34,-8,-20,-69,-20,-107v0,-22,12,-35,31,-38v-49,-10,-31,-64,-31,-113v0,-14,10,-25,21,-28r-81,0v13,3,20,13,20,29r0,228v-2,14,-8,26,-20,29r80,0xm274,10v6,-86,-29,-143,-88,-169r107,-139r-164,154v71,25,129,75,145,154",w:304},L:{d:"31,-29v-1,15,-10,25,-20,29r82,0v-14,-3,-21,-12,-21,-29r0,-230v0,-16,9,-25,20,-29r-81,0v13,3,20,12,20,29r0,230xm132,-1v38,7,77,-27,106,-1r0,-102v-24,42,-52,92,-106,103",w:248},M:{d:"11,-287v14,2,20,13,20,32r0,222v0,18,-6,30,-20,33r55,0v-14,-5,-21,-16,-21,-33r0,-162r86,210r103,-235r0,187v0,14,-9,30,-20,33r81,0v-14,-3,-20,-16,-20,-33r0,-225v0,-13,9,-27,19,-29r-81,0v12,3,17,14,14,28r-85,191r-78,-203v0,-6,11,-15,14,-16r-67,0",w:305},N:{d:"69,0v-14,-2,-21,-16,-21,-32r0,-193r198,244r0,-275v0,-17,6,-28,19,-30r-58,0v15,4,22,14,22,30r0,176r-147,-184v-4,-9,-2,-21,8,-22r-79,0v13,3,19,17,20,30r0,224v0,17,-6,29,-20,32r58,0",w:276},O:{d:"185,4v113,-2,151,-165,86,-247v-19,-23,-46,-45,-85,-46v42,23,66,71,66,145v0,74,-18,123,-67,148xm130,-289v-137,1,-153,229,-48,280v15,7,30,13,48,13v-89,-36,-94,-255,0,-293",w:315},P:{d:"93,0v-13,-2,-20,-14,-21,-28v-1,-24,5,-37,23,-41v-15,-7,-23,-21,-23,-43r0,-148v-1,-15,10,-25,21,-28r-82,0v14,3,19,14,20,30r0,230v0,13,-8,26,-20,28r82,0xm127,-288v41,17,71,55,71,108v0,55,-29,97,-71,114v98,4,149,-126,79,-190v-20,-18,-46,-31,-79,-32",w:251},Q:{d:"93,-283v-71,22,-108,138,-60,210v23,35,53,67,103,73v-4,47,12,82,20,123v6,-40,17,-75,15,-123v143,2,168,-240,45,-283v67,25,90,141,35,200v-19,20,-44,41,-80,41v1,-27,-6,-60,17,-65r-67,0v23,5,13,40,15,65v-85,-5,-137,-110,-93,-191v11,-19,28,-36,50,-50",w:309},R:{d:"30,-39v1,17,-8,24,-19,28r78,0v-34,-7,-20,-65,-20,-102v0,-22,12,-34,30,-38v-47,-8,-30,-63,-30,-109v0,-15,10,-25,20,-28r-78,0v13,2,20,14,19,29r0,220xm271,0v3,-83,-29,-133,-85,-158v22,-8,44,-29,42,-59v-3,-45,-43,-75,-96,-70v35,3,57,33,57,68v0,42,-33,58,-66,69v76,21,129,72,148,150",w:282},S:{d:"59,-195v-31,-33,3,-85,38,-92v-84,-9,-115,109,-44,142v39,30,119,30,119,88v0,35,-27,56,-60,60v89,14,123,-104,52,-143v-34,-19,-80,-28,-105,-55xm88,3v-27,-2,-53,-27,-77,-75r0,75v20,-17,43,4,77,0xm119,-287v37,9,66,29,71,70r0,-70r-71,0",w:215},T:{d:"141,-259v0,-16,8,-24,20,-29r-83,0v14,3,21,13,21,30r0,165r22,136r20,-132r0,-170xm172,-288v38,13,53,41,58,86r0,-86r-58,0xm11,-202v4,-44,21,-74,57,-86r-57,0r0,86",w:240},U:{d:"75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187xm166,7v63,-3,106,-37,106,-100r0,-163v2,-17,10,-27,23,-31r-88,0v14,6,23,13,23,31r0,190v-1,44,-27,66,-64,73",w:305},V:{d:"174,-69r-94,-201v0,-10,6,-15,17,-17r-86,0v11,5,19,13,24,24r125,276r121,-271v5,-13,14,-24,26,-29r-58,0v13,5,20,12,14,23",w:317},W:{d:"190,-266v0,-12,4,-19,14,-21r-73,0v10,5,17,13,20,25r74,275r92,-271v6,-15,12,-25,19,-29r-48,0v11,5,16,13,12,24r-62,165xm173,-138r-37,49r-67,-181v0,-10,5,-15,15,-17r-73,0v8,6,15,14,19,24r103,275",w:347},X:{d:"300,0r-188,-236v-14,-20,-25,-38,-5,-52r-96,0r199,247v9,16,11,34,-5,41r95,0xm206,-288v28,32,14,68,-13,107r106,-107r-93,0xm104,0v-28,-31,-13,-69,13,-107r-106,107r93,0",w:311},Y:{d:"11,-288v81,26,61,155,64,258v0,18,-7,28,-22,30r86,0v-40,-27,-7,-143,-25,-202v-15,-49,-43,-84,-103,-86xm167,-286v7,5,11,14,11,26v0,28,-17,66,-52,115r121,-141r-80,0",w:257},Z:{d:"86,0v-19,-2,-14,-27,-7,-39r142,-249r-72,0v23,9,4,41,-5,56r-133,232r75,0xm122,-288r-109,0r0,114v12,-59,46,-106,109,-114xm106,0r115,0r0,-112v-13,60,-46,108,-115,112",w:232},"[":{d:"69,46v0,-3,0,-4,-2,-4v-12,-2,-34,5,-37,-5r0,-286v5,-10,25,-2,36,-7v0,0,1,-7,-3,-7r-52,0r0,314r56,0v2,0,2,-1,2,-5",w:80},"\\":{d:"41,-288r-30,13r151,275",w:173},"]":{d:"69,51r0,-314v-18,2,-43,-4,-55,3v0,3,-2,6,4,5v10,3,28,-3,32,6r0,286v-3,10,-25,3,-37,5v-3,0,-2,10,1,9r55,0",w:80},"^":{d:"129,-197v3,4,15,0,9,-5v-22,-20,-40,-43,-66,-59v-25,16,-43,39,-61,62v1,4,4,4,9,1r54,-25",w:149},_:{d:"191,40r0,-9r-180,0r0,9r180,0",w:201},"{":{d:"26,-88v45,-31,-4,-130,25,-170r13,-8v-61,-10,-34,91,-34,134v0,24,-7,38,-19,43v52,28,-36,178,52,179v-37,-12,-17,-81,-16,-119v0,-28,-10,-41,-21,-59",w:74},"}":{d:"11,90v59,8,34,-90,34,-134v0,-24,6,-38,19,-45v-54,-23,37,-176,-53,-177v36,10,16,79,16,118v0,27,14,40,21,60v-6,20,-21,34,-21,59v-1,42,24,103,-16,119",w:74},a:{d:"218,-55v7,16,29,51,-2,55r84,0v-49,-38,-69,-109,-94,-168r-51,-120r-100,229v-17,34,-32,53,-44,59r57,0v-26,-4,-10,-42,-5,-54v9,-24,18,-39,51,-40v-47,-11,3,-70,11,-95v11,-34,23,-22,33,0v11,23,24,48,29,76v-1,12,-13,15,-23,19v33,-1,43,15,54,39",w:310},b:{d:"257,-76v0,-45,-33,-65,-73,-72v29,-10,52,-34,52,-71v0,-46,-40,-74,-89,-67v63,13,59,131,-6,139v37,8,68,30,68,70v0,45,-34,65,-73,73v60,13,121,-12,121,-72xm71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23"},c:{d:"145,4v-50,-24,-84,-72,-84,-142v0,-75,32,-126,84,-151v-118,1,-176,167,-93,249v22,23,53,44,93,44xm172,4v51,-2,47,-9,76,-9v10,0,17,2,21,8r0,-87v-29,56,-62,85,-97,88xm175,-289v49,11,88,38,93,91r0,-91r-93,0",w:279},d:{d:"31,-29v1,15,-10,24,-20,29r82,0v-14,-3,-21,-12,-21,-29r0,-230v-1,-16,10,-25,20,-29r-81,0v13,3,20,12,20,29r0,230xm141,-288v51,25,82,75,82,148v0,70,-34,116,-83,140v120,3,171,-158,95,-242v-21,-25,-53,-45,-94,-46",w:283},e:{d:"74,-87v-5,-46,16,-58,58,-58v-29,-5,-60,2,-58,-30v3,-40,-14,-104,21,-113r-84,0v11,3,22,16,22,32v0,80,-21,187,31,228v18,14,42,27,70,28v-34,-13,-56,-45,-60,-87xm167,0v38,4,69,-23,96,-1r0,-93v-31,60,-62,91,-96,94xm150,-288v52,11,92,40,98,97r0,-97r-98,0",w:273},f:{d:"130,-145v-42,-1,-59,-11,-55,-56v4,-40,26,-75,59,-87v-51,5,-101,35,-101,87r0,173v0,14,-11,26,-22,28r85,0v-37,-9,-16,-73,-21,-113v3,-27,23,-28,55,-32xm157,-288v39,9,71,31,75,75r0,-75r-75,0",w:243},g:{d:"181,1v-72,-13,-122,-65,-122,-145v0,-75,38,-123,98,-142v-88,6,-146,61,-146,150v0,90,75,144,170,137xm265,-112v-1,-17,11,-29,22,-32r-85,0v14,3,22,14,22,32v-3,89,18,200,-60,215v57,-2,101,-33,101,-86r0,-129xm183,-286v42,10,78,32,82,80r0,-80r-82,0",w:298},h:{d:"201,-288v33,8,16,70,20,109v-2,19,-16,31,-41,34v55,5,39,63,41,117v0,16,-6,25,-20,28r82,0v-12,-2,-21,-14,-21,-28r0,-230v0,-17,7,-27,20,-30r-81,0xm31,-29v0,15,-8,26,-20,29r81,0v-34,-7,-15,-70,-20,-107v2,-21,16,-33,42,-38v-56,-3,-40,-62,-42,-115v-1,-15,10,-26,21,-28r-82,0v13,3,20,13,20,29r0,230",w:293},i:{d:"31,-29v-1,15,-10,25,-20,29r82,0v-14,-3,-21,-12,-21,-29r0,-230v1,-14,9,-24,20,-29r-81,0v13,3,20,12,20,29r0,230",w:103},j:{d:"50,-288v13,5,23,15,23,33r0,237v0,50,-18,82,-62,90v56,-5,107,-35,107,-90r0,-237v-1,-16,13,-28,23,-33r-91,0",w:151},k:{d:"91,0v-34,-8,-20,-69,-20,-107v0,-22,12,-35,31,-38v-49,-10,-31,-64,-31,-113v0,-14,10,-25,21,-28r-81,0v13,3,20,13,20,29r0,228v-2,14,-8,26,-20,29r80,0xm274,10v6,-86,-29,-143,-88,-169r107,-139r-164,154v71,25,129,75,145,154",w:304},l:{d:"31,-29v-1,15,-10,25,-20,29r82,0v-14,-3,-21,-12,-21,-29r0,-230v0,-16,9,-25,20,-29r-81,0v13,3,20,12,20,29r0,230xm132,-1v38,7,77,-27,106,-1r0,-102v-24,42,-52,92,-106,103",w:248},m:{d:"11,-287v14,2,20,13,20,32r0,222v0,18,-6,30,-20,33r55,0v-14,-5,-21,-16,-21,-33r0,-162r86,210r103,-235r0,187v0,14,-9,30,-20,33r81,0v-14,-3,-20,-16,-20,-33r0,-225v0,-13,9,-27,19,-29r-81,0v12,3,17,14,14,28r-85,191r-78,-203v0,-6,11,-15,14,-16r-67,0",w:305},n:{d:"69,0v-14,-2,-21,-16,-21,-32r0,-193r198,244r0,-275v0,-17,6,-28,19,-30r-58,0v15,4,22,14,22,30r0,176r-147,-184v-4,-9,-2,-21,8,-22r-79,0v13,3,19,17,20,30r0,224v0,17,-6,29,-20,32r58,0",w:276},o:{d:"185,4v113,-2,151,-165,86,-247v-19,-23,-46,-45,-85,-46v42,23,66,71,66,145v0,74,-18,123,-67,148xm130,-289v-137,1,-153,229,-48,280v15,7,30,13,48,13v-89,-36,-94,-255,0,-293",w:315},p:{d:"93,0v-13,-2,-20,-14,-21,-28v-1,-24,5,-37,23,-41v-15,-7,-23,-21,-23,-43r0,-148v-1,-15,10,-25,21,-28r-82,0v14,3,19,14,20,30r0,230v0,13,-8,26,-20,28r82,0xm127,-288v41,17,71,55,71,108v0,55,-29,97,-71,114v98,4,149,-126,79,-190v-20,-18,-46,-31,-79,-32",w:251},q:{d:"93,-283v-71,22,-108,138,-60,210v23,35,53,67,103,73v-4,47,12,82,20,123v6,-40,17,-75,15,-123v143,2,168,-240,45,-283v67,25,90,141,35,200v-19,20,-44,41,-80,41v1,-27,-6,-60,17,-65r-67,0v23,5,13,40,15,65v-85,-5,-137,-110,-93,-191v11,-19,28,-36,50,-50",w:309},r:{d:"30,-39v1,17,-8,24,-19,28r78,0v-34,-7,-20,-65,-20,-102v0,-22,12,-34,30,-38v-47,-8,-30,-63,-30,-109v0,-15,10,-25,20,-28r-78,0v13,2,20,14,19,29r0,220xm271,0v3,-83,-29,-133,-85,-158v22,-8,44,-29,42,-59v-3,-45,-43,-75,-96,-70v35,3,57,33,57,68v0,42,-33,58,-66,69v76,21,129,72,148,150",w:282},s:{d:"59,-195v-31,-33,3,-85,38,-92v-84,-9,-115,109,-44,142v39,30,119,30,119,88v0,35,-27,56,-60,60v89,14,123,-104,52,-143v-34,-19,-80,-28,-105,-55xm88,3v-27,-2,-53,-27,-77,-75r0,75v20,-17,43,4,77,0xm119,-287v37,9,66,29,71,70r0,-70r-71,0",w:215},t:{d:"141,-259v0,-16,8,-24,20,-29r-83,0v14,3,21,13,21,30r0,165r22,136r20,-132r0,-170xm172,-288v38,13,53,41,58,86r0,-86r-58,0xm11,-202v4,-44,21,-74,57,-86r-57,0r0,86",w:240},u:{d:"75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187xm166,7v63,-3,106,-37,106,-100r0,-163v2,-17,10,-27,23,-31r-88,0v14,6,23,13,23,31r0,190v-1,44,-27,66,-64,73",w:305},v:{d:"174,-69r-94,-201v0,-10,6,-15,17,-17r-86,0v11,5,19,13,24,24r125,276r121,-271v5,-13,14,-24,26,-29r-58,0v13,5,20,12,14,23",w:317},w:{d:"190,-266v0,-12,4,-19,14,-21r-73,0v10,5,17,13,20,25r74,275r92,-271v6,-15,12,-25,19,-29r-48,0v11,5,16,13,12,24r-62,165xm173,-138r-37,49r-67,-181v0,-10,5,-15,15,-17r-73,0v8,6,15,14,19,24r103,275",w:347},x:{d:"300,0r-188,-236v-14,-20,-25,-38,-5,-52r-96,0r199,247v9,16,11,34,-5,41r95,0xm206,-288v28,32,14,68,-13,107r106,-107r-93,0xm104,0v-28,-31,-13,-69,13,-107r-106,107r93,0",w:311},y:{d:"11,-288v81,26,61,155,64,258v0,18,-7,28,-22,30r86,0v-40,-27,-7,-143,-25,-202v-15,-49,-43,-84,-103,-86xm167,-286v7,5,11,14,11,26v0,28,-17,66,-52,115r121,-141r-80,0",w:257},z:{d:"86,0v-19,-2,-14,-27,-7,-39r142,-249r-72,0v23,9,4,41,-5,56r-133,232r75,0xm122,-288r-109,0r0,114v12,-59,46,-106,109,-114xm106,0r115,0r0,-112v-13,60,-46,108,-115,112",w:232},"$":{d:"69,8v29,0,50,-19,50,-47v0,-49,-75,-32,-86,-72v0,-15,9,-22,27,-22v17,0,36,31,40,-2v5,-9,-1,-17,-14,-15r-17,2r0,-77v1,-6,-3,-8,-9,-7v-8,22,0,60,-3,87v-28,9,-41,23,-41,43v0,47,85,30,85,74v0,40,-58,39,-72,8v-6,-5,-10,-24,-18,-17v3,12,2,28,9,37v13,2,22,8,37,8r0,78v-1,8,8,8,12,6r0,-84",w:129},"!":{d:"60,-55r12,-233r-61,13v16,7,33,80,49,220xm41,-15v0,7,7,15,16,15v8,0,15,-7,15,-15v0,-10,-6,-16,-15,-16v-10,0,-16,7,-16,16",w:83},"#":{d:"164,-113r-35,0r13,-40r-13,0r-12,40r-36,0r12,-40r-13,0r-12,40r-36,0r-2,13r34,0r-15,47r-35,0r-3,13r34,0r-12,40r12,0r13,-40r36,0r-13,40r13,0r13,-40r35,0r3,-13r-34,0r14,-47r36,0xm113,-100r-15,47r-36,0r15,-47r36,0",w:174},"\u0410":{d:"218,-55v7,16,29,51,-2,55r84,0v-49,-38,-69,-109,-94,-168r-51,-120r-100,229v-17,34,-32,53,-44,59r57,0v-26,-4,-10,-42,-5,-54v9,-24,18,-39,51,-40v-47,-11,3,-70,11,-95v11,-34,23,-22,33,0v11,23,24,48,29,76v-1,12,-13,15,-23,19v33,-1,43,15,54,39",w:310},"\u0411":{d:"71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm141,-147v37,8,68,30,68,70v0,45,-34,65,-73,73v72,22,151,-39,110,-106v-18,-29,-61,-35,-105,-37xm139,-286v50,9,92,32,97,86r0,-86r-97,0"},"\u0412":{d:"257,-76v0,-45,-33,-65,-73,-72v29,-10,52,-34,52,-71v0,-46,-40,-74,-89,-67v63,13,59,131,-6,139v37,8,68,30,68,70v0,45,-34,65,-73,73v60,13,121,-12,121,-72xm71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23"},"\u0413":{d:"11,-288v11,3,23,16,22,32r0,169r21,128r20,-128r0,-169v0,-18,7,-29,21,-32r-84,0xm114,-288v52,11,92,40,98,97r0,-97r-98,0",w:222},"\u0414":{d:"114,-29v-12,18,-45,22,-71,29r133,0v-13,-3,-20,-12,-20,-29r0,-230v-1,-16,10,-25,19,-29r-81,0v14,3,20,12,20,29r0,230xm185,-288v51,25,82,75,82,148v0,70,-34,116,-83,140v120,2,171,-158,95,-242v-21,-25,-53,-45,-94,-46xm11,-213v2,-51,33,-68,79,-75r-79,0r0,75",w:327},"\u0415":{d:"74,-87v-5,-46,16,-58,58,-58v-29,-5,-60,2,-58,-30v3,-40,-14,-104,21,-113r-84,0v11,3,22,16,22,32v0,80,-21,187,31,228v18,14,42,27,70,28v-34,-13,-56,-45,-60,-87xm167,0v38,4,69,-23,96,-1r0,-93v-31,60,-62,91,-96,94xm150,-288v52,11,92,40,98,97r0,-97r-98,0",w:273},"\u0416":{d:"263,-145v-11,-6,-28,-16,-30,-32v3,-39,-12,-99,20,-109r-80,0v32,12,19,75,19,116v0,15,-16,20,-29,25v44,5,29,71,29,116v0,13,-8,25,-20,29r82,0v-34,-13,-15,-75,-20,-117v3,-14,17,-23,29,-28xm396,10v6,-81,-12,-146,-69,-169v33,-43,55,-95,88,-139r-145,154v67,24,113,76,126,154xm30,10v13,-78,59,-130,127,-154r-146,-154v34,44,54,96,89,139v-58,23,-75,87,-70,169",w:426},"\u0417":{d:"17,19v76,-9,135,-42,148,-114v-4,-47,-42,-69,-81,-82v31,-13,48,-24,50,-57v2,-55,-71,-67,-110,-39r-13,-15r0,66v2,-34,19,-56,51,-56v27,0,41,17,41,50v0,36,-34,43,-67,43v42,14,90,37,90,90v0,62,-60,94,-109,114",w:175},"\u0418":{d:"209,-287v11,4,21,14,21,29r0,231v0,16,-7,26,-20,28r81,0v-12,-2,-20,-13,-20,-28r0,-230v0,-17,6,-27,20,-30r-82,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187",w:301},"\u0419":{d:"209,-287v11,4,21,14,21,29r0,231v0,16,-7,26,-20,28r81,0v-12,-2,-20,-13,-20,-28r0,-230v0,-17,6,-27,20,-30r-82,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187xm95,-344v-5,-3,-13,-1,-9,5v23,19,39,44,66,59v23,-18,43,-40,61,-63v-1,-5,-6,-2,-10,-1r-53,25",w:301},"\u041a":{d:"91,0v-34,-8,-20,-69,-20,-107v0,-22,12,-35,31,-38v-49,-10,-31,-64,-31,-113v0,-14,10,-25,21,-28r-81,0v13,3,20,13,20,29r0,228v-2,14,-8,26,-20,29r80,0xm274,10v6,-86,-29,-143,-88,-169r107,-139r-164,154v71,25,129,75,145,154",w:304},"\u041b":{d:"171,-277v11,3,21,13,20,28r0,222v0,15,-6,24,-19,27r78,0v-11,-3,-20,-12,-20,-27r0,-221v0,-15,7,-27,19,-29r-78,0xm106,-262v-70,51,-90,159,-95,273v21,-96,49,-188,98,-249v17,-22,36,-22,48,-39v-19,0,-37,5,-51,15",w:260},"\u041c":{d:"11,-287v14,2,20,13,20,32r0,222v0,18,-6,30,-20,33r55,0v-14,-5,-21,-16,-21,-33r0,-162r86,210r103,-235r0,187v0,14,-9,30,-20,33r81,0v-14,-3,-20,-16,-20,-33r0,-225v0,-13,9,-27,19,-29r-81,0v12,3,17,14,14,28r-85,191r-78,-203v0,-6,11,-15,14,-16r-67,0",w:305},"\u041d":{d:"201,-288v33,8,16,70,20,109v-2,19,-16,31,-41,34v55,5,39,63,41,117v0,16,-6,25,-20,28r82,0v-12,-2,-21,-14,-21,-28r0,-230v0,-17,7,-27,20,-30r-81,0xm31,-29v0,15,-8,26,-20,29r81,0v-34,-7,-15,-70,-20,-107v2,-21,16,-33,42,-38v-56,-3,-40,-62,-42,-115v-1,-15,10,-26,21,-28r-82,0v13,3,20,13,20,29r0,230",w:293},"\u041e":{d:"185,4v113,-2,151,-165,86,-247v-19,-23,-46,-45,-85,-46v42,23,66,71,66,145v0,74,-18,123,-67,148xm130,-289v-137,1,-153,229,-48,280v15,7,30,13,48,13v-89,-36,-94,-255,0,-293",w:315},"\u041f":{d:"158,-288v21,6,54,9,63,28r0,232v0,16,-6,25,-20,28r82,0v-12,-2,-21,-14,-21,-28r0,-230v0,-17,7,-27,20,-30r-124,0xm31,-29v0,15,-8,26,-20,29r81,0v-13,-3,-20,-12,-20,-29r0,-231v8,-22,40,-21,64,-28r-125,0v13,3,20,13,20,29r0,230",w:293},"\u0420":{d:"93,0v-13,-2,-20,-14,-21,-28v-1,-24,5,-37,23,-41v-15,-7,-23,-21,-23,-43r0,-148v-1,-15,10,-25,21,-28r-82,0v14,3,19,14,20,30r0,230v0,13,-8,26,-20,28r82,0xm127,-288v41,17,71,55,71,108v0,55,-29,97,-71,114v98,4,149,-126,79,-190v-20,-18,-46,-31,-79,-32",w:251},"\u0421":{d:"145,4v-50,-24,-84,-72,-84,-142v0,-75,32,-126,84,-151v-118,1,-176,167,-93,249v22,23,53,44,93,44xm172,4v51,-2,47,-9,76,-9v10,0,17,2,21,8r0,-87v-29,56,-62,85,-97,88xm175,-289v49,11,88,38,93,91r0,-91r-93,0",w:279},"\u0422":{d:"141,-259v0,-16,8,-24,20,-29r-83,0v14,3,21,13,21,30r0,165r22,136r20,-132r0,-170xm172,-288v38,13,53,41,58,86r0,-86r-58,0xm11,-202v4,-44,21,-74,57,-86r-57,0r0,86",w:240},"\u0423":{d:"247,-288v-120,1,-111,132,-109,256v-4,20,-10,31,-20,32r86,0v-14,-2,-21,-12,-21,-30v3,-103,-17,-233,64,-258xm90,-286r-79,0r120,141v-34,-49,-51,-87,-51,-115v0,-12,3,-21,10,-26",w:257},"\u0424":{d:"139,-69v29,2,28,67,1,69r82,0v-27,-3,-29,-68,2,-69v-12,-5,-19,-15,-22,-29r0,-160v0,-16,11,-25,20,-30r-82,0v14,4,20,12,20,30r0,160v-2,14,-9,23,-21,29xm239,-270v40,17,70,44,70,97v-1,56,-28,85,-71,104v96,8,153,-115,79,-174v-18,-16,-47,-27,-78,-27xm124,-69v-42,-20,-70,-48,-71,-104v0,-53,31,-80,71,-97v-97,-8,-150,110,-79,172v18,16,47,28,79,29",w:362},"\u0425":{d:"300,0r-188,-236v-14,-20,-25,-38,-5,-52r-96,0r199,247v9,16,11,34,-5,41r95,0xm206,-288v28,32,14,68,-13,107r106,-107r-93,0xm104,0v-28,-31,-13,-69,13,-107r-106,107r93,0",w:311},"\u0426":{d:"209,-287v11,4,21,14,21,29r0,231v0,16,-7,26,-20,28r71,0v-10,22,-27,37,-54,42v57,-5,99,-36,107,-90r-45,0v0,18,-1,32,-7,45v-6,-6,-11,-13,-11,-25r0,-230v0,-17,6,-27,20,-30r-82,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187",w:344},"\u0427":{d:"175,-69v30,3,30,65,2,69r82,0v-12,-1,-20,-14,-20,-28r0,-230v-1,-16,7,-27,19,-30r-81,0v11,3,21,13,21,28r0,148v0,22,-8,36,-23,43xm11,-288v41,18,2,106,27,151v20,37,51,70,105,71v-42,-19,-71,-56,-71,-114v0,-39,-13,-99,20,-108r-81,0",w:269},"\u0428":{d:"139,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r82,0v-12,-2,-20,-12,-20,-28r0,-230v0,-17,6,-27,19,-30r-81,0xm262,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r81,0v-11,-2,-21,-13,-20,-28r0,-230v0,-17,7,-27,20,-30r-81,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v8,105,-37,253,89,257v-33,-5,-46,-32,-46,-70r0,-187",w:354},"\u0429":{d:"262,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r72,0v-10,22,-27,37,-54,42v57,-4,99,-37,107,-90r-45,0v0,18,-1,32,-7,45v-6,-6,-12,-13,-12,-25r0,-230v0,-17,7,-27,20,-30r-81,0xm139,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r82,0v-12,-2,-20,-12,-20,-28r0,-230v0,-17,6,-27,19,-30r-81,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v8,105,-37,253,89,257v-33,-5,-46,-32,-46,-70r0,-187",w:397},"\u042a":{d:"129,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-139,0r0,97v6,-44,24,-84,65,-90v9,-1,13,14,13,23r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm199,-147v37,8,68,30,68,70v0,46,-34,64,-73,73v72,22,151,-40,110,-107v-17,-28,-61,-35,-105,-36",w:325},"\u042b":{d:"71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm309,-29v0,16,-8,26,-21,29r82,0v-14,-3,-20,-12,-20,-29r0,-231v-1,-15,9,-26,20,-28r-81,0v13,3,20,13,20,29r0,230xm141,-147v37,8,68,30,68,70v0,45,-34,65,-73,73v72,22,151,-40,110,-107v-17,-28,-61,-35,-105,-36",w:380},"\u042c":{d:"71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm141,-147v37,8,68,30,68,70v0,45,-34,65,-73,73v72,22,151,-40,110,-107v-17,-28,-61,-35,-105,-36"},"\u042d":{d:"140,2v56,-4,101,-34,101,-87v0,-66,13,-143,-31,-175v-18,-13,-42,-27,-70,-28v44,17,65,45,60,112v-2,30,-30,31,-59,33v36,3,66,11,59,58v-6,42,-25,74,-60,87xm107,-288v-38,-4,-69,23,-96,1r0,93v31,-60,62,-91,96,-94xm107,2v-34,-2,-65,-34,-96,-93r0,92v25,-23,59,6,96,1",w:252},"\u042e":{d:"31,-29v0,15,-8,26,-20,29r81,0v-34,-7,-15,-70,-20,-107v2,-21,16,-33,42,-38v-56,-3,-40,-62,-42,-115v-1,-15,10,-26,21,-28r-82,0v13,3,20,13,20,29r0,230xm312,2v137,0,153,-227,49,-279v-16,-8,-31,-13,-48,-13v42,22,66,71,66,144v0,76,-18,123,-67,148xm257,2v-90,-35,-94,-255,0,-292v-114,1,-150,166,-86,247v18,23,46,45,86,45",w:442},"\u042f":{d:"158,-151v42,5,27,67,30,112v0,16,-7,25,-20,28r78,0v-11,-4,-20,-11,-19,-28r0,-220v-1,-15,6,-27,19,-29r-78,0v32,8,20,67,20,105v0,16,-10,26,-30,32xm30,-217v-2,31,19,51,41,59v-54,21,-62,81,-60,158v16,-75,49,-133,123,-150v-32,-11,-66,-27,-66,-69v0,-35,22,-65,57,-68v-50,-5,-92,24,-95,70",w:257},"\u0430":{d:"218,-55v7,16,29,51,-2,55r84,0v-49,-38,-69,-109,-94,-168r-51,-120r-100,229v-17,34,-32,53,-44,59r57,0v-26,-4,-10,-42,-5,-54v9,-24,18,-39,51,-40v-47,-11,3,-70,11,-95v11,-34,23,-22,33,0v11,23,24,48,29,76v-1,12,-13,15,-23,19v33,-1,43,15,54,39",w:310},"\u0431":{d:"71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm141,-147v37,8,68,30,68,70v0,45,-34,65,-73,73v72,22,151,-39,110,-106v-18,-29,-61,-35,-105,-37xm139,-286v50,9,92,32,97,86r0,-86r-97,0"},"\u0432":{d:"257,-76v0,-45,-33,-65,-73,-72v29,-10,52,-34,52,-71v0,-46,-40,-74,-89,-67v63,13,59,131,-6,139v37,8,68,30,68,70v0,45,-34,65,-73,73v60,13,121,-12,121,-72xm71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23"},"\u0433":{d:"11,-288v11,3,23,16,22,32r0,169r21,128r20,-128r0,-169v0,-18,7,-29,21,-32r-84,0xm114,-288v52,11,92,40,98,97r0,-97r-98,0",w:222},"\u0434":{d:"114,-29v-12,18,-45,22,-71,29r133,0v-13,-3,-20,-12,-20,-29r0,-230v-1,-16,10,-25,19,-29r-81,0v14,3,20,12,20,29r0,230xm185,-288v51,25,82,75,82,148v0,70,-34,116,-83,140v120,2,171,-158,95,-242v-21,-25,-53,-45,-94,-46xm11,-213v2,-51,33,-68,79,-75r-79,0r0,75",w:327},"\u0435":{d:"74,-87v-5,-46,16,-58,58,-58v-29,-5,-60,2,-58,-30v3,-40,-14,-104,21,-113r-84,0v11,3,22,16,22,32v0,80,-21,187,31,228v18,14,42,27,70,28v-34,-13,-56,-45,-60,-87xm167,0v38,4,69,-23,96,-1r0,-93v-31,60,-62,91,-96,94xm150,-288v52,11,92,40,98,97r0,-97r-98,0",w:273},"\u0436":{d:"263,-145v-11,-6,-28,-16,-30,-32v3,-39,-12,-99,20,-109r-80,0v32,12,19,75,19,116v0,15,-16,20,-29,25v44,5,29,71,29,116v0,13,-8,25,-20,29r82,0v-34,-13,-15,-75,-20,-117v3,-14,17,-23,29,-28xm396,10v6,-81,-12,-146,-69,-169v33,-43,55,-95,88,-139r-145,154v67,24,113,76,126,154xm30,10v13,-78,59,-130,127,-154r-146,-154v34,44,54,96,89,139v-58,23,-75,87,-70,169",w:426},"\u0437":{d:"17,19v76,-9,135,-42,148,-114v-4,-47,-42,-69,-81,-82v31,-13,48,-24,50,-57v2,-55,-71,-67,-110,-39r-13,-15r0,66v2,-34,19,-56,51,-56v27,0,41,17,41,50v0,36,-34,43,-67,43v42,14,90,37,90,90v0,62,-60,94,-109,114",w:175},"\u0438":{d:"209,-287v11,4,21,14,21,29r0,231v0,16,-7,26,-20,28r81,0v-12,-2,-20,-13,-20,-28r0,-230v0,-17,6,-27,20,-30r-82,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187",w:301},"\u0439":{d:"209,-287v11,4,21,14,21,29r0,231v0,16,-7,26,-20,28r81,0v-12,-2,-20,-13,-20,-28r0,-230v0,-17,6,-27,20,-30r-82,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187xm95,-344v-4,-4,-13,-1,-9,5v23,19,39,44,66,59v23,-18,43,-40,61,-63v-1,-5,-6,-2,-10,-1r-53,25",w:301},"\u043a":{d:"91,0v-34,-8,-20,-69,-20,-107v0,-22,12,-35,31,-38v-49,-10,-31,-64,-31,-113v0,-14,10,-25,21,-28r-81,0v13,3,20,13,20,29r0,228v-2,14,-8,26,-20,29r80,0xm274,10v6,-86,-29,-143,-88,-169r107,-139r-164,154v71,25,129,75,145,154",w:304},"\u043b":{d:"171,-277v11,3,21,13,20,28r0,222v0,15,-6,24,-19,27r78,0v-11,-3,-20,-12,-20,-27r0,-221v0,-15,7,-27,19,-29r-78,0xm106,-262v-70,51,-90,159,-95,273v21,-96,49,-188,98,-249v17,-22,36,-22,48,-39v-19,0,-37,5,-51,15",w:260},"\u043c":{d:"11,-287v14,2,20,13,20,32r0,222v0,18,-6,30,-20,33r55,0v-14,-5,-21,-16,-21,-33r0,-162r86,210r103,-235r0,187v0,14,-9,30,-20,33r81,0v-14,-3,-20,-16,-20,-33r0,-225v0,-13,9,-27,19,-29r-81,0v12,3,17,14,14,28r-85,191r-78,-203v0,-6,11,-15,14,-16r-67,0",w:305},"\u043d":{d:"201,-288v33,8,16,70,20,109v-2,19,-16,31,-41,34v55,5,39,63,41,117v0,16,-6,25,-20,28r82,0v-12,-2,-21,-14,-21,-28r0,-230v0,-17,7,-27,20,-30r-81,0xm31,-29v0,15,-8,26,-20,29r81,0v-34,-7,-15,-70,-20,-107v2,-21,16,-33,42,-38v-56,-3,-40,-62,-42,-115v-1,-15,10,-26,21,-28r-82,0v13,3,20,13,20,29r0,230",w:293},"\u043e":{d:"185,4v113,-2,151,-165,86,-247v-19,-23,-46,-45,-85,-46v42,23,66,71,66,145v0,74,-18,123,-67,148xm130,-289v-137,1,-153,229,-48,280v15,7,30,13,48,13v-89,-36,-94,-255,0,-293",w:315},"\u043f":{d:"158,-288v21,6,54,9,63,28r0,232v0,16,-6,25,-20,28r82,0v-12,-2,-21,-14,-21,-28r0,-230v0,-17,7,-27,20,-30r-124,0xm31,-29v0,15,-8,26,-20,29r81,0v-13,-3,-20,-12,-20,-29r0,-231v8,-22,40,-21,64,-28r-125,0v13,3,20,13,20,29r0,230",w:293},"\u0440":{d:"93,0v-13,-2,-20,-14,-21,-28v-1,-24,5,-37,23,-41v-15,-7,-23,-21,-23,-43r0,-148v-1,-15,10,-25,21,-28r-82,0v14,3,19,14,20,30r0,230v0,13,-8,26,-20,28r82,0xm127,-288v41,17,71,55,71,108v0,55,-29,97,-71,114v98,4,149,-126,79,-190v-20,-18,-46,-31,-79,-32",w:251},"\u0441":{d:"145,4v-50,-24,-84,-72,-84,-142v0,-75,32,-126,84,-151v-118,1,-176,167,-93,249v22,23,53,44,93,44xm172,4v51,-2,47,-9,76,-9v10,0,17,2,21,8r0,-87v-29,56,-62,85,-97,88xm175,-289v49,11,88,38,93,91r0,-91r-93,0",w:279},"\u0442":{d:"141,-259v0,-16,8,-24,20,-29r-83,0v14,3,21,13,21,30r0,165r22,136r20,-132r0,-170xm172,-288v38,13,53,41,58,86r0,-86r-58,0xm11,-202v4,-44,21,-74,57,-86r-57,0r0,86",w:240},"\u0443":{d:"247,-288v-120,1,-111,132,-109,256v-4,20,-10,31,-20,32r86,0v-14,-2,-21,-12,-21,-30v3,-103,-17,-233,64,-258xm90,-286r-79,0r120,141v-34,-49,-51,-87,-51,-115v0,-12,3,-21,10,-26",w:257},"\u0444":{d:"139,-69v29,2,28,67,1,69r82,0v-27,-3,-29,-68,2,-69v-12,-5,-19,-15,-22,-29r0,-160v0,-16,11,-25,20,-30r-82,0v14,4,20,12,20,30r0,160v-2,14,-9,23,-21,29xm239,-270v40,17,70,44,70,97v-1,56,-28,85,-71,104v96,8,153,-115,79,-174v-18,-16,-47,-27,-78,-27xm124,-69v-42,-20,-70,-48,-71,-104v0,-53,31,-80,71,-97v-97,-8,-150,110,-79,172v18,16,47,28,79,29",w:362},"\u0445":{d:"300,0r-188,-236v-14,-20,-25,-38,-5,-52r-96,0r199,247v9,16,11,34,-5,41r95,0xm206,-288v28,32,14,68,-13,107r106,-107r-93,0xm104,0v-28,-31,-13,-69,13,-107r-106,107r93,0",w:311},"\u0446":{d:"209,-287v11,4,21,14,21,29r0,231v0,16,-7,26,-20,28r71,0v-10,22,-27,37,-54,42v57,-5,99,-36,107,-90r-45,0v0,18,-1,32,-7,45v-6,-6,-11,-13,-11,-25r0,-230v0,-17,6,-27,20,-30r-82,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v6,83,-19,188,32,232v19,16,43,31,75,31v-33,-10,-64,-34,-64,-76r0,-187",w:344},"\u0447":{d:"175,-69v30,3,30,65,2,69r82,0v-12,-1,-20,-14,-20,-28r0,-230v-1,-16,7,-27,19,-30r-81,0v11,3,21,13,21,28r0,148v0,22,-8,36,-23,43xm11,-288v41,18,2,106,27,151v20,37,51,70,105,71v-42,-19,-71,-56,-71,-114v0,-39,-13,-99,20,-108r-81,0",w:269},"\u0448":{d:"139,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r82,0v-12,-2,-20,-12,-20,-28r0,-230v0,-17,6,-27,19,-30r-81,0xm262,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r81,0v-11,-2,-21,-13,-20,-28r0,-230v0,-17,7,-27,20,-30r-81,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v8,105,-37,253,89,257v-33,-5,-46,-32,-46,-70r0,-187",w:354},"\u0449":{d:"262,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r72,0v-10,22,-27,37,-54,42v57,-4,99,-37,107,-90r-45,0v0,18,-1,32,-7,45v-6,-6,-12,-13,-12,-25r0,-230v0,-17,7,-27,20,-30r-81,0xm139,-287v10,4,20,13,20,29r0,231v0,16,-6,26,-20,28r82,0v-12,-2,-20,-12,-20,-28r0,-230v0,-17,6,-27,19,-30r-81,0xm75,-256v0,-18,8,-24,23,-31r-87,0v12,4,19,14,21,31v8,105,-37,253,89,257v-33,-5,-46,-32,-46,-70r0,-187",w:397},"\u044a":{d:"129,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-139,0r0,97v6,-44,24,-84,65,-90v9,-1,13,14,13,23r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm199,-147v37,8,68,30,68,70v0,46,-34,64,-73,73v72,22,151,-40,110,-107v-17,-28,-61,-35,-105,-36",w:325},"\u044b":{d:"71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm309,-29v0,16,-8,26,-21,29r82,0v-14,-3,-20,-12,-20,-29r0,-231v-1,-15,9,-26,20,-28r-81,0v13,3,20,13,20,29r0,230xm141,-147v37,8,68,30,68,70v0,45,-34,65,-73,73v72,22,151,-40,110,-107v-17,-28,-61,-35,-105,-36",w:380},"\u044c":{d:"71,-23v1,-49,-10,-110,29,-122v-42,-8,-26,-67,-29,-113v4,-17,11,-26,21,-28r-81,0v13,3,20,13,20,30r0,233v-2,13,-8,21,-20,23r80,0v-10,-2,-20,-11,-20,-23xm141,-147v37,8,68,30,68,70v0,45,-34,65,-73,73v72,22,151,-40,110,-107v-17,-28,-61,-35,-105,-36"},"\u044d":{d:"140,2v56,-4,101,-34,101,-87v0,-66,13,-143,-31,-175v-18,-13,-42,-27,-70,-28v44,17,65,45,60,112v-2,30,-30,31,-59,33v36,3,66,11,59,58v-6,42,-25,74,-60,87xm107,-288v-38,-4,-69,23,-96,1r0,93v31,-60,62,-91,96,-94xm107,2v-34,-2,-65,-34,-96,-93r0,92v25,-23,59,6,96,1",w:252},"\u044e":{d:"31,-29v0,15,-8,26,-20,29r81,0v-34,-7,-15,-70,-20,-107v2,-21,16,-33,42,-38v-56,-3,-40,-62,-42,-115v-1,-15,10,-26,21,-28r-82,0v13,3,20,13,20,29r0,230xm312,2v137,0,153,-227,49,-279v-16,-8,-31,-13,-48,-13v42,22,66,71,66,144v0,76,-18,123,-67,148xm257,2v-90,-35,-94,-255,0,-292v-114,1,-150,166,-86,247v18,23,46,45,86,45",w:442},"\u044f":{d:"158,-151v42,5,27,67,30,112v0,16,-7,25,-20,28r78,0v-11,-4,-20,-11,-19,-28r0,-220v-1,-15,6,-27,19,-29r-78,0v32,8,20,67,20,105v0,16,-10,26,-30,32xm30,-217v-2,31,19,51,41,59v-54,21,-62,81,-60,158v16,-75,49,-133,123,-150v-32,-11,-66,-27,-66,-69v0,-35,22,-65,57,-68v-50,-5,-92,24,-95,70",w:257},"\u0451":{d:"74,-87v-5,-46,16,-58,58,-58v-29,-5,-60,2,-58,-30v3,-40,-14,-104,21,-113r-84,0v11,3,22,16,22,32v0,80,-21,187,31,228v18,14,42,27,70,28v-34,-13,-56,-45,-60,-87xm167,0v38,4,69,-23,96,-1r0,-93v-31,60,-62,91,-96,94xm150,-288v52,11,92,40,98,97r0,-97r-98,0xm99,-358v-13,0,-24,10,-24,22v0,12,11,23,24,22v13,0,26,-9,26,-22v0,-12,-13,-22,-26,-22xm172,-358v-13,0,-24,10,-24,22v0,12,11,23,24,22v13,0,26,-9,26,-22v0,-12,-13,-22,-26,-22",w:273},"\u0401":{d:"74,-87v-5,-46,16,-58,58,-58v-29,-5,-60,2,-58,-30v3,-40,-14,-104,21,-113r-84,0v11,3,22,16,22,32v0,80,-21,187,31,228v18,14,42,27,70,28v-34,-13,-56,-45,-60,-87xm167,0v38,4,69,-23,96,-1r0,-93v-31,60,-62,91,-96,94xm150,-288v52,11,92,40,98,97r0,-97r-98,0xm99,-358v-13,0,-24,10,-24,22v0,12,11,23,24,22v13,0,26,-9,26,-22v0,-12,-13,-22,-26,-22xm172,-358v-13,0,-24,10,-24,22v0,12,11,23,24,22v13,0,26,-9,26,-22v0,-12,-13,-22,-26,-22",w:273},"\u00a0":{w:180}}});
    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * Diamond Gothic Font        Created by Jim Fordyce      Generated by Fontographer
 * 3.5
 */
Cufon.registerFont({"w":468,"face":{"font-family":"Diamond Gothic","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"0 0 0 0 0 0 0 0 0 0","ascent":"800","descent":"-200","x-height":"2","cap-height":"26","bbox":"-310 -1011 1292 292.18","underline-thickness":"20","underline-position":"-123","unicode-range":"U+0020-U+007E"},"glyphs":{" ":{"w":500},"!":{"d":"118,10v-38,-24,-65,-56,-91,-91v-4,-2,-7,-4,-7,-10r108,-107v28,41,63,76,97,111xm225,-740v-43,151,-68,320,-85,497r-26,-3r-22,-183v-21,-104,-34,-214,-65,-308r98,-118","w":240},"\"":{"d":"-9,-653v-12,-62,64,-94,81,-34v3,11,5,21,3,34r-33,226r-19,0xm152,-653v-19,-58,64,-96,83,-36v4,11,6,22,4,36r-33,226r-18,0","w":265},"#":{"d":"552,-939r-106,293r181,0r102,-293r101,0r-105,293r195,0r-33,90r-192,0r-64,176r208,0r-32,90r-206,0r-105,290r-100,0r105,-290r-181,0r-101,290r-99,0r102,-290r-199,0r32,-90r200,0r61,-176r-214,0r32,-90r215,0r104,-293r99,0xm353,-380r181,0r63,-176r-180,0","w":940},"$":{"d":"461,-534v77,60,133,201,81,323v-42,98,-125,165,-222,215r0,130r-66,0r0,-144r-238,-59r40,-97r198,46r0,-267v-38,30,-83,53,-125,79v-72,-56,-126,-140,-109,-276v16,-125,107,-195,234,-216r0,-85r66,0r0,88r177,39r-43,101r-134,-32r0,237v45,-18,94,-46,126,-74v7,-4,12,-7,15,-8xm411,-111v61,-95,73,-348,-82,-305v-1,2,-3,4,-7,3r-2,313r72,17xm136,-727v-62,111,-21,332,118,307r0,-281","w":572},"%":{"d":"641,-806r73,0r-469,814r-73,0xm687,-477v94,47,188,91,188,233v0,123,-73,168,-139,228v-8,7,-20,15,-33,24v-130,-30,-242,-143,-188,-304v27,-80,104,-136,172,-181xm753,-73v64,-43,60,-182,12,-240v-34,-41,-71,-72,-135,-86v-40,41,-74,120,-43,195v29,71,80,116,166,134r0,-3xm199,-803v93,48,190,86,186,232v-4,136,-97,193,-174,259r0,-3v-98,-37,-184,-85,-192,-217v-8,-139,89,-212,180,-271xm277,-638v-34,-41,-74,-72,-133,-89v-40,42,-76,121,-45,199v25,63,81,119,163,130v59,-44,68,-176,15,-240","w":892},"&":{"d":"526,-254v35,73,73,148,178,145v34,-10,64,-22,86,-44r10,2v-7,133,-203,205,-300,103v-31,-32,-54,-72,-78,-111v-4,0,-4,-5,-4,-10r-229,187r-166,-256r243,-192r-109,-188v-22,-13,-13,-63,3,-76v15,-12,20,-22,41,-33r245,-128v52,38,114,99,91,195v-20,85,-91,124,-148,172r121,211r154,-127v28,30,75,57,133,46v12,5,-4,16,-7,24v-24,31,-56,68,-116,61v-32,-4,-52,-22,-72,-38xm402,-198r-119,-206r-130,100r131,204xm426,-719v-40,-70,-177,-30,-132,59v24,48,53,97,80,144v63,-25,96,-126,52,-203","w":823},"'":{"d":"-8,-455v24,-18,59,-56,31,-91r-29,-36r73,-76v21,27,44,51,70,73v-20,69,-71,119,-128,154","w":158},"(":{"d":"225,-777v-118,139,-197,450,-89,667v21,42,37,74,66,113r23,-26r16,14r-96,136v-116,-110,-180,-353,-119,-572v37,-133,105,-249,187,-341","w":265},")":{"d":"14,113v111,-136,185,-399,104,-619v-20,-55,-47,-111,-80,-156r-24,24r-16,-14r97,-136v113,116,177,355,117,573v-37,135,-101,249,-184,342","w":265},"*":{"d":"130,-642v-7,38,9,72,22,99v12,-26,22,-55,20,-96r75,-16r6,75v-34,14,-67,29,-89,55r0,-2v34,7,75,-1,100,-12r42,61r-67,33v-19,-26,-46,-44,-73,-62v8,36,20,67,37,93r-51,51r-47,-62v22,-22,34,-53,45,-86v-32,17,-59,38,-78,68r-70,-32r40,-66v24,12,60,18,94,12v-21,-23,-49,-39,-84,-49r6,-81","w":330},"+":{"d":"330,-605r0,267r261,0r0,69r-261,0r0,267r-71,0r0,-267r-262,0r0,-69r262,0r0,-267r71,0","w":611},",":{"d":"5,59v22,-22,63,-55,33,-94v-10,-14,-21,-27,-33,-40r79,-77v21,29,47,54,75,76v-24,70,-77,118,-134,157","w":180},"-":{"d":"22,-172r-19,0r39,-111r188,0r12,-33r17,0r-39,118r-187,0","w":286},".":{"d":"70,8v-30,-21,-54,-47,-73,-79r81,-81v23,31,48,60,77,85","w":180},"\/":{"d":"407,-855r-338,973r-69,0r333,-973r74,0","w":429},"0":{"d":"447,-674v96,80,127,309,58,440v-48,93,-123,170,-205,230r-7,9r13,13r8,-19v-58,-20,-116,-37,-155,-77v-133,-91,-165,-391,-53,-536v53,-68,105,-127,180,-178v58,32,111,76,161,118xm395,-104v91,-102,106,-367,5,-472v-58,-60,-120,-105,-208,-133v-69,82,-116,244,-64,382v46,120,132,205,267,236r0,-13","w":564},"1":{"d":"356,-120r-48,41r-67,-52r-2,-540v-10,-51,-39,-82,-75,-107r-6,-8r-122,105r61,-51v-1,7,2,17,-2,21v26,27,54,54,53,104r0,452v-3,33,-15,43,-30,62r-11,-11v8,7,14,13,1,18r-8,-12r11,11r-16,16r-11,-20v10,-4,17,-10,22,-19r125,98r122,-110","w":396},"2":{"d":"342,-729v62,48,107,162,60,259v-28,57,-63,100,-102,143r-11,-11v9,5,14,9,5,16r-132,116v-56,58,-113,119,-128,217r-15,-3r-5,-14v106,-41,275,-66,395,-18r48,14r75,-88v-95,-57,-271,-39,-371,-4r-101,35v60,-78,130,-143,218,-196v127,-77,265,-141,252,-360r-264,-164r-206,167r62,63","w":572},"3":{"d":"177,-418v228,-29,312,223,191,375v-5,5,-12,12,-21,19r-245,-209r-78,78r-11,-11r10,-11r199,168v131,-8,235,-49,289,-133v34,-53,16,-158,-26,-188v-39,-28,-60,-46,-107,-66v-1,-1,-1,-3,0,-4r1,3r-14,0r0,-9v3,3,10,7,0,6v-3,-5,-18,2,-14,-10v1,1,3,2,6,5r-7,-28v85,-43,167,-99,147,-233r0,4r-246,-123r-164,123r55,57r145,-105v25,-20,76,-24,93,9v38,75,5,197,-54,225v-38,29,-88,49,-149,53r0,5","w":560},"4":{"d":"272,-79v48,-31,52,-96,47,-180r-264,-2r-32,-106r314,-432v44,31,90,60,90,135r0,315r111,0r25,88r-136,0r0,134r54,38r37,-30r8,13r-116,108r-138,-89v-3,3,-3,5,0,8xm319,-349r0,-285v-5,-18,-15,-34,-27,-43r-6,9v15,2,11,-5,4,-10r-4,-9r-237,318v3,5,0,19,9,15r0,5r261,0","w":588},"5":{"d":"343,-553v100,47,187,126,179,275r10,2v-4,0,-9,-6,-10,0r9,3v-11,-3,-13,5,-12,16v-20,154,-124,223,-267,254r-214,-130r64,-71r259,155v60,-52,120,-152,81,-259v-29,-79,-103,-132,-189,-163r-186,121v2,6,7,10,15,10r68,-438r324,0r-31,96r-294,0r-42,291","w":548},"6":{"d":"304,-1v-158,-44,-259,-143,-269,-340v-8,-157,93,-281,170,-363v29,-30,62,-60,100,-89r191,96r-71,88r-186,-102v-81,84,-120,199,-110,364r264,-179v73,40,145,92,145,206v0,159,-124,226,-219,302v-13,6,-26,11,-33,23r15,15xm448,-300v-24,-66,-84,-158,-182,-129v-41,32,-88,58,-131,88v26,142,103,230,247,255v-1,-20,16,-22,25,-32v36,-39,66,-111,41,-182","w":568},"7":{"d":"496,-725v11,-15,27,-24,28,-48r-402,2r7,-9v-4,17,-11,30,-20,42v-1,-3,2,-2,4,-2v-29,46,-46,100,-76,145v32,-36,74,-64,113,-93r319,3v-157,164,-295,357,-346,623v-4,25,-6,49,-6,71r-15,-1r-5,-14r145,-53v14,-302,122,-487,254,-666","w":560},"8":{"d":"377,-472v144,19,200,224,94,335v-52,54,-107,104,-179,141v2,3,4,5,3,-1v-145,-2,-265,-37,-265,-184v0,-102,77,-150,136,-201v-31,-12,-69,-27,-88,-49v-49,-57,-16,-182,24,-225v44,-48,84,-100,134,-142v129,18,265,36,265,175v0,83,-59,115,-124,151xm162,-697v-25,35,-59,75,-46,130v21,90,155,73,251,95v2,-15,19,-17,26,-27v34,-20,59,-93,21,-131v-51,-51,-160,-57,-252,-67xm119,-191v50,89,246,124,335,46v33,-28,40,-99,8,-135v-60,-68,-172,-83,-282,-101v-44,39,-104,112,-61,190","w":552},"9":{"d":"173,-260v-91,-35,-169,-128,-143,-263v26,-135,143,-199,235,-273v20,-9,40,9,61,19v118,58,208,150,210,327v2,180,-88,276,-174,370v-29,32,-64,59,-103,85r-197,-101r74,-93r191,96v76,-70,108,-193,103,-346xm145,-431v30,39,95,100,157,59r126,-85v-32,-110,-76,-187,-184,-221r-48,-18r0,-9v-56,43,-110,115,-82,217v5,20,16,38,31,57","w":556},":":{"d":"70,8v-30,-21,-54,-47,-73,-79r81,-81v23,31,48,60,77,85xm70,-292v-28,-23,-53,-50,-73,-81r81,-82v25,29,48,61,77,87","w":180},";":{"d":"0,59v21,-23,60,-57,31,-94r-31,-40r80,-77v19,30,46,53,72,76v-23,74,-75,117,-132,157xm77,-294v-29,-22,-54,-49,-75,-79r86,-82v16,27,38,47,56,72v7,3,10,10,15,15","w":180},"<":{"d":"580,-497r-478,194r478,195r0,75r-580,-239r0,-64r580,-239r0,78","w":611},"=":{"d":"591,-239r0,67r-594,0r0,-67r594,0xm591,-436r0,69r-594,0r0,-69r594,0","w":611},">":{"d":"580,-336r0,64r-580,239r0,-75r480,-195r-480,-194r0,-78","w":611},"?":{"d":"164,10v-40,-26,-70,-62,-97,-102r108,-106v27,42,62,76,97,111xm353,-718v36,127,-53,198,-102,279v-32,52,-56,112,-58,197r-33,-2v-17,-147,45,-235,71,-354v30,-137,-111,-163,-204,-101r-7,2r73,-152v62,-1,139,-3,180,25v34,23,67,61,80,106","w":372},"@":{"d":"810,-22r-786,0r0,-755r786,0r0,755xm800,-32r0,-736r-766,0r0,736r766,0xm737,-670r-346,0r0,231r210,0r0,69r-210,0r0,289r-294,0r0,-69r221,0r0,-520r-231,0r0,-63r650,0r0,63","w":840},"A":{"d":"929,-90v15,2,66,-38,74,-38v1,4,3,7,6,10r-192,114v-18,-91,-75,-195,-114,-276v-21,-43,-31,-74,-31,-93r-17,0v-41,17,-118,59,-152,81v-3,2,-95,-66,-104,-58v-23,0,-44,13,-61,40v-63,97,-145,242,-226,301v-59,42,-113,60,-176,24v-21,-13,-36,-27,-43,-42r5,-4v24,19,50,51,90,51v61,0,113,-29,156,-87v8,-5,38,-79,67,-125v8,-12,13,-22,13,-32r-135,82v12,-22,23,-26,50,-44v-19,-18,-43,-35,-64,-51r104,-68v-26,-24,-48,-45,-72,-75v1,-1,25,-10,70,-28v22,-9,37,-16,44,-21v-54,-47,-44,-48,-85,-68r106,-66r27,27v21,21,38,35,49,44v16,-9,23,-119,43,-125v66,-45,79,-61,128,-104r-229,-16v-81,7,-140,13,-168,31r-76,48v101,-90,168,-148,336,-143v4,0,11,-1,22,-2r436,36v61,1,109,-16,156,-31v-87,61,-163,88,-305,88v-9,19,2,31,23,86r53,138r109,251v22,38,33,75,54,112v13,22,22,33,29,33xm508,-414v17,-1,101,55,126,39v4,-1,13,-5,27,-11v-34,-58,-100,-262,-127,-310v-23,-42,-44,-30,-65,17v-30,67,-91,266,-120,333xm315,-479v-22,10,-62,37,-91,60r51,39v12,-13,32,-79,40,-99xm186,-295v7,2,35,28,49,44v14,-38,22,-63,26,-95v-16,7,-66,39,-75,51","w":995,"k":{"v":19,"r":43}},"B":{"d":"399,-491v176,-12,355,78,351,234v-2,104,-52,130,-135,179v-87,51,-166,79,-293,79v-30,0,-222,-52,-259,-48v-58,6,-126,-6,-162,22r-68,53v30,-59,156,-140,260,-140r78,2v33,-12,17,-180,19,-242r-6,-4v-5,0,-28,20,-72,60v-44,40,-67,59,-68,59r-10,-5v28,-22,37,-31,61,-57r-71,-64v13,-17,62,-44,74,-57v-19,-20,-69,-46,-77,-54v58,-41,104,-75,161,-126r-2,-155r-7,-4v-105,54,-314,-21,-427,19r-56,31v39,-60,109,-93,216,-93v122,0,260,32,370,3r-7,83v6,-1,31,-15,75,-42v44,-27,70,-41,75,-41v47,31,85,76,130,114v31,26,48,43,53,51v-11,11,-59,43,-143,98v-36,23,-56,38,-60,45xm465,-57v127,0,182,-39,182,-153v0,-172,-161,-235,-358,-223r0,-12v78,-44,148,-89,212,-136v-24,-12,-120,-119,-164,-155v-23,-2,-68,44,-68,70r0,270r15,230v2,13,-75,45,-87,58v4,-3,206,51,268,51xm182,-494r-2,-84v-23,17,-39,26,-56,46v23,12,40,26,58,38xm187,-372r-5,-97v-26,17,-39,26,-64,49v18,10,49,34,69,48","w":753,"k":{"w":19,"v":14,"u":14,"t":24,"r":62,"p":48,"m":39,"i":19,"h":45,"e":15,"d":19,"b":34,"a":-14,"Z":76,"W":24,"V":34,"U":38,"T":14,"S":24,"R":24,"Q":-48,"P":68,"O":-39,"N":-53,"M":-43,"J":67,"I":53,"G":-43,"F":-53,"E":-48,"C":-63}},"C":{"d":"470,-814v-7,26,-10,65,-10,109v9,6,117,-81,123,-77r108,37v71,24,111,35,119,33v-30,29,-67,54,-106,76r-210,-70v-22,7,-37,9,-37,27r0,380v1,72,3,127,28,159v6,8,26,5,31,7v-16,4,-132,45,-146,52v45,8,91,12,147,12v146,-1,228,-19,278,-99r13,7v-114,124,-152,161,-369,167v-245,6,-423,-115,-423,-339v0,-209,135,-331,303,-381v52,-15,32,-41,-8,-53v66,-15,103,-21,159,-47xm342,-712v-141,64,-240,137,-247,308v-6,146,134,311,268,319v10,-134,6,-282,7,-425v0,-61,-7,-159,-20,-202r-8,0","w":824,"k":{"z":48,"w":11,"t":24,"s":20,"r":53,"p":57,"m":53,"l":19,"i":14,"h":23,"b":29,"Z":53,"X":19,"U":9,"T":43,"S":24,"R":37,"Q":-14,"P":38,"L":68,"K":19,"J":9,"I":19,"H":24,"G":-19,"D":-9,"C":-24,"B":-106}},"D":{"d":"393,-801v269,0,460,140,460,397v0,149,-64,219,-160,292v-44,33,-110,72,-197,119r-332,-22v-75,0,-124,22,-147,67v-13,56,-13,93,-17,48v0,-8,6,-66,10,-70v18,-35,161,-122,215,-114r-2,-216v-28,2,-108,109,-134,114r-7,-5v12,-21,47,-38,55,-52v-6,-14,-68,-55,-89,-71v4,-8,71,-54,85,-70r-88,-75v51,-37,70,-47,126,-95v2,3,4,1,4,8v-3,11,-34,27,-34,29v1,5,60,52,72,57v4,-12,-11,-218,-34,-206v5,-5,29,-19,74,-43v19,-10,31,-18,34,-24v-112,-7,-263,18,-328,42v-8,3,-40,31,-47,34v24,-38,121,-131,124,-130v34,-19,260,-14,357,-14xm531,-69v144,2,230,-123,229,-271v-2,-253,-183,-395,-447,-391v-11,-1,-22,22,-21,33r0,294r26,261v-10,17,-67,50,-66,54xm218,-324r-5,-112v-19,11,-58,44,-67,61v13,4,62,41,72,51","w":888,"k":{"z":-58,"y":-63,"x":-59,"w":-58,"v":-58,"u":-52,"t":-53,"s":-39,"r":-43,"q":-62,"p":-54,"o":-43,"n":-38,"m":-53,"l":1,"k":-24,"j":-48,"i":-67,"h":19,"g":-67,"f":-48,"e":-49,"d":-39,"c":-58,"b":-4,"a":-30,"Z":64,"Y":43,"X":130,"W":14,"V":29,"U":67,"S":35,"R":57,"Q":-19,"P":29,"O":-14,"L":43,"K":9,"J":29,"I":38,"H":29,"G":-14,"E":-9,"C":-24,"B":-82}},"E":{"d":"228,-4r530,23v38,1,59,-11,86,-20v-168,91,-432,90,-682,63r-98,0v-130,3,-209,15,-218,117v-23,-60,3,-79,74,-124v81,-52,161,-61,278,-57v16,-64,9,-146,16,-219v-3,-16,2,-40,-7,-50r-131,134r-14,-9v12,-14,50,-43,59,-53v-17,-27,-53,-58,-86,-80v18,-26,64,-54,91,-76v0,-2,-93,-65,-96,-64r0,-7v62,-41,52,-35,124,-101v14,14,-20,29,-22,36v15,15,49,33,63,49r8,0r0,-229v33,-31,147,-81,198,-130v61,36,131,79,198,73v-46,7,-87,57,-129,61v-21,9,-136,-71,-149,-70v-20,2,-27,82,-27,105r0,217v11,7,143,-110,148,-108v42,21,95,59,150,53v2,-1,7,-4,15,-9v-34,22,-104,84,-132,95v-9,4,-85,-46,-116,-42v-21,-2,-65,23,-65,40r0,328xm200,-411v-2,3,-40,41,-60,56v26,13,45,34,68,51r-1,-107r-7,0","w":719,"k":{"z":19,"w":15,"v":19,"t":29,"s":24,"r":9,"q":19,"p":-25,"n":19,"m":-15,"l":53,"k":24,"j":-44,"i":24,"h":34,"f":24,"e":24,"d":29,"c":39,"b":48,"a":24,"Z":34,"Y":14,"X":82,"W":10,"V":19,"U":48,"T":48,"S":29,"R":53,"Q":-14,"P":24,"O":-5,"N":5,"M":15,"L":35,"K":9,"J":39,"I":48,"H":29,"G":-5,"F":-10,"D":9,"C":29,"B":-187,"A":15,".":-92}},"F":{"d":"271,-487v6,50,-18,100,32,100r251,0v10,0,24,-5,33,-8v-14,13,-77,57,-87,70r-224,0v-1,115,2,254,37,327v-55,0,-105,19,-152,58v-59,49,-95,75,-108,80r88,-79v55,-60,33,-145,48,-234r0,-81r-3,-2r-113,114r-10,-10v14,-10,47,-39,48,-48v0,-3,-13,-13,-39,-29v-26,-16,-39,-25,-39,-27v10,-13,87,-65,79,-61v-3,-4,-65,-41,-78,-46v10,-12,59,-56,76,-81r-92,-43v5,-9,57,-61,74,-79v25,13,55,37,93,42v-2,-66,16,-162,-35,-177v75,-13,163,-69,228,-103v47,14,110,57,156,79v-43,15,-67,74,-89,116v22,-74,-102,-133,-155,-140v-26,12,-23,90,-22,133xm184,-395r0,-111v-20,18,-37,39,-63,72xm184,-380v-14,21,-43,43,-58,63r60,39","w":570,"k":{"t":-24,"q":-9,"l":14,"h":25,"b":34,"Z":39,"X":102,"W":24,"V":24,"U":19,"T":53,"S":28,"R":34,"Q":-43,"P":43,"O":-34,"N":-24,"M":-19,"K":-14,"J":34,"I":68,"G":-58,"F":-33,"E":-53,"D":-14,"C":-58,"B":-149,".":48}},"G":{"d":"617,-457v122,-2,217,65,217,179v0,111,-40,124,-132,189v-80,57,-143,85,-268,88v-225,5,-427,-157,-410,-373v16,-203,130,-294,304,-359v24,-10,10,-58,-15,-43v29,-11,81,-24,121,-43v-3,40,-4,65,3,101v30,-20,77,-66,108,-72v33,-7,186,75,219,38v-35,22,-75,65,-120,72v-23,4,-166,-39,-179,-39v-14,0,-34,14,-34,31r3,278r4,3v18,-4,129,-59,179,-50xm544,-57v121,1,192,-54,192,-170v0,-120,-92,-203,-233,-190v-38,3,-65,2,-67,37v-2,49,9,178,8,225v0,17,21,9,34,9r0,6v-30,8,-94,35,-115,50v57,15,139,33,181,33xm350,-489v-19,17,-39,41,-61,52r59,43xm328,-722v-121,57,-208,141,-208,291v0,156,77,267,230,334v13,-64,-3,-238,0,-266r-105,95v-5,-2,-10,-4,-8,-13v11,-5,37,-26,45,-36v-24,-14,-64,-43,-84,-61r0,-5v8,0,64,-45,76,-58v-14,-15,-58,-46,-73,-66r89,-57v18,10,43,38,63,48r-12,-206r-13,0","w":856,"k":{"w":19,"r":48,"p":24,"m":24,"l":20,"h":24,"b":34,"Z":136,"Y":30,"X":39,"W":53,"V":57,"U":53,"T":77,"S":58,"R":48,"Q":-24,"P":87,"O":-19,"L":34,"J":82,"I":80,"H":19,"G":-19,"F":-28,"E":-19,"C":-43,"B":-72}},"H":{"d":"660,-490v-2,60,74,300,74,370v0,150,-125,305,-291,258v84,-14,129,-23,135,-26v83,-38,88,-185,58,-300v-25,-95,-87,-220,-41,-313v-25,-16,-70,-19,-101,-37v-48,-27,-77,-48,-85,-67v-3,-6,-6,-9,-10,-9v-27,20,-114,81,-114,95r4,317v2,9,4,17,7,26v-9,2,-88,44,-92,51r162,61v4,-2,20,-14,29,-13r-98,79v-46,-26,-121,-62,-175,-62v-55,0,-63,14,-105,49r0,-5v33,-39,95,-93,144,-100v55,-8,52,-80,51,-135r-2,-105v-37,22,-68,76,-99,108r-13,-9v30,-26,27,-25,50,-55v-23,-12,-55,-29,-70,-44v11,-16,62,-53,73,-66v-9,-11,-50,-40,-68,-53v6,-11,41,-51,62,-73v17,9,58,51,67,49r0,-127v1,-39,-8,-94,-35,-95r-4,-4v58,-23,120,-53,159,-91r6,7v-71,18,-51,168,-49,257v62,-44,131,-85,180,-140v29,56,120,116,197,120v12,1,12,-4,21,-4v-20,25,-26,38,-27,86xm210,-479v-15,13,-38,49,-52,61v12,10,35,22,50,31","w":756,"k":{"r":24,"b":19,"U":82,"P":43,"L":39,"E":-9,"B":-78,".":-19}},"I":{"d":"307,-807v108,0,277,55,365,1v-42,71,-65,101,-64,197r4,357v-1,126,-119,197,-207,240v-75,36,-177,10,-242,-16v-28,23,-75,53,-121,54v-24,0,-30,-24,-27,-49v3,-28,104,-84,145,-81v72,6,207,70,252,60v98,3,121,-114,108,-223v-40,24,-104,66,-123,92v-8,1,-7,-6,-10,-9r39,-32v-20,-17,-56,-37,-86,-60r88,-57r-96,-75r87,-50v-3,-16,-19,-18,-35,-34v-15,-14,-27,-22,-34,-28r110,-73r10,3r-22,15v16,22,40,36,59,55r6,0v-6,-76,14,-169,42,-214r-6,-3v-122,35,-259,-28,-392,0v-73,15,-137,65,-105,149r-10,5v-33,-72,-1,-117,77,-167v60,-39,123,-57,188,-57xm510,-408r0,-95v-20,4,-28,19,-48,27v-12,5,-19,13,-24,20v28,12,48,32,72,48xm520,-285r-7,-97r-65,51xm154,-28v-39,-17,-117,-31,-123,21v3,35,36,20,65,11v20,-6,39,-17,58,-32","w":641,"k":{"l":-14,"k":-33,"d":9,"Z":19,"X":33,"S":14,"R":43,"L":29,"H":25,"F":-24,"E":-29,"D":-48,"C":-29,"B":-130}},"J":{"d":"11,-619v7,-119,127,-163,258,-182r297,26v26,3,61,-8,78,-18r4,6v-15,34,-30,82,-29,134r0,433v-18,134,-57,186,-153,271v-78,69,-158,101,-239,101v-97,0,-215,-47,-174,-143v19,-45,60,-87,123,-124r8,8v-35,20,-54,32,-54,73v0,76,84,113,170,113v145,0,233,-87,233,-230r2,-84r-6,-2r-140,111v-5,-6,-9,-12,-10,-17v26,-15,27,-15,57,-39v-16,-19,-60,-52,-83,-74v12,-11,73,-46,86,-58v-26,-27,-64,-54,-84,-72v3,-8,69,-40,82,-54v-24,-16,-45,-34,-71,-60r92,-62r69,69v15,-23,0,-66,0,-96v0,-48,0,-106,18,-142v1,-4,-1,-6,-5,-6v-109,31,-247,-8,-367,-4v-86,3,-162,40,-157,134v-2,-4,-4,-8,-5,-12xm531,-382r0,-93v-16,6,-61,29,-71,40v12,6,60,44,71,53xm533,-249r-2,-112v-31,17,-48,27,-73,51v29,19,50,39,75,61","w":660,"k":{"Z":24,"X":24,"S":14,"R":48,"L":74,"K":19,"H":24,"D":-29,"C":-29,"B":-97}},"K":{"d":"224,-105v59,26,123,37,186,42v9,0,17,-1,24,-4v-23,20,-105,64,-147,65v-73,4,-209,-67,-276,-23v14,-10,121,-94,152,-86v12,0,23,4,34,5v19,-5,17,-22,17,-55r0,-225v-47,26,-82,70,-124,125r-13,-10r53,-59v-12,-13,-62,-51,-69,-58v4,-15,72,-55,78,-64v-22,-21,-55,-50,-78,-63r107,-103v12,14,-22,26,-24,32v3,10,57,56,70,58v1,-78,4,-157,-13,-218v-8,-29,-31,-37,-55,-42v69,-11,107,-20,115,-26v1,-1,13,-21,29,-64v10,-28,96,-131,145,-133v-88,37,-138,161,-137,291r0,111v83,-39,209,-121,263,-172v29,66,89,168,140,195r-267,156v181,20,255,222,326,350v13,24,39,8,57,-3r5,10v-36,10,-113,48,-133,70v-51,-95,-115,-217,-178,-282v-56,-58,-109,-88,-163,-88v-40,1,-52,8,-52,49v0,55,-5,129,9,170xm588,-542v-53,-57,-73,-93,-105,-156v-39,29,-77,54,-115,73v-45,22,-67,38,-67,49r0,197v80,-33,227,-117,287,-163xm214,-405r0,-105r-68,61v27,17,43,18,68,44","w":848,"k":{"u":9,"W":24,"V":44,"U":131,"T":106,"R":48,"Q":53,"P":106,"O":73,"N":68,"M":78,"L":136,"J":39,"I":9,"H":24,"G":58,"F":58,"E":87,"D":48,"B":-57,".":-19}},"L":{"d":"277,-520v-6,-92,11,-231,-39,-272v53,0,85,-4,98,-11v49,-49,74,-140,162,-122v-91,-6,-122,120,-123,230r-8,659v-36,12,-75,26,-104,45v31,20,164,19,213,29v85,17,156,16,253,16v34,0,36,-18,58,-47v-1,10,-3,19,3,25v-67,59,-89,95,-196,95v-109,0,-310,-46,-430,-59v-51,-5,-104,0,-137,18v30,-27,67,-45,110,-56v75,-19,114,-31,115,-37v18,-77,26,-215,20,-313r-139,137v-10,-7,-16,-10,-18,-11v19,-19,55,-41,71,-57v-11,-13,-83,-73,-104,-88v6,-15,84,-61,103,-76r-100,-73v48,-14,106,-75,145,-112r8,9v-22,18,-25,23,-39,40v18,20,46,39,73,57xm272,-351r0,-112v-10,5,-66,49,-72,57v28,16,47,36,72,55","w":408,"k":{"z":-29,"y":-145,"x":-39,"w":-34,"v":-24,"u":-39,"t":-47,"s":-29,"r":-33,"q":-82,"p":-295,"o":-29,"n":-34,"m":-34,"l":-39,"k":-53,"j":-333,"i":-77,"h":-111,"g":-319,"e":-29,"c":-14,"a":-34,"Z":-14,"Y":-39,"X":-48,"W":-53,"V":-48,"U":-53,"T":-53,"S":-68,"R":-24,"Q":-34,"P":-111,"O":-34,"N":-29,"M":-39,"J":-335,"I":-29,"H":-19,"G":-39,"F":-249,"E":-418,"D":-185,"C":-53,"B":-326,"A":-141,".":-375}},"M":{"d":"848,-790v117,25,232,81,324,46v-54,42,-39,166,-39,263v0,119,23,243,19,346v-4,110,-97,157,-163,221v-25,25,-43,36,-48,38v-1,-3,-3,-6,-4,-9v56,-32,112,-91,112,-175v0,-188,-12,-377,-21,-571v-71,-31,-170,-63,-237,-63v-73,0,-89,17,-89,94r6,452v4,21,8,41,13,62v17,5,48,15,94,31v-2,-4,-92,53,-126,59v-29,-14,-86,-21,-137,-20v27,-21,58,-49,58,-80r0,-330v0,-91,-2,-149,-6,-172v-4,-23,-18,-37,-40,-45v-60,-23,-174,-75,-232,-76v-23,0,-39,9,-38,28r18,633v-68,61,-144,112,-220,142v-10,-1,-14,-7,-20,-12v106,-14,142,-75,140,-202r-3,-186v-31,20,-108,102,-134,138v-5,-2,-11,-6,-16,-11r69,-62r-94,-70r88,-80r-104,-71v-1,-3,100,-82,115,-100r11,8v-8,14,-21,18,-34,26v12,10,69,38,89,57v-4,-78,23,-180,-66,-180v-14,0,-22,0,-23,-1v84,-21,199,-54,254,-98r53,-42v22,13,56,31,75,31r219,77v19,-3,107,-72,137,-96xm207,-341r-6,-122v-16,8,-58,58,-73,68v21,6,66,39,79,54","w":1184,"k":{"r":14,"p":1,"R":19,"L":58,"H":24,"F":-9,"E":-14,"D":-18,"C":-24,"B":-121,"A":-14,".":-24}},"N":{"d":"800,-77v26,-2,27,-9,43,-24r8,12v-46,23,-85,64,-113,94v-55,-15,-142,-38,-209,-25r117,-132v34,-47,51,-119,51,-216v0,-96,-34,-162,-100,-204v-26,-17,-262,-113,-315,-153v-9,162,6,369,8,545v1,68,-4,131,48,125r-51,18v-69,20,-157,85,-229,99r-18,-5v45,-5,98,-26,110,-63v14,-42,40,-91,40,-143r0,-115v-22,5,-99,82,-115,103v-3,-3,-6,-5,-9,-8v8,-12,46,-42,46,-45r-89,-65v24,-22,83,-61,90,-69v-13,-20,-91,-79,-88,-80r125,-101v-1,13,-21,32,-23,42v20,24,46,48,65,59r0,-100v-2,-89,-10,-108,-87,-121v93,-22,168,-74,229,-131v37,-34,20,-26,68,4v43,27,47,22,101,48v134,66,299,116,299,297v0,71,-19,141,-67,204v-48,63,-83,100,-96,117v15,7,137,34,161,33xm192,-409v-21,15,-50,48,-71,68v18,8,50,30,69,43","w":861,"k":{"r":12,"Z":29,"W":19,"V":29,"U":97,"T":34,"P":39,"L":58,"J":29,"H":38,"D":14,"B":-53,"A":-14,".":-48}},"O":{"d":"605,-799v185,-6,331,191,331,382v0,240,-225,438,-487,419v-247,-18,-415,-134,-415,-380v0,-222,164,-354,360,-405v36,-9,61,-19,76,-26v21,14,-10,32,8,56v39,-21,94,-45,127,-46xm512,-751v-22,0,-41,9,-40,32r6,304r139,-74v70,-38,122,-68,155,-91v-77,-90,-137,-171,-260,-171xm779,-557v-74,37,-281,158,-301,176r0,41r325,-181v-4,-1,-13,-35,-24,-36xm562,-61v183,1,272,-113,271,-301v0,-47,-7,-92,-22,-135r-176,98v-21,17,-158,67,-157,106v2,63,3,82,12,147r16,0r0,8r-98,57v54,9,104,20,154,20xm395,-389v-2,-39,5,-88,-5,-119r-80,57xm331,-591v6,-2,60,53,59,58r0,-106v0,-41,-4,-104,-18,-127v-157,48,-255,139,-255,320v0,184,133,301,278,357r0,-274v-33,15,-63,42,-94,78v-16,19,-21,25,-40,20v6,-10,39,-43,52,-49v-30,-17,-84,-46,-98,-67r79,-67v0,-13,-61,-76,-61,-85","w":948,"k":{"z":-4,"y":-9,"w":-4,"v":-9,"u":-19,"t":-4,"s":9,"q":-9,"p":-9,"n":-23,"m":-14,"l":9,"j":-15,"i":-28,"h":29,"g":-14,"c":-19,"b":14,"a":-34,"Z":78,"Y":34,"X":73,"W":34,"V":39,"U":63,"R":33,"Q":-38,"O":-24,"N":-28,"M":-29,"L":19,"I":19,"H":19,"G":-29,"F":-24,"E":-29,"D":-29,"C":-43,"B":-91}},"P":{"d":"813,-788v-30,169,13,357,7,541v-4,107,-125,207,-217,247r-187,-40r-26,0v0,63,-3,105,16,157r-178,75r-4,-8v79,-61,79,-23,79,-154v0,-30,18,-89,-24,-87v-53,3,-81,12,-110,41r-7,-3v4,-12,110,-84,124,-87v33,-18,26,-44,26,-110r0,-96v-31,15,-95,71,-118,98v-9,2,-9,-5,-11,-10r48,-37v-6,-13,-35,-35,-86,-68v15,-14,65,-49,86,-70r-78,-79v44,-29,95,-56,129,-93v4,3,6,7,5,14v-10,4,-31,18,-40,25v10,13,47,57,60,66v6,-51,-2,-119,-9,-152v-7,-32,-18,-47,-32,-44v12,-6,99,-36,127,-58v-112,-23,-363,-51,-370,83v0,12,-6,41,-9,56v-6,-20,-4,-59,-3,-85v4,-68,168,-136,276,-132v147,6,270,26,407,37v35,3,84,-13,119,-27xm416,-718v-21,2,-22,77,-23,98r0,502r291,44v19,0,33,-33,40,-100v18,-158,-19,-279,-9,-449r10,-123v-5,17,-119,42,-148,40xm309,-329r-2,-123v-24,17,-37,29,-74,60v6,2,53,43,76,63","w":846,"k":{"u":-14,"t":-9,"q":-9,"n":-23,"m":-23,"i":-13,"h":9,"g":-9,"c":-14,"b":9,"a":-23,"Z":57,"X":39,"S":14,"R":58,"Q":-24,"O":-24,"L":24,"H":9,"G":-29,"F":-14,"E":-9,"D":-29,"C":-48,"B":-38}},"Q":{"d":"869,-435v-2,161,-53,228,-151,309v57,61,125,119,187,124r-111,55v-9,0,-37,-19,-84,-57v-47,-38,-73,-57,-78,-57v-55,34,-136,63,-230,63v-213,0,-383,-161,-378,-373v6,-248,180,-378,402,-429v-2,10,-6,48,0,57v59,-40,113,-74,202,-42v115,42,163,113,212,211v22,43,29,91,29,139xm482,-739v-30,0,-58,1,-58,26r-3,311v67,-32,236,-136,299,-177v-41,-74,-136,-160,-238,-160xm727,-563v-35,26,-154,93,-163,100v-30,27,-139,67,-144,105r4,24r270,-157v61,-36,61,-24,33,-72xm490,-68v229,0,310,-149,280,-381v-3,-22,-10,-41,-17,-56v-69,52,-271,151,-317,188v-28,42,-3,119,1,177v7,2,16,1,20,9r-110,43v57,11,78,20,143,20xm343,-395r-3,-96r-57,58v22,15,31,24,60,38xm334,-96v10,-78,8,-174,9,-264v-16,9,-98,119,-103,107v-3,0,-9,-4,-18,-11v6,-7,39,-30,57,-44v-21,-26,-71,-43,-86,-63v3,-12,68,-46,78,-68v-8,-13,-74,-60,-71,-62v6,-11,55,-46,83,-65r57,43r-9,-226v-98,57,-157,99,-178,126v-65,87,-78,212,-26,325v37,79,82,147,162,182v21,9,28,18,45,20","w":892,"k":{"x":-19,"u":-19,"t":-9,"h":14,"g":-19,"c":-19,"a":-28,"Y":19,"W":24,"V":19,"U":87,"Q":-29,"O":-24,"N":-14,"M":-14,"L":24,"I":-19,"G":-34,"F":-24,"E":-29,"D":-9,"C":-39,"B":-72,"A":-29}},"R":{"d":"105,-409v10,-13,72,-44,84,-59r-70,-69v29,-17,60,-33,86,-53v17,18,37,34,56,51v28,-127,57,-232,149,-304v31,-24,60,-46,93,-62r4,3v-42,30,-119,72,-60,131v45,44,192,131,260,157r-254,176v97,18,147,70,210,143r120,151v37,46,98,115,170,78v-19,26,-85,74,-127,71v-64,-4,-100,-50,-141,-100r-95,-117v-13,-15,-36,-41,-71,-78v-39,-43,-85,-88,-142,-88v-33,0,-63,8,-63,40r-3,148v1,29,7,28,36,29v-24,12,-89,59,-93,81v74,11,172,38,241,7v-12,15,-123,84,-150,76v-99,-6,-196,-28,-296,-21v-13,1,-24,6,-34,11v32,-34,85,-80,119,-80v36,0,76,-4,103,7v11,-22,8,-27,9,-64r6,-256r-6,0r-127,117r-11,-12v5,-9,53,-37,67,-48r-27,-27v-21,-21,-36,-34,-43,-39xm604,-558v-74,-28,-196,-100,-245,-149v-30,82,-31,217,-41,324v112,-52,191,-116,286,-175xm258,-509v-28,10,-30,18,-57,43r51,42","w":966,"k":{"w":19,"r":19,"n":-14,"k":-9,"e":-14,"Z":29,"Y":102,"W":126,"V":126,"U":179,"T":120,"S":24,"R":43,"Q":93,"P":160,"O":107,"N":97,"M":136,"L":130,"J":62,"I":39,"H":43,"G":111,"F":102,"E":63,"D":58,"C":34,"A":167,".":-24}},"S":{"d":"598,-719v18,0,44,-65,76,-41v7,6,13,19,7,32v0,-19,-5,-24,-23,-24v-22,0,-53,58,-92,174v-11,-47,-32,-74,-65,-76v-98,-7,-178,-45,-231,-78v-53,7,-138,95,-128,162v-12,54,97,179,138,182v7,-2,62,-53,78,-68v3,0,14,10,32,31v42,48,27,38,71,-8v24,-24,34,-39,37,-39v50,-2,159,114,154,194v-8,133,-116,183,-201,246v-86,64,-228,-1,-326,-6v-58,-2,-139,37,-139,88v0,28,19,45,47,45v-26,22,-63,-15,-59,-44v5,-39,145,-160,169,-227v16,5,2,20,-4,29v-16,24,-32,47,-49,70v31,-5,77,-25,105,-25v64,0,204,36,239,36v87,0,142,-58,142,-145v0,-65,-78,-189,-139,-181v-22,3,-64,58,-83,71r-63,-63r-73,72v-79,-45,-150,-103,-150,-204v0,-54,19,-100,58,-139r141,-89r90,-112v-20,52,4,64,61,97v51,29,112,40,180,40","w":668,"k":{"w":9,"r":41,"p":18,"o":-14,"m":29,"k":-9,"i":14,"b":9,"a":-18,"Z":82,"X":53,"T":29,"R":48,"Q":-24,"O":-14,"N":-19,"L":39,"K":34,"J":4,"I":24,"H":39,"G":-24,"F":-19,"E":-19,"D":-19,"C":-39,"B":-77,".":9}},"T":{"d":"899,-767v55,-1,54,-6,83,-35r9,8v-47,42,-83,79,-128,99v-42,-1,-164,-38,-241,-38v-41,0,-38,203,-39,271r-3,139v1,77,-4,113,49,122v-42,17,-116,48,-139,68v94,26,314,109,412,53r33,-25v-26,53,-137,105,-220,105v-162,0,-350,-116,-508,-57r-83,53v92,-91,184,-165,344,-131v18,-46,23,-133,24,-201r-4,-3v-41,28,-104,84,-152,93v-5,-2,-10,-3,-13,-4v17,-12,43,-19,60,-28r-84,-66v26,-20,81,-49,98,-66v-13,-22,-55,-58,-77,-80r112,-62r60,71r7,0v-4,-64,12,-148,-15,-189v16,-14,101,-46,118,-63v-68,-20,-231,-39,-301,-39v-202,0,-320,143,-254,335v-15,-11,-38,-103,-37,-127v7,-154,207,-277,389,-266v145,9,379,64,500,63xm496,-456v-31,13,-65,30,-80,52v10,5,55,40,74,44v8,-40,-4,-58,6,-96","w":912,"k":{"x":-19,"w":19,"s":-19,"r":49,"p":19,"m":42,"l":-63,"k":-77,"h":-19,"f":-54,"b":-69,"Z":19,"T":34,"N":34,"M":63,"L":77,"K":24,"J":14,"I":29,"H":43,"G":24,"F":14,"E":106,"D":-34,"B":-70,"A":-38,".":-48}},"U":{"d":"880,-77v7,65,24,23,63,18r2,8v-4,4,-127,44,-145,61r-7,0r0,-165r-6,-5v-69,76,-197,155,-319,158v-178,4,-325,-170,-325,-358v0,-160,96,-256,189,-334v-32,-3,-72,0,-106,0v-57,-2,-136,-21,-182,-1v-21,10,-33,18,-38,19v22,-32,109,-80,160,-88r215,21v64,-10,116,-35,166,-61r0,618v2,16,6,33,15,34v14,-2,25,-11,38,-5r-136,64v25,13,62,17,106,17v124,2,217,-65,217,-182r0,-456v-1,-22,-37,-11,-55,-10r-2,-9v54,1,119,-20,165,-35r-20,240r0,395v0,13,2,31,5,56xm464,-384r-2,-101v-25,13,-39,26,-60,51v17,8,49,41,62,50xm454,-747v-106,19,-248,180,-240,308v4,66,31,159,60,205v27,42,134,123,188,140r0,-254r-118,90r-7,-14v12,-5,35,-22,48,-33v-24,-16,-64,-48,-89,-72r89,-62v-10,-3,-57,-53,-74,-70v31,-22,60,-40,87,-69v4,0,19,13,44,40v12,13,19,20,20,22","w":960,"k":{"x":-14,"w":9,"U":24,"T":24,"S":24,"R":24,"Q":19,"P":24,"O":19,"N":24,"M":29,"L":73,"B":-107,"A":-4,".":-24}},"V":{"d":"759,-786v49,0,171,29,220,9v-46,33,-85,54,-154,54v-9,5,-17,36,-24,95r20,227v-9,135,-83,199,-181,291v-57,52,-92,90,-107,113v-92,-47,-255,-120,-357,-125v-37,9,-79,11,-97,39v-9,6,-11,24,-26,21v5,-37,79,-84,99,-101v37,-31,98,-4,118,-51v9,-21,16,-128,10,-183r-4,-3r-54,50v-39,37,-64,63,-74,76v-5,-3,-10,-7,-15,-12r61,-56v-18,-20,-53,-33,-77,-48v0,-6,71,-54,71,-68v-11,-24,-50,-41,-66,-63v30,-22,79,-53,105,-81v13,7,-7,15,-12,23v8,14,31,35,46,44v0,-82,4,-144,51,-188v-45,-7,-81,-11,-108,-14v-27,-3,-55,-4,-84,-5v-66,0,-112,62,-89,133r-7,0v-5,-14,-7,-37,-9,-54v-9,-68,121,-135,185,-135v69,0,141,33,212,16v-37,21,-59,42,-67,63v-4,28,-8,52,-11,71r17,197v-8,77,-12,118,-13,121v-9,33,-34,79,-77,137r0,8v93,5,231,72,320,102v85,-58,149,-160,149,-290v0,-104,-42,-225,5,-308r32,-47v-94,-17,-182,-3,-197,86r-5,0r0,-29v27,-64,108,-115,194,-115xm275,-418r-12,-96v-11,4,-54,45,-62,56","w":884,"k":{"s":14,"m":14,"l":-72,"k":-92,"j":9,"i":9,"h":-9,"g":14,"f":-38,"e":19,"d":19,"b":-74,"X":19,"S":34,"R":67,"L":53,"H":43,"E":19,"D":-29,"B":20,".":92}},"W":{"d":"1086,-801v45,5,156,38,206,15v-8,16,-36,21,-45,34v-17,13,-15,80,-22,98r21,227v-7,153,-70,216,-174,310v-53,48,-88,86,-103,114r-161,-74v-47,-18,-111,-51,-160,-60v-48,14,-101,93,-133,129r-68,-32v-90,-40,-191,-85,-275,-92v-34,10,-69,19,-91,41v-16,16,-16,24,-29,19v-8,-17,128,-116,170,-121v66,-7,49,-124,50,-212r-128,123v-3,-1,-7,-5,-13,-11r67,-53v-20,-15,-58,-39,-83,-48v2,-11,70,-58,70,-69v-4,-10,-50,-48,-65,-61v41,-27,63,-41,101,-80v12,7,-7,15,-12,22v11,19,25,29,44,44v6,-16,0,-30,0,-47v0,-63,15,-106,50,-138r-182,-19v-53,8,-95,27,-95,85r8,44v-2,1,-4,1,-6,1v-56,-100,76,-173,166,-187r162,23v20,-3,26,-1,43,-9r0,5v-62,32,-74,36,-74,135v0,116,41,245,-10,338r-62,112v112,10,215,66,309,101v62,-9,153,-182,144,-285r-18,-203v6,-69,17,-103,55,-143v-36,-8,-36,-10,-72,-10v-83,0,-96,12,-120,92v-39,-81,120,-143,186,-143v79,0,143,26,210,10v-37,20,-87,38,-148,54v-7,2,-14,29,-22,81r18,209v2,85,-40,179,-85,226v24,26,131,41,152,54v39,12,111,53,152,64v17,0,41,-23,72,-69v41,-61,72,-133,72,-217v0,-127,-48,-279,39,-351r-182,-19v-64,-3,-115,64,-86,128r-6,3v-23,-34,-20,-63,-2,-103v11,-23,128,-89,165,-85xm267,-424r-11,-93v-17,9,-45,39,-61,55","w":1312,"k":{"y":19,"s":29,"r":19,"h":33,"b":19,"Z":72,"X":92,"V":14,"U":24,"T":34,"S":43,"R":82,"L":64,"K":43,"J":19,"I":43,"H":68,"B":-19,"A":24,".":107}},"X":{"d":"970,-113v23,0,59,-61,60,-35v-22,22,-85,82,-104,116v-7,13,-15,18,-21,18v-133,0,-285,-128,-314,-248v-10,-41,-13,-83,-19,-125v-59,176,-95,226,-244,309v14,13,132,51,168,74r-22,0v-60,-21,-123,-53,-159,-67v-55,32,-128,73,-205,74v-44,0,-89,-12,-94,-47v-5,-38,116,-89,150,-89v59,0,106,30,149,50v37,-12,148,-120,153,-164v17,-50,22,-87,23,-147v-95,0,-158,-5,-238,26v29,-30,71,-81,90,-115r8,0r-13,22v41,12,98,-1,146,0r0,-9v-44,-141,-140,-289,-320,-254v-15,7,-27,11,-35,14r6,-18v45,-6,88,-65,134,-65v144,0,252,101,287,216v11,37,14,76,21,113v41,-108,92,-176,186,-248r111,-85v19,-16,31,-24,36,-24v44,24,83,60,140,62v-35,23,-60,57,-90,71v-8,7,-112,-60,-116,-57v-26,0,-64,27,-115,81v-60,64,-90,128,-90,191v6,26,62,19,94,20v65,2,86,-5,128,-17v-37,19,-61,38,-70,59v-15,36,-68,15,-107,15v-21,0,-31,4,-31,12v30,133,159,271,317,271xm112,-95v5,40,91,40,136,31v16,-3,34,-8,53,-16v-37,-24,-162,-76,-189,-15","w":1056,"k":{"Z":53,"X":29,"T":78,"S":43,"R":53,"Q":14,"P":39,"O":19,"N":116,"M":116,"L":136,"K":43,"J":29,"I":24,"H":39,"B":-63}},"Y":{"d":"695,-531v28,-54,112,-55,111,15v-1,36,-13,53,-36,72r-7,0v21,-16,36,-28,37,-58v1,-24,-21,-53,-47,-53v-36,0,-62,37,-73,111v-9,56,-14,98,-18,126v-24,180,-85,321,-151,434v-73,126,-214,207,-401,165v-48,-11,-92,-36,-132,-69v64,30,101,60,206,60v168,0,315,-91,314,-247v0,-31,11,-110,10,-123v-32,28,-59,50,-81,67v-7,6,-16,12,-26,19v-105,3,-228,-78,-321,-110v-16,-1,-24,1,-49,5r59,-43v21,-21,31,-49,31,-84v-2,-104,-19,-223,2,-317r25,-74v-20,-18,-82,-72,-92,-74v-11,1,-28,10,-39,14r-2,-5v50,-33,80,-50,117,-86v17,-3,81,100,109,91v94,-28,175,-60,227,-108v37,34,114,97,177,79v21,-6,31,-13,34,-13v-38,37,-90,78,-92,148r-9,413r2,125v44,-100,42,-298,82,-403v15,-38,26,-63,33,-77xm508,-150v2,-136,-20,-303,13,-413r42,-78r-145,-75v-43,-22,-96,3,-130,16v-76,28,-104,79,-104,186r7,101r0,76v6,62,-30,117,-48,145v109,47,208,101,323,112v20,2,43,-55,42,-70","w":716,"k":{"y":-42,"x":-9,"u":-18,"o":44,"n":-34,"m":-43,"l":-14,"k":-24,"j":-48,"i":-59,"g":14,"e":24,"d":-9,"b":-24,"a":19,"Z":68,"X":63,"W":19,"V":19,"U":48,"T":34,"R":19,"P":39,"O":43,"J":24,"I":39,"H":-9,"F":-58,"E":-24,"D":-62,"C":-10,"B":-145}},"Z":{"d":"948,-211v31,-32,78,-23,86,20v10,51,-135,121,-149,133v-97,80,-192,63,-366,50r-353,-27v-59,-1,-103,17,-142,37r-3,-5v163,-103,309,-249,415,-405v-84,1,-178,-11,-254,2r-68,20v26,-18,87,-73,99,-95r262,5v41,-16,51,-55,84,-110v4,-14,58,-78,58,-118v0,-28,-48,-21,-78,-21v-122,0,-314,-4,-405,21r-55,48r-9,-5v72,-70,102,-111,143,-202r13,7v-9,16,-18,33,-25,41v19,15,60,17,101,17r355,-4v58,-18,62,59,32,99v-19,25,-28,42,-30,47v53,-53,100,-97,146,-129v69,-48,104,-73,168,-39v49,27,2,100,-20,112v15,-16,25,-25,26,-51v2,-31,-31,-52,-60,-52v-37,0,-199,112,-220,134v-88,93,-111,120,-165,205v34,17,88,8,133,10v84,3,146,-10,202,-29v-65,58,-97,88,-202,87r-178,-2v-5,0,-36,30,-88,93v-80,97,-147,132,-227,214v190,-15,398,24,583,37v85,6,255,-52,255,-126v0,-41,-37,-30,-59,-13","w":1048,"k":{"r":43,"p":24,"h":19,"b":24,"Z":58,"V":19,"U":63,"T":82,"S":63,"R":68,"P":63,"N":14,"M":9,"L":123,"K":68,"J":58,"I":73,"H":72,"F":43,"E":43,"D":19,"B":-48,"A":53}},"[":{"d":"270,-976r0,28r-122,0r0,1071r122,0r0,26r-250,0r0,-1125r250,0","w":280},"\\":{"d":"-10,-855r71,0r333,973r-69,0","w":429},"]":{"d":"17,149r0,-28r122,0r0,-1070r-122,0r0,-26r249,0r0,1124r-249,0","w":280},"^":{"d":"353,-725r253,281r-50,0r-253,-208r-253,208r-47,0r253,-281r97,0","w":633},"_":{"d":"503,164r0,72r-505,0r0,-72r505,0","w":524},"`":{"d":"1109,-42r-1086,0r0,-737r1086,0r0,737xm1093,-57r0,-708r-1055,0r0,708r1055,0xm820,-705v149,53,203,63,211,224v6,132,-117,240,-250,240r-188,0r0,-132r-70,0r0,132r-63,0r0,-132r-226,0r2,112v-1,95,-27,109,-96,145r-31,0r0,-29v36,-19,54,-29,54,-74r0,-486r77,0r0,235r252,-235r31,0r0,287r70,0r0,-287r227,0xm944,-481v0,-75,-21,-123,-63,-144v-13,-7,-52,-19,-116,-36r-94,0r0,375v74,4,125,-15,183,-26v60,-28,90,-84,90,-169xm453,-425r0,-155r-165,155r165,0","w":1152},"a":{"d":"24,-28v51,-23,48,-138,32,-195v88,-33,140,-51,156,-59v58,-28,75,-37,70,-93v-47,-33,-113,-62,-167,-64v-43,-1,-89,50,-85,91v5,57,20,56,70,95r-7,0v-45,-23,-84,-48,-84,-99v0,-35,39,-68,113,-107v96,-51,128,-75,107,-167v-4,-17,-11,-32,-22,-44v21,16,47,64,47,94v0,44,-29,68,-60,89v20,0,140,56,195,62v-40,68,-16,211,-22,315v6,20,64,52,93,34v-4,11,-75,50,-99,63v-2,4,-83,-39,-84,-36v-29,3,-66,53,-89,46v-2,0,-30,-7,-83,-18v-38,-8,-51,-12,-81,-7xm154,-86v38,0,108,29,128,25r0,-227v-41,10,-72,19,-94,27v-22,8,-34,16,-34,23r0,152","w":480,"k":{"z":14,"y":9,"w":58,"v":62,"u":34,"t":34,"s":14,"r":62,"p":52,"o":18,"n":19,"m":66,"l":39,"j":59,"i":25,"h":39,"g":19,"f":19,"e":19,"d":19,"c":34,"b":51}},"b":{"d":"292,-941v-83,68,-121,78,-121,195r0,350r150,-95r-6,8v23,20,96,52,135,57v-25,11,-27,29,-28,62r0,237v11,34,5,25,-42,50r-45,21v-45,19,-63,32,-95,54v-4,0,-141,-49,-149,-44r-40,14v17,-11,43,-34,42,-70v-1,-36,7,-122,7,-154r0,-280v0,-63,-3,-110,-9,-143v-12,-66,-36,-99,-72,-99v33,-13,71,-2,105,-8v25,-64,106,-129,168,-155xm306,-59v27,1,35,-30,35,-58r0,-224v0,-51,-44,-81,-98,-80v-11,-4,-71,41,-69,49r0,270v34,7,89,41,132,43"},"c":{"d":"260,-491v1,-2,164,64,171,56v4,3,27,-13,33,-3r-134,57v-27,-4,-114,-38,-141,-52v-14,12,-17,55,-17,85r0,260v76,9,145,30,227,31v6,-1,12,-3,19,-7v-2,5,-139,66,-150,63v-75,-17,-150,-33,-234,-19v23,-17,39,-11,39,-35r0,-321v-1,-6,-5,-12,-10,-18v-20,9,-25,12,-47,18r-3,-5r123,-50","w":470,"k":{"s":19,"h":48}},"d":{"d":"201,-801v-22,35,-52,88,-52,115v0,21,18,51,55,89v42,43,111,100,188,132v23,11,37,18,40,21r-5,354v-75,17,-163,75,-202,90v-57,-19,-134,-45,-203,-25v36,-26,46,-17,47,-74r3,-276v0,-42,-6,-52,-34,-56v16,1,146,-51,147,-65v-32,-23,-115,-78,-117,-105v36,-43,90,-134,122,-192v3,-3,7,-5,11,-8xm198,-483v-19,-5,-42,74,-41,89r0,288v2,12,120,41,156,51r10,-2v14,-100,8,-219,9,-332v0,-9,-21,-26,-62,-53v-41,-27,-65,-41,-72,-41","w":452,"k":{"l":19,"h":34}},"e":{"d":"261,-492v61,32,134,72,195,67v-12,15,-276,142,-301,149r8,191v60,1,137,30,196,30v25,0,33,-12,51,-20r5,5v-9,7,-115,60,-148,76v-65,-1,-174,-51,-246,-22v27,-20,37,-22,38,-84r4,-172v-1,-49,2,-99,-19,-119r100,-50v69,-34,108,-51,117,-51xm335,-376v-48,6,-144,-42,-169,-51r-8,132v41,-11,129,-58,177,-81","w":472,"k":{"s":24,"q":24,"o":19,"l":48,"k":29,"h":58,"e":29,"d":29,"c":24,"b":62,"a":29}},"f":{"d":"89,-494v-5,-95,17,-222,-27,-278v70,-25,117,-62,168,-103v31,10,75,29,107,33v-30,43,-45,50,-47,113v-16,-49,-43,-52,-121,-71v-10,87,-14,181,-12,281r133,0v-23,25,-37,47,-39,84v-19,-15,-46,-35,-89,-30r1,342v7,47,21,49,73,72v-25,19,-70,52,-82,56v-29,-4,-74,-61,-121,-40v76,-77,52,-264,56,-419v-4,-11,-19,-8,-28,-4v-5,2,-16,7,-31,15v20,-27,27,-32,59,-51","w":368,"k":{"z":42,"y":43,"x":34,"w":29,"v":39,"u":33,"t":57,"s":43,"r":29,"q":58,"p":53,"o":72,"n":34,"m":19,"j":43,"i":24,"h":19,"g":48,"f":29,"e":39,"d":29,"c":39,"a":34}},"g":{"d":"56,-371v0,-19,-13,-27,-28,-34v53,-16,128,-33,168,-55v23,-13,37,-19,42,-19v62,15,152,34,226,34v-69,8,-45,95,-45,177v0,112,-9,237,7,336v17,0,27,1,32,3v-110,12,-163,41,-236,79v-46,-18,-118,-43,-173,-45v-38,-1,-102,33,-101,68v0,17,13,36,29,38r0,5v-26,-5,-37,-16,-41,-43v-10,-66,243,-136,290,-171v-70,-17,-145,-38,-208,-14v31,-25,37,-34,38,-89r0,-270xm327,-57v-1,-118,10,-241,-3,-350v-40,3,-136,-22,-172,-21v0,28,-3,50,-7,71r3,279v56,0,115,14,166,23xm133,59v54,-1,128,19,176,37v21,-16,14,-97,15,-141v-35,25,-133,75,-191,104","w":480,"k":{"w":19,"v":19,"r":29,"o":19,"l":57,"k":34,"h":53,"b":39}},"h":{"d":"396,-96v1,41,9,52,42,62v-43,13,-65,19,-66,19v-31,13,-46,39,-46,78v0,63,50,96,110,76v-10,8,-31,21,-48,20v-59,-3,-72,-49,-80,-119v14,-131,13,-279,12,-425v-5,-16,-75,-43,-115,-57v-22,6,-31,43,-31,76r3,257v4,34,31,41,69,54v0,2,-70,55,-75,53v-35,-17,-87,-32,-134,-40r56,-41v11,-18,16,-66,16,-144r0,-340v1,-104,-13,-132,-78,-167r98,-10v15,-27,36,-91,73,-128v28,-28,51,-52,73,-63v-44,69,-92,99,-92,226r0,268r5,2r80,-51v53,19,106,50,170,45v-36,33,-43,55,-42,131r0,218","w":456,"k":{"w":14,"v":19,"l":58,"k":14,"h":24,"b":43}},"i":{"d":"94,-565v2,-4,54,-40,59,-40r59,33v-21,12,-53,44,-68,29v-12,-8,-29,-15,-50,-22xm175,-149v0,84,22,96,110,98r-114,51v-59,-20,-54,-25,-139,-41r45,-34v26,-55,7,-219,11,-306v2,-45,-48,-48,-78,-56v35,-14,66,-30,96,-50v44,23,93,32,148,43r-60,34v-24,25,-19,186,-19,261","w":296,"k":{"y":14,"w":29,"v":19,"t":33,"r":48,"p":19,"l":39,"j":19,"b":38}},"j":{"d":"89,-586v1,-3,51,-45,55,-44r56,35v-22,10,-49,54,-70,29v-9,-7,-23,-14,-41,-20xm95,6r-6,-422v-17,-1,-47,-13,-65,-19r81,-63v28,26,82,42,146,41v-43,13,-70,16,-71,52r-6,362v0,20,17,51,29,62v-21,0,-41,20,-61,59v-50,100,-99,162,-148,185r75,-93v17,-41,26,-96,26,-164","w":260,"k":{"z":24,"x":24,"t":24,"s":48,"q":24,"o":38,"l":53,"k":29,"h":63,"g":19,"f":4,"e":39,"d":24,"c":24,"b":63,"a":29}},"k":{"d":"188,-979v29,14,61,64,62,102v-69,90,-106,205,-96,381v2,26,1,47,1,64v29,-14,93,-54,126,-74r-9,7v24,21,73,28,131,28v-21,13,-123,116,-160,154r76,129v26,36,59,97,90,123v13,-2,27,-22,36,-10r-111,62r-9,0v-27,-56,-95,-149,-128,-215v-21,-42,-32,-22,-53,-7r0,163r78,25v-25,14,-65,40,-90,49v-33,-14,-65,-22,-119,-34r42,-30v24,-158,14,-382,16,-565v0,-77,-15,-117,-58,-141r93,0v80,1,157,-85,114,-166xm188,-435v-21,0,-32,52,-38,75r0,103v60,-37,114,-90,162,-155v-50,1,-86,-12,-124,-23","w":460,"k":{"z":29,"y":19,"w":53,"v":48,"u":34,"t":43,"r":58,"p":58,"o":29,"n":25,"m":48,"l":34,"j":39,"i":9,"h":14,"e":24,"d":29,"c":34,"b":53}},"l":{"d":"72,-26v33,-166,19,-362,19,-553v0,-117,-13,-184,-38,-202v-9,-3,-19,-7,-28,-11v62,0,99,-5,112,-16v41,-80,69,-189,156,-189v23,0,31,9,41,28r-6,49v2,-39,-6,-68,-41,-67v-31,0,-59,26,-84,78v-27,57,-40,129,-40,216r0,574v0,40,55,61,98,55r-92,64v-28,-13,-66,-20,-97,-26","w":280,"k":{"w":48,"v":57,"u":14,"t":18,"s":9,"r":47,"p":14,"o":20,"m":39,"l":43,"j":49,"i":24,"h":14,"e":9,"c":29,"b":29}},"m":{"d":"808,-423v-32,19,-54,26,-54,70r0,272v0,7,16,18,47,32v27,12,45,19,52,20r-113,31v-5,0,-81,-25,-111,-21v46,-70,28,-220,28,-332v0,-43,-19,-35,-67,-46r-95,-22v-12,8,-23,51,-23,78r0,267v2,25,59,43,90,38v-1,7,-107,47,-116,44v-28,0,-110,-30,-112,-27v40,-22,42,-46,42,-106r0,-250v-3,-18,-107,-59,-138,-59v-21,0,-32,34,-32,103r0,237v-6,40,49,41,77,46r-93,54v-23,-8,-94,-26,-124,-25v9,-13,28,-18,35,-29v13,-94,10,-205,10,-312v0,-59,-36,-77,-103,-76v63,-22,69,-25,128,-61r95,54v32,-10,63,-31,92,-46r170,55v37,-18,57,-36,82,-47v68,18,161,55,233,58","w":868,"k":{"w":14,"v":39,"r":48,"j":34}},"n":{"d":"418,-416v-34,35,-38,48,-39,121r0,218v-2,15,61,32,84,39r-84,39r-105,-24v45,-57,20,-237,26,-343v9,-22,-107,-63,-121,-63v-14,0,-33,41,-33,56r0,289v4,27,37,34,70,43v-1,2,-82,43,-86,42v-8,-1,-86,-27,-97,-27v34,-24,32,-19,32,-78r0,-278v-1,-21,-29,-35,-56,-34v2,-3,50,-43,72,-61v21,12,77,44,91,44v7,7,68,-59,69,-57v21,-3,154,77,177,74","w":476,"k":{"w":43,"v":39,"t":33,"r":38,"l":34,"j":33,"d":14,"b":39}},"o":{"d":"85,-33v-61,-4,-19,-74,-19,-119r0,-213v-2,-10,-4,-21,-9,-28r-35,9r-3,-5v99,-30,146,-55,210,-101v5,0,211,58,227,50v-26,102,-13,215,-8,329v-17,28,-109,57,-139,88v-17,18,-31,26,-38,25xm164,-422v-12,94,-8,225,-3,326r97,21v44,8,50,11,78,10v24,-65,2,-220,8,-328","w":472,"k":{"z":9,"s":19,"l":38,"h":39,"b":48}},"p":{"d":"211,-448v12,6,78,-44,82,-44v51,22,103,52,164,61v-14,9,-21,36,-21,80v0,88,-9,189,11,261r-145,91v-65,-13,-101,-21,-107,-22v-13,32,2,103,11,129v-45,0,-79,16,-101,49v-27,41,-49,64,-66,70v61,-52,78,-137,72,-252v-37,-2,-63,5,-88,14v6,-13,81,-34,90,-43r0,-287r-5,-62v-15,-8,-67,-29,-94,-18v27,-14,78,-52,104,-65v26,11,65,35,93,38xm195,-68v41,2,87,-7,118,7r43,0r1,-151r-6,-141v13,-47,-108,-66,-128,-78r-12,0v-8,13,-16,39,-16,64r0,299","w":456,"k":{"o":-14,"n":-38,"m":-43,"h":39,"b":52}},"q":{"d":"62,-131r-6,-252v-14,-6,-22,5,-38,6r0,-6v79,-24,140,-53,202,-106v56,29,150,63,232,62v-23,18,-28,48,-28,90r-3,423v0,19,9,34,28,44r-79,0v-15,-4,-71,101,-94,114v27,-90,54,-156,48,-256v0,-8,8,-38,-4,-40v-2,0,-15,9,-39,27v-24,18,-38,27,-42,27v-60,-16,-138,-38,-205,-39v20,-27,29,-47,28,-94xm151,-95v19,-2,155,35,177,29r1,-294v-3,-32,-162,-44,-169,-55v-15,95,-7,212,-9,320"},"r":{"d":"141,-494v46,17,93,49,121,58v24,-4,63,-37,86,-51v34,21,68,44,106,60v-57,30,-133,72,-133,117v0,15,24,49,80,91v50,38,48,101,-19,103v-28,0,-46,-9,-47,-33v-2,-8,23,-24,46,-21v-5,2,-37,11,-32,24v8,29,83,23,80,-11v0,-6,-27,-36,-83,-88v-48,-44,-50,-87,-8,-128r-72,-47v-20,20,-23,53,-24,99r0,227v2,15,112,45,135,41v-56,26,-83,43,-127,53v-47,-15,-118,-35,-172,-36v51,-46,60,-55,60,-149r0,-175v-1,-47,-60,-84,-115,-72v38,-19,91,-36,118,-62","w":463,"k":{"z":9,"s":29,"q":19,"l":48,"k":19,"h":62,"b":52,"a":5}},"s":{"d":"442,-492v0,-40,-12,-52,-54,-52r34,0v65,32,46,94,-4,141v-4,4,-42,36,-114,96v1,2,17,11,47,26v14,7,23,15,27,22r-3,131v-15,41,-77,76,-120,106v-25,17,-42,24,-51,24v-10,7,-142,-76,-149,-71v-13,5,-25,39,-24,65v2,51,13,65,51,81r-14,0v-41,-20,-56,-30,-56,-81v0,-94,103,-151,158,-209v2,-9,-109,-63,-124,-52v29,-26,32,-84,14,-124v51,-12,117,-55,166,-97r141,106v42,-17,75,-59,75,-112xm299,-316v-19,-26,-111,-91,-135,-107r-8,0r-7,112v4,6,70,39,90,50v7,-1,48,-42,60,-55xm292,-94v4,-57,23,-156,-45,-151v-15,-5,-126,91,-133,100v8,-3,128,105,168,95","k":{"z":39,"y":14,"x":14,"w":24,"v":19,"u":24,"t":48,"s":72,"r":39,"q":53,"p":34,"o":48,"n":19,"m":14,"l":31,"k":48,"j":14,"i":9,"h":86,"g":19,"f":4,"e":43,"d":34,"c":24,"b":43,"a":24}},"t":{"d":"95,-376v1,-39,-46,-15,-80,-20r78,-55v21,-21,50,-68,85,-140r0,135r198,0r-55,44v-16,29,9,82,-14,113v18,-72,-47,-118,-124,-101r-5,275v-3,70,116,75,173,51r-124,72v-3,5,-146,-42,-181,-38r37,-35v22,-61,8,-212,12,-301","w":396,"k":{"z":29,"y":9,"x":20,"w":14,"v":9,"u":19,"t":29,"s":29,"r":19,"q":29,"p":24,"o":29,"l":52,"k":29,"h":71,"g":23,"f":20,"e":38,"d":29,"c":29,"b":66,"a":33}},"u":{"d":"389,-148v0,56,40,72,87,93v-37,16,-67,37,-90,49v-27,-22,-75,-59,-92,-62v-8,-3,-79,72,-92,64v-4,1,-125,-31,-155,-28v25,-32,31,-48,32,-99r0,-235v-8,-46,-9,-34,-62,-56v54,-27,71,-45,98,-59v9,4,67,47,91,54v-36,22,-54,29,-54,81r0,233v-6,21,88,46,112,45v44,-3,49,-50,48,-113v-3,-98,14,-219,-27,-279v43,-10,68,-19,128,-41v-41,79,-24,236,-24,353","w":488,"k":{"w":58,"v":48,"r":53,"p":29,"m":38,"l":23,"j":51,"b":14,"a":14}},"v":{"d":"338,-392v-1,-25,-38,-40,-67,-39v0,-3,56,-45,77,-61v30,14,85,42,112,43r5,5v0,2,-46,18,-49,28v-3,78,-13,260,5,301v-54,24,-110,83,-153,113v-56,-20,-115,-55,-181,-51v16,-72,6,-176,8,-263v2,-81,-4,-102,-75,-107r84,-64v31,21,77,43,110,43v-13,13,-44,15,-44,57r0,244v1,9,3,25,10,28r148,41v7,0,10,-8,10,-25r0,-293","w":457,"k":{"s":19,"l":14,"h":39,"b":34}},"w":{"d":"638,-25v12,-8,20,-48,20,-75r0,-302v-32,-13,-49,-17,-92,-22v29,-20,55,-50,89,-64r181,47v-67,21,-86,27,-86,105r0,236v2,11,8,28,10,45r-196,55r-193,-31v-19,7,-66,27,-79,28v-66,-13,-140,-19,-230,-19v40,0,39,-37,39,-75r0,-241v0,-50,-10,-76,-29,-79v-19,-3,-36,-5,-53,-7v36,-32,57,-51,95,-71v12,1,122,46,139,43r-48,29v-5,10,-8,35,-8,74r0,283v9,6,143,34,161,32v15,-1,20,-1,20,-16r0,-333v2,-45,-52,-33,-79,-47v4,-5,64,-48,82,-61v41,8,106,38,139,39v-26,19,-46,18,-46,47r0,330v30,25,109,51,164,50","w":852,"k":{"s":48,"o":28,"l":43,"k":19,"h":71,"e":29,"d":19,"c":29,"b":68,"a":33}},"x":{"d":"403,-451v11,-4,31,-25,50,-25r2,10v-55,16,-98,99,-135,144v-14,17,-54,40,-63,52v45,-2,105,9,138,-5r-59,61r-82,0r0,91v4,12,4,18,3,28v46,21,88,27,152,33v-51,19,-72,34,-110,57v-12,2,-109,-39,-125,-35v-19,0,-31,9,-44,18r-8,-3v4,-10,49,-31,49,-47r-2,-122v-52,39,-136,107,-144,166v-5,39,37,59,67,72r-20,0v-33,-14,-66,-34,-66,-71v0,-25,13,-54,44,-81r119,-106v-50,2,-108,-9,-149,5v3,-3,23,-15,53,-41v34,-30,49,-16,97,-20r2,-66v-9,-71,-58,-68,-141,-87r96,-64r132,66v23,-16,39,-35,50,-56v3,-7,8,-10,13,-10v22,14,51,35,81,36xm267,-409v-16,-3,-11,75,-16,84r0,43v26,-18,75,-72,91,-99v-13,-3,-56,-20,-75,-28","k":{"z":29,"y":19,"x":24,"w":14,"v":19,"u":14,"t":38,"s":39,"r":19,"q":49,"p":19,"o":53,"n":43,"m":9,"l":48,"j":29,"h":63,"g":68,"f":19,"e":47,"d":44,"c":57,"b":53,"a":38}},"y":{"d":"312,204v66,0,127,-23,127,-80v12,-7,19,0,22,11v-24,112,-273,118,-274,-14v0,-33,20,-63,59,-90v42,-30,64,-56,57,-93v-17,2,-70,53,-82,57v-56,-18,-127,-64,-184,-34v30,-23,39,-37,38,-105r0,-233v0,-28,-6,-44,-18,-48v-19,-7,-31,-11,-36,-14v37,-11,64,-24,79,-42v17,-20,34,-3,54,3v13,4,35,15,67,30v-63,24,-67,11,-66,89r2,253v43,13,113,33,135,34v17,1,18,-19,19,-37r3,-242v-2,-66,-4,-66,-55,-85v20,-17,70,-54,72,-51v25,19,70,37,114,41r-44,23v-22,48,-13,241,-11,329v1,27,7,54,14,82v-88,-4,-197,58,-197,133v0,56,44,83,105,83","k":{"z":19,"y":9,"x":24,"w":14,"v":9,"u":9,"t":23,"s":43,"q":19,"o":43,"l":57,"k":24,"h":72,"g":9,"e":29,"d":24,"c":14,"b":62,"a":19}},"z":{"d":"443,-74v23,5,17,-9,36,-11r0,6v-43,20,-76,66,-112,83v-63,-42,-192,-72,-295,-40r-57,17r-4,-5v50,-34,165,-160,196,-213r0,-10r-175,0v46,-29,60,-37,85,-67r138,3v27,-39,47,-73,81,-109r-216,-26v-44,6,-82,18,-84,59v-3,39,33,49,68,40v-30,28,-88,-8,-85,-46v4,-55,102,-101,172,-101v80,0,202,44,248,23v-40,36,-113,117,-140,160r0,6v54,-1,116,7,163,-3v-23,19,-62,60,-83,72v-26,-7,-76,-2,-109,-5v-7,0,-18,7,-33,22v-17,17,-50,55,-97,114v21,11,62,2,78,2v92,-1,154,14,225,29","w":504,"k":{"z":24,"y":28,"x":14,"w":67,"v":62,"u":33,"t":33,"s":19,"r":57,"q":24,"p":48,"o":29,"n":33,"m":43,"l":43,"j":53,"i":24,"h":24,"g":24,"f":24,"e":24,"d":24,"c":24,"b":52,"a":19}},"{":{"d":"206,-355v104,55,63,236,79,375v8,72,60,94,141,94r0,32v-114,-4,-196,-13,-228,-101v-41,-115,44,-355,-102,-400v-25,-8,-48,-13,-80,-18r-2,-41v115,-2,170,-57,170,-181v0,-129,-23,-282,90,-315v45,-13,91,-26,152,-25r0,29v-77,3,-139,28,-141,103r-4,171v-4,92,-8,166,-73,203v-22,12,-54,25,-98,36v35,9,69,24,96,38","w":440},"|":{"d":"72,-773r0,1009r-72,0r0,-1009r72,0","w":93},"}":{"d":"232,-428v-118,-61,-41,-289,-97,-427v-14,-35,-64,-45,-120,-49r-3,-34v107,7,198,17,229,104v35,100,-25,306,52,378v30,28,82,38,133,45r0,36v-91,15,-161,34,-168,135v-8,119,23,290,-59,347v-42,29,-112,39,-184,39r-3,-32v85,0,127,-22,138,-96v13,-86,-3,-204,20,-286v22,-77,79,-102,159,-125v-41,-8,-71,-22,-97,-35","w":440},"~":{"d":"0,-527v31,-100,152,-146,280,-102r112,32v77,21,154,-5,178,-61r30,19v-26,132,-205,129,-328,85v-44,-16,-84,-30,-140,-25v-48,5,-77,34,-101,70","w":633},"\u00a0":{"w":500}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * A William Boyd Release. Free of Charge.
 */
Cufon.registerFont({"w":559,"face":{"font-family":"Carolingia","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"0 0 0 0 0 0 0 0 0 0","ascent":"800","descent":"-200","cap-height":"44","bbox":"-164 -793 1239.58 382","underline-thickness":"20","underline-position":"-123","unicode-range":"U+0020-U+2122"},"glyphs":{" ":{"w":200},"!":{"d":"117,-585r0,405r-82,45r0,-395xm35,-75r82,-55r0,85r-82,45r0,-75","w":162},"\"":{"d":"104,-542v9,-11,36,-40,46,-24v7,60,-1,99,-28,139xm16,-542v9,-11,36,-40,46,-24v7,60,-1,99,-28,139","w":196},"#":{"d":"56,-279r37,-73r-89,0r48,-32r57,0r27,-54r-90,0r48,-32r59,0r18,-37r61,-25r-33,62r65,0r18,-37r62,-25r-33,62r82,0r-47,32r-50,0r-28,54r91,0r-50,32r-56,0r-17,32r-67,38r35,-70r-63,0r-25,47xm156,-383r64,0r28,-55r-65,0","w":412},"$":{"d":"306,-363v88,27,194,72,177,207v-11,92,-104,123,-177,153v-2,16,5,37,-7,43v-19,2,-30,21,-48,18r0,-61v-97,7,-159,-22,-226,-73r97,-53v26,71,61,91,129,108r0,-258v-80,-21,-199,-43,-190,-156v8,-102,100,-119,190,-139r0,-25v15,-11,38,-13,55,-21r0,46v84,3,106,3,195,38r-105,45v-16,-44,-47,-56,-90,-65r0,193xm251,-555v-58,10,-114,24,-109,104v-13,67,60,63,109,76r0,-180xm306,-21v49,-20,110,-44,110,-123v0,-72,-65,-97,-110,-120r0,243","w":526},"%":{"d":"7,-482v0,-67,89,-99,155,-101v56,-2,68,16,73,54v-6,61,-82,107,-144,110v-43,2,-84,-23,-84,-63xm119,-567v-30,-1,-59,31,-57,63v1,36,38,60,79,60v31,0,40,-28,42,-56v3,-37,-33,-66,-64,-67xm46,4r268,-536v14,-14,50,-48,81,-42r-271,540v-19,20,-41,36,-78,38xm203,-68v2,-67,91,-99,156,-101v56,-2,66,13,73,51v-6,63,-81,109,-145,113v-38,2,-85,-26,-84,-63xm315,-153v-30,-1,-59,31,-57,63v1,36,38,60,79,60v31,0,40,-28,42,-56v3,-37,-33,-66,-64,-67","w":460},"&":{"d":"105,26v-73,0,-102,-89,-104,-148v-3,-94,94,-141,173,-158v-25,-41,-62,-103,-37,-168v11,-29,131,-94,180,-89v48,5,82,41,82,88v0,71,-74,115,-119,147r84,158v52,-33,136,-78,208,-36r-76,48v-28,-35,-100,-38,-124,0v33,61,127,174,208,104v-30,34,-66,80,-131,76v-76,-5,-118,-54,-163,-116v-43,34,-108,94,-181,94xm89,-164v5,60,23,133,87,133v47,0,77,-26,104,-51r-100,-186v-43,15,-97,37,-91,104xm345,-425v0,-70,-112,-116,-131,-37v4,54,42,101,60,148v34,-6,71,-67,71,-111","w":602},"'":{"d":"38,-384v8,-12,27,-27,40,-29v11,9,11,22,11,39v0,17,-11,52,-33,105","w":115},"(":{"d":"233,-623v-158,81,-195,400,-141,625v15,62,35,107,60,134r76,-52v-115,-180,-109,-542,5,-707","w":230},")":{"d":"92,-616v93,116,108,427,44,598v-28,75,-68,129,-125,161v49,-93,92,-206,91,-354v-1,-145,-29,-245,-86,-353","w":200},"*":{"d":"125,-439r56,56r-9,9r-52,-52r0,62r-12,12r0,-74r-52,52r-9,-9r56,-56r-56,-56r9,-9r52,52r0,-62r12,-12r0,74r52,-52r9,9","w":226},"+":{"d":"174,-211r-174,0r110,-55r64,0r0,-108r32,-20r0,128r174,0r-110,55r-64,0r0,110r-32,18r0,-128","w":411},",":{"d":"40,-5v-9,-29,21,-42,38,-48v19,21,6,61,-9,87v-12,20,-30,38,-55,55v10,-28,27,-57,26,-94","w":115},"-":{"d":"142,-190r270,0r-110,55r-270,0","w":462},".":{"d":"15,-34r64,-20r36,55r-71,19v-16,-5,-17,-43,-29,-54","w":125},"\/":{"d":"12,0r228,-576r56,0r-228,576r-56,0","w":312},"0":{"d":"244,-576v238,-74,402,200,302,428v-47,107,-249,206,-395,128v-120,-64,-193,-266,-103,-408v41,-65,113,-122,196,-148xm345,-29v176,0,173,-236,111,-367v-42,-89,-136,-143,-235,-143v-113,0,-117,106,-121,237v-4,133,113,273,245,273","w":602},"1":{"d":"135,-571v21,0,29,14,29,39r0,496r-100,54r0,-510v-2,-16,-37,-16,-56,-14v32,-21,90,-65,127,-65","w":227},"2":{"d":"282,7v-39,4,-150,-48,-197,-48v-25,0,-55,4,-89,13v16,-3,154,-92,188,-121v63,-54,156,-154,156,-251v0,-82,-109,-183,-184,-120v-14,12,-21,35,-24,64r-96,48v31,-92,133,-165,259,-169v81,-2,132,41,132,117v0,138,-164,280,-239,344v66,58,214,70,290,16v9,-7,20,-13,31,-20v-74,63,-132,118,-227,127","w":535,"k":{"=":62}},"3":{"d":"292,11v-58,5,-166,-62,-228,-31v-14,4,-30,10,-48,20v50,-37,106,-72,204,-72v27,0,117,38,139,38v31,0,57,-14,56,-56v-2,-93,-91,-211,-199,-202v45,-30,134,-79,129,-157v-3,-46,-20,-77,-89,-77v-70,0,-133,28,-188,46v58,-54,140,-97,246,-100v72,-2,126,30,126,100v0,78,-76,107,-126,140v70,9,145,33,166,100v26,84,25,136,-27,189v-45,47,-90,56,-161,62","w":512},"4":{"d":"242,-527v25,147,-54,242,-130,295r268,0r0,-320r100,-36r0,356r128,0r-72,52r-56,0r0,152r-100,60r0,-212r-368,0v72,-78,172,-207,124,-360r92,-44","w":632,"k":{"=":28}},"5":{"d":"358,-301v-99,-59,-249,-12,-322,37r0,-256v11,-26,54,-56,92,-56r396,0r-100,60r-288,0r0,188v78,-39,231,-89,318,-26v46,33,66,70,69,131v6,114,-226,221,-358,215v-64,-3,-108,-14,-145,-44r88,-52v80,67,326,70,326,-62v0,-44,-33,-109,-76,-135","w":560},"6":{"d":"228,4v-118,0,-218,-65,-208,-192v18,-229,247,-346,436,-384v-115,51,-197,96,-248,132v-72,50,-93,133,-102,236v-8,88,107,163,195,161v71,-1,117,-44,117,-121v0,-79,-30,-131,-95,-134v-48,-2,-106,37,-105,82r-78,46v13,-82,158,-172,256,-170v71,2,113,39,112,114v-1,142,-128,230,-280,230","w":545},"7":{"d":"20,-425r0,-103v22,-22,48,-44,88,-44r420,0r-51,62v-72,88,-161,204,-186,350r-27,140r-100,54v26,-177,71,-346,170,-450v34,-36,65,-70,98,-102r-312,0r0,42","w":540,"k":{"=":120}},"8":{"d":"209,10v-98,0,-202,-45,-202,-140v0,-99,91,-135,156,-166v-41,-41,-119,-83,-119,-152v0,-79,76,-125,164,-125v88,0,180,38,175,118v-5,78,-61,86,-129,131v68,39,174,80,176,173v2,105,-112,161,-221,161xm240,-334v44,-23,81,-81,53,-141v-6,-29,-94,-83,-134,-81v-34,2,-30,34,-33,64v-7,81,67,127,114,158xm85,-162v0,84,98,123,178,129v70,5,99,-53,80,-121v-14,-53,-114,-102,-163,-133v-50,12,-95,67,-95,125","w":474},"9":{"d":"172,-543v-119,-8,-136,191,-42,238v35,17,75,25,118,17v-38,23,-75,38,-126,40v-109,3,-136,-140,-86,-228v41,-71,116,-103,212,-107v143,-6,233,145,190,294v-20,68,-91,179,-152,227v-63,50,-87,71,-158,88v120,-55,233,-189,233,-340v0,-112,-79,-222,-189,-229","w":487},":":{"d":"15,-34r64,-20r36,55r-71,19v-16,-5,-17,-43,-29,-54xm10,-234r64,-20r36,55v-23,7,-45,15,-71,19v-16,-5,-17,-43,-29,-54","w":120},";":{"d":"40,-5v-9,-29,21,-42,38,-48v19,21,6,61,-9,87v-12,20,-30,38,-55,55v10,-28,27,-57,26,-94xm10,-234r64,-20r36,55v-23,7,-45,15,-71,19v-16,-5,-17,-43,-29,-54","w":120},"<":{"d":"237,-89v-9,-80,-97,-129,-152,-164v81,-24,146,-81,156,-177r-63,30v-11,63,-37,106,-78,128r-95,49v69,36,137,79,172,163","w":256},"=":{"d":"142,-159r270,0r-110,55r-270,0xm142,-274r270,0r-110,55r-270,0","w":432},">":{"d":"75,-430v36,84,103,123,172,163r-100,52v-37,19,-61,60,-73,125r-63,30v-2,-76,77,-162,156,-177v-56,-36,-142,-82,-152,-164","w":258},"?":{"d":"200,-539v-64,0,-116,38,-113,101r-87,55v-3,-91,183,-191,283,-191v81,0,125,52,127,124v2,79,-102,134,-156,176v-34,28,-46,68,-41,126r5,11r-78,48r0,-88v18,-99,212,-125,197,-250v-8,-61,-61,-112,-137,-112xm140,-32r78,-49r0,72r-78,49r0,-72","w":447},"@":{"d":"161,-90v-54,0,-85,-28,-85,-77v0,-90,185,-142,280,-110v12,4,29,-1,39,-6v-11,63,20,137,76,149v22,0,37,-23,36,-49v-1,-170,-268,-190,-391,-109v-72,46,-88,71,-88,154v0,159,313,114,453,82r-63,43r-88,9v-158,11,-330,3,-330,-153v0,-131,160,-207,296,-204v133,2,241,47,249,169v4,58,-56,72,-99,88v-21,8,-39,9,-54,9v-48,3,-58,-28,-66,-60v-21,26,-114,65,-165,65xm296,-237v-40,-13,-133,-38,-135,21v-2,56,17,90,68,91v39,1,72,-19,96,-34","w":595},"A":{"d":"649,5v-90,0,-142,-78,-187,-131v-157,12,-314,60,-406,118v-30,20,-48,29,-52,28v61,-102,185,-252,185,-443v0,-30,-3,-62,-9,-96v23,-25,50,-44,77,-65v85,144,159,254,221,332v62,78,112,132,154,158v55,34,85,58,127,30v-25,37,-58,69,-110,69xm131,-82r125,-43r168,-42r-136,-180v-30,102,-100,185,-157,265","w":765,"k":{"z":48,"y":76,"x":82,"w":111,"v":111,"u":23,"t":47,"r":82,"p":62,"n":23,"m":23,"l":29,"k":32,"j":64,"i":36,"h":23,"f":98,"b":36,"Z":11,"Y":317,"X":64,"W":291,"V":305,"U":82,"T":175,"R":52,"Q":47,"P":72,"O":58,"N":17,"M":29,"L":58,"K":33,"J":52,"I":53,"H":52,"G":41,"F":76,"E":76,"D":150,"C":71,"B":52}},"B":{"d":"446,-318v87,14,160,47,160,127v0,187,-274,261,-464,181v-53,-22,-80,-40,-80,-55r0,-342v-4,-22,-48,-35,-68,-47v42,-15,120,-83,154,-103v12,0,8,37,9,54v87,-33,193,-85,314,-61v45,20,82,68,91,129v6,44,-83,121,-116,117xm263,-508v-51,0,-106,6,-106,46r0,163r165,-19v75,1,147,-8,148,-74v1,-96,-113,-116,-207,-116xm515,-74v44,-149,-162,-211,-288,-214v-47,0,-70,8,-70,24r0,139v8,46,186,94,256,94v50,0,92,-10,102,-43","w":621,"k":{"Z":35,"Y":38,"X":23,"W":35,"V":42,"T":35,"Q":-37,"O":-37,"N":-24,"M":-24,"G":-23,"E":-24,"D":29,"C":-23,"A":58}},"C":{"d":"-2,-298v0,-172,210,-283,408,-283v89,0,179,18,269,55r-124,68v-105,-51,-192,-76,-261,-76v-122,1,-179,77,-179,206v0,211,329,342,524,224v-100,77,-297,153,-450,74v-97,-50,-187,-141,-187,-268","w":681,"k":{"z":67,"y":82,"u":52,"r":75,"l":-23,"k":-23,"i":48,"h":-17,"b":-40,"a":23,"Z":42,"U":-13,"N":-23,"M":12,"G":24,"E":24,"A":64}},"D":{"d":"800,-364v78,206,-135,372,-324,368v-215,-5,-313,-4,-313,-191v0,-94,21,-194,33,-281v-93,4,-151,-20,-196,-82r108,-75v8,1,2,11,0,15v11,25,57,39,84,49v108,41,313,21,439,39v86,12,144,94,169,158xm276,-461v-32,78,-37,211,-9,303v45,146,402,162,447,-2v34,-124,8,-201,-98,-250v-76,-35,-189,-51,-340,-51","w":832,"k":{"Z":52,"Y":64,"W":48,"V":70,"T":47,"Q":-37,"O":-41,"N":-35,"M":-30,"G":-24,"E":-32,"D":100,"C":-42,"A":58}},"E":{"d":"582,-92v-55,51,-130,124,-247,119v-139,-6,-232,-82,-305,-179v-17,-25,-31,-63,-30,-103v2,-176,199,-334,403,-325v90,4,152,14,223,44r-72,70v-76,-29,-165,-58,-259,-58v-87,0,-141,19,-163,57v-22,38,-36,78,-42,119r540,0v47,0,86,-15,120,-30v-27,28,-116,82,-170,82r-490,0v0,50,1,54,34,101v57,81,213,194,370,143v27,-9,57,-21,88,-40","w":750,"k":{"z":100,"y":72,"x":82,"w":82,"v":100,"u":82,"t":32,"s":111,"r":111,"q":111,"p":111,"o":111,"n":82,"m":68,"g":111,"f":42,"e":111,"d":111,"c":123,"a":120,"Z":128,"Y":105,"X":64,"W":76,"V":88,"T":86,"S":34,"R":23,"Q":-23,"P":23,"O":-29,"L":24,"K":23,"J":23,"I":23,"H":52,"F":35,"D":100,"C":-24,"A":106}},"F":{"d":"424,-522v-96,-2,-169,31,-222,62r0,368r556,0r-112,56r-444,0r0,204r-100,88r0,-664v1,-51,-51,-62,-102,-58v48,-33,120,-108,176,-116v32,-4,26,57,26,92v142,-73,443,-139,596,-22r-120,64v-71,-42,-155,-72,-254,-74","w":753,"k":{"o":-23,"l":-68,"h":-64,"e":-24,"b":-72,"a":-12,"Y":-49,"X":-46,"W":-40,"V":-58,"U":-46,"T":-52,"S":-17,"R":-35,"Q":-17,"O":-35,"N":-52,"M":-23,"L":-47,"K":-47,"J":-29,"I":-47,"H":-52,"E":-23,"D":-35,"A":29,"\"":-42}},"G":{"d":"569,-66v-83,80,-270,99,-391,36v-88,-45,-173,-113,-176,-239v-4,-175,230,-321,427,-314v110,4,196,30,273,76r-93,71v-80,-47,-185,-92,-296,-97v-164,-7,-257,153,-189,298v44,95,175,181,313,186v60,2,101,-20,132,-43r0,-112r100,-56r0,232v1,97,-96,147,-156,188v44,-49,61,-138,56,-226","w":745,"k":{"Z":29,"Y":23,"W":23,"T":23,"D":47,"A":24}},"H":{"d":"401,-436v-91,-4,-170,46,-221,80r0,312r-100,96r0,-454v3,-64,-39,-79,-80,-94v44,-27,102,-83,152,-95v20,2,29,22,28,49r0,170v101,-73,328,-197,465,-70v80,74,130,225,39,326v-46,51,-147,129,-196,152v80,-38,145,-122,145,-228v0,-140,-96,-239,-232,-244","w":773,"k":{"Z":64,"Y":102,"X":52,"W":94,"V":111,"U":23,"T":62,"S":23,"R":23,"Q":-23,"O":-23,"L":23,"G":-23,"F":52,"E":-23,"D":110,"C":-29,"A":77}},"I":{"d":"16,-452v28,-42,104,-128,151,-128v15,0,23,12,23,36r0,504r-100,84r0,-436v1,-44,-30,-60,-74,-60","w":260,"k":{"W":23,"V":23,"U":-12,"T":23,"Q":-12,"O":-12,"N":-18,"A":35}},"J":{"d":"18,324v32,-52,72,-107,72,-192r0,-524v1,-44,-30,-60,-74,-60v28,-42,104,-128,151,-128v15,0,23,12,23,36r0,620v5,115,-98,214,-172,248","w":260,"k":{"F":28,"A":18}},"K":{"d":"710,-58v-31,37,-72,84,-144,80v-83,-5,-236,-116,-295,-161r-109,-83r0,201r-100,66r0,-477v3,-55,-28,-70,-62,-82v43,-26,79,-71,135,-71v18,0,27,11,27,33r0,308v62,-42,166,-94,166,-178v0,-36,-23,-53,-52,-70r110,-66v13,17,19,35,19,56v-3,93,-95,163,-155,212r243,173v60,35,140,110,217,59","w":700,"k":{"y":64,"w":100,"v":100,"u":29,"r":48,"l":23,"i":41,"Y":210,"X":32,"W":217,"V":229,"U":35,"T":141,"R":23,"P":23,"I":42,"H":35,"G":42,"F":59,"E":47,"D":149,"C":69,"B":22}},"L":{"d":"431,38v23,-18,10,-38,-23,-38r-350,0r26,-28r0,-380v2,-61,-39,-65,-84,-76v41,-33,101,-91,155,-91v19,0,29,12,29,37r0,470r366,0v11,0,17,3,17,8v0,8,-10,21,-33,36r-126,84","w":576,"k":{"y":36,"w":88,"v":87,"r":52,"i":35,"f":52,"Y":211,"X":40,"W":212,"V":212,"U":23,"T":98,"R":23,"P":41,"O":12,"I":35,"H":23,"G":24,"F":55,"E":32,"D":123,"C":42,"B":23}},"M":{"d":"103,-306v0,101,50,209,109,254r-92,84v-67,-68,-115,-141,-119,-254v-4,-132,109,-263,203,-299v69,-28,132,-48,221,-50v121,-2,188,36,255,83v129,-45,286,-109,420,-40v127,65,193,295,86,431v-48,60,-147,130,-202,153v91,-72,171,-168,134,-316v-16,-65,-72,-164,-134,-202v-96,-59,-235,-33,-304,22r0,394r-100,88r0,-452v-57,-45,-135,-102,-246,-99v-132,4,-231,63,-231,203","w":1265,"k":{"Z":23,"Y":72,"X":23,"W":47,"V":47,"T":35,"R":18,"Q":-30,"O":-30,"N":-23,"G":-30,"F":23,"E":-30,"D":64,"C":-35,"A":76}},"N":{"d":"52,31v-22,-3,-23,-22,-24,-53r0,-430r-28,-38v35,-37,56,-66,82,-106v81,146,178,213,336,304r278,160r0,-308v6,-45,-34,-62,-64,-40v-4,-19,84,-115,109,-107v13,0,19,10,19,31r0,452r-54,88r-32,44v-76,-83,-167,-161,-276,-208v-113,-47,-221,-130,-306,-200r0,242v-2,54,28,75,76,70v-28,28,-81,94,-116,99","w":832,"k":{"u":23,"o":23,"i":42,"e":23,"a":35,"Z":41,"Y":30,"X":30,"W":30,"V":30,"U":23,"T":35,"S":23,"I":18,"F":35,"D":35,"A":70}},"O":{"d":"368,2v-121,41,-250,13,-310,-70v-58,-81,-77,-222,-20,-323v65,-115,268,-244,454,-173v76,29,148,104,144,230v-6,179,-130,289,-268,336xm368,-42v181,0,212,-217,129,-355v-50,-83,-124,-131,-221,-131v-122,0,-170,103,-170,244v0,125,138,242,262,242","w":684,"k":{"z":62,"y":36,"x":42,"w":23,"v":23,"u":23,"t":23,"s":52,"r":52,"q":41,"p":41,"o":47,"n":47,"m":35,"i":23,"g":52,"f":23,"e":52,"d":52,"c":52,"a":52,"Z":64,"Y":64,"X":23,"W":42,"V":58,"U":23,"T":42,"S":42,"R":23,"P":18,"L":23,"K":23,"J":23,"I":23,"H":23,"F":35,"D":72,"A":140}},"P":{"d":"416,-1v-79,24,-178,15,-236,-13r0,134r-100,68r0,-560v3,-57,-33,-67,-80,-68v29,-32,58,-64,91,-92v43,-36,61,-58,79,-11r8,43v78,-65,281,-121,396,-48v96,61,141,273,64,384v-45,65,-145,140,-222,163xm330,-525v-56,-1,-150,24,-150,65r0,336v0,19,22,36,66,52v44,16,92,24,143,24v132,0,202,-61,202,-189v0,-159,-97,-285,-261,-288","w":712,"k":{"z":23,"s":23,"r":23,"o":23,"e":23,"a":41,"Z":42,"Y":42,"W":23,"V":23,"T":23,"S":23,"Q":-23,"O":-23,"N":-18,"M":-18,"G":-18,"E":-18,"D":35,"C":-18,"A":96}},"Q":{"d":"832,57v-62,36,-161,114,-266,86v-13,-3,-43,-28,-90,-75v-68,-68,-97,-79,-179,-59v-98,24,-187,-15,-235,-77v-63,-81,-80,-230,-20,-334v67,-116,264,-232,456,-169v135,44,209,263,108,404v-40,57,-90,99,-162,129v59,-18,72,4,138,56v81,64,154,75,250,39xm372,-42v188,0,218,-240,132,-378v-52,-84,-100,-104,-206,-104v-140,0,-188,85,-188,240v0,125,138,242,262,242","w":684,"k":{"U":12,"T":32}},"R":{"d":"255,-520v-35,-1,-79,13,-79,40r0,588r-100,64r0,-586v3,-49,-34,-66,-76,-54r50,-37v20,-16,79,-50,104,-50v20,0,26,16,22,35v56,-28,159,-74,246,-44v51,18,118,76,112,167v-7,110,-79,184,-174,221v100,63,285,184,424,88v-63,67,-182,119,-305,76v-105,-37,-164,-70,-275,-128v88,-17,237,-69,232,-185v-3,-59,-26,-127,-76,-159v-34,-22,-68,-36,-105,-36","w":792,"k":{"y":64,"x":52,"u":23,"i":41,"Z":64,"Y":235,"X":64,"W":212,"V":212,"U":58,"T":128,"P":42,"O":42,"L":47,"K":47,"J":64,"I":56,"H":52,"G":35,"F":64,"E":62,"D":170,"C":82,"B":52,"A":51}},"S":{"d":"592,-185v0,175,-280,257,-460,181v-48,-20,-92,-48,-132,-88r102,-56v42,60,167,120,266,119v91,-1,158,-45,158,-142v0,-37,-38,-71,-117,-89r-219,-49v-79,-24,-118,-59,-118,-105v3,-202,350,-203,490,-114r-106,64v-53,-44,-111,-80,-186,-84v-65,-3,-125,50,-95,110v27,54,63,55,173,78v78,16,139,32,181,54v42,22,63,62,63,121","w":620,"k":{"Z":52,"Y":42,"X":32,"W":32,"V":40,"T":52,"R":23,"Q":-12,"P":23,"O":-23,"M":-22,"L":23,"K":23,"H":23,"G":-23,"F":42,"E":-23,"D":23,"A":72}},"T":{"d":"134,-562v194,-82,412,52,633,17v43,-7,92,-16,137,-29v-35,34,-109,88,-191,98v-117,15,-161,9,-249,-12v-82,27,-140,59,-176,92v-65,60,-69,138,-16,206v61,80,160,145,295,148v123,3,209,-57,273,-106v-90,130,-264,209,-470,169v-85,-17,-195,-84,-218,-145v-39,-104,-29,-176,42,-250v44,-44,118,-84,223,-123r-84,-9v-126,-8,-234,-3,-333,30v37,-38,74,-61,134,-86","w":900,"k":{"z":64,"y":105,"x":35,"w":110,"v":111,"u":41,"r":29,"o":41,"j":41,"i":58,"e":41,"a":41,"Z":64,"Y":23,"W":23,"V":23,"U":23,"S":42,"R":23,"O":23,"I":29,"H":23,"G":32,"F":23,"E":35,"C":29,"B":42,"A":100}},"U":{"d":"288,14v-107,0,-228,-85,-228,-190r0,-256v3,-48,-28,-56,-60,-64v36,-28,91,-83,139,-83v14,0,21,9,21,27r0,312v1,133,115,174,236,182v61,4,91,-23,116,-50r0,-336v1,-35,-20,-57,-56,-48v36,-29,88,-80,135,-80v14,0,21,9,21,26r0,484r-100,100r0,-121v-52,36,-132,97,-224,97","w":653,"k":{"Z":23,"Y":12,"Q":-23,"O":-23,"N":-23,"M":-23,"I":-12,"H":-12,"G":-12,"E":-23,"C":-18,"B":-18,"A":29}},"V":{"d":"560,-496v39,-44,118,-118,208,-82v21,8,33,30,33,71v0,60,-36,141,-107,243v-71,102,-166,205,-286,308r-61,-128v-62,-123,-181,-346,-279,-421v-26,-7,-39,-4,-68,9v24,-34,89,-84,124,-84v10,0,29,12,52,38v98,111,227,339,302,480v70,-61,123,-122,158,-181v35,-59,52,-111,52,-154v0,-74,-54,-123,-128,-99","w":824,"k":{"z":152,"y":105,"x":135,"w":88,"u":100,"t":64,"s":123,"r":123,"p":111,"o":123,"n":82,"m":82,"j":52,"i":52,"f":58,"e":128,"d":123,"c":128,"a":128,"Z":23,"S":32,"O":23,"N":-17,"M":23,"G":37,"E":23,"C":23,"A":122}},"W":{"d":"925,-496v37,-49,107,-116,199,-82v23,9,36,32,36,78v0,61,-34,142,-104,242v-70,100,-164,201,-283,302r-61,-130v-63,-125,-172,-333,-279,-423v-26,-7,-39,-4,-68,9v26,-32,95,-80,128,-80v12,0,31,12,53,38v93,109,227,341,301,481v73,-62,127,-125,163,-187v36,-62,53,-117,53,-164v0,-81,-69,-119,-138,-84xm408,44r-61,-128v-62,-123,-181,-346,-279,-421v-26,-7,-39,-4,-68,9v24,-33,89,-84,123,-84v11,0,29,10,51,36v92,107,226,338,301,478r126,-144r12,14","w":1186,"k":{"z":134,"y":100,"x":105,"v":76,"u":88,"t":64,"s":123,"r":123,"p":82,"o":123,"n":82,"m":82,"i":52,"h":-17,"e":123,"d":94,"c":123,"a":123,"Z":23,"S":49,"O":23,"M":23,"G":37,"E":23,"C":23,"A":135}},"X":{"d":"314,-263v-51,38,-153,87,-153,157v0,16,9,29,26,38r-96,96v-30,-54,-5,-95,35,-146v34,-44,141,-132,179,-154r-191,-191v-28,-32,-94,-9,-114,13v29,-41,56,-133,109,-133v15,0,35,10,58,33r218,218v44,-38,138,-101,147,-160v-2,-21,-25,-27,-52,-27v33,-44,48,-70,86,-86v26,0,39,9,39,28v-28,100,-136,181,-211,254r227,227v23,28,86,35,119,12v30,-19,25,-16,47,-37v-50,67,-85,122,-159,136v-37,-2,-54,-19,-79,-43","w":796,"k":{"Z":34,"Y":175,"X":64,"W":152,"V":152,"U":23,"T":105,"R":23,"P":46,"L":23,"K":23,"I":42,"H":42,"F":58,"D":111,"B":41,"A":47}},"Y":{"d":"324,364v-107,-124,31,-332,104,-402r-308,-443v-19,-28,-83,-24,-120,-15v40,-42,72,-91,133,-91v32,0,47,16,63,39r298,434r56,-57v52,-59,143,-150,143,-242v0,-78,-71,-99,-173,-99v49,-26,103,-72,173,-71v64,1,102,51,102,109v0,50,-35,116,-106,197r-210,239v-70,79,-105,143,-105,190v0,64,36,82,92,106","w":812,"k":{"v":88,"u":88,"r":123,"o":123,"l":-28,"i":41,"g":123,"e":123,"d":82,"a":123,"Z":35,"S":42,"O":23,"N":-18,"M":23,"L":-17,"H":-12,"G":37,"E":23,"A":105}},"Z":{"d":"467,27v-112,1,-183,-56,-294,-56v-52,0,-121,14,-173,22v36,-16,72,-41,100,-69r382,-382v-78,-8,-100,-4,-180,-33v-106,-38,-182,-19,-254,31v79,-73,201,-143,362,-119r79,18v107,29,150,13,243,-11v-58,33,-124,66,-168,110r-376,376v51,-7,110,-18,166,-18v29,0,213,49,247,47v87,-6,144,-29,203,-75v-70,71,-190,157,-337,159","w":815,"k":{"Z":47,"Y":105,"X":47,"W":82,"V":111,"U":42,"T":64,"R":32,"I":42,"H":42,"F":64,"E":41,"D":52,"B":35,"A":58}},"[":{"d":"28,32r0,-560v21,-30,56,-52,96,-64r120,0r-88,36r-28,-4r0,560r116,0r-88,32r-128,0","w":276},"\\":{"d":"69,-579r220,579r-69,0r-220,-580","w":300},"]":{"d":"116,-592r-88,32r116,0r0,560r-28,-4r-88,36v51,-4,107,9,145,-9v28,-13,52,-29,71,-55r0,-560r-128,0","w":276},"^":{"w":400},"_":{"d":"110,16r460,0r-110,55r-460,0","w":460},"`":{"w":300},"a":{"d":"131,3v-79,0,-117,-38,-121,-112v-5,-101,157,-157,260,-157v72,0,78,35,128,6v-10,118,54,242,185,202r25,-10v-57,37,-104,62,-175,66v-66,3,-82,-36,-97,-79v-27,40,-134,84,-205,84xm295,-195v-40,-17,-188,-55,-188,30v0,132,112,148,197,95v10,-6,20,-11,29,-17","k":{"y":23,"x":23,"w":64,"v":64,"r":41,"f":58}},"b":{"d":"170,32v-32,2,-122,-69,-122,-101r0,-266v3,-77,-41,-114,-77,-154v8,-22,34,-34,56,-48v14,-16,38,-43,66,-41v30,2,37,35,37,79r0,287v38,-29,99,-87,169,-84v55,3,108,36,108,100v0,84,-170,223,-237,228xm215,-229v-37,-1,-85,15,-85,45r0,62v0,34,84,80,127,80v52,0,71,-43,72,-92v2,-63,-53,-95,-114,-95","w":430,"k":{"l":23}},"c":{"d":"133,24v-86,-9,-132,-56,-129,-156v2,-69,211,-152,300,-146v44,3,71,8,94,28v-27,13,-73,50,-102,48v-44,-36,-208,-45,-208,32v0,155,134,147,263,96r33,-8v-11,28,-191,112,-251,106","w":428,"k":{"z":23,"y":23,"r":23,"b":35}},"d":{"d":"316,-52v-79,39,-316,107,-316,-48v0,-160,164,-190,316,-166v-3,-69,16,-147,-21,-187r-47,-51v26,-27,72,-70,110,-76v33,5,40,37,40,86r0,354v-3,74,39,95,104,92v-35,26,-68,48,-116,51v-43,2,-59,-29,-70,-55xm161,-242v-59,0,-79,55,-80,101v-2,62,42,107,104,107v29,0,120,-25,131,-34r0,-126v-45,-18,-97,-48,-155,-48","w":496,"k":{"y":35,"w":41,"v":41,"t":23,"r":41}},"e":{"d":"323,-17v-74,51,-178,55,-262,19v-73,-31,-70,-141,-21,-206v67,-89,258,-98,341,-27r14,25r-291,75v0,14,7,35,14,65v10,43,107,54,167,37v25,-7,53,-15,82,-28xm104,-147r161,-40v12,-11,-1,-23,-19,-36v-37,-27,-107,-28,-125,19v-8,20,-12,32,-17,57","w":419,"k":{"t":23}},"f":{"d":"305,-515v-60,0,-104,31,-103,91r0,156r248,0r-80,40r-168,0r0,504r-82,76r0,-580r-120,0r48,-40r72,0r0,-140v7,-137,255,-201,410,-170v18,4,27,11,27,22v-18,34,-39,84,-84,89v-48,-16,-109,-48,-168,-48","w":459,"k":{"z":41,"y":23,"u":23,"s":41,"r":64,"o":70,"f":76,"e":41,"c":64,"a":82}},"g":{"d":"278,-10v-131,22,-274,42,-274,-110v0,-145,209,-180,319,-116v11,-4,27,-26,35,-13r2,405v12,106,-127,216,-214,217v67,-42,132,-85,132,-199r0,-184xm209,-28v30,0,64,-5,69,-26r0,-144v-11,-92,-172,-35,-178,19v-2,17,-6,32,-6,51v-2,67,50,101,115,100","w":406},"h":{"d":"270,-214v-58,-25,-119,4,-148,36v-5,57,14,111,-22,143v-13,12,-31,31,-58,53r-6,-3v9,-108,2,-232,4,-347v0,-43,-7,-78,-21,-103r-48,-51v21,-30,57,-45,82,-70v34,-35,69,-17,69,39r0,313v44,-30,112,-84,176,-86v73,-3,172,64,172,136v0,35,-15,79,-60,113r-60,45v38,-71,36,-125,-20,-174v-30,-26,-50,-40,-60,-44","w":499,"k":{"w":23,"v":23,"t":23}},"i":{"d":"185,-16v-43,36,-131,25,-131,-37v0,-18,24,-90,23,-106v-2,-32,-14,-39,-40,-53v19,-18,66,-53,90,-53v54,38,33,127,13,188v6,42,52,37,95,16r5,1xm128,-414v-2,38,36,46,66,26v3,1,5,1,6,2v-11,32,-77,75,-107,90v-22,11,-59,-41,-52,-60v6,-16,42,-55,87,-58","w":245,"k":{"w":23,"v":23,"p":23,"f":23}},"j":{"d":"115,-420v-2,38,36,46,66,26v3,1,5,1,6,2v-10,32,-81,81,-109,96v-22,11,-59,-41,-52,-60v4,-12,19,-28,46,-48xm-18,366v103,-63,190,-101,190,-228r0,-344v1,-24,-16,-57,-39,-56v-28,8,-83,36,-98,64v29,18,55,46,55,98r0,282v4,67,-67,163,-108,184","w":245},"k":{"d":"301,7v-83,2,-122,-62,-159,-107r-22,14v1,24,3,43,-19,49v-19,10,-34,11,-48,30r-15,7r0,-305v0,-49,-2,-91,-20,-117r-45,-63v12,-29,57,-45,85,-73v31,-31,62,-14,62,37r0,419r117,-82v12,-13,13,-37,-7,-46r-25,-12r68,-47v12,-5,54,23,49,42v-10,42,-67,64,-96,90v40,36,76,89,124,113v22,11,48,11,64,0v-31,28,-65,49,-113,51","w":410,"k":{"y":41,"w":41,"v":41,"t":23,"r":41,"p":23,"j":23,"i":23,"f":41}},"l":{"d":"119,-188v-6,111,107,147,214,117v28,-8,59,-18,94,-35v-65,47,-195,114,-274,114v-65,0,-116,-51,-116,-124v0,-111,16,-252,-21,-330r-46,-54v23,-27,65,-40,90,-66v42,-28,59,14,59,68r0,310","w":403,"k":{"y":64,"w":64,"v":64,"t":41,"r":41,"j":41,"i":47,"f":64}},"m":{"d":"142,-186v20,34,26,102,6,142r-112,60v22,-52,36,-124,1,-171r-37,-49v26,-22,42,-52,75,-67v30,2,48,44,61,67v51,-39,110,-74,176,-78v60,-3,79,31,100,68v66,-36,171,-96,259,-57v70,32,72,164,9,219v-32,28,-67,50,-112,60v35,-33,83,-108,37,-169v-21,-63,-135,-79,-185,-29v16,40,21,112,-5,144r-112,62v55,-95,0,-289,-125,-227","w":760},"n":{"d":"364,-97v0,-86,-86,-147,-174,-114v-14,6,-29,13,-43,22v19,33,22,103,0,133r-111,72v14,-32,18,-56,19,-94v2,-59,-24,-94,-55,-126v29,-21,51,-49,84,-65v30,5,43,36,55,61v48,-38,131,-74,205,-79v129,-9,152,164,78,239v-29,30,-65,49,-110,56v20,-16,52,-66,52,-105","w":502,"k":{"t":23,"f":23}},"o":{"d":"266,-2v-120,59,-298,5,-258,-134v25,-85,177,-154,290,-152v78,1,134,27,137,101v3,79,-114,158,-169,185xm214,-258v-59,-3,-110,58,-108,120v2,68,73,114,149,115v58,0,80,-51,80,-107v0,-74,-49,-125,-121,-128","w":465,"k":{"w":23,"v":23,"t":23,"f":23,"b":23}},"p":{"d":"163,-216v71,-43,288,-99,329,18v49,138,-104,192,-211,214r-118,24r0,272r-82,70r0,-546v0,-39,-40,-52,-81,-50r114,-52v24,1,39,32,49,50xm350,-210v-50,-55,-164,-18,-187,28r0,132v4,27,77,42,116,42v71,0,128,-31,114,-108v-8,-43,-24,-73,-43,-94","w":530,"k":{"t":23,"f":23}},"q":{"d":"143,12v-77,-1,-130,-49,-140,-122v8,-120,227,-209,347,-130v3,3,19,-11,32,-8r0,476v0,35,8,44,32,48v-27,16,-51,48,-89,48v-17,0,-25,-11,-25,-34r0,-330v-31,19,-107,53,-157,52xm300,-188v-9,-86,-188,-60,-200,8v-15,87,31,151,110,151v44,0,90,-18,90,-59r0,-100","w":434},"r":{"d":"0,-172v42,-21,122,-39,122,32r0,176r82,-58r0,-160v-1,-12,22,-35,36,-33v29,22,72,59,122,60v79,2,110,-68,140,-115v-26,18,-52,37,-83,40v-14,2,-74,-34,-91,-32v-53,6,-74,19,-124,46v-2,-22,-6,-61,-35,-59v-11,0,-24,5,-39,15","w":513,"k":{"x":23,"s":41,"q":23,"o":23,"e":23,"c":23,"a":29}},"s":{"d":"359,-105v0,47,-187,127,-262,120v-43,-4,-68,-6,-97,-25r80,-53v18,42,167,71,167,-1v0,-24,-38,-38,-113,-48v-102,-13,-131,-11,-99,-71v25,-45,127,-102,209,-102v41,0,79,8,116,23r-85,51v-16,-17,-80,-34,-114,-33v-27,1,-54,2,-54,24v0,23,42,41,126,54v84,13,126,34,126,61","w":392,"k":{"y":23,"x":23,"w":35,"v":35,"t":23,"r":23,"p":23,"f":23}},"t":{"d":"416,-68v-51,55,-188,115,-290,79v-39,-15,-63,-51,-64,-103v-3,-90,89,-138,147,-173v-61,-16,-155,-20,-209,4v45,-39,106,-71,178,-76v75,-5,231,34,307,4v-52,37,-129,84,-228,70v-35,-5,-94,73,-94,125v0,101,97,124,195,90v35,-12,55,-17,58,-20","w":462,"k":{"\u00d5":-95,"z":47,"y":52,"x":47,"w":58,"v":82,"u":41,"t":47,"s":41,"r":88,"q":41,"p":41,"o":41,"n":35,"m":35,"g":41,"f":35,"e":41,"d":35,"c":41,"a":41}},"u":{"d":"125,4v-39,2,-76,-29,-76,-68v0,-47,8,-104,-9,-138v-7,-13,-20,-17,-35,-12v23,-21,74,-58,101,-58v17,0,25,11,25,32v1,84,-18,190,68,188v60,0,90,-16,128,-34r-1,-142v-2,-6,-26,-5,-35,-3v25,-15,55,-44,90,-44v19,0,28,12,28,35v0,86,-27,215,86,184v12,-3,19,-5,30,-12v-45,36,-86,66,-141,71v-33,3,-59,-34,-57,-70r-80,29v-62,26,-103,41,-122,42","w":524,"k":{"\u00d8":41,"z":23,"y":41,"x":41,"w":64,"v":64,"t":35,"r":41,"p":41,"l":23,"j":23,"i":23,"h":23,"f":52,"b":23}},"v":{"d":"359,-169v16,-23,17,-63,-25,-59r82,-64v8,5,14,13,14,22v0,16,-46,88,-139,215r-70,95v-24,-78,-51,-148,-93,-206v-36,-49,-71,-71,-128,-52v32,-20,61,-57,107,-56v105,3,130,133,167,221","w":434,"k":{"s":23,"o":23,"e":23,"a":23}},"w":{"d":"262,-226v23,-23,36,-41,70,-49v92,2,119,136,152,208v32,-40,71,-89,86,-142v0,-13,-11,-19,-32,-19r82,-64v24,28,5,49,-24,91r-57,84v-13,19,-42,56,-54,71r-55,67v-20,-54,-29,-122,-65,-159v-57,45,-95,109,-146,160v-39,-92,-68,-250,-201,-246v-7,0,-13,2,-18,5v25,-22,58,-49,87,-56v95,-2,123,72,157,135v11,21,22,46,34,73v25,-29,47,-60,80,-82v-21,-35,-40,-82,-96,-77","w":652,"k":{"z":23,"s":35,"r":23,"o":41,"e":23,"d":23,"c":23,"a":23}},"x":{"d":"535,-59v-43,38,-184,127,-249,62r-82,-82r-170,170v-37,36,-133,106,-198,51r77,-74v30,47,101,25,132,-6r150,-150r-86,-86v-30,-31,-88,-9,-114,8v31,-26,109,-99,135,-99v21,0,33,21,45,33r82,82v56,-46,97,-141,205,-112v8,2,13,14,17,21r-59,59v-15,-35,-71,-42,-103,-10r-51,51v41,36,71,82,120,110v57,14,114,-5,149,-28","w":535,"k":{"z":41,"y":41,"w":35,"t":35,"r":35,"p":35,"l":23,"h":23,"f":23,"b":23}},"y":{"d":"400,-222v-39,-9,-146,101,-145,127r0,363r-82,92r0,-396v6,-64,-86,-160,-144,-157v-13,0,-23,4,-32,13v25,-23,80,-79,101,-90v88,-8,119,88,157,142v58,-70,140,-171,274,-150r-92,76v-11,-9,-18,-16,-37,-20","w":532,"k":{"z":41,"x":41,"w":23,"v":23,"u":23,"s":64,"r":71,"q":64,"p":35,"o":64,"n":41,"m":41,"i":27,"g":41,"e":41,"d":41,"c":52,"a":64}},"z":{"d":"344,-206v-69,29,-159,0,-230,0v-39,0,-98,27,-117,44v70,-89,160,-123,304,-106v74,9,146,10,200,-18r-344,232v117,-3,230,45,328,-2v26,-12,49,-23,67,-34v-60,61,-140,122,-247,122v-94,0,-201,-39,-288,-12","w":557,"k":{"z":47,"i":23,"f":47}},"{":{"d":"81,-67v-1,-27,29,-100,29,-122v0,-60,-58,-66,-110,-72v77,-33,135,-73,92,-164v-31,-67,-3,-106,43,-139v33,-24,79,-32,135,-31v-75,20,-121,45,-100,128v12,47,27,91,-13,125r-58,49v37,13,85,12,85,66v0,40,-27,83,-27,119v0,81,90,128,173,124v-95,28,-243,24,-249,-83","w":325},"|":{"d":"0,0r0,-595r82,0r0,595r-82,0","w":147},"}":{"d":"160,-206v-2,31,43,101,43,139v0,80,-111,81,-191,91v60,-17,103,-35,110,-90v3,-19,-24,-80,-24,-98v0,-65,31,-88,64,-116v-34,-13,-52,-19,-59,-50v13,-39,40,-113,40,-148v0,-89,-56,-126,-135,-108v92,-51,208,-28,208,85v0,58,-21,94,-39,134v0,28,46,36,71,45v-50,31,-83,57,-88,116","w":248},"~":{"w":478},"\u201a":{"w":684},"\u0192":{"w":752},"\u201e":{"w":795},"\u2026":{"w":684},"\u2020":{"w":665},"\u2021":{},"\u02c6":{},"\u2030":{},"\u0160":{},"\u2039":{"d":"262,-259v-20,74,-51,81,-125,117v59,25,129,54,160,112r-96,22v-33,-61,-127,-92,-196,-117v97,-38,124,-36,151,-116","w":310},"\u0152":{},"\u2018":{"d":"11,-535v-1,-31,14,-31,34,-13v6,4,10,10,15,16v-11,47,9,82,24,113v-38,-22,-71,-65,-73,-116","w":104},"\u2019":{"d":"30,-513v-9,-29,21,-42,38,-48v29,53,-21,118,-64,142v10,-28,27,-57,26,-94","w":92},"\u201c":{"d":"107,-535v-1,-31,14,-31,34,-13v6,4,10,10,15,16v-11,47,9,82,24,113v-38,-22,-71,-65,-73,-116xm7,-543v-1,-31,14,-31,34,-13v6,4,10,10,15,16v-11,47,9,82,24,113v-38,-22,-71,-65,-73,-116","w":205},"\u201d":{"d":"44,-513v-9,-29,21,-42,38,-48v29,53,-21,118,-64,142v10,-28,27,-57,26,-94xm144,-521v-9,-29,21,-42,38,-48v29,53,-21,118,-64,142v10,-28,27,-57,26,-94","w":200},"\u2022":{"w":200},"\u2013":{"d":"142,-190r360,0r-110,55r-360,0","w":547},"\u2014":{"d":"142,-190r590,0r-110,55r-590,0","w":780},"\u02dc":{"w":465},"\u2122":{"w":465},"\u0161":{"w":465},"\u203a":{"d":"44,-11v22,-77,47,-80,125,-117v-58,-26,-129,-54,-160,-112r96,-22v33,62,122,89,196,117v-73,28,-133,39,-151,116","w":310},"\u0153":{"w":524},"\u0178":{"w":524,"k":{"y":41}},"\u00a0":{"w":200},"\u00a1":{"w":354},"\u00a2":{"w":428},"\u00a3":{"d":"396,12v-51,0,-116,-52,-149,-52v-55,0,-101,30,-140,52r0,-302r-107,0r61,-40r46,0r0,-124v14,-97,233,-166,327,-87v-13,12,-64,46,-72,42v-25,-23,-57,-48,-95,-48v-81,0,-56,131,-60,217r139,0r-66,40r-73,0r0,239v35,-15,77,-43,123,-43v35,-1,94,59,141,44v30,-3,53,-15,79,-23r-34,42v-34,29,-74,43,-120,43","w":550},"\u00a5":{"w":1000},"\u00a7":{"w":460},"\u00a8":{"w":865},"\u00a9":{"w":410},"\u00aa":{"w":712},"\u00ab":{"d":"494,-269v-20,74,-51,81,-125,117v59,25,129,54,160,112r-96,22v-33,-61,-127,-92,-196,-117v97,-38,124,-36,151,-116xm288,-259v-41,78,-72,107,-167,125v68,31,128,54,190,97r-102,23v-57,-38,-146,-83,-206,-110v103,-17,159,-45,187,-123","w":550},"\u00ac":{"w":410},"\u00ae":{"w":1099},"\u00af":{"w":684},"\u00b0":{"w":310},"\u00b1":{"w":310},"\u00b5":{"w":592},"\u00ba":{"w":669},"\u00bb":{"d":"44,-11v22,-77,47,-80,125,-117v-58,-26,-129,-54,-160,-112r96,-22v33,62,122,89,196,117v-73,28,-133,39,-151,116xm250,-21v41,-78,72,-107,167,-125r-88,-39v-37,-19,-65,-33,-102,-58r102,-23v74,49,130,74,206,110v-101,15,-160,47,-187,123"},"\u00bc":{"w":248},"\u00be":{"w":730},"\u00bf":{"w":465},"\u00c0":{"d":"649,5v-90,0,-142,-78,-187,-131v-157,12,-314,60,-406,118v-30,20,-48,29,-52,28v61,-102,185,-252,185,-443v0,-30,-3,-62,-9,-96v23,-25,50,-44,77,-65v85,144,159,254,221,332v62,78,112,132,154,158v55,34,85,58,127,30v-25,37,-58,69,-110,69xm131,-82r125,-43r168,-42r-136,-180v-30,102,-100,185,-157,265xm207,-579v-99,-21,-140,-22,-174,-98v-2,-5,5,-11,20,-19v15,-8,24,-10,26,-5v12,62,81,94,128,122","w":765},"\u00c1":{"d":"649,5v-90,0,-142,-78,-187,-131v-157,12,-314,60,-406,118v-30,20,-48,29,-52,28v61,-102,185,-252,185,-443v0,-30,-3,-62,-9,-96v23,-25,50,-44,77,-65v85,144,159,254,221,332v62,78,112,132,154,158v55,34,85,58,127,30v-25,37,-58,69,-110,69xm131,-82r125,-43r168,-42r-136,-180v-30,102,-100,185,-157,265xm230,-589v35,-8,108,-31,124,-52v10,-28,36,-5,50,3v-40,41,-73,37,-174,49","w":765},"\u00c2":{"d":"649,5v-90,0,-142,-78,-187,-131v-157,12,-314,60,-406,118v-30,20,-48,29,-52,28v61,-102,185,-252,185,-443v0,-30,-3,-62,-9,-96v23,-25,50,-44,77,-65v85,144,159,254,221,332v62,78,112,132,154,158v55,34,85,58,127,30v-25,37,-58,69,-110,69xm131,-82r125,-43r168,-42r-136,-180v-30,102,-100,185,-157,265xm175,-597r-11,-9v34,-30,83,-66,104,-102v35,34,54,58,111,79r-40,34v-33,-15,-64,-43,-91,-67v-14,26,-49,46,-73,65","w":765},"\u00c3":{"w":808},"\u00c4":{"d":"649,5v-90,0,-142,-78,-187,-131v-157,12,-314,60,-406,118v-30,20,-48,29,-52,28v61,-102,185,-252,185,-443v0,-30,-3,-62,-9,-96v23,-25,50,-44,77,-65v85,144,159,254,221,332v62,78,112,132,154,158v55,34,85,58,127,30v-25,37,-58,69,-110,69xm131,-82r125,-43r168,-42r-136,-180v-30,102,-100,185,-157,265xm380,-681v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm167,-681v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56","w":765},"\u00c5":{"w":672},"\u00c7":{"d":"-2,-298v0,-215,296,-325,546,-270v43,9,88,23,135,42r-124,68v-105,-51,-193,-76,-262,-76v-124,0,-183,77,-182,206v0,204,341,348,532,218v-71,52,-169,107,-284,110v-14,0,-21,6,-21,17v0,25,46,58,45,78v-2,29,-75,40,-109,38v26,-15,59,-16,62,-46v4,-13,-52,-78,-52,-87v-92,-12,-150,-34,-203,-110v-54,-78,-83,-94,-83,-188","w":684},"\u00c8":{"d":"582,-92v-55,51,-130,124,-247,119v-139,-6,-232,-82,-305,-179v-17,-25,-31,-63,-30,-103v2,-176,199,-334,403,-325v90,4,152,14,223,44r-72,70v-76,-29,-165,-58,-259,-58v-87,0,-141,19,-163,57v-22,38,-36,78,-42,119r540,0v47,0,86,-15,120,-30v-27,28,-116,82,-170,82r-490,0v0,50,1,54,34,101v57,81,213,194,370,143v27,-9,57,-21,88,-40xm431,-589v-99,-21,-140,-22,-174,-98v-2,-5,5,-11,20,-19v15,-8,24,-10,26,-5v12,62,81,94,128,122","w":752},"\u00c9":{"d":"582,-92v-55,51,-130,124,-247,119v-139,-6,-232,-82,-305,-179v-17,-25,-31,-63,-30,-103v2,-176,199,-334,403,-325v90,4,152,14,223,44r-72,70v-76,-29,-165,-58,-259,-58v-87,0,-141,19,-163,57v-22,38,-36,78,-42,119r540,0v47,0,86,-15,120,-30v-27,28,-116,82,-170,82r-490,0v0,50,1,54,34,101v57,81,213,194,370,143v27,-9,57,-21,88,-40xm362,-601v36,-20,114,-61,122,-101v10,-50,38,-12,52,3v-30,74,-81,78,-174,98","w":752},"\u00ca":{"d":"582,-92v-55,51,-130,124,-247,119v-139,-6,-232,-82,-305,-179v-17,-25,-31,-63,-30,-103v2,-176,199,-334,403,-325v90,4,152,14,223,44r-72,70v-76,-29,-165,-58,-259,-58v-87,0,-141,19,-163,57v-22,38,-36,78,-42,119r540,0v47,0,86,-15,120,-30v-27,28,-116,82,-170,82r-490,0v0,50,1,54,34,101v57,81,213,194,370,143v27,-9,57,-21,88,-40xm323,-599r-11,-9v34,-30,83,-66,104,-102v35,34,54,58,111,79r-40,34v-33,-15,-64,-43,-91,-67v-14,26,-49,46,-73,65","w":752},"\u00cb":{"d":"582,-92v-55,51,-130,124,-247,119v-139,-6,-232,-82,-305,-179v-17,-25,-31,-63,-30,-103v2,-176,199,-334,403,-325v90,4,152,14,223,44r-72,70v-76,-29,-165,-58,-259,-58v-87,0,-141,19,-163,57v-22,38,-36,78,-42,119r540,0v47,0,86,-15,120,-30v-27,28,-116,82,-170,82r-490,0v0,50,1,54,34,101v57,81,213,194,370,143v27,-9,57,-21,88,-40xm542,-697v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm329,-697v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56","w":752},"\u00cc":{"w":740},"\u00cd":{"w":684},"\u00ce":{"w":1305},"\u00cf":{"w":768},"\u00d0":{"w":547},"\u00d1":{"d":"52,31v-22,-3,-23,-22,-24,-53r0,-430r-28,-38v35,-37,56,-66,82,-106v81,146,178,213,336,304r278,160r0,-308v6,-45,-34,-62,-64,-40v-4,-19,84,-115,109,-107v13,0,19,10,19,31r0,452r-54,88r-32,44v-76,-83,-167,-161,-276,-208v-113,-47,-221,-130,-306,-200r0,242v-2,54,28,75,76,70v-28,28,-81,94,-116,99xm243,-579v29,-56,73,-101,150,-78v48,14,126,42,171,7v5,-3,10,-7,15,-11v-24,65,-101,105,-175,64v-51,-28,-131,-10,-161,18","w":795},"\u00d2":{"w":205},"\u00d3":{"w":200},"\u00d4":{"d":"368,2v-121,41,-250,13,-310,-70v-58,-81,-77,-222,-20,-323v65,-115,268,-244,454,-173v76,29,148,104,144,230v-6,179,-130,289,-268,336xm368,-42v181,0,212,-217,129,-355v-50,-83,-124,-131,-221,-131v-122,0,-170,103,-170,244v0,125,138,242,262,242xm249,-603r-11,-9v34,-30,83,-66,104,-102v35,34,54,58,111,79r-40,34v-33,-15,-64,-43,-91,-67v-14,26,-49,46,-73,65","w":684},"\u00d5":{"w":92,"k":{"s":72}},"\u00d6":{"d":"368,2v-121,41,-250,13,-310,-70v-58,-81,-77,-222,-20,-323v65,-115,268,-244,454,-173v76,29,148,104,144,230v-6,179,-130,289,-268,336xm368,-42v181,0,212,-217,129,-355v-50,-83,-124,-131,-221,-131v-122,0,-170,103,-170,244v0,125,138,242,262,242xm516,-697v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm303,-697v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56","w":684},"\u00d7":{"w":430},"\u00d8":{"w":532},"\u00d9":{"w":820},"\u00da":{"w":275},"\u00dc":{"d":"288,14v-107,0,-228,-85,-228,-190r0,-256v3,-48,-28,-56,-60,-64v36,-28,91,-83,139,-83v14,0,21,9,21,27r0,312v1,133,115,174,236,182v61,4,91,-23,116,-50r0,-336v1,-35,-20,-57,-56,-48v36,-29,88,-80,135,-80v14,0,21,9,21,26r0,484r-100,100r0,-121v-52,36,-132,97,-224,97xm482,-685v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm269,-685v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56","w":665},"\u00dd":{"w":310},"\u00de":{"w":310},"\u00df":{"d":"10,74v23,-36,36,-75,36,-130r0,-414v0,-44,83,-92,134,-90v88,3,162,14,172,76v-7,67,-87,121,-146,150v31,-9,81,-13,112,-2v34,12,82,59,78,120v-7,103,-98,184,-200,207v52,-39,136,-86,132,-175v-3,-75,-68,-148,-154,-140v36,-29,98,-64,98,-128v0,-48,-47,-87,-93,-86v-31,0,-52,17,-51,50r0,420v-2,69,-71,106,-118,142","w":460},"\u00e0":{"d":"131,3v-79,0,-117,-38,-121,-112v-5,-101,157,-157,260,-157v72,0,78,35,128,6v-10,118,54,242,185,202r25,-10v-57,37,-104,62,-175,66v-66,3,-82,-36,-97,-79v-27,40,-134,84,-205,84xm295,-195v-40,-17,-188,-55,-188,30v0,132,112,148,197,95v10,-6,20,-11,29,-17xm295,-291v-99,-21,-140,-22,-174,-98v-2,-5,5,-11,20,-19v15,-8,24,-10,26,-5v12,62,81,94,128,122"},"\u00e1":{"d":"131,3v-79,0,-117,-38,-121,-112v-5,-101,157,-157,260,-157v72,0,78,35,128,6v-10,118,54,242,185,202r25,-10v-57,37,-104,62,-175,66v-66,3,-82,-36,-97,-79v-27,40,-134,84,-205,84xm295,-195v-40,-17,-188,-55,-188,30v0,132,112,148,197,95v10,-6,20,-11,29,-17xm180,-291v36,-20,114,-61,122,-101v10,-50,38,-12,52,3v-30,74,-81,78,-174,98"},"\u00e2":{"d":"131,3v-79,0,-117,-38,-121,-112v-5,-101,157,-157,260,-157v72,0,78,35,128,6v-10,118,54,242,185,202r25,-10v-57,37,-104,62,-175,66v-66,3,-82,-36,-97,-79v-27,40,-134,84,-205,84xm295,-195v-40,-17,-188,-55,-188,30v0,132,112,148,197,95v10,-6,20,-11,29,-17xm107,-299r-11,-9v34,-30,83,-66,104,-102v35,34,54,58,111,79r-40,34v-33,-15,-64,-43,-91,-67v-14,26,-49,46,-73,65"},"\u00e3":{"w":190},"\u00e4":{"d":"131,3v-79,0,-117,-38,-121,-112v-5,-101,157,-157,260,-157v72,0,78,35,128,6v-10,118,54,242,185,202r25,-10v-57,37,-104,62,-175,66v-66,3,-82,-36,-97,-79v-27,40,-134,84,-205,84xm295,-195v-40,-17,-188,-55,-188,30v0,132,112,148,197,95v10,-6,20,-11,29,-17xm354,-409v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm141,-409v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56"},"\u00e5":{"w":765},"\u00e6":{"w":752},"\u00e7":{"d":"176,21v-22,24,48,59,2,79v-11,5,-34,11,-68,16r1,-4v33,-20,56,-32,27,-61v-8,-8,-12,-17,-10,-29v-17,0,-41,-6,-73,-17v-32,-11,-49,-56,-49,-137v0,-69,211,-152,300,-146v44,3,71,8,94,28v-29,15,-81,52,-110,52v-37,-31,-182,-59,-188,20v-11,131,112,152,222,116v39,-13,61,-17,62,-20v-38,54,-125,74,-210,103","w":428},"\u00e8":{"d":"323,-17v-74,51,-178,55,-262,19v-73,-31,-70,-141,-21,-206v67,-89,258,-98,341,-27r14,25r-291,75v0,14,7,35,14,65v10,43,107,54,167,37v25,-7,53,-15,82,-28xm104,-147r161,-40v12,-11,-1,-23,-19,-36v-37,-27,-107,-28,-125,19v-8,20,-12,32,-17,57xm233,-291v-99,-21,-140,-22,-174,-98v-2,-5,5,-11,20,-19v15,-8,24,-10,26,-5v12,62,81,94,128,122","w":419},"\u00e9":{"d":"323,-17v-74,51,-178,55,-262,19v-73,-31,-70,-141,-21,-206v67,-89,258,-98,341,-27r14,25r-291,75v0,14,7,35,14,65v10,43,107,54,167,37v25,-7,53,-15,82,-28xm104,-147r161,-40v12,-11,-1,-23,-19,-36v-37,-27,-107,-28,-125,19v-8,20,-12,32,-17,57xm138,-291v36,-20,114,-61,122,-101v10,-50,38,-12,52,3v-30,74,-81,78,-174,98","w":419},"\u00ea":{"d":"323,-17v-74,51,-178,55,-262,19v-73,-31,-70,-141,-21,-206v67,-89,258,-98,341,-27r14,25r-291,75v0,14,7,35,14,65v10,43,107,54,167,37v25,-7,53,-15,82,-28xm104,-147r161,-40v12,-11,-1,-23,-19,-36v-37,-27,-107,-28,-125,19v-8,20,-12,32,-17,57xm107,-299r-11,-9v34,-30,83,-66,104,-102v35,34,54,58,111,79r-40,34v-33,-15,-64,-43,-91,-67v-14,26,-49,46,-73,65","w":419},"\u00eb":{"d":"323,-17v-74,51,-178,55,-262,19v-73,-31,-70,-141,-21,-206v67,-89,258,-98,341,-27r14,25r-291,75v0,14,7,35,14,65v10,43,107,54,167,37v25,-7,53,-15,82,-28xm104,-147r161,-40v12,-11,-1,-23,-19,-36v-37,-27,-107,-28,-125,19v-8,20,-12,32,-17,57xm324,-409v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm111,-409v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56","w":419},"\u00ed":{"w":206},"\u00ee":{"w":684},"\u00ef":{"w":684},"\u00f0":{"w":746},"\u00f1":{"d":"364,-97v0,-86,-86,-147,-174,-114v-14,6,-29,13,-43,22v19,33,22,103,0,133r-111,72v14,-32,18,-56,19,-94v2,-59,-24,-94,-55,-126v29,-21,51,-49,84,-65v30,5,43,36,55,61v48,-38,131,-74,205,-79v129,-9,152,164,78,239v-29,30,-65,49,-110,56v20,-16,52,-66,52,-105xm71,-315v29,-56,73,-101,150,-78v48,14,126,42,171,7v5,-3,10,-7,15,-11v-24,65,-101,105,-175,64v-51,-28,-131,-10,-161,18","w":502},"\u00f2":{"w":665},"\u00f3":{"w":665},"\u00f4":{"d":"266,-2v-120,59,-298,5,-258,-134v25,-85,177,-154,290,-152v78,1,134,27,137,101v3,79,-114,158,-169,185xm214,-258v-59,-3,-110,58,-108,120v2,68,73,114,149,115v58,0,80,-51,80,-107v0,-74,-49,-125,-121,-128xm107,-299r-11,-9v34,-30,83,-66,104,-102v35,34,54,58,111,79r-40,34v-33,-15,-64,-43,-91,-67v-14,26,-49,46,-73,65","w":465},"\u00f5":{"w":245},"\u00f6":{"d":"266,-2v-120,59,-298,5,-258,-134v25,-85,177,-154,290,-152v78,1,134,27,137,101v3,79,-114,158,-169,185xm214,-258v-59,-3,-110,58,-108,120v2,68,73,114,149,115v58,0,80,-51,80,-107v0,-74,-49,-125,-121,-128xm362,-409v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm149,-409v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56","w":465},"\u00f7":{"w":477},"\u00f8":{"w":417},"\u00f9":{"w":400},"\u00fa":{"w":400},"\u00fb":{"w":400},"\u00fc":{"d":"125,4v-39,2,-76,-29,-76,-68v0,-47,8,-104,-9,-138v-7,-13,-20,-17,-35,-12v23,-21,74,-58,101,-58v17,0,25,11,25,32v1,84,-18,190,68,188v60,0,90,-16,128,-34r-1,-142v-2,-6,-26,-5,-35,-3v25,-15,55,-44,90,-44v19,0,28,12,28,35v0,86,-27,215,86,184v12,-3,19,-5,30,-12v-45,36,-86,66,-141,71v-33,3,-59,-34,-57,-70r-80,29v-62,26,-103,41,-122,42xm366,-409v1,42,24,40,63,25v3,1,5,1,6,2v-9,29,-74,74,-102,86v-16,7,-59,-38,-49,-57v3,-14,41,-52,82,-56xm153,-409v1,42,23,40,62,25v3,1,5,1,6,2v-7,29,-77,76,-101,86v-16,7,-60,-36,-50,-57v2,-14,42,-52,83,-56","w":524},"\u00fd":{"w":400},"\u00fe":{"d":"0,-162v42,-21,122,-39,122,32r0,176r82,-60r0,-158v-7,-12,88,-67,98,-58v107,45,203,75,328,78v125,4,183,-39,238,-90v-45,20,-102,34,-156,35v-88,1,-215,-80,-284,-76v-101,5,-144,30,-224,77v-2,-22,-6,-61,-35,-59v-11,0,-24,5,-39,15","w":865},"\u00ff":{"d":"200,-781r-52,158v-1,12,-20,16,-20,2r-6,-104v0,-6,3,-9,10,-9v18,5,7,39,13,57r36,-109v1,-5,4,-7,9,-7v9,0,12,4,10,12xm202,-614v13,0,36,4,44,-2v4,-5,9,-5,14,0v12,13,-8,23,-21,21v-25,-3,-40,3,-61,-1v-9,-41,55,-53,55,-92v0,-13,-18,-9,-26,-7v-5,5,4,21,-12,22v-7,1,-9,-8,-9,-13v0,-34,67,-42,67,-2v0,31,-40,57,-51,74xm111,-639v-5,17,-35,9,-51,15v-7,1,-10,-2,-10,-9r9,-115v0,-5,3,-8,9,-8v7,0,11,4,11,11r-9,100v14,1,40,-12,41,6","w":300}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Copyright:
 * ? 1999-2001, WolfBainX & Apostrophic Labs. All rights reserved. Visit
 * www.apsotrophiclab.com or email info@apostrophiclab.com for more info.
 * 
 * Description:
 * ? 1999-2001, WolfBainX & Apostrophic Labs. All rights reserved. Visit
 * www.apsotrophiclab.com or email info@apostrophiclab.com for more info.
 * 
 * Designer:
 * WolfBainX & Apostrophe
 * 
 * Vendor URL:
 * www.@apostrophiclab.com
 */
Cufon.registerFont({"w":694,"face":{"font-family":"Komika Axis","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"2 0 5 6 0 0 0 2 0 4","ascent":"800","descent":"-200","x-height":"10","cap-height":"16","bbox":"-131.314 -1377.26 1495.4 253.222","underline-thickness":"50","underline-position":"-75","unicode-range":"U+0006-U+2122"},"glyphs":{" ":{"w":361},"\u00a0":{"w":361},"\r":{"d":"292,-761v-25,-43,-107,-75,-163,-91v-92,-28,-82,72,-95,142r-50,276r-38,260v-4,70,-29,133,27,157v35,15,84,37,129,33v24,-26,25,-84,34,-124r92,-386r63,-226v5,-18,6,-32,1,-41","w":312},"!":{"d":"362,-781v23,-74,-44,-94,-92,-116v-45,-20,-120,-61,-137,11r-73,309v-12,55,-22,109,-32,161v-10,52,-16,99,-23,137v-12,64,38,71,79,89v30,6,92,37,100,-13v7,-41,20,-83,34,-129r92,-297xm38,-150v-72,0,-111,110,-51,160v51,43,146,20,171,-24v44,-78,-31,-136,-120,-136","w":400},"\"":{"d":"59,-617v143,22,165,-95,203,-193v18,-48,43,-124,-2,-161v-32,-26,-75,-61,-122,-65v-11,2,-17,13,-22,32r-44,180r-48,163v-6,25,6,40,35,44xm294,-595v87,18,140,-14,173,-71v38,-64,87,-125,102,-211v-4,-44,-53,-77,-87,-100v-70,-48,-81,53,-100,93r-82,175r-36,67v-14,25,-3,41,30,47","w":561},"#":{"d":"538,-485v49,-7,113,-1,148,-18v-3,-47,-47,-91,-112,-85v12,-42,52,-100,29,-152v-11,-22,-29,-42,-54,-60v-29,-21,-48,-16,-59,13r-34,97v0,0,-23,72,-34,109r-128,11v13,-45,40,-99,14,-144v-13,-21,-33,-40,-59,-58v-28,-18,-48,-15,-56,14r-55,208r-147,26v-35,9,-36,14,-16,42v29,40,63,70,134,56v-11,42,-14,81,-24,122v-41,11,-77,12,-115,24v-32,9,-33,16,-13,40v28,34,50,58,108,51v-12,80,31,120,95,129v29,-32,28,-107,43,-156v43,-10,84,-11,126,-22v-9,40,-23,97,7,126v16,16,73,58,86,14r45,-159v41,-7,104,-2,131,-21v-4,-41,-45,-78,-101,-75xm388,-468r-33,125r-125,16r31,-124v40,-9,84,-10,127,-17","w":717},"$":{"d":"-53,-223v16,44,86,95,135,115v-22,80,6,175,82,178v20,-12,17,-50,26,-80v7,-23,11,-46,17,-67v107,9,176,-37,206,-106v28,-63,-17,-96,-53,-125v-45,-36,-111,-63,-154,-102v-65,-59,2,-163,56,-188v41,-19,41,29,32,62v-23,85,16,143,83,158v75,17,75,-108,86,-181v11,-70,-46,-113,-90,-139v11,-50,42,-119,17,-172v-15,-32,-86,-107,-114,-44v-20,45,-37,117,-54,170v-84,8,-128,58,-168,110v-44,57,-87,132,-50,216v43,98,168,133,250,194v23,17,-1,31,-22,32v-106,7,-166,-99,-272,-56v-9,7,-14,15,-13,25","w":553},"%":{"d":"723,-672v43,-49,30,-95,-5,-141v-20,-26,-38,-27,-59,-5v-59,61,-134,114,-247,114v-92,0,-103,-102,-174,-124v-37,-21,-107,-26,-146,1v-108,74,-166,340,-28,420v52,30,139,46,193,4v59,-46,86,-130,87,-233v61,20,123,10,172,-17r-119,147r-117,150r-100,134r-71,102v-42,61,1,105,49,124v6,1,15,-2,22,-12v167,-228,357,-453,543,-664xm664,-16v83,-49,133,-196,88,-314v-22,-59,-135,-100,-205,-56v-77,49,-130,139,-123,266v6,109,145,160,240,104xm158,-712v15,-23,50,-61,58,-17v16,84,-10,201,-42,247v-30,43,-64,28,-67,-29v-3,-65,22,-156,51,-201xm598,-287v13,-18,51,-55,57,-14v12,82,-30,172,-63,216v-28,37,-64,27,-60,-24v5,-70,32,-133,66,-178","w":889},"&":{"d":"462,-56v37,32,87,73,149,44v13,-7,48,-23,50,-38v-15,-31,-60,-60,-85,-88v38,-38,95,-103,60,-174v-35,-43,-89,22,-114,40r-46,33r-52,-58v-17,-19,-33,-39,-48,-60v106,-61,259,-132,256,-279v-2,-96,-104,-226,-204,-242v-184,-29,-342,69,-377,226v-24,108,42,176,86,246v-78,45,-159,92,-188,177v-32,93,32,148,92,192v69,51,177,66,275,37v52,-15,101,-31,146,-56xm284,-488v-39,-61,-32,-130,12,-168v34,-30,78,-59,129,-71v49,46,13,141,-27,164v-30,29,-72,54,-114,75xm346,-164v-49,24,-92,41,-128,48v-48,10,-78,8,-83,-27v8,-61,51,-93,106,-134r53,59v17,18,34,37,52,54","w":778},"'":{"d":"55,-595v86,18,140,-14,172,-71v36,-64,84,-125,98,-211v-6,-44,-54,-76,-89,-100v-71,-48,-82,53,-100,93r-111,242v-12,25,-2,41,30,47","w":318},"(":{"d":"211,-931v-136,166,-250,392,-199,689v21,124,66,282,220,274v28,-1,35,-4,20,-28v-86,-135,-78,-378,-17,-542v23,-63,50,-122,83,-176v41,-67,31,-137,-31,-212v-27,-33,-52,-34,-76,-5","w":364},")":{"d":"275,-326v46,-169,63,-425,-50,-534v-37,-36,-94,-65,-165,-65v-26,0,-17,34,-10,54v83,233,51,597,-52,771v-23,39,-47,73,-72,102v-16,18,-7,30,22,33v59,5,106,-6,140,-35v87,-73,152,-197,187,-326","w":406},"*":{"d":"621,-545v28,-5,34,-19,17,-42v-31,-43,-66,-64,-145,-53r-80,12v8,-53,54,-115,25,-173v-12,-23,-32,-42,-59,-61v-28,-19,-46,-15,-56,14r-30,96v0,0,-16,61,-23,90v-60,-49,-129,-146,-235,-94v-27,13,-28,30,-5,52r82,72r73,62v-67,17,-121,38,-182,59v-34,11,-30,20,-9,44v31,35,79,66,144,47r90,-27v-14,52,-18,131,26,153v14,7,48,26,62,25v29,-40,30,-114,46,-166v62,39,138,129,226,75v27,-17,29,-22,2,-43r-137,-107","w":712},"+":{"d":"346,-318v88,-13,191,0,264,-18v6,-33,-16,-66,-33,-95v-31,-53,-103,-32,-191,-35v8,-50,65,-113,14,-149v-21,-23,-60,-49,-94,-58v-65,-18,-69,59,-83,113r-27,105v-90,7,-189,8,-254,36v-20,24,9,52,24,73v24,34,43,67,100,59r100,-14v-4,59,-33,126,21,151v33,15,68,38,105,41v20,-21,21,-76,30,-109v8,-32,15,-65,24,-100","w":732},",":{"d":"-42,138v104,19,131,-67,182,-120v18,-28,54,-63,16,-91v-33,-25,-74,-57,-123,-61v-9,1,-19,7,-24,20v-30,71,-76,140,-112,203v-20,35,33,44,61,49","w":313},"-":{"d":"280,-568v-134,1,-274,15,-385,38v-61,12,1,83,17,108v28,29,53,91,115,75v99,-25,226,-45,342,-45v63,0,21,-57,9,-84v-17,-40,-41,-92,-98,-92","w":592},".":{"d":"-23,-32v36,89,210,66,210,-41v0,-91,-165,-119,-205,-39v-12,24,-16,54,-5,80","w":331},"\/":{"d":"528,-725v44,-52,-20,-88,-53,-113v-30,-24,-89,-79,-125,-19v-145,240,-283,515,-405,781v-31,68,39,82,83,107v28,16,40,10,54,-13r215,-368r167,-276","w":531},"0":{"d":"618,-488v16,-183,-33,-301,-170,-342v-60,-18,-123,-41,-198,-20v-127,36,-190,145,-240,256v-59,130,-77,353,-9,484v51,97,198,149,342,118v140,-30,205,-186,246,-326v16,-56,25,-113,29,-170xm328,-668v34,-32,70,-22,76,25v24,175,-29,361,-98,473v-28,46,-103,90,-124,20v-59,-196,36,-417,146,-518","w":685},"1":{"d":"332,-724v15,-44,0,-51,-31,-72v-45,-31,-93,-62,-161,-58v-36,20,-53,54,-77,92v-20,31,-39,60,-48,96v1,32,32,36,56,51v-10,45,-19,93,-29,145v-10,52,-18,101,-26,150v-8,49,-17,94,-20,136v-6,73,-31,139,20,167v35,19,87,33,130,31v24,-25,22,-76,32,-123r58,-253r66,-256","w":387},"2":{"d":"221,-144v141,-105,276,-229,359,-390v30,-58,34,-145,-6,-200v-53,-73,-144,-144,-280,-120v-136,24,-246,122,-289,246v-27,79,107,83,174,64v75,-21,109,-105,184,-126v29,-8,50,9,31,44v-80,150,-221,281,-344,396v-38,36,-76,65,-111,91v-51,66,56,116,99,155v46,19,96,-3,149,-10r187,-24v42,-6,89,-2,114,-16v4,-43,-37,-97,-68,-118v-54,-16,-139,1,-199,8","w":619},"3":{"d":"382,-391v119,-47,259,-122,206,-292v-35,-113,-150,-212,-310,-174v-98,24,-183,76,-231,147v-45,68,75,115,163,100v63,-11,95,-64,165,-69v27,-2,42,24,24,49v-66,89,-195,133,-327,177v-27,9,-31,28,-12,56v34,53,90,100,167,90v70,-9,127,2,121,69v-8,86,-93,144,-196,116v-61,-17,-167,-84,-230,-20v-12,31,20,45,41,66v130,127,429,137,543,-9v38,-48,62,-132,24,-196v-28,-48,-82,-95,-148,-110","w":649},"4":{"d":"535,-387r99,-311v26,-60,-25,-75,-68,-96r-107,-52v-45,-21,-90,-39,-128,-1v-142,136,-280,291,-387,462v-37,57,17,99,46,127v33,32,60,66,127,58r172,-21v-13,62,-21,110,-27,143v-14,76,66,79,119,100v34,6,41,3,49,-23r63,-237v40,-4,102,3,127,-14v11,-33,-12,-68,-25,-98v-10,-24,-31,-36,-60,-37xm132,-363r126,-145v23,-25,47,-50,72,-74v25,-24,49,-48,74,-70r-76,273","w":711},"5":{"d":"230,-455v20,-61,45,-122,72,-181r259,-31v35,-7,47,-4,38,-46v-14,-65,-19,-145,-102,-139v-50,4,-100,3,-151,8v-83,9,-209,2,-236,75v-42,114,-81,219,-106,330v-19,86,64,87,106,129v51,13,118,-34,183,-6v41,86,-15,230,-129,192v-51,-17,-136,-82,-210,-35v-13,7,-18,16,-15,26v1,11,15,29,42,54v72,104,291,109,400,39v71,-45,131,-166,111,-256v-22,-101,-147,-159,-262,-159","w":589},"6":{"d":"270,-485v65,-100,148,-187,240,-265v61,-51,-29,-78,-75,-94v-40,-13,-103,-41,-141,-12v-165,129,-286,297,-332,524v-28,135,-3,241,80,292v72,44,226,87,312,29v93,-62,181,-184,147,-342v-16,-77,-96,-109,-177,-129v-17,-3,-35,-4,-54,-3xm160,-274v29,-39,68,-84,133,-72v48,27,24,90,1,140v-19,38,-39,65,-62,82v-42,31,-93,14,-93,-43v0,-28,7,-64,21,-107","w":612},"7":{"d":"379,-672v-124,174,-242,364,-332,569v-25,56,23,80,55,100v26,16,77,55,99,13v117,-227,261,-448,416,-642v44,-55,-3,-106,-28,-138v-31,-40,-55,-97,-131,-92r-238,16v-75,8,-153,20,-215,34v-47,11,-14,48,2,69v34,45,63,107,149,97","w":643},"8":{"d":"412,-383v93,-53,191,-101,213,-211v20,-97,-39,-155,-95,-201v-66,-54,-145,-92,-250,-54v-100,37,-185,101,-232,189v-63,117,-5,194,83,254v-79,53,-174,101,-183,215v-19,230,402,268,523,112v46,-60,91,-152,31,-226v-20,-25,-49,-52,-90,-78xm279,-307v49,26,48,97,16,142v-29,41,-84,85,-136,53v-42,-46,8,-105,40,-136v21,-21,48,-41,80,-59xm260,-478v-51,-49,-8,-122,34,-161v22,-20,49,-43,83,-64v42,32,53,66,31,101v-22,35,-71,77,-148,124","w":654},"9":{"d":"192,-257v-52,66,-111,127,-180,179v-43,32,27,63,48,72v39,17,83,34,124,6v154,-106,289,-266,360,-450v42,-110,36,-225,-26,-294v-78,-87,-286,-174,-412,-73v-94,75,-171,223,-134,391v22,105,102,150,220,169xm284,-407v-46,51,-117,26,-117,-34v0,-111,47,-202,118,-244v50,-29,73,31,63,91v-11,64,-35,129,-64,187","w":609},":":{"d":"171,-499v-142,-49,-210,151,-80,197v102,37,200,-65,143,-158v-11,-18,-34,-29,-63,-39xm90,-157v-123,-41,-188,117,-84,168v67,33,171,10,162,-77v-5,-50,-34,-76,-78,-91","w":369},";":{"d":"40,169v57,0,67,-60,92,-101v15,-26,28,-59,37,-88v23,-70,-60,-93,-106,-126v-21,-16,-62,-29,-69,9v-16,88,-42,165,-69,245v-16,49,76,61,115,61xm69,-610v-145,-50,-166,148,-79,216v34,42,129,50,162,1v25,-37,33,-102,7,-146v-19,-32,-49,-57,-90,-71","w":390},"<":{"d":"403,-481v30,-9,35,-21,15,-44v-30,-34,-71,-98,-143,-71r-101,38r-151,70v-46,16,-50,78,-50,131v0,17,4,30,20,37r161,61v53,21,103,42,149,66v54,28,59,-30,66,-75v5,-31,-12,-39,-34,-52v-44,-26,-105,-49,-155,-71","w":522},"=":{"d":"60,-424v80,7,171,-12,254,-12v71,0,146,-8,221,-1v51,5,33,-37,23,-64v-13,-35,-29,-70,-79,-73v-141,-10,-322,-11,-456,6v-24,3,-49,14,-34,45v16,34,38,83,71,99xm96,-196v129,-23,266,-33,411,-38v27,-1,40,-2,30,-32v-15,-43,-34,-94,-91,-94v-33,-1,-68,-1,-105,0v-37,1,-75,3,-114,6v-39,3,-77,4,-114,10v-48,7,-104,5,-134,29v-13,22,14,50,24,65v21,30,36,64,93,54","w":654},">":{"d":"419,-316v26,-31,53,-90,46,-138v-106,-69,-253,-117,-381,-163v-25,-9,-48,-5,-50,18v-6,60,-2,128,53,134r152,58v-81,22,-173,51,-239,81v-18,8,-34,22,-13,42r38,36v28,21,52,56,95,35v90,-43,183,-60,285,-95v5,-2,10,-5,14,-8","w":555},"?":{"d":"96,-268v-6,63,39,68,77,85v25,11,52,20,81,13v9,-3,13,-10,12,-23v34,-218,326,-186,348,-411v13,-130,-77,-219,-176,-263v-103,-45,-238,-13,-314,47v-52,41,-111,98,-138,166v-27,67,77,76,132,76v123,0,148,-142,271,-142v58,0,59,62,24,106v-86,111,-299,152,-317,346xm268,-23v29,-115,-161,-158,-212,-77v-60,95,82,168,173,123v21,-11,34,-27,39,-46","w":679},"@":{"d":"666,-148v116,-65,193,-277,128,-446v-62,-162,-240,-272,-478,-240v-190,26,-320,145,-350,334v-42,264,96,414,290,478v74,23,138,29,206,11v16,-5,18,-17,7,-30v-49,-60,-182,-33,-254,-72v-95,-52,-147,-186,-109,-332v42,-159,138,-280,304,-303v218,-30,326,170,256,384v-22,68,-50,133,-102,164v-45,14,-34,-37,-26,-76v14,-68,42,-129,51,-198v4,-33,-23,-42,-47,-57v-16,-60,-77,-106,-159,-83v-99,28,-157,118,-188,220v-44,144,44,240,187,230v24,-2,45,-12,64,-27v36,59,148,84,220,43xm482,-511v-28,97,-56,199,-112,261v-38,42,-70,-6,-61,-60v16,-92,64,-177,124,-222v28,-21,42,-4,49,21","w":892},"A":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,6,-131,6,-192v0,-80,20,-149,5,-210v-55,-53,-164,-62,-266,-72v-62,-6,-90,20,-110,57v-118,215,-236,478,-325,721v-27,74,45,85,95,107v62,28,63,-47,83,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm226,-329r94,-183r86,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"B":{"d":"480,-383v88,-51,180,-101,200,-211v19,-103,-35,-173,-93,-224v-134,-119,-445,-35,-571,36v-5,227,-50,444,-55,667v10,49,61,76,93,97v40,26,96,58,163,38v136,-41,285,-88,347,-196v46,-81,-21,-177,-84,-207xm216,-454r48,-190v58,-25,122,-54,192,-36v30,8,29,33,10,62v-51,76,-148,130,-250,164xm146,-129r32,-159v59,-21,156,-36,191,10v-4,65,-73,91,-128,118v-28,14,-60,22,-95,31"},"C":{"d":"397,-611v-1,106,60,156,160,160v58,-28,54,-130,54,-216v0,-135,-114,-169,-222,-201v-86,-25,-171,-4,-224,45v-125,116,-213,284,-227,505v-9,149,35,264,140,308v83,34,240,56,318,-1v48,-37,118,-95,118,-168v0,-14,-15,-24,-40,-31v-63,-18,-115,-7,-154,33v-55,56,-95,80,-122,71v-75,-43,-44,-207,-21,-292v28,-100,86,-213,146,-282v31,-35,63,-30,71,11v3,17,4,37,3,58","w":642},"D":{"d":"16,-792r-58,635v-16,83,47,108,90,139v33,24,102,54,156,36v229,-74,407,-207,460,-442v47,-208,-63,-363,-214,-420v-143,-54,-334,-6,-434,52xm150,-139r52,-257v0,0,39,-172,62,-259v118,-35,201,17,187,142v-22,191,-146,305,-301,374","w":733},"E":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72","w":577},"F":{"d":"500,-868v-167,-9,-340,22,-477,56v6,260,-57,486,-80,728v-7,78,71,77,128,96v28,4,50,3,56,-22r60,-270r230,-43v32,-5,44,-7,34,-43v-15,-53,-31,-115,-101,-110r-119,9v22,-66,31,-132,52,-193r260,-32v37,-7,45,-7,40,-47v-7,-48,-30,-126,-83,-129","w":570},"G":{"d":"398,-651v-1,119,28,192,145,204v69,7,57,-64,65,-121v14,-101,-6,-184,-65,-230v-76,-59,-257,-118,-357,-43v-140,105,-233,278,-253,499v-14,153,30,273,130,323v86,43,219,69,310,15v86,-51,145,-139,189,-245v27,-65,-20,-101,-51,-138v-54,-64,-189,-6,-276,1v-24,2,-53,9,-43,40v23,71,55,105,144,102v-28,55,-59,112,-110,139v-92,27,-92,-109,-78,-201v18,-120,70,-229,126,-312v27,-39,56,-83,103,-81v16,6,15,28,21,48","w":663},"H":{"d":"687,-739v12,-44,2,-52,-29,-73v-43,-29,-102,-63,-166,-60v-11,3,-20,16,-26,37r-95,400r-161,14r75,-322v1,-29,-18,-37,-38,-51v-33,-23,-89,-44,-132,-58v-43,-14,-62,-8,-67,33r-72,575v-9,61,-19,115,-28,161v-14,77,75,79,134,98v33,10,43,4,47,-21r18,-108v7,-40,15,-84,26,-130r165,-24r-31,188v-14,79,79,82,146,98v18,0,28,-4,28,-23r99,-375","w":678},"I":{"d":"292,-761v-25,-43,-107,-75,-163,-91v-92,-28,-82,72,-95,142r-50,276r-38,260v-4,70,-29,133,27,157v35,15,84,37,129,33v24,-26,25,-84,34,-124r92,-386r63,-226v5,-18,6,-32,1,-41","w":312},"J":{"d":"-38,-125v41,127,260,197,383,115v126,-85,168,-274,213,-457v20,-80,34,-171,53,-268v14,-70,-51,-85,-99,-105v-43,-18,-126,-58,-137,13r-49,299v-10,54,-21,107,-32,158v-19,86,-44,169,-75,231v-20,41,-58,46,-71,9v-5,-15,-8,-39,-10,-72v-3,-52,-43,-92,-120,-125v-80,-35,-76,68,-75,133v1,24,11,46,19,69","w":627},"K":{"d":"332,-303r93,-90r95,-97v62,-72,137,-138,166,-231v0,-62,-33,-102,-69,-135v-27,-25,-45,-25,-70,4r-153,175r-187,202r32,-143r35,-140v0,-29,-20,-36,-40,-50v-33,-23,-89,-46,-132,-58v-90,-26,-79,72,-90,143r-43,281r-31,268v-2,63,-20,114,12,146v25,24,91,42,137,48v18,2,23,-7,27,-26r41,-221v50,70,111,133,164,199v41,50,121,34,172,11v60,-25,-4,-64,-25,-93r-90,-126v-16,-23,-31,-45,-44,-67","w":664},"L":{"d":"90,15v104,-23,234,-36,328,-69v-1,-45,-28,-106,-62,-124v-70,-10,-146,6,-215,15r73,-296r42,-148v14,-48,27,-92,40,-132v14,-44,-1,-51,-30,-73v-32,-24,-87,-44,-130,-55v-45,-12,-63,-7,-72,31r-57,239r-48,261v-7,41,-12,80,-17,116v-7,69,-28,136,21,166v41,25,63,69,127,69","w":532},"M":{"d":"187,-489v10,67,21,131,33,194v12,63,29,117,39,166v14,69,74,76,144,87v20,-1,22,-14,30,-30r101,-199r128,-233v-11,39,-22,80,-32,122r-47,226v-9,61,-35,118,20,143v25,11,59,22,89,29v36,8,44,-3,51,-28r129,-472r73,-236v33,-89,-69,-93,-123,-119v-58,-15,-136,-61,-184,-17v-52,47,-87,137,-122,206r-92,178r-38,79r-46,-319v-8,-56,-29,-87,-79,-104v-56,-19,-98,-30,-167,-42v-98,-17,-86,78,-96,154r-36,271r-24,259v-1,75,-23,140,37,162v33,12,80,37,123,30v23,-24,17,-76,24,-122r40,-249","w":924},"N":{"d":"392,-327r-74,-386v-10,-109,-123,-113,-208,-141v-96,-31,-85,81,-96,156r-44,284r-35,326v-6,78,72,79,131,99v70,22,53,-52,62,-103r63,-348r58,202v10,32,19,62,29,89v22,58,35,111,91,132v32,11,63,20,94,26v36,8,54,-1,60,-26r85,-352r50,-191v17,-63,33,-119,48,-168v27,-85,-65,-106,-133,-126v-46,-14,-62,-2,-73,35v-19,71,-38,149,-58,234v-20,85,-37,171,-50,258","w":702},"O":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66"},"P":{"d":"185,-215v203,-59,405,-135,491,-304v58,-113,-31,-234,-95,-297v-109,-106,-336,-22,-443,30v-31,14,-59,29,-84,42v-61,171,-37,474,-85,665v-19,76,67,83,126,99v33,9,44,3,49,-21xm228,-403r60,-233v52,-22,122,-45,184,-28v32,9,31,40,15,73v-45,92,-147,153,-259,188","w":708},"Q":{"d":"546,8v50,-19,-6,-53,-20,-77v-7,-11,-16,-22,-27,-33v93,-126,149,-329,121,-544v-19,-140,-133,-199,-273,-218v-134,-18,-208,73,-267,150v-102,135,-175,418,-76,605v49,93,166,131,314,124v22,-1,42,-6,61,-15v37,44,119,40,167,8xm265,-119v-70,42,-95,-47,-93,-123v4,-175,64,-314,148,-416v19,-23,38,-42,70,-28v53,74,19,244,-2,332v-12,51,-26,96,-47,134v-34,6,-64,15,-90,27v-46,21,-2,57,14,74","w":693},"R":{"d":"181,-234v67,79,153,156,237,217v51,36,126,30,171,-2v23,-16,24,-27,-1,-48v-77,-64,-150,-142,-218,-216v128,-59,256,-123,308,-235v52,-114,-35,-235,-98,-298v-124,-124,-371,-13,-489,43v-85,123,-85,360,-108,543v-8,63,-22,134,-9,192v18,36,69,41,114,52v31,7,40,1,45,-21xm223,-407r65,-233v42,-21,85,-33,138,-33v63,0,91,24,61,76v-51,88,-153,152,-264,190","w":727},"S":{"d":"68,-189v-40,-27,-159,-40,-170,20v1,12,18,29,45,55v104,100,242,165,416,119v72,-19,123,-64,149,-124v45,-103,-68,-146,-134,-193v-45,-32,-100,-59,-136,-98v-86,-92,27,-225,97,-271v36,-24,42,3,34,37v-9,41,-22,85,-27,128v-7,55,36,97,126,131v58,22,66,-33,82,-73v35,-90,81,-253,-5,-325v-75,-63,-232,-145,-348,-69v-95,62,-183,153,-216,272v-66,237,167,298,303,404v16,13,39,29,21,46v-17,16,-49,17,-91,7v-42,-10,-92,-30,-146,-66","w":601},"T":{"d":"462,-684v69,-11,162,-7,216,-28v6,-51,-26,-102,-53,-135v-37,-45,-126,-17,-201,-17v-50,0,-100,9,-152,14v-52,5,-103,10,-152,18v-59,10,-121,10,-159,34v-5,26,21,57,35,85v16,33,44,67,74,79v45,4,93,-15,142,-19v-10,45,-20,94,-30,147v-10,53,-20,106,-28,158v-8,52,-16,101,-21,148v-7,61,-16,101,-11,150v23,49,93,56,151,70v19,0,26,-4,30,-22r72,-330","w":664},"U":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30","w":676},"V":{"d":"382,-4v120,-238,245,-479,326,-753v-6,-59,-66,-75,-108,-99v-30,-18,-72,-17,-85,17r-125,319v-42,107,-85,209,-129,306r-67,-533v-9,-75,-90,-107,-180,-107v-40,0,-45,11,-41,49v25,249,59,479,112,685v10,40,41,80,82,98v44,20,79,33,128,46v49,13,71,5,87,-28","w":699},"W":{"d":"164,-262r14,-470v-5,-90,-88,-103,-166,-120v-45,-10,-56,1,-55,43r5,259r16,274v3,41,6,79,12,114v12,67,1,142,62,158v45,12,94,33,150,28v29,-11,41,-60,55,-88r132,-267v1,92,15,179,27,261v10,71,93,78,160,92v42,9,64,3,76,-24r156,-342r124,-254v22,-50,68,-93,68,-156v0,-56,-69,-78,-111,-102v-74,-41,-87,41,-107,84r-229,502r27,-392v7,-85,-70,-83,-133,-102v-42,-13,-55,-1,-70,27v-77,141,-146,320,-213,475","w":961},"X":{"d":"303,-593v-37,-76,-55,-173,-109,-231v-31,-33,-113,-29,-177,-24v-41,3,-47,18,-29,59r165,366v-47,60,-90,116,-129,171v-46,65,-80,104,-104,159v-13,30,16,47,32,65v28,22,87,87,124,40r176,-222r56,114v36,62,38,101,109,112v36,6,71,4,104,0v29,-3,32,-15,21,-41r-144,-340r268,-312v23,-28,37,-58,11,-94v-29,-41,-61,-106,-125,-106v-14,0,-28,8,-41,23v-66,73,-143,178,-208,261","w":708},"Y":{"d":"338,-233v108,-162,241,-323,317,-509v20,-49,-26,-68,-55,-95v-28,-25,-87,-66,-117,-14r-104,183r-106,176r-52,-163v-25,-70,-39,-140,-77,-185v-28,-33,-104,-32,-162,-24v-35,5,-39,13,-26,51r180,514r-31,225v-9,79,74,81,132,99v34,11,43,6,49,-22","w":651},"Z":{"d":"304,-661r-116,151r-110,152r-92,137v-31,53,-57,79,-70,127v12,56,63,76,102,105v60,45,151,-1,227,-15r135,-24v29,-5,46,-6,34,-39v-17,-50,-34,-110,-108,-99v-27,3,-54,6,-78,10v-24,4,-48,9,-73,15r201,-254r210,-258v48,-50,5,-120,-13,-173v-22,-63,-114,-32,-186,-32v-41,0,-82,8,-123,12v-75,8,-154,20,-219,34v-57,12,-7,74,7,99v23,42,48,92,119,77v51,-12,97,-14,153,-25","w":562},"[":{"d":"282,0v59,0,28,-44,20,-68v-11,-33,-36,-64,-85,-61r-65,4r61,-273r76,-281v53,-8,126,-4,165,-25v12,-38,-16,-82,-30,-117v-22,-55,-91,-46,-162,-41v-61,4,-143,1,-156,57v-51,210,-101,460,-130,693v-9,71,42,91,82,120v56,41,154,-8,224,-8","w":456},"\\":{"d":"213,-812v-13,-72,-98,-71,-181,-69v-39,1,-53,21,-44,56v9,33,18,72,32,118r96,306r102,286v23,57,30,97,61,129v25,26,115,23,149,6v4,-5,2,-13,-1,-25r-113,-397r-75,-295v-11,-44,-19,-82,-26,-115","w":537},"]":{"d":"370,-537v19,-74,47,-126,53,-199v-18,-48,-63,-99,-105,-124v-76,-11,-174,8,-245,19v-73,11,-15,102,4,132v14,48,76,32,126,27r-102,429v-10,47,-18,89,-25,127v-38,5,-78,14,-115,22v-54,11,-12,54,3,76v19,28,35,53,87,46r133,-18v38,-1,50,-9,56,-34r80,-323v16,-61,35,-120,50,-180","w":477},"^":{"d":"367,-426v17,55,112,62,169,50v11,-32,-10,-66,-18,-102r-43,-188v-14,-61,-9,-141,-52,-173v-38,-28,-96,-98,-150,-42v-94,99,-192,206,-267,322v-34,53,34,94,64,124v19,19,36,19,52,0r82,-97v30,-35,63,-71,99,-108r34,122v11,37,22,67,30,92","w":670},"_":{"d":"16,209r645,0v52,5,57,-43,72,-79v11,-25,-5,-35,-34,-35r-658,0v-52,-4,-50,42,-59,83v-4,21,6,31,34,31","w":645},"`":{"d":"89,-1152v103,67,230,132,357,177v41,15,77,-4,107,-23v19,-12,23,-45,-5,-59r-166,-83v-54,-29,-104,-64,-151,-98v-33,-24,-61,-14,-102,7v-29,15,-34,40,-40,79","w":592},"a":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,6,-131,6,-192v0,-80,20,-149,5,-210v-55,-53,-164,-62,-266,-72v-62,-6,-90,20,-110,57v-118,215,-236,478,-325,721v-27,74,45,85,95,107v62,28,63,-47,83,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm226,-329r94,-183r86,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"b":{"d":"480,-383v88,-51,180,-101,200,-211v19,-103,-35,-173,-93,-224v-134,-119,-445,-35,-571,36v-5,227,-50,444,-55,667v10,49,61,76,93,97v40,26,96,58,163,38v136,-41,285,-88,347,-196v46,-81,-21,-177,-84,-207xm216,-454r48,-190v58,-25,122,-54,192,-36v30,8,29,33,10,62v-51,76,-148,130,-250,164xm146,-129r32,-159v59,-21,156,-36,191,10v-4,65,-73,91,-128,118v-28,14,-60,22,-95,31"},"c":{"d":"397,-611v-1,106,60,156,160,160v58,-28,54,-130,54,-216v0,-135,-114,-169,-222,-201v-86,-25,-171,-4,-224,45v-125,116,-213,284,-227,505v-9,149,35,264,140,308v83,34,240,56,318,-1v48,-37,118,-95,118,-168v0,-14,-15,-24,-40,-31v-63,-18,-115,-7,-154,33v-55,56,-95,80,-122,71v-75,-43,-44,-207,-21,-292v28,-100,86,-213,146,-282v31,-35,63,-30,71,11v3,17,4,37,3,58","w":642},"d":{"d":"16,-792r-58,635v-16,83,47,108,90,139v33,24,102,54,156,36v229,-74,407,-207,460,-442v47,-208,-63,-363,-214,-420v-143,-54,-334,-6,-434,52xm150,-139r52,-257v0,0,39,-172,62,-259v118,-35,201,17,187,142v-22,191,-146,305,-301,374","w":733},"e":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72","w":577},"f":{"d":"500,-868v-167,-9,-340,22,-477,56v6,260,-57,486,-80,728v-7,78,71,77,128,96v28,4,50,3,56,-22r60,-270r230,-43v32,-5,44,-7,34,-43v-15,-53,-31,-115,-101,-110r-119,9v22,-66,31,-132,52,-193r260,-32v37,-7,45,-7,40,-47v-7,-48,-30,-126,-83,-129","w":570},"g":{"d":"398,-651v-1,119,28,192,145,204v69,7,57,-64,65,-121v14,-101,-6,-184,-65,-230v-76,-59,-257,-118,-357,-43v-140,105,-233,278,-253,499v-14,153,30,273,130,323v86,43,219,69,310,15v86,-51,145,-139,189,-245v27,-65,-20,-101,-51,-138v-54,-64,-189,-6,-276,1v-24,2,-53,9,-43,40v23,71,55,105,144,102v-28,55,-59,112,-110,139v-92,27,-92,-109,-78,-201v18,-120,70,-229,126,-312v27,-39,56,-83,103,-81v16,6,15,28,21,48","w":663},"h":{"d":"687,-739v12,-44,2,-52,-29,-73v-43,-29,-102,-63,-166,-60v-11,3,-20,16,-26,37r-95,400r-161,14r75,-322v1,-29,-18,-37,-38,-51v-33,-23,-89,-44,-132,-58v-43,-14,-62,-8,-67,33r-72,575v-9,61,-19,115,-28,161v-14,77,75,79,134,98v33,10,43,4,47,-21r18,-108v7,-40,15,-84,26,-130r165,-24r-31,188v-14,79,79,82,146,98v18,0,28,-4,28,-23r99,-375","w":678},"i":{"d":"292,-761v-25,-43,-107,-75,-163,-91v-92,-28,-82,72,-95,142r-50,276r-38,260v-4,70,-29,133,27,157v35,15,84,37,129,33v24,-26,25,-84,34,-124r92,-386r63,-226v5,-18,6,-32,1,-41","w":312},"j":{"d":"-38,-125v41,127,260,197,383,115v126,-85,168,-274,213,-457v20,-80,34,-171,53,-268v14,-70,-51,-85,-99,-105v-43,-18,-126,-58,-137,13r-49,299v-10,54,-21,107,-32,158v-19,86,-44,169,-75,231v-20,41,-58,46,-71,9v-5,-15,-8,-39,-10,-72v-3,-52,-43,-92,-120,-125v-80,-35,-76,68,-75,133v1,24,11,46,19,69","w":627},"k":{"d":"332,-303r93,-90r95,-97v62,-72,137,-138,166,-231v0,-62,-33,-102,-69,-135v-27,-25,-45,-25,-70,4r-153,175r-187,202r32,-143r35,-140v0,-29,-20,-36,-40,-50v-33,-23,-89,-46,-132,-58v-90,-26,-79,72,-90,143r-43,281r-31,268v-2,63,-20,114,12,146v25,24,91,42,137,48v18,2,23,-7,27,-26r41,-221v50,70,111,133,164,199v41,50,121,34,172,11v60,-25,-4,-64,-25,-93r-90,-126v-16,-23,-31,-45,-44,-67","w":664},"l":{"d":"90,15v104,-23,234,-36,328,-69v-1,-45,-28,-106,-62,-124v-70,-10,-146,6,-215,15r73,-296r42,-148v14,-48,27,-92,40,-132v14,-44,-1,-51,-30,-73v-32,-24,-87,-44,-130,-55v-45,-12,-63,-7,-72,31r-57,239r-48,261v-7,41,-12,80,-17,116v-7,69,-28,136,21,166v41,25,63,69,127,69","w":532},"m":{"d":"187,-489v10,67,21,131,33,194v12,63,29,117,39,166v14,69,74,76,144,87v20,-1,22,-14,30,-30r101,-199r128,-233v-11,39,-22,80,-32,122r-47,226v-9,61,-35,118,20,143v25,11,59,22,89,29v36,8,44,-3,51,-28r129,-472r73,-236v33,-89,-69,-93,-123,-119v-58,-15,-136,-61,-184,-17v-52,47,-87,137,-122,206r-92,178r-38,79r-46,-319v-8,-56,-29,-87,-79,-104v-56,-19,-98,-30,-167,-42v-98,-17,-86,78,-96,154r-36,271r-24,259v-1,75,-23,140,37,162v33,12,80,37,123,30v23,-24,17,-76,24,-122r40,-249","w":924},"n":{"d":"392,-327r-74,-386v-10,-109,-123,-113,-208,-141v-96,-31,-85,81,-96,156r-44,284r-35,326v-6,78,72,79,131,99v70,22,53,-52,62,-103r63,-348r58,202v10,32,19,62,29,89v22,58,35,111,91,132v32,11,63,20,94,26v36,8,54,-1,60,-26r85,-352r50,-191v17,-63,33,-119,48,-168v27,-85,-65,-106,-133,-126v-46,-14,-62,-2,-73,35v-19,71,-38,149,-58,234v-20,85,-37,171,-50,258","w":702},"o":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66"},"p":{"d":"185,-215v203,-59,405,-135,491,-304v58,-113,-31,-234,-95,-297v-109,-106,-336,-22,-443,30v-31,14,-59,29,-84,42v-61,171,-37,474,-85,665v-19,76,67,83,126,99v33,9,44,3,49,-21xm228,-403r60,-233v52,-22,122,-45,184,-28v32,9,31,40,15,73v-45,92,-147,153,-259,188","w":708},"q":{"d":"546,8v50,-19,-6,-53,-20,-77v-7,-11,-16,-22,-27,-33v93,-126,149,-329,121,-544v-19,-140,-133,-199,-273,-218v-134,-18,-208,73,-267,150v-102,135,-175,418,-76,605v49,93,166,131,314,124v22,-1,42,-6,61,-15v37,44,119,40,167,8xm265,-119v-70,42,-95,-47,-93,-123v4,-175,64,-314,148,-416v19,-23,38,-42,70,-28v53,74,19,244,-2,332v-12,51,-26,96,-47,134v-34,6,-64,15,-90,27v-46,21,-2,57,14,74","w":693},"r":{"d":"181,-234v67,79,153,156,237,217v51,36,126,30,171,-2v23,-16,24,-27,-1,-48v-77,-64,-150,-142,-218,-216v128,-59,256,-123,308,-235v52,-114,-35,-235,-98,-298v-124,-124,-371,-13,-489,43v-85,123,-85,360,-108,543v-8,63,-22,134,-9,192v18,36,69,41,114,52v31,7,40,1,45,-21xm223,-407r65,-233v42,-21,85,-33,138,-33v63,0,91,24,61,76v-51,88,-153,152,-264,190","w":727},"s":{"d":"67,-193v-39,-27,-160,-38,-169,20v1,13,19,30,46,57v104,101,243,167,418,121v72,-19,123,-65,149,-126v46,-105,-70,-147,-135,-197v-58,-44,-138,-75,-165,-148v-14,-111,62,-177,127,-228v35,-27,42,2,35,37r-28,132v-7,57,36,97,126,132v59,23,68,-30,83,-72v34,-95,85,-260,-4,-334v-76,-63,-234,-148,-351,-70v-97,63,-186,156,-219,279v-65,242,170,301,306,411v17,14,40,28,20,46v-18,16,-49,18,-91,8v-42,-10,-93,-30,-148,-68","w":601},"t":{"d":"462,-684v69,-11,162,-7,216,-28v6,-51,-26,-102,-53,-135v-37,-45,-126,-17,-201,-17v-50,0,-100,9,-152,14v-52,5,-103,10,-152,18v-59,10,-121,10,-159,34v-5,26,21,57,35,85v16,33,44,67,74,79v45,4,93,-15,142,-19v-10,45,-20,94,-30,147v-10,53,-20,106,-28,158v-8,52,-16,101,-21,148v-7,61,-16,101,-11,150v23,49,93,56,151,70v19,0,26,-4,30,-22r72,-330","w":664},"u":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30","w":676},"v":{"d":"382,-4v120,-238,245,-479,326,-753v-6,-59,-66,-75,-108,-99v-30,-18,-72,-17,-85,17r-125,319v-42,107,-85,209,-129,306r-67,-533v-9,-75,-90,-107,-180,-107v-40,0,-45,11,-41,49v25,249,59,479,112,685v10,40,41,80,82,98v44,20,79,33,128,46v49,13,71,5,87,-28","w":699},"w":{"d":"164,-262r14,-470v-5,-90,-88,-103,-166,-120v-45,-10,-56,1,-55,43r5,259r16,274v3,41,6,79,12,114v12,67,1,142,62,158v45,12,94,33,150,28v29,-11,41,-60,55,-88r132,-267v1,92,15,179,27,261v10,71,93,78,160,92v42,9,64,3,76,-24r156,-342r124,-254v22,-50,68,-93,68,-156v0,-56,-69,-78,-111,-102v-74,-41,-87,41,-107,84r-229,502r27,-392v7,-85,-70,-83,-133,-102v-42,-13,-55,-1,-70,27v-77,141,-146,320,-213,475","w":961},"x":{"d":"303,-593v-37,-76,-55,-173,-109,-231v-31,-33,-113,-29,-177,-24v-41,3,-47,18,-29,59r165,366v-47,60,-90,116,-129,171v-46,65,-80,104,-104,159v-13,30,16,47,32,65v28,22,87,87,124,40r176,-222r56,114v36,62,38,101,109,112v36,6,71,4,104,0v29,-3,32,-15,21,-41r-144,-340r268,-312v23,-28,37,-58,11,-94v-29,-41,-61,-106,-125,-106v-14,0,-28,8,-41,23v-66,73,-143,178,-208,261","w":708},"y":{"d":"338,-233v108,-162,241,-323,317,-509v20,-49,-26,-68,-55,-95v-28,-25,-87,-66,-117,-14r-104,183r-106,176r-52,-163v-25,-70,-39,-140,-77,-185v-28,-33,-104,-32,-162,-24v-35,5,-39,13,-26,51r180,514r-31,225v-9,79,74,81,132,99v34,11,43,6,49,-22","w":651},"z":{"d":"304,-661r-116,151r-110,152r-92,137v-31,53,-57,79,-70,127v12,56,63,76,102,105v60,45,151,-1,227,-15r135,-24v29,-5,46,-6,34,-39v-17,-50,-34,-110,-108,-99v-27,3,-54,6,-78,10v-24,4,-48,9,-73,15r201,-254r210,-258v48,-50,5,-120,-13,-173v-22,-63,-114,-32,-186,-32v-41,0,-82,8,-123,12v-75,8,-154,20,-219,34v-57,12,-7,74,7,99v23,42,48,92,119,77v51,-12,97,-14,153,-25","w":562},"{":{"d":"336,0v57,0,30,-43,20,-68v-12,-32,-37,-64,-84,-61r-66,4r62,-273r38,-145v13,-48,26,-93,39,-136v53,-8,129,-4,167,-25v8,-39,-14,-83,-30,-117v-27,-58,-91,-46,-164,-41v-63,4,-142,-1,-155,57v-11,48,-25,100,-37,156r-38,174v-39,7,-75,8,-107,17v-47,13,-14,62,1,90v16,31,34,64,72,71r-30,185v-12,74,47,88,87,120v54,43,154,-8,225,-8","w":508},"|":{"d":"406,-847v-23,-41,-94,-66,-143,-84v-45,-16,-65,-6,-73,32r-57,282r-83,493v-6,75,-40,135,20,162v30,13,73,35,113,28v23,-30,21,-75,35,-131r153,-624r31,-116v7,-18,9,-33,4,-42","w":537},"}":{"d":"346,-465v27,-91,60,-171,74,-271v-18,-48,-64,-99,-106,-124v-76,-11,-173,8,-244,19v-23,4,-54,17,-38,49v25,49,32,127,115,116r54,-6r-69,285r-56,271v-48,11,-114,8,-142,38v3,36,31,64,51,87v38,45,133,2,198,1v37,-1,51,-9,57,-34r61,-254v44,-12,110,-3,142,-25v16,-19,-9,-52,-13,-72v-9,-40,-35,-83,-84,-80","w":565},"~":{"d":"23,-556v90,0,107,-90,205,-70v43,9,94,19,124,39v50,34,153,48,224,19v58,-24,191,-111,185,-160v-7,-55,-109,-70,-155,-28v-26,24,-51,56,-87,67v-124,-20,-223,-123,-370,-73v-70,24,-153,61,-189,115v-32,48,-8,91,63,91","w":742},"\u201a":{"d":"107,141v144,0,146,-117,171,-224v16,-67,-52,-79,-100,-100v-30,-13,-46,-10,-52,20r-39,215v-4,41,-39,89,20,89","w":348},"\u0192":{"d":"689,-790v47,0,38,65,38,118v0,60,36,106,114,140v56,24,69,-17,81,-57v52,-174,-27,-320,-177,-354v-301,-67,-392,187,-430,456r-238,20v-52,5,-66,23,-42,52v33,40,85,115,178,98r81,-9v-5,72,-19,134,-35,199v-11,44,-33,78,-48,106v-24,43,-62,55,-79,15v-6,-14,-12,-37,-12,-69v0,-54,-67,-111,-150,-127v-48,5,-46,90,-40,136v19,145,147,230,318,204v214,-32,226,-266,276,-483v85,-6,189,-2,263,-17v22,-13,-6,-44,-9,-62v-18,-43,-48,-75,-119,-74r-107,1r19,-109v25,-63,50,-128,91,-170v10,-9,18,-14,27,-14","w":934},"\u201e":{"d":"110,137v77,0,112,-21,128,-80v15,-53,45,-114,36,-179v-19,-37,-85,-67,-136,-71v-24,10,-21,64,-26,93r-36,206v-5,21,7,31,34,31xm315,138v141,20,161,-99,203,-194v32,-72,-35,-90,-78,-117v-26,-16,-49,-11,-57,15v-26,89,-62,180,-97,262v-9,21,0,30,29,34","w":576},"\u2026":{"d":"772,-32v37,92,215,62,215,-41v0,-96,-162,-115,-205,-39v-13,23,-21,52,-10,80xm508,-156v-110,-36,-188,85,-111,156v34,31,116,31,151,0v30,-26,52,-81,18,-120v-12,-16,-31,-27,-58,-36xm81,25v78,2,130,-83,80,-145v-26,-32,-116,-59,-160,-24v-19,15,-36,39,-36,71v0,64,50,97,116,98","w":1126},"\u2020":{"d":"-47,-598v-88,5,-43,63,-12,92v36,34,73,79,152,64r60,-6r-43,298v-5,60,-19,114,31,133v35,13,84,37,129,33v24,-24,25,-81,34,-119r82,-365v94,-8,209,-3,293,-20v21,-14,-6,-45,-9,-64v-18,-44,-48,-79,-122,-78r-120,2v9,-41,37,-87,30,-133v-27,-42,-108,-74,-164,-91v-86,-27,-80,60,-92,124r-21,111","w":660},"\u2021":{"d":"-25,-287v-49,5,-62,22,-41,49v38,47,98,117,203,90v9,-2,19,-3,30,-4v-3,53,-21,118,29,135v36,12,84,37,130,33v21,-18,21,-66,29,-97v7,-27,12,-57,18,-88r243,-11v37,-3,66,2,54,-33v-20,-56,-43,-104,-130,-103r-134,2r38,-154v94,-8,209,-3,293,-20v22,-14,-3,-46,-9,-64v-15,-45,-48,-79,-121,-78r-120,2r32,-115v1,-29,-17,-37,-37,-51v-32,-23,-88,-45,-130,-58v-85,-26,-78,62,-91,124r-23,111r-226,19v-89,5,-45,62,-14,92v36,34,73,79,152,64r61,-6r-23,144","w":733},"\u02c6":{"d":"415,-1000v12,41,82,51,125,39v9,-25,-9,-57,-14,-81r-32,-148v-10,-47,-10,-105,-38,-134v-30,-17,-69,-76,-108,-33v-70,76,-141,161,-196,251v-24,39,24,75,46,98v14,15,25,16,38,0r62,-76v22,-28,45,-57,72,-86","w":670},"\u2030":{"d":"700,-672v43,-51,26,-97,-10,-141v-21,-26,-39,-27,-59,-5v-57,61,-132,114,-243,114v-94,0,-104,-102,-178,-124v-37,-21,-107,-27,-146,1v-95,67,-147,296,-45,395v49,47,158,80,224,29v58,-45,82,-130,80,-233v61,20,123,10,171,-17r-114,147r-111,150r-96,134v-26,53,-88,90,-80,167v11,28,60,83,86,47v163,-225,341,-454,521,-664xm663,-16v79,-50,126,-202,77,-314v-25,-57,-134,-99,-206,-56v-86,51,-157,206,-93,326v32,61,150,89,222,44xm1046,-15v84,-51,142,-190,99,-314v-21,-60,-133,-100,-203,-56v-79,50,-136,138,-132,266v3,110,145,160,236,104xm134,-712v14,-24,47,-60,57,-17v18,77,-3,203,-33,247v-30,44,-63,26,-68,-29v-6,-65,17,-156,44,-201xm590,-287v13,-18,47,-54,54,-14v14,80,-22,173,-54,216v-28,37,-62,27,-62,-24v1,-61,32,-137,62,-178xm1018,-312v16,-12,28,-9,30,12v5,86,-35,172,-70,216v-29,36,-65,29,-60,-24v7,-76,49,-164,100,-204","w":1237},"\u0160":{"d":"68,-189v-40,-27,-159,-40,-170,20v1,12,18,29,45,55v104,100,242,165,416,119v72,-19,123,-64,149,-124v45,-103,-68,-146,-134,-193v-45,-32,-100,-59,-136,-98v-86,-92,27,-225,97,-271v36,-24,42,3,34,37v-9,41,-22,85,-27,128v-7,55,36,97,126,131v58,22,66,-33,82,-73v35,-90,81,-253,-5,-325v-75,-63,-232,-145,-348,-69v-95,62,-183,153,-216,272v-66,237,167,298,303,404v16,13,39,29,21,46v-17,16,-49,17,-91,7v-42,-10,-92,-30,-146,-66xm301,-1326v-16,-44,-85,-55,-133,-42v-7,28,9,60,16,86r39,152v15,60,13,123,65,148v23,11,48,41,76,11v69,-74,146,-156,203,-241v28,-42,-18,-80,-40,-105v-15,-17,-27,-18,-40,0r-65,81r-76,89","w":601},"\u2039":{"d":"403,-481v30,-9,35,-21,15,-44v-30,-34,-71,-98,-143,-71r-101,38r-151,70v-46,16,-50,78,-50,131v0,17,4,30,20,37r161,61v53,21,103,42,149,66v54,28,59,-30,66,-75v5,-31,-12,-39,-34,-52v-44,-26,-105,-49,-155,-71","w":522},"\u0152":{"d":"484,-810v-83,-55,-255,-79,-337,-6v-138,123,-232,346,-186,603v31,169,180,248,381,225v27,-3,53,-16,78,-33v27,22,66,35,117,25r258,-49v67,-5,15,-80,1,-113v-19,-48,-109,-22,-160,-20v-28,1,-59,7,-90,13r33,-117r245,-44v31,-9,45,-7,35,-44v-15,-53,-21,-118,-99,-111v-22,2,-43,2,-63,3v-20,1,-40,4,-61,7r62,-196r261,-31v75,-1,31,-90,17,-134v-20,-66,-115,-42,-182,-36v-38,3,-75,10,-111,16v-36,6,-71,13,-105,20v-34,7,-65,15,-94,22xm384,-663v50,166,-12,382,-78,496v-27,47,-102,93,-124,20v-59,-196,31,-415,131,-525v28,-30,60,-26,71,9","w":964},"\u2018":{"d":"47,-843v47,109,72,244,221,251v33,2,42,-8,33,-37r-87,-273v-22,-57,-16,-148,-91,-122v-44,15,-112,32,-97,94","w":393},"\u2019":{"d":"98,-607v152,0,149,-119,182,-230v15,-51,23,-118,-18,-145v-31,-20,-79,-55,-124,-54v-28,17,-24,76,-32,120r-46,269v-6,27,7,40,38,40","w":348},"\u201c":{"d":"256,-906v23,104,63,212,123,278v22,24,66,31,108,36v33,4,42,-8,33,-37r-82,-273v-20,-50,-12,-150,-87,-122v-50,19,-128,43,-95,118xm-22,-892v44,87,95,192,163,250v25,21,69,25,114,27v30,1,38,-11,24,-40r-126,-269v-15,-33,-28,-61,-37,-87v-26,-72,-108,-5,-135,19v-25,23,-19,68,-3,100","w":582},"\u201d":{"d":"85,-607v151,0,149,-118,178,-230v14,-55,24,-116,-22,-145v-33,-21,-79,-55,-125,-54v-28,17,-23,76,-30,120r-40,269v-5,30,8,40,39,40xm317,-606v141,23,167,-83,206,-176v22,-52,60,-128,13,-173v-21,-20,-49,-37,-75,-54v-34,-21,-56,-15,-65,19v-30,114,-72,232,-111,340v-10,28,0,39,32,44","w":576},"\u2022":{"d":"282,-559v-176,-52,-298,86,-246,245v36,109,226,139,319,60v57,-48,98,-164,37,-234v-26,-31,-63,-57,-110,-71","w":486},"\u2013":{"d":"583,-466v-195,3,-406,12,-580,31v-51,5,-65,22,-42,51v34,41,84,111,178,97v157,-24,350,-28,520,-36v38,-2,68,1,56,-34v-20,-58,-45,-110,-132,-109","w":832},"\u2014":{"d":"62,-440v-67,3,-161,4,-118,56v40,48,85,106,182,97v326,-31,709,-20,1053,-33v37,-1,67,1,57,-35v-19,-60,-38,-110,-128,-108r-920,17v-48,2,-90,4,-126,6","w":1266},"\u02dc":{"d":"139,-1094v-49,29,-60,107,16,107v71,0,80,-72,157,-56v33,7,72,14,94,31v24,18,62,27,115,27v53,0,146,-60,175,-99v22,-29,30,-56,-4,-75v-71,-40,-109,38,-160,64v-94,-16,-167,-98,-280,-59v-40,14,-80,40,-113,60","w":742},"\u2122":{"d":"507,-638v10,90,21,190,47,260v15,17,55,28,84,25r118,-223r41,-71r-53,221v-6,39,-25,81,12,95v22,9,76,39,87,0r125,-449v20,-53,-38,-61,-73,-72v-32,-10,-80,-35,-109,-10v-61,81,-110,189,-158,285v-12,-77,-11,-169,-32,-236v-23,-31,-83,-43,-133,-51v-60,-10,-55,48,-63,95r-46,255r-16,139v-6,49,44,53,78,63v46,13,32,-42,40,-79xm90,-744v-19,109,-34,240,-43,362v-4,54,59,56,97,68v10,3,17,-3,18,-15r76,-434v41,-7,96,-5,130,-18v1,-38,-25,-73,-52,-92v-115,-9,-258,15,-366,33v-35,6,2,42,8,59v16,23,29,53,69,47","w":943},"\u0161":{"d":"68,-189v-40,-27,-159,-40,-170,20v1,12,18,29,45,55v104,100,242,165,416,119v72,-19,123,-64,149,-124v45,-103,-68,-146,-134,-193v-45,-32,-100,-59,-136,-98v-86,-92,27,-225,97,-271v36,-24,42,3,34,37v-9,41,-22,85,-27,128v-7,55,36,97,126,131v58,22,66,-33,82,-73v35,-90,81,-253,-5,-325v-75,-63,-232,-145,-348,-69v-95,62,-183,153,-216,272v-66,237,167,298,303,404v16,13,39,29,21,46v-17,16,-49,17,-91,7v-42,-10,-92,-30,-146,-66xm301,-1326v-16,-44,-85,-55,-133,-42v-7,28,9,60,16,86r39,152v15,60,13,123,65,148v23,11,48,41,76,11v69,-74,146,-156,203,-241v28,-42,-18,-80,-40,-105v-15,-17,-27,-18,-40,0r-65,81r-76,89","w":601},"\u203a":{"d":"419,-316v26,-31,53,-90,46,-138v-106,-69,-253,-117,-381,-163v-25,-9,-48,-5,-50,18v-6,60,-2,128,53,134r152,58v-81,22,-173,51,-239,81v-18,8,-34,22,-13,42r38,36v28,21,52,56,95,35v90,-43,183,-60,285,-95v5,-2,10,-5,14,-8","w":555},"\u0153":{"d":"484,-810v-83,-55,-255,-79,-337,-6v-138,123,-232,346,-186,603v31,169,180,248,381,225v27,-3,53,-16,78,-33v27,22,66,35,117,25r258,-49v67,-5,15,-80,1,-113v-19,-48,-109,-22,-160,-20v-28,1,-59,7,-90,13r33,-117r245,-44v31,-9,45,-7,35,-44v-15,-53,-21,-118,-99,-111v-22,2,-43,2,-63,3v-20,1,-40,4,-61,7r62,-196r261,-31v75,-1,31,-90,17,-134v-20,-66,-115,-42,-182,-36v-38,3,-75,10,-111,16v-36,6,-71,13,-105,20v-34,7,-65,15,-94,22xm384,-663v50,166,-12,382,-78,496v-27,47,-102,93,-124,20v-59,-196,31,-415,131,-525v28,-30,60,-26,71,9","w":964},"\u0178":{"d":"338,-233v108,-162,241,-323,317,-509v20,-49,-26,-68,-55,-95v-28,-25,-87,-66,-117,-14r-104,183r-106,176r-52,-163v-25,-70,-39,-140,-77,-185v-28,-33,-104,-32,-162,-24v-35,5,-39,13,-26,51r180,514r-31,225v-9,79,74,81,132,99v34,11,43,6,49,-22xm376,-1014v31,94,186,62,186,-43v0,-71,-94,-115,-152,-71v-28,21,-49,69,-34,114xm68,-1016v34,92,185,62,185,-41v0,-89,-148,-126,-182,-41v-10,25,-13,56,-3,82","w":651},"\u00a1":{"d":"-42,-40v23,37,92,59,142,71v40,10,53,7,62,-25r72,-263r36,-149v11,-50,18,-96,28,-136v18,-71,-36,-81,-80,-100v-23,-10,-66,-24,-92,-16v-8,2,-13,14,-16,31v-9,43,-19,89,-32,136r-119,416v-5,14,-7,26,-1,35xm207,-694v151,56,220,-170,88,-224v-124,-50,-233,108,-137,198v12,11,29,19,49,26","w":400},"\u00a2":{"d":"412,-266v-49,-13,-87,-4,-115,26v-40,42,-71,60,-92,53v-54,-33,-32,-157,-14,-219v21,-73,63,-157,108,-206v22,-25,49,-23,51,8v6,88,17,145,100,158v65,10,50,-62,58,-122v10,-75,-17,-116,-69,-142v12,-49,38,-113,15,-164v-15,-32,-85,-106,-114,-44v-20,45,-35,112,-53,164v-108,6,-155,85,-201,159v-75,123,-126,401,17,476v-12,78,16,156,87,161v26,-23,21,-88,38,-127v104,5,167,-48,202,-117v17,-32,20,-54,-18,-64","w":558},"\u00a3":{"d":"-9,-500v22,40,75,25,125,22r-15,82r-134,17v-23,4,-43,17,-26,45v27,43,53,114,134,87v-4,67,-38,157,17,193v48,32,80,78,163,62r280,-55v28,-11,-1,-49,-4,-71v-15,-34,-30,-71,-87,-64v-31,4,-61,4,-88,7v-27,3,-55,7,-85,12r26,-109r174,-10v50,5,29,-37,17,-64v-13,-30,-33,-65,-80,-65r-74,0r20,-79r144,1v51,10,32,-37,22,-65v-15,-43,-36,-80,-100,-76v-8,0,-16,-1,-24,-2r34,-107v15,-44,1,-50,-29,-73v-31,-24,-89,-42,-130,-55v-86,-28,-82,67,-97,126r-27,107r-166,12v-24,4,-47,13,-33,46v10,25,31,54,43,76","w":660},"\u00a4":{"d":"-55,-522v28,54,47,121,137,100r-13,81v-45,7,-103,4,-131,27v-10,37,33,71,51,98v18,25,44,27,83,19v13,88,59,157,132,187v83,34,240,56,318,-1v50,-37,120,-94,120,-168v0,-14,-15,-24,-40,-31v-63,-18,-115,-7,-154,33v-55,56,-96,80,-123,71v-36,-12,-42,-64,-44,-116r186,-11v27,-2,41,-3,30,-32v-16,-42,-35,-94,-94,-94r-107,1v6,-28,16,-53,24,-79r172,1v50,12,32,-38,22,-64v-13,-34,-32,-68,-80,-72r-50,-4v27,-45,54,-95,94,-122v82,-30,35,112,66,170v25,47,75,73,143,77v62,-26,53,-130,57,-216v6,-133,-114,-169,-220,-201v-86,-25,-171,-3,-225,45v-72,64,-130,150,-170,245v-60,9,-140,-1,-183,24v-7,7,-8,18,-1,32","w":768},"\u00a5":{"d":"392,-308v44,-2,104,7,138,-4v12,-35,-19,-82,-37,-108v-5,-5,-11,-8,-18,-11r103,-161r40,-67v22,-44,67,-100,24,-144v-29,-30,-73,-75,-128,-75v-13,0,-20,11,-29,27r-105,183r-105,176r-100,-300v-19,-71,-100,-86,-190,-72v-36,6,-40,13,-27,51r127,373v-39,6,-91,1,-118,20v-18,36,26,73,40,102v21,41,81,23,129,19r-12,78r-140,17v-22,4,-42,17,-25,43v27,41,51,106,129,82r18,-2v-14,85,71,84,131,106v59,22,48,-38,59,-75v5,-17,8,-35,11,-53v64,-6,144,0,197,-17v7,-29,-18,-59,-32,-84v-21,-38,-79,-30,-133,-30","w":651},"\u00a6":{"d":"406,-847v-22,-41,-94,-64,-143,-84v-83,-33,-81,65,-92,121r-29,146v-1,67,-46,168,21,194v34,13,78,42,123,34v52,-107,77,-247,116,-369v6,-18,9,-33,4,-42xm279,-283v-23,-34,-89,-53,-133,-70v-73,-29,-73,51,-82,101r-21,124v0,58,-35,141,24,161v31,11,73,36,113,29v45,-89,63,-209,96,-310v5,-15,6,-27,3,-35","w":429},"\u00a7":{"d":"94,-165v-39,-25,-168,-40,-168,20v0,10,18,26,46,55v108,110,303,177,468,96v34,-17,59,-44,78,-73v154,18,275,-36,322,-139v48,-104,-67,-151,-132,-200v-58,-44,-136,-75,-162,-148v-12,-96,47,-154,96,-204v18,-18,43,-38,64,-40v29,47,-19,124,-24,182v-5,58,34,100,124,135v60,23,69,-34,86,-75v37,-90,91,-257,3,-336v-73,-65,-234,-148,-350,-71v-51,34,-101,79,-141,125v-59,-28,-156,-15,-198,16v-89,66,-180,151,-209,270v-61,248,195,297,329,414v15,14,17,25,6,32v-19,14,-48,16,-90,6v-42,-10,-92,-29,-148,-65xm471,-236v-103,-84,-267,-122,-283,-290v-7,-72,44,-113,91,-132v13,-5,22,-5,29,-2r2,80v4,153,127,193,220,258v38,27,80,51,105,80v17,35,-33,39,-65,36v-28,-3,-61,-13,-99,-30","w":904},"\u00a8":{"d":"496,-1142v-119,-42,-174,140,-70,180v88,34,169,-62,121,-143v-10,-17,-28,-28,-51,-37xm67,-1016v34,92,185,63,185,-41v0,-89,-148,-126,-182,-41v-10,25,-13,56,-3,82","w":630},"\u00a9":{"d":"1238,-750v-81,-125,-237,-210,-397,-256v-229,-65,-437,31,-569,137v-155,125,-296,297,-296,559v0,147,92,263,217,310v230,87,587,41,773,-50v185,-91,348,-219,348,-480v0,-92,-26,-171,-76,-220xm1158,-466v0,115,-82,177,-144,241v-93,96,-228,159,-388,181v-110,15,-196,-6,-299,-29v-146,-33,-223,-153,-175,-325v48,-173,166,-314,300,-406v79,-54,178,-106,299,-84v184,34,317,158,385,312v16,36,22,73,22,110xm684,-649v28,11,17,59,23,94v9,55,38,75,96,88v57,13,48,-40,55,-85v13,-78,2,-133,-48,-167v-64,-44,-201,-84,-274,-15v-96,91,-171,237,-168,417v2,139,85,201,217,210v105,7,163,-48,199,-117v16,-32,19,-52,-19,-63v-50,-14,-87,-2,-113,25v-40,43,-70,61,-91,54v-54,-32,-32,-156,-15,-219v20,-73,60,-156,104,-205v13,-14,25,-20,34,-17","w":1249},"\u00aa":{"d":"315,-564r59,-200v19,-51,-45,-54,-76,-78v-34,-12,-79,-49,-114,-15v-86,83,-181,189,-245,294v-32,52,30,82,56,111v26,28,70,8,107,4r58,-6v-5,40,-23,81,-18,123v15,25,63,44,99,42v18,-19,18,-56,26,-89r22,-88v30,-7,89,14,83,-28v-12,-29,-17,-72,-57,-70xm58,-549v55,-63,110,-133,173,-186r-47,176","w":411},"\u00ab":{"d":"26,-515v-57,15,-72,100,-62,157v108,64,247,107,374,150v22,8,44,4,47,-16v8,-55,2,-118,-49,-124v-51,-17,-101,-35,-152,-56v45,-13,89,-26,132,-42v53,-20,100,-28,131,-59v9,-27,-32,-49,-45,-67v-28,-23,-55,-62,-101,-40v-89,44,-168,69,-275,97xm482,-474v-24,29,-51,94,-42,140v103,63,239,105,361,148v58,21,61,-47,53,-97v-8,-51,-74,-47,-116,-67v-24,-11,-50,-19,-75,-30v47,-13,92,-27,135,-42v55,-19,103,-28,136,-58v9,-25,-29,-50,-40,-67v-27,-24,-52,-62,-98,-40v-90,44,-173,66,-280,97v-16,5,-27,10,-34,16","w":936},"\u00ac":{"d":"1308,-176v49,-18,100,-39,130,-73v42,-47,-12,-102,-49,-122v-100,-52,-295,-14,-395,15v-15,100,-48,198,-70,292v-7,31,7,29,23,45v45,24,89,51,157,37v95,-19,203,-38,257,-96v36,-39,-18,-87,-53,-98xm1029,-808v9,-24,-2,-26,-23,-36v-33,-16,-80,-33,-124,-31v-8,0,-13,8,-17,19v-26,61,-48,140,-70,207r-124,8v11,-31,24,-59,30,-87v9,-40,56,-87,2,-107v-37,-14,-85,-35,-131,-33v-8,0,-13,9,-16,20r-67,304v-8,34,-19,63,-25,89v-11,47,62,43,103,55v53,15,40,-39,54,-72v5,-23,12,-48,21,-73r128,-13v-11,36,-17,69,-23,105v-7,49,69,47,115,55v12,2,22,-1,22,-13v40,-137,97,-269,145,-397xm901,8v-8,-105,-13,-237,-6,-345v3,-44,-64,-31,-99,-43v-45,-5,-138,-18,-165,16v-78,99,-172,214,-233,330v-23,44,35,41,68,54v40,16,44,-21,60,-40v8,-10,16,-23,27,-36v58,-11,136,-15,201,-22v11,38,1,94,48,96v23,7,41,6,70,6v21,-1,26,-1,29,-16xm1426,-870v-116,0,-231,18,-333,36r-108,354v-8,47,40,59,70,75v45,24,120,0,177,-7v41,-5,94,-9,128,-22v-1,-36,-21,-76,-77,-72r-141,11r30,-64v66,-15,153,-14,216,-31v2,-36,-20,-81,-75,-76v-35,3,-62,1,-93,5r52,-102r193,-17v50,4,26,-45,14,-68v-8,-15,-26,-22,-53,-22xm355,-780v50,-5,116,-3,156,-15v-6,-45,-40,-83,-98,-80r-209,11r-211,20v-16,3,-24,5,-14,22v29,27,51,73,113,66r74,-8r-34,163v-5,28,-10,55,-12,81v-3,43,-21,80,10,97v24,13,77,23,106,27v14,2,21,-3,24,-14r42,-182xm376,-12v-8,-35,-34,-66,-82,-63r-128,9r64,-204v8,-22,16,-42,23,-60v8,-22,-6,-23,-24,-31v-33,-14,-84,-27,-125,-26v-28,15,-28,57,-40,93v-10,29,-15,59,-22,89v-11,49,-22,108,-26,156v8,46,63,54,103,71v81,-3,181,-20,257,-34xm325,-218v98,18,140,-47,174,-104v13,-38,-29,-44,-56,-58v-41,-23,-52,17,-67,38r-72,103v-7,11,0,17,21,21xm1122,-209v13,-29,25,-59,41,-86v41,-11,75,-17,102,-18v40,-1,62,7,38,29v-41,38,-111,60,-181,75xm616,-144r66,-85v21,-27,41,-51,60,-73v0,24,0,48,1,73v1,25,3,50,6,75xm1086,-131v55,-13,109,-17,137,4v3,11,-12,23,-43,37v-31,14,-73,25,-126,34v13,-25,21,-49,32,-75","w":1423},"\u00ae":{"d":"1238,-750v-81,-125,-237,-210,-397,-256v-229,-65,-437,31,-569,137v-155,125,-296,297,-296,559v0,147,92,263,217,310v230,87,587,41,773,-50v185,-91,348,-219,348,-480v0,-92,-26,-171,-76,-220xm1158,-466v0,115,-82,177,-144,241v-93,96,-228,159,-388,181v-110,15,-196,-6,-299,-29v-146,-33,-223,-153,-175,-325v48,-173,166,-314,300,-406v79,-54,178,-106,299,-84v184,34,317,158,385,312v16,36,22,73,22,110xm551,-333v49,61,114,117,176,164v42,32,119,21,139,-17v-3,-22,-36,-39,-53,-56r-84,-86r-38,-42v93,-44,189,-90,225,-173v35,-81,-28,-168,-74,-213v-90,-87,-266,-10,-351,31v-73,118,-71,342,-97,508v-9,58,42,60,86,72v23,7,30,1,34,-16xm631,-630v53,-21,86,-33,133,-20v43,25,-1,75,-26,98v-39,37,-94,71,-156,91","w":1249},"\u00af":{"d":"460,-1200v-149,1,-302,19,-424,46v-34,7,-38,32,-15,76v14,28,28,21,47,45v24,30,41,51,86,39v110,-30,250,-55,379,-55v68,0,27,-67,8,-98v-21,-35,-48,-53,-81,-53","w":592},"\u00b0":{"d":"339,-748v9,-100,-73,-118,-161,-125v-111,-8,-180,58,-212,134v-46,108,39,171,156,171v113,0,170,-46,203,-120v9,-20,13,-40,14,-60xm142,-788v16,-16,54,-47,72,-15v20,80,-24,160,-83,185v-62,27,-61,-62,-38,-105v11,-22,31,-48,49,-65","w":373},"\u00b1":{"d":"347,-451v91,-13,195,0,270,-19v6,-34,-16,-69,-33,-99v-30,-54,-106,-33,-195,-36v6,-55,68,-117,14,-156v-21,-24,-62,-51,-96,-61v-68,-19,-71,63,-85,119r-28,109v-86,6,-175,10,-244,30v-41,12,-12,58,8,84v27,34,42,70,103,62r103,-14v-4,61,-34,130,21,157v33,17,68,41,107,43v20,-22,21,-79,30,-114xm255,-60v104,-24,229,-10,339,-28v4,-30,-19,-60,-32,-88v-23,-49,-125,-32,-178,-29r-148,9r-241,36v-19,3,-47,13,-34,37v18,34,50,81,87,95v80,0,141,-17,207,-32","w":732},"\u00b2":{"d":"105,-401v100,-79,199,-166,241,-301v9,-95,-59,-147,-138,-162v-113,-21,-183,56,-227,130v-20,34,-24,53,6,65v38,15,90,14,119,-10v27,-23,52,-58,89,-68v18,-5,32,5,19,29v-68,125,-187,230,-293,321v-34,29,9,58,27,77v22,24,42,38,87,31r170,-25v28,-4,58,0,74,-11v6,-22,-17,-46,-27,-63v-25,-40,-96,-15,-147,-13","w":355},"\u00b3":{"d":"201,-571v73,-32,157,-78,127,-187v-24,-85,-135,-141,-236,-92v-39,19,-74,45,-100,75v-23,48,47,71,101,63v37,-6,62,-44,102,-44v15,0,26,16,15,32v-40,57,-121,83,-202,112v-17,5,-21,18,-10,36v21,34,58,69,106,58v74,-17,96,56,52,98v-44,40,-88,41,-150,5v-33,-19,-124,-13,-92,31v72,97,286,125,367,14v24,-33,40,-88,15,-130v-19,-31,-52,-62,-95,-71","w":363},"\u00b4":{"d":"573,-1152v-5,-39,-11,-65,-39,-79v-41,-21,-69,-32,-102,-7v-93,71,-206,128,-318,181v-30,14,-18,53,2,63v35,17,61,33,101,19v127,-46,254,-109,356,-177","w":592},"\u00b5":{"d":"190,-10v73,32,204,43,273,-1v134,-85,181,-272,232,-455v22,-79,37,-169,62,-263v19,-71,-46,-79,-88,-105v-31,-19,-68,-34,-109,-25v-14,3,-19,16,-23,36r-63,301v-34,137,-69,291,-137,386v-26,35,-62,37,-79,2v-35,-169,43,-338,80,-488v17,-71,47,-120,-16,-165v-35,-25,-71,-44,-110,-56v-44,-14,-60,-8,-71,30v-15,49,-29,101,-43,157v-14,56,-26,114,-38,172v-12,58,-23,116,-33,175v-10,59,-19,115,-26,171v-7,56,-16,109,-19,160v-4,64,-18,125,-4,175v21,31,78,42,121,52v32,8,41,6,45,-18","w":762},"\u00b6":{"d":"127,-250v-20,87,-15,212,-37,305v1,46,70,13,96,7v49,-11,89,-31,103,-84r155,-577v66,-11,59,47,42,111r-152,558v0,47,70,8,96,6v50,-13,94,-29,104,-82v39,-209,117,-404,153,-618v2,-17,1,-26,-3,-29v-113,-78,-345,-181,-495,-70v-81,61,-158,131,-195,239v-16,120,64,178,133,234","w":708},"\u00b7":{"d":"56,-406v38,102,224,72,224,-47v0,-101,-177,-137,-219,-45v-12,27,-16,63,-5,92","w":331},"\u2219":{"d":"56,-406v38,102,224,72,224,-47v0,-101,-177,-137,-219,-45v-12,27,-16,63,-5,92","w":331},"\u00b8":{"d":"-40,195v124,27,163,-63,206,-139v19,-34,48,-74,13,-107v-18,-16,-38,-31,-61,-43v-63,-35,-67,32,-87,70r-96,183v-12,19,-4,31,25,36","w":301},"\u00b9":{"d":"215,-768v15,-54,-54,-59,-91,-80v-25,-14,-52,-19,-68,8v-16,27,-39,54,-51,82v-14,32,4,29,28,46r-34,187v-4,59,-21,120,-16,179v12,28,66,35,97,45v19,6,26,3,29,-13r47,-227","w":226},"\u00ba":{"d":"379,-327r-89,-386v-14,-107,-127,-113,-214,-141v-95,-31,-82,80,-90,156r-32,284r-19,249v-1,71,-17,119,34,143v36,17,88,37,133,36v20,-21,16,-65,22,-106r50,-348r66,202v11,32,21,62,32,89v25,58,38,111,97,132v32,11,63,20,94,26v36,8,54,-1,59,-26r114,-543v14,-63,28,-119,41,-168v24,-87,-70,-105,-138,-126v-45,-14,-62,-2,-71,35v-17,71,-34,149,-50,234v-16,85,-29,171,-39,258xm1128,-545v16,-96,-64,-111,-147,-117v-109,-8,-178,56,-215,126v-43,82,12,147,96,156v149,16,245,-43,266,-165xm1035,-312v-130,4,-263,18,-372,35v-54,8,-12,75,7,96v58,65,164,6,256,2v59,-2,116,-14,171,-14v50,0,36,-45,15,-63v-14,-27,-44,-57,-77,-56xm902,-460v-15,-62,52,-142,96,-117v11,48,-21,89,-46,113v-18,17,-38,20,-50,4","w":1203},"\u00bb":{"d":"374,-301v57,-15,77,-92,73,-153v-109,-69,-257,-117,-388,-163v-24,-8,-47,-6,-48,18v-3,61,2,127,57,134r155,58v-80,22,-171,51,-236,81v-19,9,-32,23,-11,42v30,28,65,68,108,79v50,-11,98,-39,148,-53v41,-12,88,-29,142,-43xm878,-294v26,-30,57,-88,52,-136v-105,-70,-247,-116,-373,-162v-25,-9,-46,-6,-50,18v-8,57,-9,129,47,134r149,56v-46,13,-91,26,-133,41v-53,19,-99,27,-130,57v-7,24,30,44,42,60v28,21,52,55,95,36v87,-39,165,-59,268,-88v16,-4,26,-11,33,-16","w":936},"\u00bc":{"d":"746,-704v41,-21,38,-73,5,-94v-2,-1,-7,-4,-12,-11v-22,-28,-48,-30,-81,-3v-243,204,-475,447,-699,673v-23,23,-33,55,-7,73v1,-9,5,-5,14,2v24,19,35,16,58,-4r494,-442xm706,-216r63,-178v16,-45,-42,-48,-71,-68v-32,-11,-73,-43,-106,-14v-84,74,-178,167,-241,261v-31,46,23,76,50,99v37,32,101,-4,155,-2v-6,36,-22,72,-20,111v14,22,59,38,92,37v25,-40,32,-110,51,-158v27,-7,83,12,79,-25v-11,-27,-14,-65,-52,-63xm-36,-720v-18,101,-28,225,-35,338v-4,63,59,57,103,74v19,7,25,3,28,-14r36,-228r48,-227v11,-55,-59,-58,-96,-81v-24,-9,-52,-19,-67,9v-14,26,-37,54,-47,82v-12,34,5,30,30,47xm463,-202v54,-56,108,-119,170,-166r-50,157","w":804},"\u00bd":{"d":"772,-738v8,-12,-6,-56,-24,-60v-2,-1,-7,-4,-12,-11v-22,-28,-48,-30,-81,-3v-242,205,-473,447,-697,673v-23,23,-33,55,-6,73v1,-9,5,-5,14,2v24,19,35,17,58,-4r352,-318r268,-234v41,-38,99,-72,128,-118xm580,-78v95,-72,195,-145,238,-268v10,-86,-50,-135,-124,-146v-107,-17,-175,49,-219,116v-20,30,-25,47,3,58v36,14,86,14,113,-9v26,-22,53,-51,87,-61v17,-5,30,6,17,26v-70,111,-186,205,-289,287v-40,32,27,68,48,90v22,24,64,4,100,0v62,-7,132,-10,188,-25v6,-20,-13,-42,-23,-57v-23,-35,-91,-13,-139,-11xm-39,-720v-17,102,-29,225,-34,338v-3,62,59,58,104,74v19,7,24,3,27,-14r36,-228r47,-227v11,-55,-58,-58,-95,-81v-25,-9,-54,-19,-69,9v-14,27,-35,54,-46,82v-12,34,7,29,30,47","w":844},"\u00be":{"d":"27,-344v132,42,287,-11,281,-147v-2,-50,-57,-106,-116,-117v72,-31,158,-84,119,-189v-26,-68,-97,-133,-199,-109v-57,13,-111,54,-140,92v-20,45,51,73,106,63v36,-7,59,-42,100,-44v35,9,11,47,-15,65v-45,30,-101,58,-167,80v-20,7,-19,19,-8,37v28,47,76,66,147,57v46,5,55,69,20,101v-43,41,-87,37,-151,4v-30,-15,-94,-20,-100,18v15,34,89,78,123,89xm929,-738v8,-12,-6,-56,-24,-60v-19,-25,-51,-49,-92,-14v-243,208,-481,447,-708,673v-24,24,-34,54,-7,73v1,-9,4,-5,13,2v24,19,35,16,58,-4r357,-318r272,-234v41,-38,100,-73,131,-118xm853,-216r65,-178v18,-44,-41,-48,-70,-68v-32,-11,-73,-43,-106,-14v-86,74,-179,167,-244,261v-32,45,25,74,49,99v24,25,66,8,101,4r54,-6v-6,36,-24,72,-22,111v14,22,59,39,92,37v27,-41,31,-106,53,-158v27,-7,83,12,79,-25v-10,-27,-13,-65,-51,-63xm610,-202v55,-56,109,-118,171,-166r-52,157","w":948},"\u00bf":{"d":"510,-520v10,-70,-35,-77,-78,-96v-26,-12,-55,-25,-86,-16v-10,3,-14,13,-13,28v-24,222,-302,188,-329,408v14,153,143,251,320,227v117,-16,209,-91,261,-181v33,-57,-69,-66,-116,-66v-112,0,-141,113,-253,121v-50,3,-53,-58,-24,-90v101,-111,291,-145,318,-335xm418,-674v142,58,233,-140,103,-200v-93,-43,-221,3,-187,126v11,40,44,58,84,74","w":679},"\u00c0":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,6,-131,6,-192v0,-80,20,-149,5,-210v-55,-53,-164,-62,-266,-72v-62,-6,-90,20,-110,57v-118,215,-236,478,-325,721v-27,74,45,85,95,107v62,28,63,-47,83,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm182,-1159v101,68,228,132,353,177v41,15,76,-5,107,-24v18,-12,25,-45,-3,-58v-105,-49,-226,-114,-313,-182v-33,-26,-62,-13,-103,8v-29,15,-35,40,-41,79xm226,-329r94,-183r86,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"\u00c1":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,5,-131,5,-192v0,-80,19,-148,5,-210v-55,-53,-163,-64,-265,-72v-116,-9,-132,88,-169,167r-121,257r-106,251v-18,51,-39,84,-44,136v8,50,62,56,100,74v62,29,62,-46,82,-80v12,-21,22,-47,36,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm692,-1152v-5,-39,-9,-64,-38,-79v-40,-21,-68,-32,-102,-7v-95,70,-208,129,-321,181v-31,14,-21,52,0,63v33,16,61,33,100,19v129,-45,256,-109,361,-177xm226,-329r93,-183r86,-162v-1,53,-2,108,-1,162v1,54,3,108,4,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"\u00c2":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,6,-131,6,-192v0,-80,20,-149,5,-210v-55,-53,-164,-62,-266,-72v-62,-6,-90,20,-110,57v-118,215,-236,478,-325,721v-27,74,45,85,95,107v62,28,63,-47,83,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm526,-1004v16,41,80,50,124,39v8,-24,-5,-52,-11,-81r-29,-148v-9,-47,-6,-106,-34,-135v-29,-19,-68,-75,-107,-33v-72,77,-142,162,-202,251v-28,41,21,76,43,99v14,15,25,16,38,0r63,-76v23,-28,48,-57,75,-86r20,96v6,30,13,54,20,74xm226,-329r94,-183r86,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"\u00c3":{"d":"522,16v35,0,89,16,89,-30r1,-387v1,-67,4,-131,4,-192v0,-80,18,-149,4,-210v-55,-53,-164,-62,-266,-72v-117,-10,-132,93,-167,167r-121,257r-104,251v-17,51,-39,85,-44,136v8,50,62,56,100,74v62,29,62,-46,82,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,5,136,28,178v13,15,52,27,78,27xm737,-1126v0,-45,-85,-54,-117,-23v-25,24,-51,68,-100,47v-69,-30,-149,-85,-244,-52v-55,20,-120,49,-148,92v-24,37,-9,75,47,75v71,0,81,-72,157,-56v33,7,72,14,94,31v24,18,62,27,115,27v53,0,146,-62,176,-99v12,-15,20,-29,20,-42xm224,-329r93,-183r86,-162v-1,53,-1,108,0,162r4,163v-31,2,-62,5,-92,8v-30,3,-60,7,-91,12","w":718},"\u00c4":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,3,-131,5,-192v2,-61,3,-116,9,-163v12,-87,-75,-84,-139,-102v-53,-15,-155,-35,-202,-4v-50,34,-69,94,-98,154r-121,257r-105,251v-17,51,-39,85,-44,136v8,50,62,56,100,74v62,29,62,-46,82,-80v12,-21,22,-47,36,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm225,-329r93,-183r87,-162v-1,53,-2,108,-1,162v1,54,3,108,4,163v-31,2,-62,5,-92,8v-30,3,-60,7,-91,12xm633,-1149v-118,-44,-180,140,-74,181v87,34,170,-62,125,-144v-9,-17,-28,-28,-51,-37xm200,-1022v34,94,187,60,187,-42v0,-91,-146,-126,-182,-42v-11,25,-15,57,-5,84","w":718},"\u00c5":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,3,-131,5,-192v2,-61,3,-116,10,-163v12,-87,-75,-84,-139,-102v-53,-15,-155,-35,-202,-4v-50,34,-69,94,-98,154r-121,257r-106,251v-18,51,-39,84,-44,136v8,50,62,56,100,74v62,29,63,-47,82,-80v12,-21,22,-47,36,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm686,-1130v14,-111,-72,-134,-166,-141v-122,-9,-192,69,-230,151v-35,75,-4,158,64,176v62,16,161,28,214,-3v63,-37,107,-98,118,-183xm226,-329r93,-183r87,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12xm478,-1176v16,-17,57,-52,76,-16v19,92,-29,176,-93,208v-46,23,-64,-33,-51,-80v13,-46,39,-82,68,-112","w":718},"\u00c6":{"d":"635,-160v9,-40,24,-77,34,-117r245,-43v31,-9,46,-7,35,-45v-15,-53,-20,-116,-97,-110r-124,9r65,-195r260,-31v37,-6,50,-8,44,-48v-5,-36,-8,-56,-25,-86v-15,-74,-146,-35,-208,-30v-43,3,-87,25,-125,22v-67,-20,-130,-38,-217,-43v-62,-4,-95,23,-121,58r-79,111r-171,256r-155,250v-23,44,-55,89,-71,138v-2,49,51,57,86,73v63,29,69,-51,97,-81v14,-22,31,-46,50,-72v82,-21,194,-32,288,-45v-6,55,-27,87,-27,139v0,82,128,74,205,59r258,-49v68,-6,16,-79,3,-113v-19,-48,-110,-23,-161,-20v-28,2,-58,8,-89,13xm283,-330r129,-184r120,-162v-11,54,-22,108,-32,162v-10,54,-20,109,-28,164","w":1056},"\u00c7":{"d":"397,-611v-1,106,60,156,160,160v58,-28,54,-130,54,-216v0,-135,-114,-169,-222,-201v-86,-25,-171,-4,-224,45v-125,116,-213,284,-227,505v-10,157,37,277,156,314r-93,184v-11,19,-2,31,26,36v47,6,97,9,122,-23v38,-46,83,-99,101,-166v131,0,202,-68,248,-154v22,-42,27,-69,-24,-83v-64,-17,-115,-7,-154,33v-55,56,-95,80,-122,71v-75,-43,-44,-207,-21,-292v28,-100,86,-213,146,-282v31,-35,63,-30,71,11v3,17,4,37,3,58","w":642},"\u00c8":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm105,-1152v102,67,229,132,355,177v41,15,77,-4,107,-23v18,-12,24,-46,-4,-59v-105,-49,-226,-116,-314,-181v-56,-41,-144,10,-144,86","w":577},"\u00c9":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm589,-1152v-3,-39,-9,-65,-37,-79v-40,-21,-70,-32,-102,-7v-89,68,-214,132,-321,181v-31,14,-20,52,1,63v34,17,61,33,101,19v127,-45,254,-109,358,-177","w":577},"\u00ca":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm432,-1000v12,40,81,52,124,39v-6,-104,-44,-215,-57,-325v-5,-42,-46,-58,-76,-80v-21,-15,-34,-10,-52,9v-72,76,-142,162,-200,251v-25,39,22,74,43,98v11,12,30,19,39,0r63,-76v22,-28,47,-57,74,-86r22,96v7,30,13,55,20,74","w":577},"\u00cb":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm508,-1142v-119,-42,-176,139,-72,180v87,35,169,-61,122,-143v-9,-17,-27,-28,-50,-37xm192,-1143v-101,-37,-155,91,-94,159v29,32,103,31,132,0v27,-29,47,-83,16,-122v-11,-16,-29,-28,-54,-37","w":577},"\u00cc":{"d":"286,-761v-25,-43,-107,-75,-163,-91v-92,-28,-83,72,-95,142r-48,276r-35,260v-3,70,-30,134,27,157v35,15,84,37,130,33v24,-26,25,-84,34,-124r88,-386r61,-226v5,-18,6,-32,1,-41xm-84,-1182v103,67,231,132,358,178v41,15,76,-3,107,-24v19,-12,24,-45,-4,-59r-167,-83v-54,-29,-104,-67,-151,-99v-58,-39,-145,9,-143,87","w":312},"\u00cd":{"d":"281,-720v19,-70,-50,-86,-96,-108v-43,-21,-125,-60,-138,9r-47,242r-42,282r-22,212v-7,79,72,79,131,98v33,11,43,4,48,-21r75,-356r62,-255v10,-39,21,-73,29,-103xm472,-1154v-5,-40,-10,-65,-39,-80v-41,-21,-69,-32,-102,-7v-94,70,-206,129,-318,181v-31,15,-20,53,1,63v34,17,60,33,100,19v128,-45,254,-109,358,-176","w":312},"\u00ce":{"d":"286,-761v-26,-43,-108,-74,-164,-91v-92,-28,-82,72,-94,142r-48,276r-35,260v-3,70,-30,134,27,157v35,15,84,37,130,33v24,-26,25,-84,34,-124r88,-386r61,-226v5,-18,6,-32,1,-41xm278,-993v15,42,80,49,125,39v-8,-106,-47,-215,-61,-325v-6,-42,-46,-58,-76,-80v-21,-15,-34,-10,-52,9v-71,76,-143,160,-197,251v-27,44,29,82,55,107v11,6,19,3,28,-9r61,-77r73,-85v9,34,16,65,23,95v7,30,14,55,21,75","w":312},"\u00cf":{"d":"283,-720v18,-70,-50,-86,-96,-108v-43,-21,-125,-60,-138,9r-47,242r-42,282r-23,212v-9,79,71,79,130,98v33,11,43,4,48,-21r107,-488xm-58,-1016v34,91,185,64,185,-41v0,-89,-146,-126,-181,-41v-10,25,-14,56,-4,82xm371,-1142v-101,-36,-160,92,-101,160v32,36,102,30,132,0v28,-28,50,-82,20,-123v-11,-16,-28,-28,-51,-37","w":312},"\u00d0":{"d":"90,-502v-47,5,-172,4,-123,59v34,39,86,118,181,99r-20,187v-16,82,45,108,88,139v34,24,99,54,156,36v232,-73,408,-208,464,-442v50,-206,-57,-364,-207,-420v-143,-54,-335,-5,-435,52r-30,285v-25,1,-49,3,-74,5xm320,-139r47,-225v57,-4,137,2,181,-12v21,-15,-4,-45,-10,-62v-17,-48,-58,-80,-136,-75r38,-142v109,-34,203,16,186,142v-26,190,-149,305,-306,374","w":901},"\u00d1":{"d":"392,-327r-74,-386v-10,-109,-123,-113,-208,-141v-96,-31,-85,81,-96,156r-44,284r-35,326v-6,78,72,79,131,99v70,22,53,-52,62,-103r63,-348r58,202v10,32,19,62,29,89v22,58,35,111,91,132v32,11,63,20,94,26v36,8,54,-1,60,-26r85,-352r50,-191v17,-63,33,-119,48,-168v27,-85,-65,-106,-133,-126v-46,-14,-62,-2,-73,35v-19,71,-38,149,-58,234v-20,85,-37,171,-50,258xm425,-1012v71,43,163,35,234,-23v36,-29,66,-50,76,-91v0,-44,-84,-55,-117,-23v-25,24,-50,69,-100,47v-69,-30,-148,-85,-244,-52v-55,20,-121,49,-148,92v-24,39,-8,75,47,75v72,0,81,-73,158,-56v33,7,71,17,94,31","w":702},"\u00d2":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm98,-1152v102,67,229,132,355,177v42,15,77,-3,108,-23v19,-12,23,-45,-5,-59r-165,-83v-53,-29,-104,-64,-150,-98v-33,-24,-61,-14,-102,7v-29,15,-35,40,-41,79"},"\u00d3":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm582,-1152v-3,-39,-10,-65,-38,-79v-40,-21,-70,-32,-102,-7v-89,68,-213,131,-320,181v-30,13,-18,53,2,63v34,17,61,33,101,19v127,-46,253,-109,357,-177"},"\u00d4":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm485,-977v13,41,81,49,124,39v-5,-103,-46,-212,-57,-323v-4,-43,-46,-58,-75,-80v-21,-15,-34,-10,-52,9v-71,75,-145,160,-200,250v-26,43,27,83,55,106v10,8,19,1,27,-9r62,-76v22,-27,47,-56,74,-85"},"\u00d5":{"d":"619,-646v-21,-139,-137,-199,-277,-218v-133,-18,-208,72,-266,150v-101,136,-170,418,-73,605v51,98,203,151,347,119v143,-31,204,-187,246,-328v29,-98,39,-216,23,-328xm329,-672v35,-33,68,-23,77,24v34,177,-28,367,-96,481v-28,47,-102,93,-124,20v-50,-166,25,-348,92,-459v17,-28,34,-50,51,-66xm732,-1126v-5,-43,-80,-57,-117,-23v-26,24,-51,68,-100,47v-70,-30,-150,-85,-245,-52v-55,20,-120,49,-147,92v-24,39,-8,75,47,75v72,0,81,-73,158,-56v33,7,71,17,94,31v69,43,163,35,234,-23v36,-30,66,-50,76,-91"},"\u00d6":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm562,-1142v-120,-42,-177,140,-72,180v87,34,168,-61,122,-143v-9,-17,-27,-28,-50,-37xm246,-1143v-102,-37,-157,91,-94,159v29,32,103,31,132,0v27,-29,47,-83,16,-122v-11,-16,-29,-28,-54,-37"},"\u00d7":{"d":"417,-197v39,27,58,-18,75,-38v16,-19,50,-64,13,-89r-86,-61v44,-24,105,-36,141,-65v24,-19,23,-86,8,-119v-10,-23,-40,-18,-65,-8v-71,28,-157,70,-228,104v-58,-34,-124,-71,-184,-96v-25,-11,-54,-14,-69,11v-18,30,-52,78,-40,122v27,25,82,39,116,59v-41,20,-77,45,-112,64v-53,29,-24,77,-10,117v10,27,20,22,47,8r220,-114v64,33,118,66,174,105","w":655},"\u00d8":{"d":"643,-852v32,-39,5,-63,-17,-90v2,-2,5,-1,7,0v0,-1,-4,-4,-12,-9v-56,-44,-86,23,-109,61r-38,63v-63,-24,-136,-53,-220,-30v-84,23,-127,84,-174,143v-111,139,-182,468,-54,638v8,11,21,19,32,27v-20,38,-60,102,-10,127r-16,-7v21,13,54,23,63,-9r38,-69v95,29,233,39,301,-24v135,-127,220,-354,188,-615v-5,-42,-21,-75,-45,-104xm412,-481v-11,124,-49,234,-101,314v-24,37,-70,83,-111,44xm333,-672v22,-21,41,-26,59,-11r-169,311r-51,100v7,-136,55,-242,109,-334v17,-28,35,-50,52,-66"},"\u00d9":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm96,-1152v102,67,229,132,356,177v41,15,76,-4,107,-23v19,-12,23,-45,-5,-59r-165,-83v-53,-29,-104,-65,-151,-98v-56,-39,-144,9,-142,86","w":676},"\u00da":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm580,-1152v-5,-39,-11,-65,-39,-79v-41,-21,-69,-32,-102,-7v-94,71,-207,128,-319,181v-30,14,-18,53,2,63v34,17,61,33,101,19v127,-46,253,-109,357,-177","w":676},"\u00db":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm424,-1000v13,40,81,52,124,39v6,-50,-20,-100,-29,-153r-31,-172v-11,-41,-46,-58,-76,-80v-21,-15,-34,-10,-52,9v-71,74,-144,162,-198,251v-27,44,28,83,56,107v9,8,19,1,27,-9r62,-76v22,-28,46,-57,73,-86v9,34,16,66,23,96v7,30,15,54,21,74","w":676},"\u00dc":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm120,-1016v34,91,185,64,185,-41v0,-90,-146,-126,-181,-41v-10,25,-14,56,-4,82xm550,-1142v-103,-31,-161,92,-102,160v42,48,135,20,152,-24v35,-53,2,-120,-50,-136","w":676},"\u00dd":{"d":"338,-233v108,-162,241,-323,317,-509v20,-49,-26,-68,-55,-95v-28,-25,-87,-66,-117,-14r-104,183r-106,176r-52,-163v-25,-70,-39,-140,-77,-185v-28,-33,-104,-32,-162,-24v-35,5,-39,13,-26,51r180,514r-31,225v-9,79,74,81,132,99v34,11,43,6,49,-22xm578,-1152v-3,-39,-10,-65,-38,-79v-40,-21,-70,-31,-102,-7v-94,71,-206,129,-319,181v-32,15,-19,52,1,63v34,18,62,33,102,19v127,-46,254,-109,356,-177","w":651},"\u00de":{"d":"270,-761v-28,-42,-109,-75,-165,-91v-92,-28,-80,72,-91,142r-42,276r-31,260v-3,72,-25,135,31,157v36,14,85,37,130,33v20,-17,17,-64,26,-94v195,-57,392,-128,477,-290v56,-107,-35,-220,-94,-282v-50,-52,-164,-55,-253,-33v6,-19,20,-56,12,-78xm168,-257r58,-223v50,-21,119,-41,180,-26v31,8,29,39,14,70v-44,89,-144,144,-252,179","w":657},"\u00df":{"d":"116,-439v93,-82,192,-166,226,-305v3,-96,-65,-150,-147,-164v-113,-19,-178,57,-223,131v-38,62,23,75,72,75v70,-1,87,-73,144,-88v18,-4,32,5,20,28v-64,126,-177,233,-278,326v-32,29,13,58,32,78v30,21,35,40,89,32r171,-26v29,-9,85,9,71,-27v-12,-30,-29,-72,-73,-69v-36,2,-73,3,-104,9xm962,-738v8,-12,-6,-56,-24,-60v-20,-24,-52,-49,-92,-14v-243,207,-479,448,-707,673v-25,24,-33,55,-7,74v0,-2,-1,-6,2,-6v21,16,46,35,70,3r356,-318r271,-234v41,-38,101,-72,131,-118xm966,-132v3,-45,-46,-96,-97,-104v69,-30,156,-65,129,-167v-17,-64,-86,-114,-176,-95v-54,11,-110,48,-140,80v-23,42,42,65,92,56v34,-6,62,-37,99,-39v14,0,23,14,12,28v-41,50,-118,76,-197,101v-19,5,-19,16,-10,32v22,43,70,59,132,51v44,5,44,62,9,89v-44,34,-82,33,-142,4v-28,-14,-86,-17,-95,16v30,51,108,91,186,91v104,0,191,-48,198,-143","w":1023},"\u00e0":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,6,-131,6,-192v0,-80,20,-149,5,-210v-55,-53,-164,-62,-266,-72v-62,-6,-90,20,-110,57v-118,215,-236,478,-325,721v-27,74,45,85,95,107v62,28,63,-47,83,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm182,-1159v101,68,228,132,353,177v41,15,76,-5,107,-24v18,-12,25,-45,-3,-58v-105,-49,-226,-114,-313,-182v-33,-26,-62,-13,-103,8v-29,15,-35,40,-41,79xm226,-329r94,-183r86,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"\u00e1":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,5,-131,5,-192v0,-80,19,-148,5,-210v-55,-53,-163,-64,-265,-72v-116,-9,-132,88,-169,167r-121,257r-106,251v-18,51,-39,84,-44,136v8,50,62,56,100,74v62,29,62,-46,82,-80v12,-21,22,-47,36,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm692,-1152v-5,-39,-9,-64,-38,-79v-40,-21,-68,-32,-102,-7v-95,70,-208,129,-321,181v-31,14,-21,52,0,63v33,16,61,33,100,19v129,-45,256,-109,361,-177xm226,-329r93,-183r86,-162v-1,53,-2,108,-1,162v1,54,3,108,4,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"\u00e2":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,6,-131,6,-192v0,-80,20,-149,5,-210v-55,-53,-164,-62,-266,-72v-62,-6,-90,20,-110,57v-118,215,-236,478,-325,721v-27,74,45,85,95,107v62,28,63,-47,83,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm526,-1004v16,41,80,50,124,39v8,-24,-5,-52,-11,-81r-29,-148v-9,-47,-6,-106,-34,-135v-29,-19,-68,-75,-107,-33v-72,77,-142,162,-202,251v-28,41,21,76,43,99v14,15,25,16,38,0r63,-76v23,-28,48,-57,75,-86r20,96v6,30,13,54,20,74xm226,-329r94,-183r86,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12","w":718},"\u00e3":{"d":"522,16v35,0,89,16,89,-30r1,-387v1,-67,4,-131,4,-192v0,-80,18,-149,4,-210v-55,-53,-164,-62,-266,-72v-117,-10,-132,93,-167,167r-121,257r-104,251v-17,51,-39,85,-44,136v8,50,62,56,100,74v62,29,62,-46,82,-80v12,-21,22,-47,35,-73v80,-22,189,-33,281,-46v9,57,5,136,28,178v13,15,52,27,78,27xm737,-1126v0,-45,-85,-54,-117,-23v-25,24,-51,68,-100,47v-69,-30,-149,-85,-244,-52v-55,20,-120,49,-148,92v-24,37,-9,75,47,75v71,0,81,-72,157,-56v33,7,72,14,94,31v24,18,62,27,115,27v53,0,146,-62,176,-99v12,-15,20,-29,20,-42xm224,-329r93,-183r86,-162v-1,53,-1,108,0,162r4,163v-31,2,-62,5,-92,8v-30,3,-60,7,-91,12","w":718},"\u00e4":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,3,-131,5,-192v2,-61,3,-116,9,-163v12,-87,-75,-84,-139,-102v-53,-15,-155,-35,-202,-4v-50,34,-69,94,-98,154r-121,257r-105,251v-17,51,-39,85,-44,136v8,50,62,56,100,74v62,29,62,-46,82,-80v12,-21,22,-47,36,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm225,-329r93,-183r87,-162v-1,53,-2,108,-1,162v1,54,3,108,4,163v-31,2,-62,5,-92,8v-30,3,-60,7,-91,12xm633,-1149v-118,-44,-180,140,-74,181v87,34,170,-62,125,-144v-9,-17,-28,-28,-51,-37xm200,-1022v34,94,187,60,187,-42v0,-91,-146,-126,-182,-42v-11,25,-15,57,-5,84","w":718},"\u00e5":{"d":"522,16v35,0,89,16,89,-30r2,-387v1,-67,3,-131,5,-192v2,-61,3,-116,10,-163v12,-87,-75,-84,-139,-102v-53,-15,-155,-35,-202,-4v-50,34,-69,94,-98,154r-121,257r-106,251v-18,51,-39,84,-44,136v8,50,62,56,100,74v62,29,63,-47,82,-80v12,-21,22,-47,36,-73v80,-22,189,-33,281,-46v9,57,4,137,27,178v13,15,52,27,78,27xm686,-1130v14,-111,-72,-134,-166,-141v-122,-9,-192,69,-230,151v-35,75,-4,158,64,176v62,16,161,28,214,-3v63,-37,107,-98,118,-183xm226,-329r93,-183r87,-162v-1,53,-2,108,-1,162r3,163v-31,2,-62,5,-92,8v-30,3,-60,7,-90,12xm478,-1176v16,-17,57,-52,76,-16v19,92,-29,176,-93,208v-46,23,-64,-33,-51,-80v13,-46,39,-82,68,-112","w":718},"\u00e6":{"d":"635,-160v9,-40,24,-77,34,-117r245,-43v31,-9,46,-7,35,-45v-15,-53,-20,-116,-97,-110r-124,9r65,-195r260,-31v37,-6,50,-8,44,-48v-5,-36,-8,-56,-25,-86v-15,-74,-146,-35,-208,-30v-43,3,-87,25,-125,22v-67,-20,-130,-38,-217,-43v-62,-4,-95,23,-121,58r-79,111r-171,256r-155,250v-23,44,-55,89,-71,138v-2,49,51,57,86,73v63,29,69,-51,97,-81v14,-22,31,-46,50,-72v82,-21,194,-32,288,-45v-6,55,-27,87,-27,139v0,82,128,74,205,59r258,-49v68,-6,16,-79,3,-113v-19,-48,-110,-23,-161,-20v-28,2,-58,8,-89,13xm283,-330r129,-184r120,-162v-11,54,-22,108,-32,162v-10,54,-20,109,-28,164","w":1056},"\u00e7":{"d":"397,-611v-1,106,60,156,160,160v58,-28,54,-130,54,-216v0,-135,-114,-169,-222,-201v-86,-25,-171,-4,-224,45v-125,116,-213,284,-227,505v-10,157,37,277,156,314r-93,184v-11,19,-2,31,26,36v47,6,97,9,122,-23v38,-46,83,-99,101,-166v131,0,202,-68,248,-154v22,-42,27,-69,-24,-83v-64,-17,-115,-7,-154,33v-55,56,-95,80,-122,71v-75,-43,-44,-207,-21,-292v28,-100,86,-213,146,-282v31,-35,63,-30,71,11v3,17,4,37,3,58","w":642},"\u00e8":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm105,-1152v102,67,229,132,355,177v41,15,77,-4,107,-23v18,-12,24,-46,-4,-59v-105,-49,-226,-116,-314,-181v-56,-41,-144,10,-144,86","w":577},"\u00e9":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm589,-1152v-3,-39,-9,-65,-37,-79v-40,-21,-70,-32,-102,-7v-89,68,-214,132,-321,181v-31,14,-20,52,1,63v34,17,61,33,101,19v127,-45,254,-109,358,-177","w":577},"\u00ea":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm432,-1000v12,40,81,52,124,39v-6,-104,-44,-215,-57,-325v-5,-42,-46,-58,-76,-80v-21,-15,-34,-10,-52,9v-72,76,-142,162,-200,251v-25,39,22,74,43,98v11,12,30,19,39,0r63,-76v22,-28,47,-57,74,-86r22,96v7,30,13,55,20,74","w":577},"\u00eb":{"d":"41,-798r-95,665v-3,76,59,98,103,131v54,41,154,0,222,-13r130,-25v30,-7,39,-6,32,-40v-23,-45,-26,-108,-103,-101v-68,7,-119,10,-182,21r30,-117r243,-43v32,-9,45,-8,33,-45v-17,-53,-24,-116,-101,-110r-124,9r57,-195r259,-31v35,-6,49,-9,41,-48v-12,-60,-25,-132,-101,-130v-161,6,-311,38,-444,72xm508,-1142v-119,-42,-176,139,-72,180v87,35,169,-61,122,-143v-9,-17,-27,-28,-50,-37xm192,-1143v-101,-37,-155,91,-94,159v29,32,103,31,132,0v27,-29,47,-83,16,-122v-11,-16,-29,-28,-54,-37","w":577},"\u00ec":{"d":"286,-761v-25,-43,-107,-75,-163,-91v-92,-28,-83,72,-95,142r-48,276r-35,260v-3,70,-30,134,27,157v35,15,84,37,130,33v24,-26,25,-84,34,-124r88,-386r61,-226v5,-18,6,-32,1,-41xm-84,-1182v103,67,231,132,358,178v41,15,76,-3,107,-24v19,-12,24,-45,-4,-59r-167,-83v-54,-29,-104,-67,-151,-99v-58,-39,-145,9,-143,87","w":312},"\u00ed":{"d":"281,-720v19,-70,-50,-86,-96,-108v-43,-21,-125,-60,-138,9r-47,242r-42,282r-22,212v-7,79,72,79,131,98v33,11,43,4,48,-21r75,-356r62,-255v10,-39,21,-73,29,-103xm472,-1154v-5,-40,-10,-65,-39,-80v-41,-21,-69,-32,-102,-7v-94,70,-206,129,-318,181v-31,15,-20,53,1,63v34,17,60,33,100,19v128,-45,254,-109,358,-176","w":312},"\u00ee":{"d":"286,-761v-26,-43,-108,-74,-164,-91v-92,-28,-82,72,-94,142r-48,276r-35,260v-3,70,-30,134,27,157v35,15,84,37,130,33v24,-26,25,-84,34,-124r88,-386r61,-226v5,-18,6,-32,1,-41xm278,-993v15,42,80,49,125,39v-8,-106,-47,-215,-61,-325v-6,-42,-46,-58,-76,-80v-21,-15,-34,-10,-52,9v-71,76,-143,160,-197,251v-27,44,29,82,55,107v11,6,19,3,28,-9r61,-77r73,-85v9,34,16,65,23,95v7,30,14,55,21,75","w":312},"\u00ef":{"d":"283,-720v18,-70,-50,-86,-96,-108v-43,-21,-125,-60,-138,9r-47,242r-42,282r-23,212v-9,79,71,79,130,98v33,11,43,4,48,-21r107,-488xm-58,-1016v34,91,185,64,185,-41v0,-89,-146,-126,-181,-41v-10,25,-14,56,-4,82xm371,-1142v-101,-36,-160,92,-101,160v32,36,102,30,132,0v28,-28,50,-82,20,-123v-11,-16,-28,-28,-51,-37","w":312},"\u00f0":{"d":"257,-720r-98,17v-47,0,-26,58,-5,82v38,24,68,83,134,52r5,86v-101,-33,-241,-7,-292,53v-103,79,-157,351,1,409v88,32,241,21,308,-21v131,-81,197,-233,226,-419v7,-46,8,-94,5,-144v42,-12,139,17,111,-51v-22,-53,-58,-102,-136,-86v-13,-49,-19,-112,-82,-112v-67,-1,-161,-15,-200,17v-21,33,21,85,23,117xm268,-260v-22,66,-41,135,-99,145v-92,16,-70,-155,-35,-209v16,-42,82,-53,110,-12v12,18,24,45,24,76","w":612},"\u00f1":{"d":"392,-327r-74,-386v-10,-109,-123,-113,-208,-141v-96,-31,-85,81,-96,156r-44,284r-35,326v-6,78,72,79,131,99v70,22,53,-52,62,-103r63,-348r58,202v10,32,19,62,29,89v22,58,35,111,91,132v32,11,63,20,94,26v36,8,54,-1,60,-26r85,-352r50,-191v17,-63,33,-119,48,-168v27,-85,-65,-106,-133,-126v-46,-14,-62,-2,-73,35v-19,71,-38,149,-58,234v-20,85,-37,171,-50,258xm425,-1012v71,43,163,35,234,-23v36,-29,66,-50,76,-91v0,-44,-84,-55,-117,-23v-25,24,-50,69,-100,47v-69,-30,-148,-85,-244,-52v-55,20,-121,49,-148,92v-24,39,-8,75,47,75v72,0,81,-73,158,-56v33,7,71,17,94,31","w":702},"\u00f2":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm98,-1152v102,67,229,132,355,177v42,15,77,-3,108,-23v19,-12,23,-45,-5,-59r-165,-83v-53,-29,-104,-64,-150,-98v-33,-24,-61,-14,-102,7v-29,15,-35,40,-41,79"},"\u00f3":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm582,-1152v-3,-39,-10,-65,-38,-79v-40,-21,-70,-32,-102,-7v-89,68,-213,131,-320,181v-30,13,-18,53,2,63v34,17,61,33,101,19v127,-46,253,-109,357,-177"},"\u00f4":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm485,-977v13,41,81,49,124,39v-5,-103,-46,-212,-57,-323v-4,-43,-46,-58,-75,-80v-21,-15,-34,-10,-52,9v-71,75,-145,160,-200,250v-26,43,27,83,55,106v10,8,19,1,27,-9r62,-76v22,-27,47,-56,74,-85"},"\u00f5":{"d":"619,-646v-21,-139,-137,-199,-277,-218v-133,-18,-208,72,-266,150v-101,136,-170,418,-73,605v51,98,203,151,347,119v143,-31,204,-187,246,-328v29,-98,39,-216,23,-328xm329,-672v35,-33,68,-23,77,24v34,177,-28,367,-96,481v-28,47,-102,93,-124,20v-50,-166,25,-348,92,-459v17,-28,34,-50,51,-66xm732,-1126v-5,-43,-80,-57,-117,-23v-26,24,-51,68,-100,47v-70,-30,-150,-85,-245,-52v-55,20,-120,49,-147,92v-24,39,-8,75,47,75v72,0,81,-73,158,-56v33,7,71,17,94,31v69,43,163,35,234,-23v36,-30,66,-50,76,-91"},"\u00f6":{"d":"627,-488v16,-186,-34,-305,-171,-348v-61,-19,-127,-42,-202,-21v-83,23,-128,83,-174,143v-104,134,-174,417,-76,605v51,98,202,151,346,119v143,-32,205,-187,248,-328v17,-56,25,-113,29,-170xm333,-672v35,-33,68,-23,77,24v33,178,-30,366,-99,481v-28,47,-103,93,-125,20v-50,-167,28,-347,95,-459v17,-28,35,-50,52,-66xm562,-1142v-120,-42,-177,140,-72,180v87,34,168,-61,122,-143v-9,-17,-27,-28,-50,-37xm246,-1143v-102,-37,-157,91,-94,159v29,32,103,31,132,0v27,-29,47,-83,16,-122v-11,-16,-29,-28,-54,-37"},"\u00f7":{"d":"302,-310v107,-26,237,-12,353,-30v6,-33,-20,-65,-33,-96v-23,-53,-129,-35,-185,-32r-155,10r-251,39v-21,4,-51,12,-36,41v19,36,53,89,91,104v79,-1,154,-21,216,-36xm406,-745v-147,-51,-215,167,-82,211v88,29,167,-25,167,-111v0,-51,-37,-83,-85,-100xm222,-123v37,90,214,68,214,-43v0,-95,-169,-124,-208,-40v-12,25,-17,57,-6,83","w":732},"\u00f8":{"d":"643,-852v32,-39,5,-63,-17,-90v2,-2,5,-1,7,0v0,-1,-4,-4,-12,-9v-56,-44,-86,23,-109,61r-38,63v-63,-24,-136,-53,-220,-30v-84,23,-127,84,-174,143v-111,139,-182,468,-54,638v8,11,21,19,32,27v-20,38,-60,102,-10,127r-16,-7v21,13,54,23,63,-9r38,-69v95,29,233,39,301,-24v135,-127,220,-354,188,-615v-5,-42,-21,-75,-45,-104xm412,-481v-11,124,-49,234,-101,314v-24,37,-70,83,-111,44xm333,-672v22,-21,41,-26,59,-11r-169,311r-51,100v7,-136,55,-242,109,-334v17,-28,35,-50,52,-66"},"\u00f9":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm96,-1152v102,67,229,132,356,177v41,15,76,-4,107,-23v19,-12,23,-45,-5,-59r-165,-83v-53,-29,-104,-65,-151,-98v-56,-39,-144,9,-142,86","w":676},"\u00fa":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm580,-1152v-5,-39,-11,-65,-39,-79v-41,-21,-69,-32,-102,-7v-94,71,-207,128,-319,181v-30,14,-18,53,2,63v34,17,61,33,101,19v127,-46,253,-109,357,-177","w":676},"\u00fb":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm424,-1000v13,40,81,52,124,39v6,-50,-20,-100,-29,-153r-31,-172v-11,-41,-46,-58,-76,-80v-21,-15,-34,-10,-52,9v-71,74,-144,162,-198,251v-27,44,28,83,56,107v9,8,19,1,27,-9r62,-76v22,-28,46,-57,73,-86v9,34,16,66,23,96v7,30,15,54,21,74","w":676},"\u00fc":{"d":"48,-813v-51,200,-154,502,-53,711v45,93,172,136,313,114v137,-21,185,-140,233,-267v55,-145,93,-319,129,-497v-3,-52,-57,-60,-94,-82v-31,-19,-68,-34,-109,-25v-14,3,-18,16,-22,36r-61,301v-33,137,-66,291,-134,386v-29,40,-76,37,-82,-11v-25,-195,56,-375,99,-540v23,-89,-76,-131,-148,-156v-44,-14,-61,-9,-71,30xm120,-1016v34,91,185,64,185,-41v0,-90,-146,-126,-181,-41v-10,25,-14,56,-4,82xm550,-1142v-103,-31,-161,92,-102,160v42,48,135,20,152,-24v35,-53,2,-120,-50,-136","w":676},"\u00fd":{"d":"338,-233v108,-162,241,-323,317,-509v20,-49,-26,-68,-55,-95v-28,-25,-87,-66,-117,-14r-104,183r-106,176r-52,-163v-25,-70,-39,-140,-77,-185v-28,-33,-104,-32,-162,-24v-35,5,-39,13,-26,51r180,514r-31,225v-9,79,74,81,132,99v34,11,43,6,49,-22xm578,-1152v-3,-39,-10,-65,-38,-79v-40,-21,-70,-31,-102,-7v-94,71,-206,129,-319,181v-32,15,-19,52,1,63v34,18,62,33,102,19v127,-46,254,-109,356,-177","w":651},"\u00fe":{"d":"270,-761v-28,-42,-109,-75,-165,-91v-92,-28,-80,72,-91,142r-42,276r-31,260v-3,72,-25,135,31,157v36,14,85,37,130,33v20,-17,17,-64,26,-94v195,-57,392,-128,477,-290v56,-107,-35,-220,-94,-282v-50,-52,-164,-55,-253,-33v6,-19,20,-56,12,-78xm168,-257r58,-223v50,-21,119,-41,180,-26v31,8,29,39,14,70v-44,89,-144,144,-252,179","w":657},"\u00ff":{"d":"338,-233v108,-162,241,-323,317,-509v20,-49,-26,-68,-55,-95v-28,-25,-87,-66,-117,-14r-104,183r-106,176r-52,-163v-25,-70,-39,-140,-77,-185v-28,-33,-104,-32,-162,-24v-35,5,-39,13,-26,51r180,514r-31,225v-9,79,74,81,132,99v34,11,43,6,49,-22xm376,-1014v31,94,186,62,186,-43v0,-71,-94,-115,-152,-71v-28,21,-49,69,-34,114xm68,-1016v34,92,185,62,185,-41v0,-89,-148,-126,-182,-41v-10,25,-13,56,-3,82","w":651}}});

    // #### Generated By: http://www.cufonfonts.com ####
/*!
 * The following copyright notice may not be removed under any circumstances.
 * 
 * Designer:
 * Font Monkey (P.D. Magnus)
 */
Cufon.registerFont({"w":541,"face":{"font-family":"Belligerent Madness","font-weight":400,"font-stretch":"normal","units-per-em":"1000","panose-1":"0 0 0 0 0 0 0 0 0 0","ascent":"800","descent":"-200","x-height":"21","cap-height":"68","bbox":"10.6204 -819 757 298.411","underline-thickness":"50","underline-position":"-50","unicode-range":"U+0020-U+20AC"},"glyphs":{" ":{"w":300},"B":{"d":"207,-649v104,-18,261,-23,330,29v-12,98,-106,139,-175,184v96,-9,213,2,178,108v-48,141,-187,208,-315,269v-15,15,-32,51,-59,41v1,-11,18,-17,25,-26r-25,20v1,-5,2,-9,2,-12v-41,13,-93,38,-148,23v-21,-10,1,-45,7,-56v20,-22,49,-57,92,-45v-9,11,-19,19,-27,30v19,3,44,0,75,-7v-31,-121,-26,-267,-51,-393v-6,-27,-9,-55,-9,-82r-26,6v-12,14,-35,45,-59,33v-6,-60,68,-83,113,-104r65,-59v1,15,3,28,7,41xm474,-315v-21,-67,-157,-49,-229,-40v3,37,9,73,13,109v4,40,15,89,3,123v78,-38,166,-74,206,-147v6,-12,8,-27,7,-45xm223,-584v8,52,11,109,17,163v60,-37,133,-58,186,-102v13,-10,26,-20,39,-29v-53,-39,-155,-40,-242,-32","w":562},"C":{"d":"141,-582v60,-59,197,-61,263,-8v4,-28,14,-50,32,-67r16,17v7,-13,14,-24,24,-34v2,-2,2,0,0,6v-14,55,6,124,10,174v-7,21,-29,47,-48,58v-7,4,-15,5,-18,-1v-25,-52,-78,-100,-137,-118r-31,29v-4,-9,-3,-11,-17,-3v-82,50,-79,197,-61,316v-3,38,37,55,20,87v66,29,145,26,213,-3v31,-14,45,-55,71,-75v2,-1,2,1,0,6v-2,5,-5,9,-8,12r54,-36v-23,47,-59,76,-92,112v-67,77,-252,92,-343,22v-101,-78,-90,-304,-19,-408v22,-32,45,-60,71,-86xm524,-222v3,-7,5,-8,4,-3"},"D":{"d":"133,-94v-16,-112,10,-242,-10,-356v-7,-40,-14,-88,-14,-129v-20,5,-48,5,-58,20v-10,3,-18,7,-30,7v-11,-27,26,-44,40,-59v140,-88,399,-20,473,84v30,43,67,109,36,171v-84,170,-252,264,-450,320v-31,8,-61,19,-90,34v-17,8,-22,3,-14,-14v20,-43,68,-64,117,-78xm415,-208v17,-118,-17,-219,-46,-310r17,-16v-46,-25,-102,-40,-163,-47r3,125v8,79,8,157,24,230v7,36,13,63,5,96v54,-20,115,-45,160,-78","w":594},"E":{"d":"467,-622v-5,55,-58,68,-123,68v-58,0,-114,18,-170,41r8,-12r-26,6r13,126v54,-25,127,-48,199,-53v19,11,-13,35,-20,45v-17,15,-32,22,-42,41v-46,7,-100,16,-132,41r8,202v84,-20,170,-48,280,-38v8,2,5,7,4,14v-12,31,-31,50,-50,73r0,-8r-22,23r6,-3v0,0,2,-1,1,0v-14,9,-22,12,-24,10v-2,-2,-1,-7,2,-14v-89,-8,-176,14,-243,43v-24,10,-54,8,-76,21v-11,11,-27,33,-45,24r-3,-573v7,-6,22,-7,19,-19r-16,7v30,-44,79,-74,137,-89v7,0,6,7,8,12v87,-24,208,-17,311,-15r-22,25xm463,-622r1,-1","w":483},"F":{"d":"61,-254v-1,-27,2,-55,2,-81v0,-55,-5,-107,2,-159v-13,4,-45,26,-51,24v4,-36,41,-56,63,-79r-39,16r2,0v-4,2,-24,9,-22,2v9,-26,41,-56,65,-67v0,-2,1,-5,2,-9r65,-50v-2,12,-8,25,-5,34v13,-11,22,-14,27,-9v102,-22,223,-31,307,-68v18,11,34,34,50,43v-9,45,-60,34,-94,57v-79,28,-162,43,-244,66r-3,117r4,-4r9,60v38,-19,79,-34,119,-50r-20,29v46,-11,95,-19,147,-22v23,21,-33,52,-50,66r-24,6v-42,41,-97,42,-160,57v5,63,29,156,-19,190v2,37,26,77,9,109v-13,16,-30,48,-58,41v-10,-22,-18,-48,-22,-75v-11,13,-26,31,-45,33v-7,-30,1,-97,-2,-144v-8,-29,-11,-58,-14,-91v-14,4,-37,5,-24,-14v6,-10,15,-21,23,-28xm30,-530r2,0r-2,0xm44,-535v-1,0,-1,0,-2,1","w":542},"G":{"d":"342,-316v9,-25,31,-46,53,-59v-25,0,-18,-23,-7,-38v47,-63,136,-96,232,-104r-5,6v6,-3,9,6,9,13v50,-8,84,-31,133,-40r-50,65v-30,5,-38,27,-65,34v5,21,-5,43,-9,59v-28,13,-21,67,-22,103r-9,225v-3,62,-21,109,-70,129v-38,-34,-7,-140,-9,-209v-66,52,-138,91,-236,106v-73,11,-122,-32,-177,-50v-119,-39,-116,-267,-58,-376v56,-105,134,-198,254,-240v53,-19,109,-11,160,-3v3,-1,9,-2,16,-5v-11,39,-40,73,-88,69v-9,15,-30,1,-51,12v-17,9,-46,15,-55,36v-96,27,-90,191,-68,295v13,60,42,115,83,150r24,1r-9,11v18,12,42,17,62,27v53,-18,112,-36,146,-74v-2,2,-2,0,1,-5r30,-229r-89,39r-116,58v-7,1,-11,-1,-10,-6xm141,-501v18,-12,37,-25,51,-41v24,-44,68,-71,112,-95v-143,21,-211,131,-226,277v-6,53,6,115,27,154v-26,-112,-19,-187,27,-263","w":769},"H":{"d":"438,-607v1,-41,38,-66,66,-75v-1,9,3,14,2,23r27,-16v-10,12,-1,34,-1,53v0,43,-7,83,-9,124v-8,178,8,345,40,483v-7,21,-30,44,-47,57v-8,6,-15,-1,-19,3v-8,-34,-17,-69,-30,-97v-4,0,-11,0,-11,-3v-35,-54,-33,-166,-41,-246v8,-4,12,-11,8,-23v-10,7,-18,10,-25,10v-98,1,-186,5,-268,24v1,76,-17,175,12,230v1,1,2,1,4,1v-12,7,-5,25,-4,40v-12,21,-35,66,-66,58r-4,-9v-11,12,-20,7,-26,9v-13,-98,-35,-196,-32,-306v4,-126,5,-261,41,-360v11,-32,33,-63,71,-67v4,5,6,9,6,14v12,-10,26,-30,44,-30v7,25,-39,59,-6,78r-22,21v-14,71,-16,176,-18,258v78,-30,182,-42,286,-39r-4,5r8,0v-2,-79,1,-158,18,-220","w":575},"I":{"d":"16,-593v3,-80,137,-79,216,-92v28,-5,58,-1,88,5r-8,9r55,-11r-2,2v9,-3,24,-15,33,-6r-64,61r2,2v-15,4,-28,12,-46,13v-9,94,-26,178,-26,285v0,76,-1,158,8,231r2,-1v0,13,-7,20,-13,29v35,-7,72,-11,110,-12v3,50,-68,73,-127,73v-43,16,-93,17,-125,47v-8,7,-16,9,-21,9v-10,9,-23,16,-38,17v-7,-7,-1,-11,2,-18v17,-35,45,-58,77,-77v-11,-195,-2,-384,6,-575v0,-3,2,-7,5,-14v-47,5,-86,20,-134,23xm117,3v-17,5,-25,17,-34,31v15,-7,27,-17,34,-31","w":410},"J":{"d":"284,-570v-21,4,-41,7,-64,7v-12,-26,28,-36,36,-58v28,-20,51,-42,84,-57r-7,13v24,-8,51,-13,69,-26v6,-4,14,-1,18,-3r0,3v44,-11,92,-20,132,0v-6,59,-53,87,-103,104v0,86,-3,173,-3,255v0,39,11,70,19,102v-5,159,-86,294,-237,294v-146,0,-208,-117,-216,-261r66,-56v47,-26,52,53,68,87v21,45,33,105,105,92v47,-8,76,-45,77,-90v13,-29,10,-70,18,-106r0,12v0,0,-1,5,0,2r3,-74v2,-82,-24,-164,-4,-238r-51,8v-10,1,-13,-3,-10,-10xm364,-33v21,-42,40,-100,29,-161v-21,56,-37,120,-79,155v-12,10,-24,15,-39,15v-3,-1,-4,-11,-2,-15v-17,13,-38,23,-59,30v56,20,117,1,150,-24","w":565},"K":{"d":"130,-592v-12,71,-17,158,-10,240v104,-96,211,-188,330,-267v29,-19,63,-34,103,-38v16,7,-5,27,-10,34v-31,42,-85,57,-120,94v-53,57,-121,114,-173,169v122,52,221,120,303,216v-6,4,-5,15,-10,21v13,16,33,42,19,64v-1,37,-32,58,-57,71v-39,5,-49,-35,-67,-58r11,-11v-70,-52,-169,-75,-221,-144v0,-4,0,-7,1,-8r-100,-41r32,255r5,-4r6,47v-11,21,-39,66,-66,57v-11,-20,-15,-50,-20,-79v-11,7,-27,0,-34,8r-25,-212v14,-8,2,-36,4,-54v-6,5,-16,1,-12,-7v3,-6,6,-13,11,-20v-9,-107,9,-228,-10,-326r-8,6v6,-39,27,-67,59,-80v12,-13,24,-31,43,-35v8,-1,7,12,7,20v-8,19,-2,50,-2,76v5,-2,9,0,11,6","w":580},"L":{"d":"193,-69v83,-39,212,9,303,-33r-2,4v21,-4,52,-11,74,-6v24,14,4,28,-15,50r-10,-9v-38,59,-129,61,-227,58r-170,52v-27,7,-44,0,-69,3v-20,-10,8,-39,15,-48v-9,7,-21,21,-35,14v-12,-17,-6,-43,-7,-69v-11,5,-22,24,-37,15v-2,-68,33,-123,48,-177v12,-43,15,-79,39,-104v3,-21,8,-40,7,-66v-8,7,-30,15,-25,-7v13,-55,12,-128,10,-190v-9,-15,4,-15,6,-27r-8,4v20,-27,39,-74,83,-75v6,17,-6,31,-9,44v11,-8,19,-17,35,-15v5,5,10,11,15,19v-3,4,-12,9,-12,12v12,45,-1,89,-10,128v5,-1,8,1,9,7v-20,132,-2,279,-8,416","w":592},"M":{"d":"176,-665v7,20,4,37,-2,56r9,0v40,102,49,225,93,322v13,-72,48,-124,63,-194v1,-9,1,-16,-2,-23v16,-17,37,-29,45,-53v32,-55,52,-120,119,-140v15,17,-6,55,-12,74v49,140,6,373,73,505v10,21,16,45,29,63v-7,4,-7,11,-11,17v2,11,24,23,9,32v9,25,18,52,23,79v-9,20,-30,46,-50,57v-7,4,-14,5,-16,-1v-35,-74,-55,-157,-88,-232v-21,-48,-36,-105,-42,-166v37,-44,-7,-125,-5,-188v-27,60,-65,120,-56,208r9,-6v-12,33,-32,57,-64,70v-11,4,-13,-15,-13,-24v-11,25,-31,52,-54,65v-7,3,-12,3,-16,-1v-29,-66,-56,-134,-77,-207r-15,131r3,203v-11,24,-34,50,-57,62v-15,8,-28,38,-50,28v-19,-91,5,-207,14,-292v10,-95,-20,-209,48,-251v5,-28,21,-52,16,-84v14,-7,18,-29,12,-48xm353,-248v-5,-1,-6,1,-6,5xm500,-698r1,1v-1,0,-1,0,-1,-1","w":624},"N":{"d":"96,-697v9,-4,19,-7,26,-3v-6,13,10,39,14,51v8,-1,12,-1,16,-8v36,130,99,233,160,340v23,40,57,74,86,109v1,-149,-38,-326,8,-449v11,-29,29,-57,65,-60v20,46,-7,115,0,174v20,158,54,301,58,469v-2,6,-7,15,-16,27v5,30,-31,60,-61,66v-118,-130,-227,-269,-306,-438r19,163v3,75,19,170,-35,200v-6,53,-28,96,-76,109v-15,-1,-14,-30,-14,-44r1,-209r-1,1v-42,-125,-20,-263,-24,-414v-1,-29,6,-58,6,-81v20,-13,33,-45,58,-53v17,1,10,33,16,50"},"O":{"d":"72,-548v60,-75,124,-153,255,-158v23,0,42,6,58,17r6,-6v84,30,149,72,158,176v6,64,36,112,25,187v-21,142,-114,252,-236,294v-250,86,-375,-185,-305,-436v8,-28,22,-52,39,-74xm432,-209v58,-122,8,-315,-76,-377v-8,-3,-16,-9,-20,0v-31,-26,-78,-4,-112,10v-7,17,-32,21,-39,35v-61,116,-30,354,79,394v69,-3,137,-21,168,-62xm279,-91v133,12,207,-64,227,-178v-19,57,-65,92,-105,128v-23,21,-79,40,-122,50xm268,-641v-91,9,-151,56,-171,137v40,-64,96,-106,171,-137","w":588},"P":{"d":"84,-656v13,24,42,-3,62,-6v113,-56,303,-15,347,72v36,73,-31,140,-61,193v-34,60,-67,120,-124,159v-44,30,-93,52,-152,62r0,171v-14,25,-41,53,-63,72v-11,10,-18,5,-24,8r-3,-14r-16,16v-18,-45,-4,-126,0,-177v8,-154,-3,-300,-34,-426v-14,-57,9,-98,43,-122v7,-6,16,-9,25,-8xm347,-594v-49,-22,-126,-31,-190,-22r-9,180r5,125r6,-2v-6,4,-6,12,-5,23v4,-3,5,-20,10,-10v13,26,62,8,94,8v42,0,85,-17,100,-50v33,-73,19,-193,-27,-237","w":516},"Q":{"d":"409,-30v-23,18,-50,31,-91,30v-80,16,-171,9,-212,-36v-58,-64,-108,-146,-92,-273v22,-172,113,-291,244,-355v47,-23,109,-52,158,-15r21,12r-10,10v58,16,57,69,82,123v20,44,34,98,36,157v20,65,30,148,-5,199v-19,27,-33,64,-53,88v23,34,30,79,52,112v-13,20,-42,74,-71,54v-18,-28,-41,-73,-59,-106xm465,-131v22,-65,17,-148,4,-225v-36,-89,-82,-181,-187,-200v-81,17,-142,54,-170,124v3,105,-14,236,39,296v45,51,138,81,235,61v-9,-19,-16,-37,-24,-55v-15,-42,-37,-84,-33,-136v13,-24,29,-57,64,-56v11,4,10,16,10,30v0,3,1,4,4,3v5,64,33,111,58,158xm324,-628v-15,-2,-39,-3,-46,9v-46,6,-68,38,-97,62v33,-26,84,-50,134,-61","w":577},"R":{"d":"427,-532v-10,53,-47,84,-82,113v78,63,141,136,133,282v11,38,29,98,-2,124v-15,13,-30,43,-55,34v-8,-43,-8,-92,-20,-129r-17,-53r24,-23v-20,-73,-74,-128,-127,-169v-13,-1,-28,0,-28,-15r-116,40v-7,116,30,187,34,291v-15,18,-33,64,-66,54r-4,-43v-10,9,-21,22,-35,13v-23,-116,-6,-265,-12,-403v-2,-51,3,-111,-8,-158v-9,3,-16,4,-22,5v-10,1,-14,-2,-12,-8v23,-36,60,-69,103,-84r-8,10v78,-29,240,-67,284,17v28,13,9,57,30,80v3,7,5,14,6,22xm146,-574v20,54,-6,120,-6,182v71,-20,121,-61,172,-100v19,-15,34,-51,14,-77v-49,-17,-123,-30,-181,-15v2,4,6,7,1,10xm268,-420v33,-13,79,-27,93,-54r-7,-20v-23,28,-56,52,-86,74","w":506},"S":{"d":"100,-115v3,0,10,14,15,11v-15,11,4,34,16,32v48,10,89,12,138,5r126,-120v13,-50,11,-90,-5,-139v-98,15,-225,94,-328,36v-47,-26,-13,-107,-6,-160v18,-140,160,-168,259,-233v44,-29,104,-3,159,-11v12,-2,24,1,37,2r-57,66v-60,6,-117,23,-169,43v-26,17,-52,38,-78,62v-14,41,-32,89,-23,143v98,1,182,-68,282,-35v41,-7,68,2,91,17v14,23,14,45,9,74v-23,126,-121,184,-191,261v-49,54,-100,77,-179,93v-5,4,-9,7,-11,9r2,-7v-63,10,-110,-8,-157,-25v-7,-3,-13,-7,-18,-14r32,-30v-2,-6,-5,-12,-9,-18v8,-29,31,-61,65,-62xm367,-109r11,-27r-56,53xm470,-248v21,-8,7,-39,-2,-55v-1,21,-4,43,-9,65xm124,-510v15,-22,41,-36,56,-61v-26,19,-49,19,-56,61xm130,-442v-8,12,-21,29,-9,42","w":583},"T":{"d":"307,77v-41,-163,-28,-375,-27,-571v1,-27,31,-46,41,-67v-74,10,-138,27,-224,24v-15,4,-40,21,-55,10v0,-21,12,-32,24,-44v-14,4,-27,9,-42,10v-10,1,-14,-1,-11,-7v14,-22,39,-53,67,-60v34,-30,73,-58,140,-54r-13,15r163,4v50,-1,101,-9,148,-4v0,4,6,10,-2,20v40,6,106,-10,133,15v-11,49,-55,86,-115,70v-12,8,-17,15,-31,16v1,-1,2,-2,3,-5v-6,11,-16,-5,-28,-5v-26,-7,-63,-7,-95,-6v-35,163,7,365,25,521v-5,15,-23,38,-36,48r1,9v-10,26,-38,56,-66,61","w":662},"U":{"d":"108,-682v11,-10,34,-18,28,13r32,-31v9,58,-7,114,-7,188v0,31,1,62,1,92v2,103,18,192,53,264v9,8,19,13,29,20v5,-6,16,-5,15,-17v41,21,90,28,147,29v24,-116,-4,-247,6,-372v3,-29,3,-58,0,-88v18,-18,43,-29,56,-51v13,-21,34,-57,65,-56r19,-16v7,131,28,255,23,394v34,127,-50,213,-129,265v-75,49,-244,86,-322,19v-85,-73,-72,-249,-96,-384v-12,-67,-40,-178,18,-217v10,-20,30,-44,50,-54v6,-3,10,-2,12,2","w":598},"V":{"d":"97,-632v20,-12,32,-38,59,-38v7,0,6,10,6,18r63,177r41,125v21,66,44,131,74,192v42,-159,106,-299,174,-434v13,-25,32,-48,56,-64v12,-9,26,-3,24,15v17,-15,27,-29,50,-27v-4,62,-58,86,-74,138v-24,77,-57,149,-87,221r42,-13v-53,65,-105,130,-127,226v-29,26,7,55,-11,80v-11,17,-37,49,-59,40r-18,-26v-16,5,-33,31,-48,19v-10,-8,-16,-25,-11,-39v-68,-185,-168,-341,-217,-545v-11,-22,-31,-53,-12,-79v13,-17,29,-41,56,-40v8,19,14,37,19,54xm158,-664r1,-1v-1,0,-1,0,-1,1xm584,-645r-1,1","w":658},"W":{"d":"596,-614v4,8,4,17,7,25v-26,17,-20,70,-25,105r-42,319v3,52,5,113,-25,137v1,39,-26,53,-35,84v-11,18,-30,39,-55,43v-19,-9,-31,-42,-41,-60v-33,-63,-60,-130,-86,-199v-7,76,8,166,-40,207v-10,9,-28,29,-39,12v-6,4,-11,-7,-12,-16v-11,10,-20,14,-27,12v-22,18,-26,-4,-31,-21v-19,-61,-39,-123,-54,-185r-54,-229v-7,-41,-18,-99,-6,-140r-19,-78v15,-25,35,-52,66,-61v2,13,18,31,9,41r94,431r-1,-1v9,34,23,62,34,94v22,-64,16,-157,80,-180v9,-9,28,-24,41,-12v8,-4,16,-12,28,-9r89,215r9,-92v17,-177,-5,-390,115,-468v9,-6,12,6,10,16v0,4,0,8,-1,11v2,-1,6,-1,11,-1","w":615},"X":{"d":"256,-246v-1,0,-6,-11,-7,-5r-47,85v-15,29,-32,63,-41,95r15,-9v-15,38,-43,64,-70,91v-7,28,-37,53,-60,68v-6,3,-9,-2,-8,-12v-34,14,-27,-12,-13,-31v8,-11,24,-25,37,-40v47,-109,88,-210,151,-308v-62,-95,-110,-207,-168,-305v-11,-18,-21,-12,-17,-32v-14,-48,18,-83,50,-98v56,-9,57,72,79,112r86,152r32,72v60,-86,114,-181,186,-254v16,-17,28,-47,59,-46v2,6,2,11,-3,14v1,0,2,-1,3,-2v-62,131,-151,237,-214,362v49,92,115,165,164,257v15,29,64,61,39,98v-12,17,-31,45,-57,40r-56,-89r-52,-71v-32,-45,-62,-92,-88,-144","w":534},"Y":{"d":"444,-145v11,25,11,58,-8,76v3,51,-25,70,-53,91v-18,8,-21,-9,-27,-20v-12,10,-27,14,-40,25v-53,44,-116,99,-190,121v-57,18,-90,-12,-105,-50v4,-30,46,-77,79,-57v79,15,154,-35,217,-58r12,-25r-14,-151r-13,-75r-10,11v-110,-81,-176,-214,-262,-319v-6,3,-13,-6,-18,-11v10,-40,52,-69,89,-74v56,103,134,186,206,273v4,-17,10,-32,19,-44r-8,-170v9,-27,29,-56,61,-61r6,-7v-2,10,4,16,9,19r-9,9v4,179,25,346,47,509","w":465},"Z":{"d":"572,-11v-37,13,-87,10,-132,8v-59,11,-115,21,-168,33v-53,12,-106,27,-161,44v-4,10,-17,11,-29,12v-13,17,-29,40,-54,37v-4,-3,-2,-7,-2,-12v-7,2,-11,1,-10,-3v19,-50,29,-97,60,-148v39,-65,89,-132,132,-196r-64,65v-13,17,-65,42,-33,-3v19,-27,40,-53,62,-78v-51,17,-96,44,-161,47r25,-29v11,-37,46,-71,96,-62v39,-13,84,-19,119,-35v58,-82,121,-160,208,-212r21,-24v-130,14,-267,27,-374,64v-10,4,-16,7,-18,5v-2,-2,-2,-6,1,-11r-6,5v-3,-13,1,-25,12,-36v-11,1,-32,10,-36,-2v0,-20,21,-35,28,-45v-18,0,-52,13,-62,-1v10,-46,53,-74,114,-66v46,-7,95,-13,150,-11v102,-24,221,-19,319,-5r-2,2v7,2,15,4,19,8v1,1,0,0,-2,0v-12,2,-15,17,-24,24r33,-1r-57,66r-20,0v-20,30,-51,51,-73,79r-109,138v61,-6,137,-14,194,1v4,2,5,5,5,10v-14,44,-46,76,-108,60v-48,-1,-99,-8,-145,-2v-52,68,-85,143,-121,226v60,-54,149,-79,264,-76v62,2,114,-13,170,-18r-52,60v17,1,31,11,46,15v1,37,-34,48,-55,67","w":645},"a":{"d":"436,50v-18,29,-62,28,-62,-21v0,-36,-6,-61,-9,-94v-48,35,-121,46,-177,73v-27,13,-67,17,-91,-3v-40,-34,-97,-79,-80,-150v-13,-58,24,-83,47,-118v39,-58,87,-114,166,-130v28,-17,72,-52,113,-34v20,8,33,23,44,38v14,3,24,11,32,22v10,-8,24,-24,31,-8v7,40,7,86,7,128v0,26,9,57,-4,77v1,52,3,102,16,140v-9,25,-7,64,-33,80xm358,-145r-9,-128r-4,3v1,-18,-4,-30,-10,-41r-9,8v-4,-6,-2,-16,-5,-23v-35,-13,-80,-20,-120,-7v-38,12,-81,66,-106,111v-5,58,23,94,55,121v66,28,160,-14,208,-44","w":481},"b":{"d":"130,-341v47,-33,126,-92,194,-52v53,31,104,90,80,175v-13,45,-56,84,-86,114v-43,43,-101,80,-154,111v-29,17,-74,26,-113,14v-4,-10,-9,-20,-21,-22v-41,-135,-1,-332,13,-473r-11,-113v-22,-24,20,-54,37,-71v7,-6,15,-8,24,-7v10,-11,22,-25,39,-28v6,-1,6,10,6,17v7,-3,9,-4,12,4v-6,113,-37,208,-20,331xm158,-100v9,12,-9,18,-3,33r58,-21v22,-7,44,-18,66,-28v44,-38,18,-143,-34,-157v-36,-10,-81,-3,-109,10r14,151v1,4,4,8,8,12","w":423},"c":{"d":"370,-282v-2,-29,13,-66,-12,-79v-25,-14,-50,-23,-89,-22v-55,27,-121,79,-149,123v-34,53,36,77,54,119v63,75,235,38,286,-27v7,-8,26,-19,35,-27v5,3,11,2,8,15v-23,69,-90,100,-141,142v-46,38,-126,76,-191,35v-82,-52,-196,-124,-143,-249v11,-26,35,-51,61,-82v51,-61,114,-99,209,-120v36,0,69,-10,106,-4v12,-17,31,-45,52,-52v17,-6,12,30,12,45v0,20,-9,41,2,56v-3,13,-10,24,-19,33v-3,28,-9,51,-21,72v6,11,15,13,23,22r-65,62v-20,-16,-32,-21,-18,-62","w":516},"d":{"d":"488,-55v-13,25,-33,62,-69,59r-4,5v0,-11,-2,-25,-13,-21v-4,-23,-11,-43,-12,-68v-59,60,-137,82,-239,92v-68,6,-119,-22,-135,-72v-18,-54,27,-93,47,-134v48,-96,147,-161,251,-202v19,-7,47,-7,70,-2v6,-56,5,-116,17,-166v-2,-73,22,-130,89,-140v25,70,-16,139,-18,221r-6,199r6,58r2,-1v-5,46,15,96,10,150v3,10,4,17,4,22xm378,-313v-100,8,-181,58,-229,121v-34,44,-11,124,57,103v62,-19,129,-50,179,-81v-6,-46,-10,-92,-7,-143xm236,-306v-56,18,-96,71,-135,119v-3,7,-5,13,-6,20v36,-50,88,-103,141,-139","w":509},"e":{"d":"492,-117v-39,79,-138,98,-243,113v-118,17,-196,-23,-223,-115v4,-33,-21,-56,-12,-95v33,-147,129,-244,292,-244v43,0,101,11,115,45v20,21,39,74,26,104r18,5v2,31,-26,46,-46,60v-20,14,-56,10,-88,13v-86,8,-161,33,-236,55v22,89,145,128,254,96v1,-1,1,-1,-1,0r-18,4v-2,1,0,0,0,0v43,-13,97,-16,128,-42v8,-7,18,-13,32,-11v1,5,2,9,2,12xm96,-237v84,-35,187,-54,281,-77v-17,-80,-143,-80,-204,-36v-32,23,-63,51,-81,87v0,10,2,17,4,26xm105,-334v17,-16,34,-29,53,-43v-25,10,-41,24,-53,43","w":504},"f":{"d":"199,21v-9,12,-39,48,-53,23r-6,-154v1,-19,-4,-46,4,-60r1,-133r-88,21v-7,-13,-34,7,-41,-11v15,-56,72,-76,131,-89v6,-50,-16,-103,18,-134v-11,-33,22,-55,38,-75v44,-57,139,-118,231,-77v23,24,64,63,55,111v-11,19,-33,50,-61,52v-18,-12,-26,-37,-48,-45v-16,3,-34,-12,-47,-15v-20,15,-52,18,-57,48v10,39,-4,88,-9,125v43,2,94,-4,129,6v7,3,10,7,10,12v-42,28,-69,89,-144,68v-5,87,6,165,18,237v-3,9,-7,18,-13,26v1,28,14,55,-3,75v-11,13,-24,32,-40,39v-31,13,-17,-29,-25,-50","w":519},"g":{"d":"166,-54v-44,-4,-89,-14,-107,-45r-24,18v11,-70,21,-129,67,-169v79,-68,162,-131,290,-148v81,-10,128,29,145,91v22,3,3,23,-2,33v-6,14,4,38,-7,58v-40,71,-50,227,-18,308v0,32,-32,49,-49,68v-32,24,-97,10,-145,16v-82,10,-178,-2,-251,15r-11,12v-4,-2,-9,-5,-9,-11v-11,6,-22,13,-33,21r25,-54v89,-77,231,-59,369,-87r5,-165v-54,35,-115,77,-206,65v-16,-3,-29,-17,-39,-26xm448,-237v-28,-22,-51,-45,-95,-48r-9,8v-3,-4,-4,-7,-5,-10v-84,-3,-175,6,-191,72v-14,60,49,60,75,93v79,-5,150,-30,203,-60","w":560},"h":{"d":"352,-398v10,0,4,12,2,18r39,-6v14,-10,14,-3,24,-1v15,3,0,25,-7,29v-5,72,6,137,9,208v2,36,27,95,1,127v-13,16,-29,47,-56,39v-5,-9,-8,-18,-9,-29v-1,0,-1,0,-2,1v1,-13,-6,-28,-9,-40v-10,2,-5,-11,-7,-19v-16,-66,-39,-155,-34,-237v-61,-11,-97,32,-140,53v0,60,1,118,11,167v11,53,-24,92,-67,104v-5,-2,-8,-8,-10,-17v-9,13,-33,43,-52,33v8,-200,-18,-438,9,-633v-2,-5,-1,-18,-8,-13v12,-29,30,-65,68,-66r5,16v10,-13,27,-24,41,-24v-14,84,-11,196,-13,289v8,20,12,42,15,66v53,-31,112,-63,190,-65","w":458},"i":{"d":"59,24v-16,-86,-18,-197,-19,-294r-3,3v-4,-66,17,-103,61,-123r23,-22r6,25v10,-7,23,-19,28,-4v-3,124,-7,247,20,349v1,0,2,-1,3,-2v-4,29,-29,49,-48,64v-7,4,-12,6,-17,4v-9,10,-31,19,-32,-3v-10,7,-17,8,-22,3xm52,-406v-1,-54,-7,-112,18,-146v9,-28,33,-56,63,-62v8,1,6,11,6,19v9,-6,17,-13,21,0v3,14,-2,39,7,45r-17,20v-6,51,-36,79,-62,110v-8,9,-22,23,-36,14","w":203},"j":{"d":"297,-473v8,-5,28,-28,37,-12v1,59,2,119,8,177v10,95,-8,208,14,287v5,82,-57,108,-100,151v-38,38,-86,84,-163,66v-42,-10,-107,-57,-65,-103v10,-28,37,-52,60,-63v15,4,20,25,39,26v29,11,53,46,87,46v19,-15,25,-50,30,-79v-11,-89,3,-180,3,-268v0,-31,-5,-61,-9,-92v-5,-48,-27,-107,10,-135v11,-9,23,-22,41,-20v2,6,5,12,8,19xm279,-676r-1,7v10,-8,23,-25,41,-22v12,6,-1,29,0,41v7,0,7,6,11,9v-31,33,-61,71,-100,95v-23,14,-22,-17,-20,-36v2,-14,2,-26,3,-37","w":369},"k":{"d":"65,33r-24,-85v-4,0,-11,0,-11,-3r-5,-175v-7,3,-11,3,-12,-2v-2,-4,6,-18,12,-27v1,-62,4,-125,9,-188v4,-48,10,-96,20,-138r-6,4v8,-60,31,-110,78,-132v11,-5,11,12,9,24v14,-12,27,-32,47,-35v9,4,-1,28,-8,31v-31,90,-26,221,-39,329v86,-60,171,-123,270,-168v14,28,-33,63,-56,75v-29,36,-58,61,-98,86r-8,12v9,-9,21,-21,38,-18v24,58,28,142,54,197v26,56,61,111,66,184v-12,22,-33,60,-64,58r-2,3v-46,-103,-68,-224,-131,-309v-17,-23,-31,-50,-35,-83v-14,9,-26,17,-37,26v-3,89,3,168,21,243r2,-2v-12,41,-42,72,-74,94v-8,6,-14,-7,-16,-1","w":422},"l":{"d":"69,41v-34,-174,-21,-384,-21,-584v0,-53,9,-92,40,-116v14,-29,32,-60,69,-66v20,23,2,74,-3,105r-30,178v-1,127,12,243,32,353r5,-4v0,25,-15,36,-27,52r2,27v-19,17,-34,59,-67,55","w":208},"m":{"d":"134,-36v-1,35,-27,58,-50,72v-24,14,-19,-24,-25,-43v-7,3,-12,2,-16,-1r-4,-107v-4,-89,-21,-172,-3,-261r65,-50r-2,9v10,-10,24,-24,42,-21v16,27,-7,69,-11,97v25,-34,85,-85,124,-90v17,-2,30,5,39,20v16,-3,35,-9,46,-1v12,15,21,33,26,54v57,-27,148,-83,224,-45v7,21,-9,54,-9,79v0,102,26,236,-49,281v0,4,-7,7,-8,7v3,-3,6,-5,7,-7r-36,33v-1,1,0,1,3,-1v-5,4,-18,16,-27,8r9,-167v5,-60,12,-126,30,-170v-52,5,-93,21,-136,35v6,77,-9,150,-12,223r5,-4v1,36,-35,65,-61,76v-20,-5,-20,16,-35,22v-9,7,-17,9,-22,4v-17,-115,19,-259,-16,-362v-26,6,-58,18,-78,28r-32,42v-6,80,-7,172,8,243xm365,-357v-3,11,4,8,5,2v0,-2,-2,-3,-5,-2xm377,-361v1,0,3,-1,1,-1","w":619},"n":{"d":"194,-77v0,19,12,23,0,41v-12,18,-36,48,-59,42v-7,-14,-13,-30,-18,-47v-12,17,-29,37,-53,39v-19,-123,-29,-290,-5,-416v11,-18,33,-45,53,-54v22,1,7,47,9,73v11,-11,26,-29,47,-26v6,25,-1,54,-3,79v53,-45,113,-100,211,-88v61,8,53,95,63,158v9,57,-5,119,9,170v3,13,3,26,1,39v-30,17,-46,52,-79,65v-15,6,-10,-17,-8,-29v-7,8,-25,20,-31,4v9,-48,40,-106,27,-173v-12,-59,-29,-119,-74,-142v-45,0,-90,32,-121,49v1,82,6,153,29,218","w":484},"o":{"d":"322,30v-179,22,-351,-44,-300,-230v26,-95,94,-166,180,-206v28,-13,55,2,82,2v122,0,175,105,204,206v1,116,-70,168,-137,218v-8,6,-19,8,-29,10xm389,-114v46,-79,-50,-142,-109,-174v-36,-19,-81,-31,-127,-15v-47,40,-77,131,-31,189v50,65,215,54,267,0xm361,-31v23,-6,37,-19,47,-37v-14,14,-31,25,-47,37","w":502},"p":{"d":"75,242v-50,-123,-32,-310,-53,-463v-7,-52,-22,-118,12,-151v25,-24,45,-51,78,-66v5,-2,10,2,12,6v59,-21,148,-63,201,-10v99,26,154,150,118,269v-14,46,-55,73,-89,101v-49,40,-115,60,-177,86v0,60,-5,126,17,166r-38,36v-2,30,-29,54,-50,68v-10,7,-18,1,-18,-9v-14,3,-14,-17,-13,-33xm331,-236v-10,-54,-32,-122,-82,-140v-27,-1,-68,4,-84,13v-9,97,-1,189,5,283v16,-8,28,-7,46,-13v43,-42,110,-66,115,-143xm389,-183v-32,53,-97,76,-143,115v-2,2,-4,6,-6,9v59,-31,151,-33,149,-124","w":466},"q":{"d":"429,297v-6,-110,-1,-227,7,-335v-91,35,-268,67,-352,8v-14,-10,-22,-25,-27,-40v-26,-18,-28,-51,-42,-76v-6,-113,99,-163,155,-230v30,-35,71,-78,133,-59v9,2,19,4,28,5r-17,19v113,-22,198,26,232,102v12,-6,14,3,9,15v-1,9,7,19,8,27v16,-2,9,15,8,33v7,46,-5,81,-23,110v-10,97,-33,215,-12,316v-13,19,-42,23,-41,56v-21,13,-32,59,-66,49xm447,-214v-33,-96,-248,-149,-319,-49v-11,34,-16,66,-14,97v51,36,99,75,180,64v57,-8,110,-41,159,-63","w":586},"r":{"d":"73,56v-26,-78,-22,-186,-41,-269v-7,-30,-8,-61,-9,-92v33,-22,39,-76,79,-92v16,-6,13,5,13,19v8,-12,20,-22,32,-31r-3,34v9,-11,17,-23,28,-32v2,-1,2,1,0,5v-8,22,-6,46,-8,73v42,-49,134,-115,211,-63v47,8,60,54,65,104r-23,0r-23,52v-7,8,-24,8,-22,-8v2,-19,-23,-5,-30,-24v-38,-46,-146,-20,-177,14v-1,60,21,117,37,163r-10,10v6,26,13,51,21,73v-9,6,2,13,5,17v1,-1,3,-2,4,-3v-5,29,-31,52,-52,66v-32,8,-33,-32,-46,-55v-11,13,-28,37,-47,34","w":460},"s":{"d":"34,-250v-13,-25,23,-51,43,-64v-2,-3,-3,-6,-2,-9r-15,3v-17,3,-10,-10,-5,-18v50,-86,177,-116,314,-104v35,3,73,10,103,22v2,26,-23,38,-36,53v-19,14,-41,18,-69,20r-12,11v-2,-3,-4,-7,-7,-12v-38,-4,-77,-8,-108,4r2,23r174,42v56,10,95,56,76,123v11,15,-16,31,-24,41v-18,22,-41,35,-66,50v-68,41,-158,75,-242,97v-28,8,-52,6,-69,-1v-7,-8,3,-22,5,-27r-78,20v-8,-26,24,-42,39,-58v-15,-31,28,-61,53,-74v12,-6,23,-6,33,0r-14,15v64,6,158,10,191,-29r19,-13r-14,-19r-133,-30v-8,-7,-2,-15,3,-23r-114,-11v-9,-11,4,-24,11,-32v-20,-5,-39,5,-58,0","w":513},"t":{"d":"286,-522v32,19,10,92,25,140v30,-5,64,-2,96,-5r-3,3r42,4v-3,3,13,5,5,14v-21,40,-66,61,-131,59v12,94,-1,202,8,299v-10,22,-39,66,-66,57r-3,-16v-12,12,-27,35,-47,27v-23,-66,-12,-160,-18,-242v-3,-35,-2,-70,-1,-106r-30,5r-18,21v-27,-1,-57,6,-81,-1v-7,-5,3,-24,-11,-17v-10,1,-11,0,-9,-9v14,-66,91,-62,150,-82v-4,-45,7,-75,33,-96v5,-24,37,-49,59,-55","w":488},"u":{"d":"33,-336v8,-30,29,-60,63,-63v13,-15,29,-27,50,-33v13,7,2,36,-1,48v8,-7,15,-11,21,-12v6,-1,8,4,5,15v-28,94,-6,229,28,302v40,-6,89,-2,130,-5v15,-57,18,-137,-6,-186r8,-8v-3,-32,-20,-81,4,-107v14,-15,27,-39,54,-37v8,18,13,38,17,60v7,-6,18,-1,16,3v6,32,-2,69,1,104v7,75,22,154,8,233v-10,20,-29,46,-49,55v-24,11,-17,-23,-20,-42v-5,4,-17,0,-20,-1v-7,5,-13,9,-18,10v-5,2,-7,-3,-6,-12v-55,7,-146,28,-206,15r-22,2v-5,-5,-1,-13,1,-18v-61,-27,-55,-133,-51,-217v-6,-33,-10,-67,-7,-106","w":463},"v":{"d":"274,-91v21,-69,34,-148,77,-196v19,-63,41,-126,87,-161v15,-11,35,-11,30,14v-27,119,-82,214,-118,324v-15,45,-40,82,-78,105v-6,3,-9,2,-10,-3v-16,8,-29,41,-53,29v-46,-45,-73,-113,-92,-183v-27,-50,-48,-105,-85,-146v-40,-44,-2,-103,43,-112v10,-9,23,-22,40,-19v-1,-1,-1,-2,-1,-3v0,-1,0,-2,1,-1v17,63,46,116,60,180r43,70","w":481},"w":{"d":"481,-14v-24,23,-41,79,-83,76v-45,-77,-74,-185,-80,-295r-24,74r6,-4v-20,80,-30,172,-106,197v-4,1,-4,-3,-4,-10v0,-4,0,-7,1,-9v-10,9,-26,33,-44,22v-3,-17,3,-31,7,-44v-6,0,-8,-2,-10,2v-1,-4,0,-9,-2,-12v-12,9,-27,27,-45,19v-48,-88,-36,-240,-85,-328v30,-15,16,-67,47,-86v9,-10,27,-19,40,-17v0,19,6,33,8,50v12,-10,28,-38,47,-30v1,0,2,-1,3,-2v0,103,29,190,48,275r46,-94v27,-51,54,-103,110,-126v4,0,5,3,4,10r20,-16v-3,25,-2,49,-1,76v4,0,6,0,6,3v22,48,30,108,46,161v18,-99,48,-188,94,-261v14,-22,27,-39,57,-40v13,85,-58,168,-65,263v-1,17,-8,33,-13,48v-5,37,-13,69,-28,98","w":605},"x":{"d":"70,50v-18,1,-33,34,-57,26v5,-64,49,-103,83,-142r84,-97v-44,-64,-103,-122,-130,-201r65,-62v3,13,10,26,15,38v36,-13,57,23,77,46v22,25,39,62,57,93v45,-51,88,-105,142,-147v12,-9,34,-24,44,-12r-4,13v10,-4,19,-2,13,11v-35,80,-106,132,-160,195v40,48,73,102,112,152v10,4,30,24,15,43v-11,14,-26,35,-42,42v-25,11,-28,-18,-42,-28r-23,-31v-5,2,-10,3,-15,3v-34,-23,-55,-73,-82,-103v-29,32,-56,63,-78,101r6,-4v-21,30,-40,80,-81,72v0,-3,-1,-6,1,-8","w":473},"y":{"d":"154,-108v-40,-80,-121,-136,-141,-227v7,-30,37,-51,57,-69v16,-14,33,2,19,17r1,6v9,-4,16,-6,22,-5v68,52,97,140,139,218r34,36r74,-135v25,-64,68,-113,115,-155v6,-6,13,-8,18,-9v5,-1,6,4,3,15v-58,110,-108,229,-151,354v15,36,-25,52,-30,86v-19,50,-45,96,-58,152v-8,37,-38,70,-69,86v-5,2,-8,-2,-7,-11r1,-5v-9,3,-25,11,-23,-4v4,-33,17,-62,31,-88v4,-53,27,-105,42,-147v-27,-30,-57,-76,-77,-115","w":509},"z":{"d":"64,-13v-15,12,-29,25,-50,19v-5,-11,1,-25,9,-35v-2,0,-7,9,-10,5v8,-44,56,-63,92,-79v19,-20,44,-34,64,-53v63,-61,125,-133,195,-184v-77,-11,-143,22,-224,20v-3,-3,-4,-7,-3,-11v-35,9,-72,21,-114,17v-12,-26,24,-46,40,-59v57,-44,148,-45,244,-45v70,0,136,-29,210,-31v6,3,6,3,5,10v-4,16,-12,28,-25,40v2,19,-21,22,-17,45v-31,59,-97,87,-149,124r-90,64r-41,35v58,-16,130,-17,185,-33v45,-13,102,-22,151,-11v-11,95,-148,86,-251,92v-69,21,-132,50,-197,74v-12,4,-21,3,-24,-4","w":549},"|":{"d":"30,-627v-6,-54,28,-86,63,-95v29,-7,16,20,20,45v18,-2,5,31,7,51v-22,174,-19,388,20,540v3,10,-3,22,-8,29v9,45,-23,68,-50,87v-6,3,-10,2,-14,-1v-31,20,-34,-22,-40,-41v-17,-57,-5,-134,-12,-199v-12,-124,4,-263,4,-384v9,-5,5,-22,10,-32","w":152},"~":{"d":"321,-220v-59,-29,-115,-74,-150,-128r-37,47r5,-2v-12,48,-59,85,-97,108v-5,2,-10,0,-11,-4v-5,3,-10,5,-14,5v-13,-19,20,-47,28,-67r23,-57v33,-74,72,-146,146,-176v43,-17,68,26,86,54r65,98r91,-88v25,-20,50,-48,85,-56v-11,15,19,1,10,23v-26,63,-93,90,-119,154v-20,30,-39,80,-83,78v-12,10,-21,6,-28,11","w":564},"[":{"d":"100,-35v55,-30,134,-64,212,-37v-12,83,-123,74,-198,92v-23,5,-54,22,-72,10v3,-21,26,-32,36,-47v-19,13,-40,16,-44,-15v-20,-143,-39,-349,7,-479v-6,-84,3,-162,80,-171r-16,19v20,-7,42,-12,63,-17r-9,11r87,1v22,-5,48,-18,71,-11v-7,54,-63,76,-124,77v-19,6,-41,11,-62,14v-17,121,-3,265,-9,398v-1,32,13,71,-2,90v3,30,-9,46,-20,65","w":330},"\\":{"d":"27,-610v-32,-43,4,-94,50,-102v32,37,63,83,81,137v68,200,198,341,309,500v2,35,-27,58,-49,74v-7,4,-15,5,-17,0v-36,-54,-80,-95,-120,-147v-89,-116,-153,-250,-238,-369v-13,-19,-16,-47,-25,-70v0,-10,4,-17,9,-23","w":479},"]":{"d":"78,10v-10,7,-33,16,-33,-3v-17,3,-22,-11,-12,-21v25,-43,57,-64,112,-73r-14,18r35,-13v-11,-157,32,-289,34,-446v0,-23,1,-55,7,-80v-63,-2,-136,32,-191,5v-10,-29,32,-48,49,-64v56,-17,152,-33,215,-12v6,16,-8,22,-9,38v21,0,7,33,5,50v-1,1,-2,2,-3,2v14,172,-13,343,-14,510r1,-1v-2,4,-1,11,-1,17r15,-8v-22,31,-32,74,-75,84v-9,-1,-5,-15,-6,-24v-39,10,-87,0,-115,21xm163,-76r4,-2","w":295},"^":{"d":"161,-537v-48,66,-57,169,-122,218v-6,4,-13,6,-20,7v-19,-27,14,-61,19,-88r-3,1v19,-32,33,-68,51,-101v8,-75,41,-130,101,-158v13,-6,25,1,20,16r17,-13v-5,92,48,145,52,233v7,23,19,51,0,71v-14,15,-30,47,-57,39v-15,-70,-47,-125,-52,-204","w":298},"_":{"d":"76,-59v39,-7,72,-25,119,-18v65,-12,161,-22,223,-1v4,2,7,6,9,12v7,4,19,7,22,11v-3,48,-50,76,-107,63v-68,26,-124,-24,-193,-5v-24,7,-55,24,-83,21v-6,6,-24,14,-32,4v0,-10,2,-16,7,-25v-10,2,-29,10,-27,-3v12,-27,38,-52,65,-64","w":462},"`":{"d":"285,-498v6,30,-41,74,-68,61v-10,6,-19,9,-23,3v-50,-65,-147,-113,-182,-192v5,-28,25,-41,43,-58v8,-7,22,-11,29,-3r17,-13v12,103,135,132,184,202","w":299},"\u20ac":{"d":"348,-541v61,-31,211,-67,247,11r-65,62v-20,-64,-155,-44,-186,-6v-9,12,-14,29,-17,49r108,-5v30,-1,33,12,19,31r4,0v13,25,-34,53,-53,66r-81,7r4,42r147,-4r-2,2v45,-2,23,43,3,56v-22,33,-75,25,-128,27v8,19,16,38,31,50v77,20,162,0,215,-28r-1,1v11,-3,15,-1,14,4v-7,19,-33,45,-48,55v-76,50,-233,73,-323,15v-23,-15,-33,-56,-37,-93v-46,-5,-94,8,-130,8v-18,0,-12,-11,-27,2v-9,-1,-15,-6,-18,-13v10,-49,60,-75,124,-65v14,-7,32,-5,49,-9v-1,-17,3,-38,0,-53v-63,-11,-119,19,-181,10v4,-75,117,-94,208,-95v27,-49,76,-102,124,-127","w":619},"\u201c":{"d":"171,-659v-12,28,-39,46,-57,65v-21,61,42,122,1,175v-19,25,-57,44,-76,9v-39,-36,-27,-134,-4,-182v21,-44,70,-94,119,-115v14,-5,28,-4,41,1v0,25,-12,31,-24,47xm311,-685v8,-5,24,-13,27,1v11,-4,28,-3,19,11v-11,29,-42,47,-65,64v-21,29,-21,85,-6,119v-13,20,1,68,-26,86v-16,19,-59,51,-66,8v-7,-39,1,-81,9,-114v-1,-73,56,-139,108,-175","w":372},"\u201d":{"d":"17,-605v-14,-37,50,-80,93,-66v94,30,78,269,-20,276v-9,-12,-4,-40,9,-44r2,-11v-10,10,-25,28,-42,21v6,-77,9,-138,-42,-176xm231,-357v-1,-92,14,-205,-28,-267v10,-37,38,-70,76,-75v48,43,49,148,25,217v-7,18,-8,39,-7,64v-12,22,-32,58,-63,58","w":332},"\u2019":{"d":"107,-701v69,19,84,115,50,182v-11,57,-32,112,-94,118v-9,-17,8,-34,13,-47v-62,7,9,-122,-51,-154r-9,9v-11,-32,17,-50,34,-68v9,-19,36,-41,57,-43r0,3","w":188},"\u2018":{"d":"160,-689v28,37,-35,62,-57,88v-8,42,27,62,31,101r12,5v-15,12,-14,29,-28,47v-21,27,-80,55,-98,6v-18,-51,6,-101,25,-140v23,-47,59,-99,115,-107","w":183},"\u2026":{"d":"361,-138v20,-19,71,-23,98,-7v29,-4,31,33,19,55v-8,17,-21,33,-38,46v-21,31,-53,61,-93,71v-18,4,-34,-4,-36,-20v-47,0,-43,-63,-19,-92v17,-21,42,-45,69,-53xm79,-125v51,-4,106,-70,135,-5v22,48,-27,83,-56,108v-27,23,-48,40,-92,40v-9,-1,-18,-8,-22,-17v-44,-13,-34,-75,-4,-100v12,-10,24,-20,39,-26xm661,-148v27,0,47,30,37,58v5,5,-1,8,-5,12v-22,42,-66,80,-119,89v-21,3,-44,-6,-48,-25v-34,-47,35,-101,65,-127v18,-16,48,-22,70,-7","w":715},"!":{"d":"31,-122v-11,-33,-11,-81,-4,-119r-9,-245r1,-130v9,-22,32,-48,53,-58v14,-7,14,7,13,21v10,-10,23,-20,33,-12r0,7v8,-8,19,-15,24,-2r0,208v0,82,8,157,22,218v3,13,8,24,17,33r-43,25r18,18v-9,11,-36,33,-47,12v-11,11,-28,9,-31,-8v-10,11,-27,32,-44,28v-1,1,-2,3,-3,4xm145,6v-1,35,-28,58,-51,72v-19,12,-20,-15,-24,-27v-9,7,-20,18,-32,11v-11,-22,-14,-39,-20,-65v3,-19,19,-13,30,-28v12,-16,33,-48,59,-44v4,6,8,16,13,29v9,-4,16,-6,23,-5v6,20,17,30,20,52xm30,-265v0,-1,0,-1,0,1r0,2r0,-3","w":199},"\"":{"d":"24,-440v-11,-54,-9,-115,-12,-175r66,-57r0,13r2,-1r1,23v6,-4,13,-4,20,-2v15,56,-7,162,23,208r-62,65v-12,-11,-17,-29,-20,-50v-5,3,-9,-2,-11,0r-3,-28xm229,-650v15,51,-3,140,12,185r-43,25v8,9,27,16,10,26v-9,5,-21,19,-32,11v-2,-2,-4,-9,-5,-20v-44,-20,-11,-93,-17,-142v-6,-45,28,-70,59,-87v6,-3,11,-1,16,2","w":253},"#":{"d":"158,-35v-21,-43,1,-105,-1,-159v-30,10,-60,36,-98,29r4,-4v-27,1,-12,-23,-2,-33v27,-29,61,-48,100,-64r-2,-91v-46,17,-98,31,-144,35v-7,-8,4,-17,5,-25r55,-30r-3,-11v31,0,61,-19,84,-30r-8,-120r-7,6v-2,-43,21,-65,47,-82v10,-6,23,-6,24,6v9,-8,27,-29,35,-12v7,55,4,120,-2,177v26,-5,54,-8,82,-11v-8,-97,17,-176,86,-205v3,0,5,2,6,6r-14,195v29,-1,64,-8,91,-4v3,27,-22,39,-36,53v-14,14,-34,16,-57,19r6,79v17,0,33,1,50,3v19,-5,78,-13,59,20v-18,31,-49,58,-102,51r3,23r-13,11r-5,132v-12,22,-32,58,-63,58r-3,3r-10,-220r-88,16r-2,140r-66,57r0,-19xm241,-370r-2,98v29,-10,57,-19,89,-26v1,-28,7,-56,5,-84","w":533},"$":{"d":"185,-591v-13,-50,21,-81,54,-99v16,-4,9,14,12,28v4,17,8,33,11,48v38,-9,78,-11,119,-7r-14,16v18,5,51,8,35,33v-11,16,-30,40,-48,50v-11,6,-22,-2,-15,-12v-23,-2,-45,-13,-67,-16v6,33,8,70,9,108v90,12,235,26,187,136v-28,64,-91,104,-152,140v0,34,5,71,-16,89v13,47,-20,74,-48,93v-7,4,-12,4,-16,0v-10,-43,-12,-90,-17,-136v-47,20,-82,14,-127,4r10,-12v-26,-2,-43,-31,-65,-33v4,-43,55,-85,91,-51v19,17,50,24,83,14r-2,-163v-35,3,-76,9,-112,8v-41,-1,-93,-10,-82,-56v0,-86,79,-133,137,-169v10,-6,22,-9,33,-13xm288,-363r22,131v30,-14,65,-25,91,-43v4,-64,-59,-76,-113,-88xm84,-460v20,38,70,2,114,10v-4,-29,-7,-58,-9,-87v-41,19,-86,38,-105,77xm344,-539v0,1,3,-2,3,-2","w":490},"%":{"d":"480,13v-89,44,-212,-16,-171,-122r-13,5v55,-77,89,-188,235,-161v41,8,67,39,85,71v29,87,-42,141,-94,182v-13,10,-28,18,-42,25xm17,-454v-17,-44,17,-83,38,-106v39,-42,94,-104,180,-84v30,7,72,50,57,101v-25,84,-89,146,-186,161v-53,9,-89,-18,-86,-75xm132,-53v-24,42,-53,95,-100,113v-20,-3,-10,-31,-3,-48v44,-115,131,-189,198,-281v85,-117,157,-243,264,-339v17,-14,36,-29,61,-32v13,2,2,18,-1,23r-47,67r-74,98v-102,129,-213,252,-298,399xm545,-72v9,-14,14,-34,10,-50v-28,-33,-107,-34,-162,-27v-11,54,13,108,83,95v23,-4,52,-11,69,-18xm107,-543v-17,41,-9,105,49,94v21,-4,45,-25,59,-37v10,-53,-40,-81,-90,-70v-3,7,-11,9,-18,13xm357,-411r69,-90v-25,28,-47,59,-69,90xm402,-201v-9,3,-13,13,-18,23v6,-6,16,-19,18,-23","w":636},"&":{"d":"437,-137v-86,73,-165,169,-304,169v-48,0,-78,-22,-95,-53v-40,-16,-25,-89,-15,-129v31,-117,123,-197,207,-263v-27,-61,-69,-147,-39,-236v4,-10,1,-23,2,-31r-3,2v11,-25,36,-58,64,-63v43,-47,90,-68,163,-78r-6,8v24,-5,61,-11,77,5v42,43,27,119,6,172v-36,89,-82,153,-141,217v25,46,66,105,102,142r43,-41v30,-28,67,-61,104,-78v16,-8,29,-8,40,-1v-5,54,-48,89,-72,128v-30,5,-49,19,-67,36v32,24,64,56,104,70r-42,63v-3,1,-8,2,-15,2r-18,20v-40,-12,-58,-49,-92,-66v-2,2,-5,2,-3,5xm141,-131v16,20,34,43,72,41v65,-4,93,-53,131,-85r7,26r39,-27v-52,-42,-98,-103,-129,-166v-4,-3,-9,-13,-14,-11r-80,121v-11,24,-36,69,-26,101xm298,-721v-19,34,-9,66,-6,110v21,23,29,67,34,106r33,-45v25,-38,85,-108,46,-166v-34,-13,-73,-21,-107,-5xm358,-464v-6,7,-13,13,-18,21xm295,-719v-3,0,-5,5,-5,7v1,-3,3,-5,5,-7xm513,-240v1,-1,0,-1,-1,0v0,0,0,2,-1,2v1,0,1,-1,2,-2xm165,-284r-1,3v0,-1,0,-1,1,-3xm282,-671v0,1,-1,1,0,2r0,-2","w":655},"'":{"d":"111,-463r-4,70v-20,14,-35,57,-66,48r-1,-86v-13,-65,-29,-145,-16,-221r65,-50v-1,7,-2,11,-2,14v6,-3,12,-4,19,-3v9,-8,21,-18,36,-15v17,43,5,129,7,188v-18,14,-19,41,-38,55","w":172},"(":{"d":"96,-568v19,-24,52,-42,66,-73v3,4,6,6,10,1r-8,-9v18,-14,29,-37,58,-37v2,29,-27,43,-34,68v-54,82,-98,195,-98,319v0,92,57,154,96,218v29,47,-15,80,-45,95v-46,1,-57,-44,-83,-70v-83,-137,-43,-412,38,-512","w":236},")":{"d":"139,-286v-14,-99,-42,-186,-84,-257v-13,-23,-58,-43,-35,-79v12,-19,36,-52,64,-38v-14,9,6,23,11,29v41,-17,56,27,66,61v89,125,67,413,-39,498v-26,21,-49,61,-86,68v-3,-2,0,-11,12,-26v51,-65,73,-157,91,-256","w":231},"*":{"d":"131,-333v-28,-19,-89,6,-118,-13v0,-46,59,-68,82,-91v16,-6,33,1,46,6v-4,-18,6,-32,6,-51v10,-11,1,-28,17,-40v10,-13,26,-30,40,-38v8,-5,14,0,14,5v5,47,-3,90,0,141r90,-64v9,-4,13,6,9,14v17,-6,11,5,7,14v-19,37,-55,57,-89,80v20,30,54,56,72,84v-4,26,-29,49,-49,60v-7,4,-13,4,-16,0r-71,-76v-14,18,-19,44,-34,60v-2,2,-2,1,-1,-4r-45,58v-6,2,-18,4,-17,-6v-9,4,-22,12,-19,-5v21,-48,46,-93,76,-134","w":341},"+":{"d":"369,-443v18,0,44,-6,56,3v-7,61,-74,76,-146,73v16,64,33,146,-28,176v-4,29,-31,53,-52,67v-10,6,-18,-3,-17,-12r-8,8r1,-228v-54,6,-100,25,-159,25v-11,-22,16,-35,25,-53v24,-28,58,-50,113,-40r21,-3r4,-69v-14,-72,41,-114,93,-132v11,3,1,21,-2,27v-12,49,-18,111,-5,165v35,-4,69,-7,104,-7xm278,-240v-9,6,-26,10,-24,26","w":438},",":{"d":"69,166v-11,-1,-15,1,-12,-10v5,-27,29,-43,37,-65r-5,15r64,-44v17,-29,15,-64,6,-100v-16,10,-32,16,-49,25v-1,-3,12,-4,10,-6v-36,23,-110,19,-106,-36v-3,-21,7,-43,12,-59r25,-16v27,-39,114,-89,164,-44v10,0,22,24,20,38v27,62,24,141,-15,188v-35,43,-89,94,-151,114","w":272},"-":{"d":"375,-432v22,1,39,6,58,10v-2,47,-54,76,-104,58v-102,7,-225,-2,-307,23v-18,-2,-4,-21,2,-29v13,-15,27,-41,50,-46v65,-53,206,-60,313,-46v14,7,-1,26,-12,30","w":446},".":{"d":"222,-17v-37,45,-160,82,-190,11v-35,-83,33,-146,95,-174v58,-26,111,30,123,62v16,45,-6,74,-28,101","w":281},"\/":{"d":"108,-28v-9,2,-8,-11,-5,-17v-29,25,-44,71,-83,87v-6,2,-8,-2,-7,-11v22,-73,65,-117,97,-178v48,-93,110,-167,164,-256r74,-119v18,-28,37,-56,60,-80v18,-20,36,-55,70,-58v10,-7,17,-13,30,-19v6,-3,10,-1,11,5v3,21,-10,33,-21,44v5,17,-22,30,-24,49r-59,96v-47,140,-143,233,-216,348r17,-5v-37,36,-53,97,-108,114xm119,-72v28,-32,43,-74,72,-106r-44,45v-9,20,-23,36,-28,61xm432,-629v-5,3,-2,3,-5,9v7,-7,11,-11,13,-14v2,-3,0,-1,-8,5xm488,-655v-1,1,-1,1,-2,1v1,0,1,0,2,-1","w":532},"0":{"d":"111,-31v-64,-37,-37,-139,-63,-214v-20,-58,-53,-126,-16,-193v43,-78,116,-160,196,-195v92,-40,219,-6,268,51v51,59,81,148,74,256v-3,42,-26,75,-41,109v-13,103,-87,144,-158,193v-73,50,-193,32,-260,-7xm396,-184r-13,43v24,-5,51,-13,71,-25v17,-83,-21,-157,-21,-248v0,-78,-52,-95,-113,-120r-23,24v-29,-33,-115,-36,-143,1v-34,45,-38,114,-37,197v26,71,72,124,134,156r86,11v24,-7,41,-25,59,-39xm457,-132r-73,55v28,-14,64,-21,73,-55","w":584},"1":{"d":"326,-633v15,-5,12,12,8,22v-15,33,-20,73,-31,108r8,0v13,55,-12,108,-15,161v-3,71,4,137,-14,197v1,28,3,55,6,82r2,-2v-6,27,-30,50,-51,63v-9,6,-18,4,-17,-8v-12,11,-23,25,-36,28v-8,1,-6,-12,-5,-19v-5,0,-11,3,-13,7v4,-147,2,-288,32,-410v9,-38,13,-77,24,-114v-43,36,-85,70,-137,96v-9,5,-17,-1,-22,4r2,-7v-7,6,-14,10,-25,12v-9,0,-11,-1,-11,-10v-11,5,-20,5,-17,-6v29,-50,80,-81,122,-119v30,-27,71,-57,106,-73v31,-23,60,-57,98,-59v7,17,-7,35,-14,47","w":355},"2":{"d":"464,-434v19,-39,33,-78,26,-119v-14,-15,-36,-24,-58,-31v-82,4,-154,31,-199,74r-29,52v-21,9,-44,27,-72,24v-5,-38,41,-65,67,-91v-18,5,-28,17,-41,26r0,-3v-16,19,-25,58,-61,44v11,-107,122,-148,204,-185v34,-15,72,-17,117,-14v37,-16,111,-35,130,10v26,5,52,13,50,42v-3,36,-27,67,-42,94v-92,167,-196,325,-340,438v97,-23,254,-62,338,1v3,21,-16,36,-28,47v-14,34,-55,67,-106,48v-82,-31,-212,-12,-286,14r-8,16v-20,6,-48,29,-70,27v-7,-7,-2,-15,2,-22v-9,2,-30,13,-30,-3v-2,2,-13,3,-15,0v-1,-64,51,-105,82,-142r11,11v82,-71,167,-138,236,-222v19,-21,38,-44,60,-66v22,-22,43,-45,62,-70xm186,-91v77,-40,127,-112,181,-179r-82,75","w":611},"3":{"d":"384,-342v-71,1,-145,15,-191,46v-24,15,-56,37,-87,26v-3,-11,6,-18,10,-26v41,-58,109,-91,186,-110r100,-54v15,-37,16,-97,-16,-111v-63,-29,-170,-7,-222,16v-12,22,-36,20,-45,35v-30,-29,24,-64,44,-84v56,-33,118,-58,196,-71v49,-8,105,-21,137,13v27,29,55,100,21,146v-26,36,-68,65,-101,95v23,0,41,1,60,5v35,-3,77,0,66,39v56,118,-60,202,-130,259v-106,87,-222,156,-388,176v-16,-2,-9,-14,-2,-19v-8,-30,26,-50,42,-70v7,7,18,23,22,5v0,1,0,2,1,2v37,-32,83,-36,136,-49r125,-97r58,-54v11,-45,9,-93,-22,-118","w":571},"4":{"d":"131,-323v50,-11,102,-4,157,-14v4,-29,11,-58,17,-85v2,-84,9,-172,41,-225v28,-6,40,-35,70,-34v3,13,5,26,6,38v7,-5,17,-9,21,0v-3,21,-11,34,-20,49r-28,251v45,2,88,1,125,13v49,16,8,65,-13,80v-32,22,-75,22,-121,18v-6,90,-4,173,12,251v-9,20,-30,46,-50,57v-7,4,-12,4,-16,0r-7,-39v-10,9,-21,28,-40,20r0,-38r-12,2v-16,-66,10,-143,4,-222r2,-49v-69,-12,-133,9,-184,30r-15,23v-21,5,-37,14,-64,14v-12,-19,14,-27,15,-48v-6,2,-15,2,-13,-5v1,-5,4,-11,9,-17v-9,-35,11,-66,11,-103v0,-89,27,-167,47,-243r-2,1v10,-27,35,-54,59,-67v8,-4,12,3,10,11v8,-5,12,8,9,14v15,-21,29,-52,63,-51v9,55,-26,101,-26,166v0,82,-20,158,-67,202","w":557},"5":{"d":"34,132v-26,17,-11,-10,-16,-16v-19,-22,20,-53,31,-69r18,6v56,-55,132,-82,185,-141v38,-43,91,-84,105,-144v9,-40,-22,-65,-51,-80v-46,3,-95,15,-131,29v4,3,11,-1,17,0r-57,66v-12,0,-23,2,-27,-7v-11,12,-34,22,-45,4v-10,-3,-28,11,-24,-7v2,-8,8,-16,17,-27v-1,-79,-22,-165,4,-232r-1,-48v-13,3,-40,8,-27,-11v8,-13,26,-25,33,-39v14,-28,36,-66,74,-68v2,5,11,10,6,14v29,-9,61,-12,93,-20v63,-16,143,-47,211,-45r1,5v11,-2,38,-8,30,8v-17,34,-58,60,-102,67v-39,22,-84,31,-135,40r-23,30v-30,4,-61,4,-92,7v9,43,6,97,14,142v4,24,4,49,4,73v71,-54,228,-90,318,-29v41,28,59,129,18,175v-33,37,-73,65,-116,90v-96,90,-220,155,-332,227xm381,-164v21,-13,43,-54,42,-74v-10,25,-24,49,-42,74xm317,-115r41,-30v-22,2,-30,18,-41,30xm76,51v-2,0,-4,0,-4,2xm413,-259r-1,1","w":518},"6":{"d":"402,-626v-7,-2,-16,-1,-22,-4r-23,16v0,-2,0,-4,1,-5v-56,-9,-115,16,-157,36v-46,69,-60,175,-65,284v59,-52,115,-117,208,-125v36,-3,68,-15,98,3v44,26,110,34,112,104v23,46,39,110,12,167v-35,72,-94,123,-169,147v-75,24,-185,7,-253,-16r-14,14v-4,-9,-10,-18,-12,-29v-35,-24,-69,-53,-85,-97r-1,1v-55,-182,24,-384,134,-468v62,-48,122,-131,238,-102v18,4,36,5,55,8xm448,-142v20,-72,3,-141,-39,-181v0,-2,1,-5,2,-9v-113,-7,-214,16,-246,101v0,49,2,96,20,135v58,32,173,40,248,21xm437,-77v16,-6,31,-11,45,-20r6,-19xm150,-272v-2,4,-12,10,-9,12","w":595},"7":{"d":"60,-507v-20,-10,13,-28,6,-38v-17,2,-33,3,-50,3v-6,-45,56,-71,106,-76v39,-26,102,-25,155,-36r-10,13v85,-13,184,2,268,2v28,0,52,-1,78,2v23,23,-36,53,-54,69v6,51,-69,80,-94,116v-44,64,-83,133,-105,210r-80,272v-5,18,-6,35,-5,50r10,-8v-1,41,-30,74,-63,84v-15,5,-12,-26,-12,-39v-21,11,-23,-12,-17,-27v11,-266,102,-462,217,-627v-29,-2,-55,-13,-84,-14r-144,25v-36,9,-78,22,-122,19","w":633},"8":{"d":"22,-381v-43,-170,73,-231,190,-276v81,-31,178,17,227,60v33,44,15,149,-11,186v-24,34,-52,56,-89,74v91,23,150,113,107,219v-34,82,-91,159,-217,142v-30,-4,-59,-13,-87,-25r-20,19v-8,-12,-15,-26,-20,-41v-44,-27,-79,-94,-43,-154v29,-48,62,-94,103,-131r-42,-12r-10,11v-29,-26,-76,-26,-88,-72xm315,-534v-4,-13,2,-23,7,-32r-61,-24r-11,12v-19,-18,-38,-24,-70,-18r-41,48r-14,-2v-16,51,-2,130,25,159r100,25v23,-12,53,-16,82,-21v7,-44,19,-125,-10,-153xm318,-253v-32,-20,-76,-31,-115,-44v-34,20,-34,72,-42,117v-6,31,-2,61,5,89v50,25,104,53,179,49v28,-71,1,-158,-27,-211","w":473},"9":{"d":"269,-39v-25,28,-46,66,-88,78v-3,0,-2,-4,1,-14v17,-51,58,-76,86,-114v39,-52,65,-117,88,-183v-32,14,-64,48,-110,31v-104,-36,-234,-61,-234,-196v0,-136,100,-216,203,-258v86,-35,169,10,251,23v50,8,53,66,62,118r22,-18v-26,121,-27,256,-84,347v-28,43,-52,86,-94,116v-19,34,-49,57,-76,83v-1,1,0,1,1,-1r1,-2v-12,8,-32,34,-46,25v-2,-4,13,-22,17,-35xm175,-556v-16,5,-17,25,-21,42v21,63,28,144,86,170v1,5,0,10,-2,16v38,4,72,39,112,18r21,-9v18,-70,51,-177,1,-235v-12,-14,8,-28,16,-38v-32,-41,-138,-42,-184,-7xm152,-626v-23,11,-42,34,-54,56","w":562},":":{"d":"14,-424v33,-72,95,-146,182,-164v10,-2,18,2,25,11v32,7,67,51,55,86v-26,83,-127,139,-239,113v-21,-5,-26,-24,-23,-46xm252,-116v-44,51,-215,87,-196,-32v11,-65,65,-106,120,-131v57,-25,108,27,116,61v11,48,-17,75,-40,102","w":307},";":{"d":"245,-262v21,8,-3,29,-5,45v8,1,19,-1,20,8v-14,91,-62,174,-94,251v-11,16,-37,46,-56,54v-6,3,-8,-1,-7,-11r53,-129v0,-35,1,-64,12,-91v-18,15,-41,29,-71,24v-12,5,-30,9,-36,-3v-19,-75,45,-135,93,-170v24,-17,57,-27,78,-3v4,-3,8,-1,12,-3v12,2,6,17,1,28xm230,-559v17,10,7,36,-1,49v0,64,-68,114,-121,135v-46,18,-71,-12,-75,-47v-45,-8,-2,-48,8,-66v38,-38,65,-93,135,-98v11,2,23,9,28,17v9,1,18,5,26,10","w":272},"<":{"d":"399,-643v-18,50,-66,74,-99,111v-49,55,-113,93,-154,156r-28,38r2,0r-10,12v66,33,113,82,165,129r119,109v-6,30,-32,58,-64,64v-26,-25,-53,-44,-79,-68r-57,-53v-34,-37,-80,-62,-126,-87v-8,-7,-21,-16,-9,-23v-11,-7,-22,-12,-37,-11v-2,-2,-2,-10,1,-14v-28,-19,15,-55,26,-66r136,-133v52,-49,106,-95,151,-151v11,-14,29,-27,52,-23v-2,9,13,3,11,10","w":411},"=":{"d":"62,-411v-14,8,-47,14,-38,-12v-19,-1,-10,-24,2,-33v44,-59,143,-70,241,-59r-1,1r110,-2v7,2,9,7,4,15v34,-3,16,20,3,33v-10,10,-30,26,-41,32v-32,7,-65,7,-100,12v-56,8,-118,29,-180,13xm335,-271v-74,36,-204,1,-288,36v-7,1,-11,-1,-11,-5v-11,3,-27,3,-22,-6v23,-46,76,-70,129,-87r-10,14v67,-17,148,-25,231,-25v22,0,41,7,50,22r-65,62v-4,-5,-8,-8,-14,-11","w":426},">":{"d":"422,-374v-15,22,-45,54,-74,40v-27,17,-44,44,-67,64v-76,66,-137,151,-227,200v-27,15,-17,-7,-10,-19v-8,3,-22,18,-29,8v31,-86,102,-114,160,-168r65,-61v22,-20,44,-39,68,-57v-63,-64,-144,-121,-247,-146v-23,-6,-58,-22,-45,-53v13,-32,58,-60,106,-47r-23,24v24,14,55,15,80,28v81,40,159,88,218,152v4,-3,17,-8,22,-5v5,3,-8,20,1,18v9,1,6,15,2,22","w":438},"?":{"d":"127,-558v0,16,3,20,6,33r-16,5v-6,16,-18,35,-21,50v-21,12,-34,43,-67,43v-14,0,-13,-12,-12,-25v-13,-50,37,-91,65,-122v61,-66,199,-140,301,-65v91,109,-22,262,-88,331v-23,36,-55,69,-42,132v-4,5,-17,10,-14,16v3,-3,5,-5,7,-6v-5,37,-33,68,-67,74v-21,8,-23,-18,-26,-35v-36,-39,13,-108,32,-140v29,-49,75,-81,94,-139r-6,11v14,-41,44,-77,42,-130v-15,-41,-65,-45,-123,-45v-26,0,-50,-1,-65,12xm166,21r66,-57v8,21,39,-32,50,2r4,11v12,-7,19,-4,18,8v-4,34,-38,59,-64,71v-13,3,-14,-26,-28,-10v-12,14,-46,35,-45,-3v0,-8,0,-15,-1,-22xm317,-387v-26,29,-47,64,-74,93v30,-25,53,-60,74,-93xm223,-148r10,-8v-6,0,-6,5,-10,8xm272,-392r1,-3v-1,1,-1,2,-1,3xm270,-387r0,-1r0,1xm98,-472r-2,2xm271,-390r-1,2v0,-1,0,-1,1,-2","w":431},"@":{"d":"381,-195v-12,4,-29,21,-34,1v-16,-11,-12,-40,-12,-64v-55,36,-200,52,-186,-52v14,-103,99,-150,192,-172v6,0,12,2,19,5v11,-10,23,-21,41,-18v3,10,5,20,6,30v20,-8,16,15,21,27v-8,3,-11,18,-7,27r12,-17v10,33,2,69,-14,92v2,24,4,48,1,71v98,-3,116,-160,44,-219v-60,-49,-155,-99,-261,-74v-59,44,-107,99,-107,209v0,92,-1,155,44,203v44,45,121,121,223,89v35,-11,66,-24,83,-54r60,-60v16,21,-11,46,-22,60r44,-34v-33,104,-151,137,-250,175v-71,27,-138,-16,-180,-49v-81,-63,-110,-245,-59,-364v26,-148,142,-225,273,-259v131,-34,243,41,270,145v28,106,-28,196,-82,255v-26,29,-56,54,-99,64v-13,3,-23,-3,-20,-17xm330,-345v-2,-16,10,-20,9,-31v10,-5,1,-34,-1,-48v-15,14,-33,20,-46,34r-10,-14v-52,-11,-88,65,-42,85v32,14,84,3,91,-27xm456,-80v0,1,-2,1,0,1r0,-1","w":601},"A":{"d":"175,-560v16,-40,39,-85,79,-98v12,-13,27,-21,44,-24v18,19,-21,37,-13,69v0,8,-1,16,-2,23v12,-29,38,-63,76,-61v55,91,104,200,156,295v58,106,131,202,186,310v-14,23,-33,65,-68,59v-13,-13,-24,-25,-35,-39v-7,6,-19,6,-25,14v-54,-39,-88,-100,-129,-152v-21,-26,-38,-55,-56,-83v-40,24,-85,48,-131,64r39,-59v-41,18,-81,44,-120,62v-24,93,-18,214,-98,252v-21,5,-12,-32,-12,-48v0,-15,4,-30,7,-45v-10,17,-26,29,-47,37v-22,0,-10,-41,-6,-61v15,-67,46,-125,63,-187v15,-54,28,-110,43,-165v15,-55,32,-110,51,-164xm315,-492v-5,-22,-18,-39,0,-60r-6,-12v-53,91,-79,194,-111,302v44,-24,95,-40,146,-57v-20,-42,-57,-76,-53,-138v5,-11,15,-26,24,-35","w":713},"\u00a0":{"w":300}}});



/**
 *
 * Color picker
 * Author: Stefan Petre www.eyecon.ro
 *
 * Dual licensed under the MIT and GPL licenses
 *
 */
var ColorPicker;
(function ($) {
	ColorPicker = function () {
		var
			ids = {},
			inAction,
			charMin = 65,
			visible,
			tpl = '<div class="colorpicker"><div class="colorpicker_color"><div><div></div></div></div><div class="colorpicker_hue"><div></div></div><div class="colorpicker_new_color"></div><div class="colorpicker_current_color"></div><div class="colorpicker_hex"><input type="text" maxlength="6" size="6" /></div><div class="colorpicker_rgb_r colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_g colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_rgb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_h colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_s colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_hsb_b colorpicker_field"><input type="text" maxlength="3" size="3" /><span></span></div><div class="colorpicker_submit"></div></div>',
			defaults = {
				eventName: 'click',
				onShow: function () {},
				onBeforeShow: function(){},
				onHide: function () {},
				onChange: function () {},
				onSubmit: function () {},
				color: 'ffff00',
				livePreview: true,
				flat: false
			},
			fillRGBFields = function  (hsb, cal) {
				var rgb = HSBToRGB(hsb);
				$(cal).data('colorpicker').fields
					.eq(1).val(rgb.r).end()
					.eq(2).val(rgb.g).end()
					.eq(3).val(rgb.b).end();
			},
			fillHSBFields = function  (hsb, cal) {
				$(cal).data('colorpicker').fields
					.eq(4).val(hsb.h).end()
					.eq(5).val(hsb.s).end()
					.eq(6).val(hsb.b).end();
			},
			fillHexFields = function (hsb, cal) {
				$(cal).data('colorpicker').fields
					.eq(0).val(HSBToHex(hsb)).end();
			},
			setSelector = function (hsb, cal) {
				$(cal).data('colorpicker').selector.css('backgroundColor', '#' + HSBToHex({h: hsb.h, s: 100, b: 100}));
				$(cal).data('colorpicker').selectorIndic.css({
					left: parseInt(150 * hsb.s/100, 10),
					top: parseInt(150 * (100-hsb.b)/100, 10)
				});
			},
			setHue = function (hsb, cal) {
				$(cal).data('colorpicker').hue.css('top', parseInt(150 - 150 * hsb.h/360, 10));
			},
			setCurrentColor = function (hsb, cal) {
				$(cal).data('colorpicker').currentColor.css('backgroundColor', '#' + HSBToHex(hsb));
			},
			setNewColor = function (hsb, cal) {
				$(cal).data('colorpicker').newColor.css('backgroundColor', '#' + HSBToHex(hsb));
			},
			keyDown = function (ev) {
				var pressedKey = ev.charCode || ev.keyCode || -1;
				if ((pressedKey > charMin && pressedKey <= 90) || pressedKey == 32) {
					return false;
				}
				var cal = $(this).parent().parent();
				if (cal.data('colorpicker').livePreview === true) {
					change.apply(this);
				}
			},
			change = function (ev) {
				var cal = $(this).parent().parent(), col;
				if (this.parentNode.className.indexOf('_hex') > 0) {
					cal.data('colorpicker').color = col = HexToHSB(fixHex(this.value));
				} else if (this.parentNode.className.indexOf('_hsb') > 0) {
					cal.data('colorpicker').color = col = fixHSB({
						h: parseInt(cal.data('colorpicker').fields.eq(4).val(), 10),
						s: parseInt(cal.data('colorpicker').fields.eq(5).val(), 10),
						b: parseInt(cal.data('colorpicker').fields.eq(6).val(), 10)
					});
				} else {
					cal.data('colorpicker').color = col = RGBToHSB(fixRGB({
						r: parseInt(cal.data('colorpicker').fields.eq(1).val(), 10),
						g: parseInt(cal.data('colorpicker').fields.eq(2).val(), 10),
						b: parseInt(cal.data('colorpicker').fields.eq(3).val(), 10)
					}));
				}
				if (ev) {
					fillRGBFields(col, cal.get(0));
					fillHexFields(col, cal.get(0));
					fillHSBFields(col, cal.get(0));
				}
				setSelector(col, cal.get(0));
				setHue(col, cal.get(0));
				setNewColor(col, cal.get(0));
				cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
			},
			blur = function (ev) {
				var cal = $(this).parent().parent();
				cal.data('colorpicker').fields.parent().removeClass('colorpicker_focus');
			},
			focus = function () {
				charMin = this.parentNode.className.indexOf('_hex') > 0 ? 70 : 65;
				$(this).parent().parent().data('colorpicker').fields.parent().removeClass('colorpicker_focus');
				$(this).parent().addClass('colorpicker_focus');
			},
			downIncrement = function (ev) {
				var field = $(this).parent().find('input').focus();
				var current = {
					el: $(this).parent().addClass('colorpicker_slider'),
					max: this.parentNode.className.indexOf('_hsb_h') > 0 ? 360 : (this.parentNode.className.indexOf('_hsb') > 0 ? 100 : 255),
					y: ev.pageY,
					field: field,
					val: parseInt(field.val(), 10),
					preview: $(this).parent().parent().data('colorpicker').livePreview
				};
				$(document).bind('mouseup', current, upIncrement);
				$(document).bind('mousemove', current, moveIncrement);
			},
			moveIncrement = function (ev) {
				ev.data.field.val(Math.max(0, Math.min(ev.data.max, parseInt(ev.data.val + ev.pageY - ev.data.y, 10))));
				if (ev.data.preview) {
					change.apply(ev.data.field.get(0), [true]);
				}
				return false;
			},
			upIncrement = function (ev) {
				change.apply(ev.data.field.get(0), [true]);
				ev.data.el.removeClass('colorpicker_slider').find('input').focus();
				$(document).unbind('mouseup', upIncrement);
				$(document).unbind('mousemove', moveIncrement);
				return false;
			},
			downHue = function (ev) {
				var current = {
					cal: $(this).parent(),
					y: $(this).offset().top
				};
				current.preview = current.cal.data('colorpicker').livePreview;
				$(document).bind('mouseup', current, upHue);
				$(document).bind('mousemove', current, moveHue);
			},
			moveHue = function (ev) {
				change.apply(
					ev.data.cal.data('colorpicker')
						.fields
						.eq(4)
						.val(parseInt(360*(150 - Math.max(0,Math.min(150,(ev.pageY - ev.data.y))))/150, 10))
						.get(0),
					[ev.data.preview]
				);
				return false;
			},
			upHue = function (ev) {
				fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
				fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
				$(document).unbind('mouseup', upHue);
				$(document).unbind('mousemove', moveHue);
				return false;
			},
			downSelector = function (ev) {
				var current = {
					cal: $(this).parent(),
					pos: $(this).offset()
				};
				current.preview = current.cal.data('colorpicker').livePreview;
				$(document).bind('mouseup', current, upSelector);
				$(document).bind('mousemove', current, moveSelector);
			},
			moveSelector = function (ev) {
				change.apply(
					ev.data.cal.data('colorpicker')
						.fields
						.eq(6)
						.val(parseInt(100*(150 - Math.max(0,Math.min(150,(ev.pageY - ev.data.pos.top))))/150, 10))
						.end()
						.eq(5)
						.val(parseInt(100*(Math.max(0,Math.min(150,(ev.pageX - ev.data.pos.left))))/150, 10))
						.get(0),
					[ev.data.preview]
				);
				return false;
			},
			upSelector = function (ev) {
				fillRGBFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
				fillHexFields(ev.data.cal.data('colorpicker').color, ev.data.cal.get(0));
				$(document).unbind('mouseup', upSelector);
				$(document).unbind('mousemove', moveSelector);
				return false;
			},
			enterSubmit = function (ev) {
				$(this).addClass('colorpicker_focus');
			},
			leaveSubmit = function (ev) {
				$(this).removeClass('colorpicker_focus');
			},
			clickSubmit = function (ev) {
				var cal = $(this).parent();
				var col = cal.data('colorpicker').color;
				cal.data('colorpicker').origColor = col;
				setCurrentColor(col, cal.get(0));
				cal.data('colorpicker').onSubmit(col, HSBToHex(col), HSBToRGB(col), cal.data('colorpicker').el);
			},
			show = function (ev) {
				var cal = $('#' + $(this).data('colorpickerId'));
				cal.data('colorpicker').onBeforeShow.apply(this, [cal.get(0)]);
				var pos = $(this).offset();
				var viewPort = getViewport();
				var top = pos.top + this.offsetHeight;
				var left = pos.left;
				if (top + 176 > viewPort.t + viewPort.h) {
					top -= this.offsetHeight + 176;
				}
				if (left + 356 > viewPort.l + viewPort.w) {
					left -= 356;
				}
				cal.css({left: left + 'px', top: top + 'px'});
				if (cal.data('colorpicker').onShow.apply(this, [cal.get(0)]) != false) {
					cal.show();
				}
				$(document).bind('mousedown', {cal: cal}, hide);
				return false;
			},
			hide = function (ev) {
				if (!isChildOf(ev.data.cal.get(0), ev.target, ev.data.cal.get(0))) {
					if (ev.data.cal.data('colorpicker').onHide.apply(this, [ev.data.cal.get(0)]) != false) {
						ev.data.cal.hide();
					}
					$(document).unbind('mousedown', hide);
				}
			},
			isChildOf = function(parentEl, el, container) {
				if (parentEl == el) {
					return true;
				}
				if (parentEl.contains) {
					return parentEl.contains(el);
				}
				if ( parentEl.compareDocumentPosition ) {
					return !!(parentEl.compareDocumentPosition(el) & 16);
				}
				var prEl = el.parentNode;
				while(prEl && prEl != container) {
					if (prEl == parentEl)
						return true;
					prEl = prEl.parentNode;
				}
				return false;
			},
			getViewport = function () {
				var m = document.compatMode == 'CSS1Compat';
				return {
					l : window.pageXOffset || (m ? document.documentElement.scrollLeft : document.body.scrollLeft),
					t : window.pageYOffset || (m ? document.documentElement.scrollTop : document.body.scrollTop),
					w : window.innerWidth || (m ? document.documentElement.clientWidth : document.body.clientWidth),
					h : window.innerHeight || (m ? document.documentElement.clientHeight : document.body.clientHeight)
				};
			},
			fixHSB = function (hsb) {
				return {
					h: Math.min(360, Math.max(0, hsb.h)),
					s: Math.min(100, Math.max(0, hsb.s)),
					b: Math.min(100, Math.max(0, hsb.b))
				};
			},
			fixRGB = function (rgb) {
				return {
					r: Math.min(255, Math.max(0, rgb.r)),
					g: Math.min(255, Math.max(0, rgb.g)),
					b: Math.min(255, Math.max(0, rgb.b))
				};
			},
			fixHex = function (hex) {
				var len = 6 - hex.length;
				if (len > 0) {
					var o = [];
					for (var i=0; i<len; i++) {
						o.push('0');
					}
					o.push(hex);
					hex = o.join('');
				}
				return hex;
			},
			HexToRGB = function (hex) {
				var hex = parseInt(((hex.indexOf('#') > -1) ? hex.substring(1) : hex), 16);
				return {r: hex >> 16, g: (hex & 0x00FF00) >> 8, b: (hex & 0x0000FF)};
			},
			HexToHSB = function (hex) {
				return RGBToHSB(HexToRGB(hex));
			},
			RGBToHSB = function (rgb) {
				var hsb = {
					h: 0,
					s: 0,
					b: 0
				};
				var min = Math.min(rgb.r, rgb.g, rgb.b);
				var max = Math.max(rgb.r, rgb.g, rgb.b);
				var delta = max - min;
				hsb.b = max;
				if (max != 0) {

				}
				hsb.s = max != 0 ? 255 * delta / max : 0;
				if (hsb.s != 0) {
					if (rgb.r == max) {
						hsb.h = (rgb.g - rgb.b) / delta;
					} else if (rgb.g == max) {
						hsb.h = 2 + (rgb.b - rgb.r) / delta;
					} else {
						hsb.h = 4 + (rgb.r - rgb.g) / delta;
					}
				} else {
					hsb.h = -1;
				}
				hsb.h *= 60;
				if (hsb.h < 0) {
					hsb.h += 360;
				}
				hsb.s *= 100/255;
				hsb.b *= 100/255;
				return hsb;
			},
			HSBToRGB = function (hsb) {
				var rgb = {};
				var h = Math.round(hsb.h);
				var s = Math.round(hsb.s*255/100);
				var v = Math.round(hsb.b*255/100);
				if(s == 0) {
					rgb.r = rgb.g = rgb.b = v;
				} else {
					var t1 = v;
					var t2 = (255-s)*v/255;
					var t3 = (t1-t2)*(h%60)/60;
					if(h==360) h = 0;
					if(h<60) {rgb.r=t1;	rgb.b=t2; rgb.g=t2+t3}
					else if(h<120) {rgb.g=t1; rgb.b=t2;	rgb.r=t1-t3}
					else if(h<180) {rgb.g=t1; rgb.r=t2;	rgb.b=t2+t3}
					else if(h<240) {rgb.b=t1; rgb.r=t2;	rgb.g=t1-t3}
					else if(h<300) {rgb.b=t1; rgb.g=t2;	rgb.r=t2+t3}
					else if(h<360) {rgb.r=t1; rgb.g=t2;	rgb.b=t1-t3}
					else {rgb.r=0; rgb.g=0;	rgb.b=0}
				}
				return {r:Math.round(rgb.r), g:Math.round(rgb.g), b:Math.round(rgb.b)};
			},
			RGBToHex = function (rgb) {
				var hex = [
					rgb.r.toString(16),
					rgb.g.toString(16),
					rgb.b.toString(16)
				];
				$.each(hex, function (nr, val) {
					if (val.length == 1) {
						hex[nr] = '0' + val;
					}
				});
				return hex.join('');
			},
			HSBToHex = function (hsb) {
				return RGBToHex(HSBToRGB(hsb));
			},
			restoreOriginal = function () {
				var cal = $(this).parent();
				var col = cal.data('colorpicker').origColor;
				cal.data('colorpicker').color = col;
				fillRGBFields(col, cal.get(0));
				fillHexFields(col, cal.get(0));
				fillHSBFields(col, cal.get(0));
				setSelector(col, cal.get(0));
				setHue(col, cal.get(0));
				setNewColor(col, cal.get(0));
                if (cal.data('colorpicker').livePreview === true) {
                    cal.data('colorpicker').onChange.apply(cal, [col, HSBToHex(col), HSBToRGB(col)]);
                }
			};
		return {
			init: function (opt) {
				opt = $.extend({}, defaults, opt||{});
				if (typeof opt.color == 'string') {
					opt.color = HexToHSB(opt.color);
				} else if (opt.color.r != undefined && opt.color.g != undefined && opt.color.b != undefined) {
					opt.color = RGBToHSB(opt.color);
				} else if (opt.color.h != undefined && opt.color.s != undefined && opt.color.b != undefined) {
					opt.color = fixHSB(opt.color);
				} else {
					return this;
				}
				return this.each(function () {
					if (!$(this).data('colorpickerId')) {
						var options = $.extend({}, opt);
						options.origColor = opt.color;
						var id = 'collorpicker_' + parseInt(Math.random() * 1000);
						$(this).data('colorpickerId', id);
						var cal = $(tpl).attr('id', id);
						if (options.flat) {
							cal.appendTo(this).show();
						} else {
							cal.appendTo(document.body);
						}
						options.fields = cal
											.find('input')
												.bind('keyup', keyDown)
												.bind('change', change)
												.bind('blur', blur)
												.bind('focus', focus);
						cal
							.find('span').bind('mousedown', downIncrement).end()
							.find('>div.colorpicker_current_color').bind('click', restoreOriginal);
						options.selector = cal.find('div.colorpicker_color').bind('mousedown', downSelector);
						options.selectorIndic = options.selector.find('div div');
						options.el = this;
						options.hue = cal.find('div.colorpicker_hue div');
						cal.find('div.colorpicker_hue').bind('mousedown', downHue);
						options.newColor = cal.find('div.colorpicker_new_color');
						options.currentColor = cal.find('div.colorpicker_current_color');
						cal.data('colorpicker', options);
						cal.find('div.colorpicker_submit')
							.bind('mouseenter', enterSubmit)
							.bind('mouseleave', leaveSubmit)
							.bind('click', clickSubmit);
						fillRGBFields(options.color, cal.get(0));
						fillHSBFields(options.color, cal.get(0));
						fillHexFields(options.color, cal.get(0));
						setHue(options.color, cal.get(0));
						setSelector(options.color, cal.get(0));
						setCurrentColor(options.color, cal.get(0));
						setNewColor(options.color, cal.get(0));
						if (options.flat) {
							cal.css({
								position: 'relative',
								display: 'block'
							});
						} else {
							$(this).bind(options.eventName, show);
						}
					}
				});
			},
			showPicker: function() {
				return this.each( function () {
					if ($(this).data('colorpickerId')) {
						show.apply(this);
					}
				});
			},
			hidePicker: function() {
				return this.each( function () {
					if ($(this).data('colorpickerId')) {
						$('#' + $(this).data('colorpickerId')).hide();
					}
				});
			},
            HexToHSB: HexToHSB,
            RGBToHSB: RGBToHSB,
			setColor: function(col) {
				if (typeof col == 'string') {
					col = HexToHSB(col);
				} else if (col.r != undefined && col.g != undefined && col.b != undefined) {
					col = RGBToHSB(col);
				} else if (col.h != undefined && col.s != undefined && col.b != undefined) {
					col = fixHSB(col);
				} else {
					return this;
				}
				return this.each(function(){
					if ($(this).data('colorpickerId')) {
						var cal = $('#' + $(this).data('colorpickerId'));
						cal.data('colorpicker').color = col;
						cal.data('colorpicker').origColor = col;
						fillRGBFields(col, cal.get(0));
						fillHSBFields(col, cal.get(0));
						fillHexFields(col, cal.get(0));
						setHue(col, cal.get(0));
						setSelector(col, cal.get(0));
						setCurrentColor(col, cal.get(0));
						setNewColor(col, cal.get(0));
					}
				});
			}
		};
	}();
	$.fn.extend({
		ColorPicker: ColorPicker.init,
		ColorPickerHide: ColorPicker.hidePicker,
		ColorPickerShow: ColorPicker.showPicker,
		ColorPickerSetColor: ColorPicker.setColor
	});
})(jQuery);
/**
 *
 * Zoomimage
 * Author: Stefan Petre www.eyecon.ro
 * 
 */
(function($){
	var EYE = window.EYE = function() {
		var _registered = {
			init: []
		};
		return {
			init: function() {
				$.each(_registered.init, function(nr, fn){
					fn.call();
				});
			},
			extend: function(prop) {
				for (var i in prop) {
					if (prop[i] != undefined) {
						this[i] = prop[i];
					}
				}
			},
			register: function(fn, type) {
				if (!_registered[type]) {
					_registered[type] = [];
				}
				_registered[type].push(fn);
			}
		};
	}();
	$(EYE.init);
})(jQuery);

/**
 *
 * Utilities
 * Author: Stefan Petre www.eyecon.ro
 * 
 */
(function($) {
EYE.extend({
	getPosition : function(e, forceIt)
	{
		var x = 0;
		var y = 0;
		var es = e.style;
		var restoreStyles = false;
		if (forceIt && jQuery.curCSS(e,'display') == 'none') {
			var oldVisibility = es.visibility;
			var oldPosition = es.position;
			restoreStyles = true;
			es.visibility = 'hidden';
			es.display = 'block';
			es.position = 'absolute';
		}
		var el = e;
		if (el.getBoundingClientRect) { // IE
			var box = el.getBoundingClientRect();
			x = box.left + Math.max(document.documentElement.scrollLeft, document.body.scrollLeft) - 2;
			y = box.top + Math.max(document.documentElement.scrollTop, document.body.scrollTop) - 2;
		} else {
			x = el.offsetLeft;
			y = el.offsetTop;
			el = el.offsetParent;
			if (e != el) {
				while (el) {
					x += el.offsetLeft;
					y += el.offsetTop;
					el = el.offsetParent;
				}
			}
			if (jQuery.browser.safari && jQuery.curCSS(e, 'position') == 'absolute' ) {
				x -= document.body.offsetLeft;
				y -= document.body.offsetTop;
			}
			el = e.parentNode;
			while (el && el.tagName.toUpperCase() != 'BODY' && el.tagName.toUpperCase() != 'HTML') 
			{
				if (jQuery.curCSS(el, 'display') != 'inline') {
					x -= el.scrollLeft;
					y -= el.scrollTop;
				}
				el = el.parentNode;
			}
		}
		if (restoreStyles == true) {
			es.display = 'none';
			es.position = oldPosition;
			es.visibility = oldVisibility;
		}
		return {x:x, y:y};
	},
	getSize : function(e)
	{
		var w = parseInt(jQuery.curCSS(e,'width'), 10);
		var h = parseInt(jQuery.curCSS(e,'height'), 10);
		var wb = 0;
		var hb = 0;
		if (jQuery.curCSS(e, 'display') != 'none') {
			wb = e.offsetWidth;
			hb = e.offsetHeight;
		} else {
			var es = e.style;
			var oldVisibility = es.visibility;
			var oldPosition = es.position;
			es.visibility = 'hidden';
			es.display = 'block';
			es.position = 'absolute';
			wb = e.offsetWidth;
			hb = e.offsetHeight;
			es.display = 'none';
			es.position = oldPosition;
			es.visibility = oldVisibility;
		}
		return {w:w, h:h, wb:wb, hb:hb};
	},
	getClient : function(e)
	{
		var h, w;
		if (e) {
			w = e.clientWidth;
			h = e.clientHeight;
		} else {
			var de = document.documentElement;
			w = window.innerWidth || self.innerWidth || (de&&de.clientWidth) || document.body.clientWidth;
			h = window.innerHeight || self.innerHeight || (de&&de.clientHeight) || document.body.clientHeight;
		}
		return {w:w,h:h};
	},
	getScroll : function (e)
	{
		var t=0, l=0, w=0, h=0, iw=0, ih=0;
		if (e && e.nodeName.toLowerCase() != 'body') {
			t = e.scrollTop;
			l = e.scrollLeft;
			w = e.scrollWidth;
			h = e.scrollHeight;
		} else  {
			if (document.documentElement) {
				t = document.documentElement.scrollTop;
				l = document.documentElement.scrollLeft;
				w = document.documentElement.scrollWidth;
				h = document.documentElement.scrollHeight;
			} else if (document.body) {
				t = document.body.scrollTop;
				l = document.body.scrollLeft;
				w = document.body.scrollWidth;
				h = document.body.scrollHeight;
			}
			if (typeof pageYOffset != 'undefined') {
				t = pageYOffset;
				l = pageXOffset;
			}
			iw = self.innerWidth||document.documentElement.clientWidth||document.body.clientWidth||0;
			ih = self.innerHeight||document.documentElement.clientHeight||document.body.clientHeight||0;
		}
		return { t: t, l: l, w: w, h: h, iw: iw, ih: ih };
	},
	getMargins : function(e, toInteger)
	{
		var t = jQuery.curCSS(e,'marginTop') || '';
		var r = jQuery.curCSS(e,'marginRight') || '';
		var b = jQuery.curCSS(e,'marginBottom') || '';
		var l = jQuery.curCSS(e,'marginLeft') || '';
		if (toInteger)
			return {
				t: parseInt(t, 10)||0,
				r: parseInt(r, 10)||0,
				b: parseInt(b, 10)||0,
				l: parseInt(l, 10)
			};
		else
			return {t: t, r: r,	b: b, l: l};
	},
	getPadding : function(e, toInteger)
	{
		var t = jQuery.curCSS(e,'paddingTop') || '';
		var r = jQuery.curCSS(e,'paddingRight') || '';
		var b = jQuery.curCSS(e,'paddingBottom') || '';
		var l = jQuery.curCSS(e,'paddingLeft') || '';
		if (toInteger)
			return {
				t: parseInt(t, 10)||0,
				r: parseInt(r, 10)||0,
				b: parseInt(b, 10)||0,
				l: parseInt(l, 10)
			};
		else
			return {t: t, r: r,	b: b, l: l};
	},
	getBorder : function(e, toInteger)
	{
		var t = jQuery.curCSS(e,'borderTopWidth') || '';
		var r = jQuery.curCSS(e,'borderRightWidth') || '';
		var b = jQuery.curCSS(e,'borderBottomWidth') || '';
		var l = jQuery.curCSS(e,'borderLeftWidth') || '';
		if (toInteger)
			return {
				t: parseInt(t, 10)||0,
				r: parseInt(r, 10)||0,
				b: parseInt(b, 10)||0,
				l: parseInt(l, 10)||0
			};
		else
			return {t: t, r: r,	b: b, l: l};
	},
	traverseDOM : function(nodeEl, func)
	{
		func(nodeEl);
		nodeEl = nodeEl.firstChild;
		while(nodeEl){
			EYE.traverseDOM(nodeEl, func);
			nodeEl = nodeEl.nextSibling;
		}
	},
	getInnerWidth :  function(el, scroll) {
		var offsetW = el.offsetWidth;
		return scroll ? Math.max(el.scrollWidth,offsetW) - offsetW + el.clientWidth:el.clientWidth;
	},
	getInnerHeight : function(el, scroll) {
		var offsetH = el.offsetHeight;
		return scroll ? Math.max(el.scrollHeight,offsetH) - offsetH + el.clientHeight:el.clientHeight;
	},
	getExtraWidth : function(el) {
		if($.boxModel)
			return (parseInt($.curCSS(el, 'paddingLeft'))||0)
				+ (parseInt($.curCSS(el, 'paddingRight'))||0)
				+ (parseInt($.curCSS(el, 'borderLeftWidth'))||0)
				+ (parseInt($.curCSS(el, 'borderRightWidth'))||0);
		return 0;
	},
	getExtraHeight : function(el) {
		if($.boxModel)
			return (parseInt($.curCSS(el, 'paddingTop'))||0)
				+ (parseInt($.curCSS(el, 'paddingBottom'))||0)
				+ (parseInt($.curCSS(el, 'borderTopWidth'))||0)
				+ (parseInt($.curCSS(el, 'borderBottomWidth'))||0);
		return 0;
	},
	isChildOf: function(parentEl, el, container) {
		if (parentEl == el) {
			return true;
		}
		if (!el || !el.nodeType || el.nodeType != 1) {
			return false;
		}
		if (parentEl.contains && !$.browser.safari) {
			return parentEl.contains(el);
		}
		if ( parentEl.compareDocumentPosition ) {
			return !!(parentEl.compareDocumentPosition(el) & 16);
		}
		var prEl = el.parentNode;
		while(prEl && prEl != container) {
			if (prEl == parentEl)
				return true;
			prEl = prEl.parentNode;
		}
		return false;
	},
	centerEl : function(el, axis)
	{
		var clientScroll = EYE.getScroll();
		var size = EYE.getSize(el);
		if (!axis || axis == 'vertically')
			$(el).css(
				{
					top: clientScroll.t + ((Math.min(clientScroll.h,clientScroll.ih) - size.hb)/2) + 'px'
				}
			);
		if (!axis || axis == 'horizontally')
			$(el).css(
				{
					left: clientScroll.l + ((Math.min(clientScroll.w,clientScroll.iw) - size.wb)/2) + 'px'
				}
			);
	}
});
if (!$.easing.easeout) {
	$.easing.easeout = function(p, n, firstNum, delta, duration) {
		return -delta * ((n=n/duration-1)*n*n*n - 1) + firstNum;
	};
}
	
})(jQuery);

/**
 * jquery.Jcrop.js v0.9.10
 * jQuery Image Cropping Plugin - released under MIT License 
 * Author: Kelly Hallman <khallman@gmail.com>
 * http://github.com/tapmodo/Jcrop
 * Copyright (c) 2008-2012 Tapmodo Interactive LLC {{{
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * }}}
 */

(function ($) {

  $.Jcrop = function (obj, opt) {
    var options = $.extend({}, $.Jcrop.defaults),
        docOffset, lastcurs, ie6mode = false;

    // Internal Methods {{{
    function px(n) {
      return n + 'px';
    }
    function cssClass(cl) {
      return options.baseClass + '-' + cl;
    }
    function supportsColorFade() {
      return $.fx.step.hasOwnProperty('backgroundColor');
    }
    function getPos(obj) //{{{
    {
      var pos = $(obj).offset();
      return [pos.left, pos.top];
    }
    //}}}
    function mouseAbs(e) //{{{
    {
      return [(e.pageX - docOffset[0]), (e.pageY - docOffset[1])];
    }
    //}}}
    function setOptions(opt) //{{{
    {
      if (typeof(opt) !== 'object') opt = {};
      options = $.extend(options, opt);

      $.each(['onChange','onSelect','onRelease','onDblClick'],function(i,e) {
        if (typeof(options[e]) !== 'function') options[e] = function () {};
      });
    }
    //}}}
    function startDragMode(mode, pos) //{{{
    {
      docOffset = getPos($img);
      Tracker.setCursor(mode === 'move' ? mode : mode + '-resize');

      if (mode === 'move') {
        return Tracker.activateHandlers(createMover(pos), doneSelect);
      }

      var fc = Coords.getFixed();
      var opp = oppLockCorner(mode);
      var opc = Coords.getCorner(oppLockCorner(opp));

      Coords.setPressed(Coords.getCorner(opp));
      Coords.setCurrent(opc);

      Tracker.activateHandlers(dragmodeHandler(mode, fc), doneSelect);
    }
    //}}}
    function dragmodeHandler(mode, f) //{{{
    {
      return function (pos) {
        if (!options.aspectRatio) {
          switch (mode) {
          case 'e':
            pos[1] = f.y2;
            break;
          case 'w':
            pos[1] = f.y2;
            break;
          case 'n':
            pos[0] = f.x2;
            break;
          case 's':
            pos[0] = f.x2;
            break;
          }
        } else {
          switch (mode) {
          case 'e':
            pos[1] = f.y + 1;
            break;
          case 'w':
            pos[1] = f.y + 1;
            break;
          case 'n':
            pos[0] = f.x + 1;
            break;
          case 's':
            pos[0] = f.x + 1;
            break;
          }
        }
        Coords.setCurrent(pos);
        Selection.update();
      };
    }
    //}}}
    function createMover(pos) //{{{
    {
      var lloc = pos;
      KeyManager.watchKeys();

      return function (pos) {
        Coords.moveOffset([pos[0] - lloc[0], pos[1] - lloc[1]]);
        lloc = pos;

        Selection.update();
      };
    }
    //}}}
    function oppLockCorner(ord) //{{{
    {
      switch (ord) {
      case 'n':
        return 'sw';
      case 's':
        return 'nw';
      case 'e':
        return 'nw';
      case 'w':
        return 'ne';
      case 'ne':
        return 'sw';
      case 'nw':
        return 'se';
      case 'se':
        return 'nw';
      case 'sw':
        return 'ne';
      }
    }
    //}}}
    function createDragger(ord) //{{{
    {
      return function (e) {
        if (options.disabled) {
          return false;
        }
        if ((ord === 'move') && !options.allowMove) {
          return false;
        }
        
        // Fix position of crop area when dragged the very first time.
        // Necessary when crop image is in a hidden element when page is loaded.
        docOffset = getPos($img);

        btndown = true;
        startDragMode(ord, mouseAbs(e));
        e.stopPropagation();
        e.preventDefault();
        return false;
      };
    }
    //}}}
    function presize($obj, w, h) //{{{
    {
      var nw = $obj.width(),
          nh = $obj.height();
      if ((nw > w) && w > 0) {
        nw = w;
        nh = (w / $obj.width()) * $obj.height();
      }
      if ((nh > h) && h > 0) {
        nh = h;
        nw = (h / $obj.height()) * $obj.width();
      }
      xscale = $obj.width() / nw;
      yscale = $obj.height() / nh;
      $obj.width(nw).height(nh);
    }
    //}}}
    function unscale(c) //{{{
    {
      return {
        x: c.x * xscale,
        y: c.y * yscale,
        x2: c.x2 * xscale,
        y2: c.y2 * yscale,
        w: c.w * xscale,
        h: c.h * yscale
      };
    }
    //}}}
    function doneSelect(pos) //{{{
    {
      var c = Coords.getFixed();
      if ((c.w > options.minSelect[0]) && (c.h > options.minSelect[1])) {
        Selection.enableHandles();
        Selection.done();
      } else {
        Selection.release();
      }
      Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
    }
    //}}}
    function newSelection(e) //{{{
    {
      if (options.disabled) {
        return false;
      }
      if (!options.allowSelect) {
        return false;
      }
      btndown = true;
      docOffset = getPos($img);
      Selection.disableHandles();
      Tracker.setCursor('crosshair');
      var pos = mouseAbs(e);
      Coords.setPressed(pos);
      Selection.update();
      Tracker.activateHandlers(selectDrag, doneSelect);
      KeyManager.watchKeys();

      e.stopPropagation();
      e.preventDefault();
      return false;
    }
    //}}}
    function selectDrag(pos) //{{{
    {
      Coords.setCurrent(pos);
      Selection.update();
    }
    //}}}
    function newTracker() //{{{
    {
      var trk = $('<div></div>').addClass(cssClass('tracker'));
      if ($.browser.msie) {
        trk.css({
          opacity: 0,
          backgroundColor: 'white'
        });
      }
      return trk;
    }
    //}}}

    // }}}
    // Initialization {{{
    // Sanitize some options {{{
    if ($.browser.msie && ($.browser.version.split('.')[0] === '6')) {
      ie6mode = true;
    }
    if (typeof(obj) !== 'object') {
      obj = $(obj)[0];
    }
    if (typeof(opt) !== 'object') {
      opt = {};
    }
    // }}}
    setOptions(opt);
    // Initialize some jQuery objects {{{
    // The values are SET on the image(s) for the interface
    // If the original image has any of these set, they will be reset
    // However, if you destroy() the Jcrop instance the original image's
    // character in the DOM will be as you left it.
    var img_css = {
      border: 'none',
      visibility: 'visible',
      margin: 0,
      padding: 0,
      position: 'absolute',
      top: 0,
      left: 0
    };

    var $origimg = $(obj),
      img_mode = true;

    if (obj.tagName == 'IMG') {
      // Fix size of crop image.
      // Necessary when crop image is within a hidden element when page is loaded.
      if ($origimg[0].width != 0 && $origimg[0].height != 0) {
        // Obtain dimensions from contained img element.
        $origimg.width($origimg[0].width);
        $origimg.height($origimg[0].height);
      } else {
        // Obtain dimensions from temporary image in case the original is not loaded yet (e.g. IE 7.0). 
        var tempImage = new Image();
        tempImage.src = $origimg[0].src;
        $origimg.width(tempImage.width);
        $origimg.height(tempImage.height);
      } 

      var $img = $origimg.clone().removeAttr('id').css(img_css).show();

      $img.width($origimg.width());
      $img.height($origimg.height());
      $origimg.after($img).hide();

    } else {
      $img = $origimg.css(img_css).show();
      img_mode = false;
      if (options.shade === null) { options.shade = true; }
    }

    presize($img, options.boxWidth, options.boxHeight);

    var boundx = $img.width(),
        boundy = $img.height(),
        
        
        $div = $('<div />').width(boundx).height(boundy).addClass(cssClass('holder')).css({
        position: 'relative',
        backgroundColor: options.bgColor
      }).insertAfter($origimg).append($img);

    if (options.addClass) {
      $div.addClass(options.addClass);
    }

    var $img2 = $('<div />'),

        $img_holder = $('<div />') 
        .width('100%').height('100%').css({
          zIndex: 310,
          position: 'absolute',
          overflow: 'hidden'
        }),

        $hdl_holder = $('<div />') 
        .width('100%').height('100%').css('zIndex', 320), 

        $sel = $('<div />') 
        .css({
          position: 'absolute',
          zIndex: 600
        }).dblclick(function(){
          var c = Coords.getFixed();
          options.onDblClick.call(api,c);
        }).insertBefore($img).append($img_holder, $hdl_holder); 

    if (img_mode) {

      $img2 = $('<img />')
          .attr('src', $img.attr('src')).css(img_css).width(boundx).height(boundy),

      $img_holder.append($img2);

    }

    if (ie6mode) {
      $sel.css({
        overflowY: 'hidden'
      });
    }

    var bound = options.boundary;
    var $trk = newTracker().width(boundx + (bound * 2)).height(boundy + (bound * 2)).css({
      position: 'absolute',
      top: px(-bound),
      left: px(-bound),
      zIndex: 290
    }).mousedown(newSelection);

    /* }}} */
    // Set more variables {{{
    var bgcolor = options.bgColor,
        bgopacity = options.bgOpacity,
        xlimit, ylimit, xmin, ymin, xscale, yscale, enabled = true,
        btndown, animating, shift_down;

    docOffset = getPos($img);
    // }}}
    // }}}
    // Internal Modules {{{
    // Touch Module {{{ 
    var Touch = (function () {
      // Touch support detection function adapted (under MIT License)
      // from code by Jeffrey Sambells - http://github.com/iamamused/
      function hasTouchSupport() {
        var support = {},
            events = ['touchstart', 'touchmove', 'touchend'],
            el = document.createElement('div'), i;

        try {
          for(i=0; i<events.length; i++) {
            var eventName = events[i];
            eventName = 'on' + eventName;
            var isSupported = (eventName in el);
            if (!isSupported) {
              el.setAttribute(eventName, 'return;');
              isSupported = typeof el[eventName] == 'function';
            }
            support[events[i]] = isSupported;
          }
          return support.touchstart && support.touchend && support.touchmove;
        }
        catch(err) {
          return false;
        }
      }

      function detectSupport() {
        if ((options.touchSupport === true) || (options.touchSupport === false)) return options.touchSupport;
          else return hasTouchSupport();
      }
      return {
        createDragger: function (ord) {
          return function (e) {
            e.pageX = e.originalEvent.changedTouches[0].pageX;
            e.pageY = e.originalEvent.changedTouches[0].pageY;
            if (options.disabled) {
              return false;
            }
            if ((ord === 'move') && !options.allowMove) {
              return false;
            }
            btndown = true;
            startDragMode(ord, mouseAbs(e));
            e.stopPropagation();
            e.preventDefault();
            return false;
          };
        },
        newSelection: function (e) {
          e.pageX = e.originalEvent.changedTouches[0].pageX;
          e.pageY = e.originalEvent.changedTouches[0].pageY;
          return newSelection(e);
        },
        isSupported: hasTouchSupport,
        support: detectSupport()
      };
    }());
    // }}}
    // Coords Module {{{
    var Coords = (function () {
      var x1 = 0,
          y1 = 0,
          x2 = 0,
          y2 = 0,
          ox, oy;

      function setPressed(pos) //{{{
      {
        pos = rebound(pos);
        x2 = x1 = pos[0];
        y2 = y1 = pos[1];
      }
      //}}}
      function setCurrent(pos) //{{{
      {
        pos = rebound(pos);
        ox = pos[0] - x2;
        oy = pos[1] - y2;
        x2 = pos[0];
        y2 = pos[1];
      }
      //}}}
      function getOffset() //{{{
      {
        return [ox, oy];
      }
      //}}}
      function moveOffset(offset) //{{{
      {
        var ox = offset[0],
            oy = offset[1];

        if (0 > x1 + ox) {
          ox -= ox + x1;
        }
        if (0 > y1 + oy) {
          oy -= oy + y1;
        }

        if (boundy < y2 + oy) {
          oy += boundy - (y2 + oy);
        }
        if (boundx < x2 + ox) {
          ox += boundx - (x2 + ox);
        }

        x1 += ox;
        x2 += ox;
        y1 += oy;
        y2 += oy;
      }
      //}}}
      function getCorner(ord) //{{{
      {
        var c = getFixed();
        switch (ord) {
        case 'ne':
          return [c.x2, c.y];
        case 'nw':
          return [c.x, c.y];
        case 'se':
          return [c.x2, c.y2];
        case 'sw':
          return [c.x, c.y2];
        }
      }
      //}}}
      function getFixed() //{{{
      {
        if (!options.aspectRatio) {
          return getRect();
        }
        // This function could use some optimization I think...
        var aspect = options.aspectRatio,
            min_x = options.minSize[0] / xscale,
            
            
            //min_y = options.minSize[1]/yscale,
            max_x = options.maxSize[0] / xscale,
            max_y = options.maxSize[1] / yscale,
            rw = x2 - x1,
            rh = y2 - y1,
            rwa = Math.abs(rw),
            rha = Math.abs(rh),
            real_ratio = rwa / rha,
            xx, yy, w, h;

        if (max_x === 0) {
          max_x = boundx * 10;
        }
        if (max_y === 0) {
          max_y = boundy * 10;
        }
        if (real_ratio < aspect) {
          yy = y2;
          w = rha * aspect;
          xx = rw < 0 ? x1 - w : w + x1;

          if (xx < 0) {
            xx = 0;
            h = Math.abs((xx - x1) / aspect);
            yy = rh < 0 ? y1 - h : h + y1;
          } else if (xx > boundx) {
            xx = boundx;
            h = Math.abs((xx - x1) / aspect);
            yy = rh < 0 ? y1 - h : h + y1;
          }
        } else {
          xx = x2;
          h = rwa / aspect;
          yy = rh < 0 ? y1 - h : y1 + h;
          if (yy < 0) {
            yy = 0;
            w = Math.abs((yy - y1) * aspect);
            xx = rw < 0 ? x1 - w : w + x1;
          } else if (yy > boundy) {
            yy = boundy;
            w = Math.abs(yy - y1) * aspect;
            xx = rw < 0 ? x1 - w : w + x1;
          }
        }

        // Magic %-)
        if (xx > x1) { // right side
          if (xx - x1 < min_x) {
            xx = x1 + min_x;
          } else if (xx - x1 > max_x) {
            xx = x1 + max_x;
          }
          if (yy > y1) {
            yy = y1 + (xx - x1) / aspect;
          } else {
            yy = y1 - (xx - x1) / aspect;
          }
        } else if (xx < x1) { // left side
          if (x1 - xx < min_x) {
            xx = x1 - min_x;
          } else if (x1 - xx > max_x) {
            xx = x1 - max_x;
          }
          if (yy > y1) {
            yy = y1 + (x1 - xx) / aspect;
          } else {
            yy = y1 - (x1 - xx) / aspect;
          }
        }

        if (xx < 0) {
          x1 -= xx;
          xx = 0;
        } else if (xx > boundx) {
          x1 -= xx - boundx;
          xx = boundx;
        }

        if (yy < 0) {
          y1 -= yy;
          yy = 0;
        } else if (yy > boundy) {
          y1 -= yy - boundy;
          yy = boundy;
        }

        return makeObj(flipCoords(x1, y1, xx, yy));
      }
      //}}}
      function rebound(p) //{{{
      {
        if (p[0] < 0) {
          p[0] = 0;
        }
        if (p[1] < 0) {
          p[1] = 0;
        }

        if (p[0] > boundx) {
          p[0] = boundx;
        }
        if (p[1] > boundy) {
          p[1] = boundy;
        }

        return [p[0], p[1]];
      }
      //}}}
      function flipCoords(x1, y1, x2, y2) //{{{
      {
        var xa = x1,
            xb = x2,
            ya = y1,
            yb = y2;
        if (x2 < x1) {
          xa = x2;
          xb = x1;
        }
        if (y2 < y1) {
          ya = y2;
          yb = y1;
        }
        return [xa, ya, xb, yb];
      }
      //}}}
      function getRect() //{{{
      {
        var xsize = x2 - x1,
            ysize = y2 - y1,
            delta;

        if (xlimit && (Math.abs(xsize) > xlimit)) {
          x2 = (xsize > 0) ? (x1 + xlimit) : (x1 - xlimit);
        }
        if (ylimit && (Math.abs(ysize) > ylimit)) {
          y2 = (ysize > 0) ? (y1 + ylimit) : (y1 - ylimit);
        }

        if (ymin / yscale && (Math.abs(ysize) < ymin / yscale)) {
          y2 = (ysize > 0) ? (y1 + ymin / yscale) : (y1 - ymin / yscale);
        }
        if (xmin / xscale && (Math.abs(xsize) < xmin / xscale)) {
          x2 = (xsize > 0) ? (x1 + xmin / xscale) : (x1 - xmin / xscale);
        }

        if (x1 < 0) {
          x2 -= x1;
          x1 -= x1;
        }
        if (y1 < 0) {
          y2 -= y1;
          y1 -= y1;
        }
        if (x2 < 0) {
          x1 -= x2;
          x2 -= x2;
        }
        if (y2 < 0) {
          y1 -= y2;
          y2 -= y2;
        }
        if (x2 > boundx) {
          delta = x2 - boundx;
          x1 -= delta;
          x2 -= delta;
        }
        if (y2 > boundy) {
          delta = y2 - boundy;
          y1 -= delta;
          y2 -= delta;
        }
        if (x1 > boundx) {
          delta = x1 - boundy;
          y2 -= delta;
          y1 -= delta;
        }
        if (y1 > boundy) {
          delta = y1 - boundy;
          y2 -= delta;
          y1 -= delta;
        }

        return makeObj(flipCoords(x1, y1, x2, y2));
      }
      //}}}
      function makeObj(a) //{{{
      {
        return {
          x: a[0],
          y: a[1],
          x2: a[2],
          y2: a[3],
          w: a[2] - a[0],
          h: a[3] - a[1]
        };
      }
      //}}}

      return {
        flipCoords: flipCoords,
        setPressed: setPressed,
        setCurrent: setCurrent,
        getOffset: getOffset,
        moveOffset: moveOffset,
        getCorner: getCorner,
        getFixed: getFixed
      };
    }());

    //}}}
    // Shade Module {{{
    var Shade = (function() {
      var enabled = false,
          holder = $('<div />').css({
            position: 'absolute',
            zIndex: 240,
            opacity: 0
          }),
          shades = {
            top: createShade(),
            left: createShade().height(boundy),
            right: createShade().height(boundy),
            bottom: createShade()
          };

      function resizeShades(w,h) {
        shades.left.css({ height: px(h) });
        shades.right.css({ height: px(h) });
      }
      function updateAuto()
      {
        return updateShade(Coords.getFixed());
      }
      function updateShade(c)
      {
        shades.top.css({
          left: px(c.x),
          width: px(c.w),
          height: px(c.y)
        });
        shades.bottom.css({
          top: px(c.y2),
          left: px(c.x),
          width: px(c.w),
          height: px(boundy-c.y2)
        });
        shades.right.css({
          left: px(c.x2),
          width: px(boundx-c.x2)
        });
        shades.left.css({
          width: px(c.x)
        });
      }
      function createShade() {
        return $('<div />').css({
          position: 'absolute',
          backgroundColor: options.shadeColor||options.bgColor
        }).appendTo(holder);
      }
      function enableShade() {
        if (!enabled) {
          enabled = true;
          holder.insertBefore($img);
          updateAuto();
          Selection.setBgOpacity(1,0,1);
          $img2.hide();

          setBgColor(options.shadeColor||options.bgColor,1);
          if (Selection.isAwake())
          {
            setOpacity(options.bgOpacity,1);
          }
            else setOpacity(1,1);
        }
      }
      function setBgColor(color,now) {
        colorChangeMacro(getShades(),color,now);
      }
      function disableShade() {
        if (enabled) {
          holder.remove();
          $img2.show();
          enabled = false;
          if (Selection.isAwake()) {
            Selection.setBgOpacity(options.bgOpacity,1,1);
          } else {
            Selection.setBgOpacity(1,1,1);
            Selection.disableHandles();
          }
          colorChangeMacro($div,0,1);
        }
      }
      function setOpacity(opacity,now) {
        if (enabled) {
          if (options.bgFade && !now) {
            holder.animate({
              opacity: 1-opacity
            },{
              queue: false,
              duration: options.fadeTime
            });
          }
          else holder.css({opacity:1-opacity});
        }
      }
      function refreshAll() {
        options.shade ? enableShade() : disableShade();
        if (Selection.isAwake()) setOpacity(options.bgOpacity);
      }
      function getShades() {
        return holder.children();
      }

      return {
        update: updateAuto,
        updateRaw: updateShade,
        getShades: getShades,
        setBgColor: setBgColor,
        enable: enableShade,
        disable: disableShade,
        resize: resizeShades,
        refresh: refreshAll,
        opacity: setOpacity
      };
    }());
    // }}}
    // Selection Module {{{
    var Selection = (function () {
      var awake,
          hdep = 370,
          borders = {},
          handle = {},
          dragbar = {},
          seehandles = false;

      // Private Methods
      function insertBorder(type) //{{{
      {
        var jq = $('<div />').css({
          position: 'absolute',
          opacity: options.borderOpacity
        }).addClass(cssClass(type));
        $img_holder.append(jq);
        return jq;
      }
      //}}}
      function dragDiv(ord, zi) //{{{
      {
        var jq = $('<div />').mousedown(createDragger(ord)).css({
          cursor: ord + '-resize',
          position: 'absolute',
          zIndex: zi
        }).addClass('ord-'+ord);

        if (Touch.support) {
          jq.bind('touchstart.jcrop', Touch.createDragger(ord));
        }

        $hdl_holder.append(jq);
        return jq;
      }
      //}}}
      function insertHandle(ord) //{{{
      {
        var hs = options.handleSize;
        return dragDiv(ord, hdep++).css({
          opacity: options.handleOpacity
        }).width(hs).height(hs).addClass(cssClass('handle'));
      }
      //}}}
      function insertDragbar(ord) //{{{
      {
        return dragDiv(ord, hdep++).addClass('jcrop-dragbar');
      }
      //}}}
      function createDragbars(li) //{{{
      {
        var i;
        for (i = 0; i < li.length; i++) {
          dragbar[li[i]] = insertDragbar(li[i]);
        }
      }
      //}}}
      function createBorders(li) //{{{
      {
        var cl,i;
        for (i = 0; i < li.length; i++) {
          switch(li[i]){
            case'n': cl='hline'; break;
            case's': cl='hline bottom'; break;
            case'e': cl='vline right'; break;
            case'w': cl='vline'; break;
          }
          borders[li[i]] = insertBorder(cl);
        }
      }
      //}}}
      function createHandles(li) //{{{
      {
        var i;
        for (i = 0; i < li.length; i++) {
          handle[li[i]] = insertHandle(li[i]);
        }
      }
      //}}}
      function moveto(x, y) //{{{
      {
        if (!options.shade) {
          $img2.css({
            top: px(-y),
            left: px(-x)
          });
        }
        $sel.css({
          top: px(y),
          left: px(x)
        });
      }
      //}}}
      function resize(w, h) //{{{
      {
        $sel.width(w).height(h);
      }
      //}}}
      function refresh() //{{{
      {
        var c = Coords.getFixed();

        Coords.setPressed([c.x, c.y]);
        Coords.setCurrent([c.x2, c.y2]);

        updateVisible();
      }
      //}}}

      // Internal Methods
      function updateVisible(select) //{{{
      {
        if (awake) {
          return update(select);
        }
      }
      //}}}
      function update(select) //{{{
      {
        var c = Coords.getFixed();

        resize(c.w, c.h);
        moveto(c.x, c.y);
        if (options.shade) Shade.updateRaw(c);

        awake || show();

        if (select) {
          options.onSelect.call(api, unscale(c));
        } else {
          options.onChange.call(api, unscale(c));
        }
      }
      //}}}
      function setBgOpacity(opacity,force,now) //{{{
      {
        if (!awake && !force) return;
        if (options.bgFade && !now) {
          $img.animate({
            opacity: opacity
          },{
            queue: false,
            duration: options.fadeTime
          });
        } else {
          $img.css('opacity', opacity);
        }
      }
      //}}}
      function show() //{{{
      {
        $sel.show();

        if (options.shade) Shade.opacity(bgopacity);
          else setBgOpacity(bgopacity,true);

        awake = true;
      }
      //}}}
      function release() //{{{
      {
        disableHandles();
        $sel.hide();

        if (options.shade) Shade.opacity(1);
          else setBgOpacity(1);

        awake = false;
        options.onRelease.call(api);
      }
      //}}}
      function showHandles() //{{{
      {
        if (seehandles) {
          $hdl_holder.show();
        }
      }
      //}}}
      function enableHandles() //{{{
      {
        seehandles = true;
        if (options.allowResize) {
          $hdl_holder.show();
          return true;
        }
      }
      //}}}
      function disableHandles() //{{{
      {
        seehandles = false;
        $hdl_holder.hide();
      } 
      //}}}
      function animMode(v) //{{{
      {
        if (animating === v) {
          disableHandles();
        } else {
          enableHandles();
        }
      } 
      //}}}
      function done() //{{{
      {
        animMode(false);
        refresh();
      } 
      //}}}
      // Insert draggable elements {{{
      // Insert border divs for outline

      if (options.dragEdges && $.isArray(options.createDragbars))
        createDragbars(options.createDragbars);

      if ($.isArray(options.createHandles))
        createHandles(options.createHandles);

      if (options.drawBorders && $.isArray(options.createBorders))
        createBorders(options.createBorders);

      //}}}

      // This is a hack for iOS5 to support drag/move touch functionality
      $(document).bind('touchstart.jcrop-ios',function(e) {
        if ($(e.currentTarget).hasClass('jcrop-tracker')) e.stopPropagation();
      });

      var $track = newTracker().mousedown(createDragger('move')).css({
        cursor: 'move',
        position: 'absolute',
        zIndex: 360
      });

      if (Touch.support) {
        $track.bind('touchstart.jcrop', Touch.createDragger('move'));
      }

      $img_holder.append($track);
      disableHandles();

      return {
        updateVisible: updateVisible,
        update: update,
        release: release,
        refresh: refresh,
        isAwake: function () {
          return awake;
        },
        setCursor: function (cursor) {
          $track.css('cursor', cursor);
        },
        enableHandles: enableHandles,
        enableOnly: function () {
          seehandles = true;
        },
        showHandles: showHandles,
        disableHandles: disableHandles,
        animMode: animMode,
        setBgOpacity: setBgOpacity,
        done: done
      };
    }());
    
    //}}}
    // Tracker Module {{{
    var Tracker = (function () {
      var onMove = function () {},
          onDone = function () {},
          trackDoc = options.trackDocument;

      function toFront() //{{{
      {
        $trk.css({
          zIndex: 450
        });
        if (Touch.support) {
          $(document)
            .bind('touchmove.jcrop', trackTouchMove)
            .bind('touchend.jcrop', trackTouchEnd);
        }
        if (trackDoc) {
          $(document)
            .bind('mousemove.jcrop',trackMove)
            .bind('mouseup.jcrop',trackUp);
        }
      } 
      //}}}
      function toBack() //{{{
      {
        $trk.css({
          zIndex: 290
        });
        $(document).unbind('.jcrop');
      } 
      //}}}
      function trackMove(e) //{{{
      {
        onMove(mouseAbs(e));
        return false;
      } 
      //}}}
      function trackUp(e) //{{{
      {
        e.preventDefault();
        e.stopPropagation();

        if (btndown) {
          btndown = false;

          onDone(mouseAbs(e));

          if (Selection.isAwake()) {
            options.onSelect.call(api, unscale(Coords.getFixed()));
          }

          toBack();
          onMove = function () {};
          onDone = function () {};
        }

        return false;
      }
      //}}}
      function activateHandlers(move, done) //{{{
      {
        btndown = true;
        onMove = move;
        onDone = done;
        toFront();
        return false;
      }
      //}}}
      function trackTouchMove(e) //{{{
      {
        e.pageX = e.originalEvent.changedTouches[0].pageX;
        e.pageY = e.originalEvent.changedTouches[0].pageY;
        return trackMove(e);
      }
      //}}}
      function trackTouchEnd(e) //{{{
      {
        e.pageX = e.originalEvent.changedTouches[0].pageX;
        e.pageY = e.originalEvent.changedTouches[0].pageY;
        return trackUp(e);
      }
      //}}}
      function setCursor(t) //{{{
      {
        $trk.css('cursor', t);
      }
      //}}}

      if (!trackDoc) {
        $trk.mousemove(trackMove).mouseup(trackUp).mouseout(trackUp);
      }

      $img.before($trk);
      return {
        activateHandlers: activateHandlers,
        setCursor: setCursor
      };
    }());
    //}}}
    // KeyManager Module {{{
    var KeyManager = (function () {
      var $keymgr = $('<input type="radio" />').css({
        position: 'fixed',
        left: '-120px',
        width: '12px'
      }),
          $keywrap = $('<div />').css({
          position: 'absolute',
          overflow: 'hidden'
        }).append($keymgr);

      function watchKeys() //{{{
      {
        if (options.keySupport) {
          $keymgr.show();
          $keymgr.focus();
        }
      }
      //}}}
      function onBlur(e) //{{{
      {
        $keymgr.hide();
      }
      //}}}
      function doNudge(e, x, y) //{{{
      {
        if (options.allowMove) {
          Coords.moveOffset([x, y]);
          Selection.updateVisible(true);
        }
        e.preventDefault();
        e.stopPropagation();
      }
      //}}}
      function parseKey(e) //{{{
      {
        if (e.ctrlKey || e.metaKey) {
          return true;
        }
        shift_down = e.shiftKey ? true : false;
        var nudge = shift_down ? 10 : 1;

        switch (e.keyCode) {
        case 37:
          doNudge(e, -nudge, 0);
          break;
        case 39:
          doNudge(e, nudge, 0);
          break;
        case 38:
          doNudge(e, 0, -nudge);
          break;
        case 40:
          doNudge(e, 0, nudge);
          break;
        case 27:
          if (options.allowSelect) Selection.release();
          break;
        case 9:
          return true;
        }

        return false;
      }
      //}}}

      if (options.keySupport) {
        $keymgr.keydown(parseKey).blur(onBlur);
        if (ie6mode || !options.fixedSupport) {
          $keymgr.css({
            position: 'absolute',
            left: '-20px'
          });
          $keywrap.append($keymgr).insertBefore($img);
        } else {
          $keymgr.insertBefore($img);
        }
      }


      return {
        watchKeys: watchKeys
      };
    }());
    //}}}
    // }}}
    // API methods {{{
    function setClass(cname) //{{{
    {
      $div.removeClass().addClass(cssClass('holder')).addClass(cname);
    }
    //}}}
    function animateTo(a, callback) //{{{
    {
      var x1 = a[0] / xscale,
          y1 = a[1] / yscale,
          x2 = a[2] / xscale,
          y2 = a[3] / yscale;

      if (animating) {
        return;
      }

      var animto = Coords.flipCoords(x1, y1, x2, y2),
          c = Coords.getFixed(),
          initcr = [c.x, c.y, c.x2, c.y2],
          animat = initcr,
          interv = options.animationDelay,
          ix1 = animto[0] - initcr[0],
          iy1 = animto[1] - initcr[1],
          ix2 = animto[2] - initcr[2],
          iy2 = animto[3] - initcr[3],
          pcent = 0,
          velocity = options.swingSpeed;

      x = animat[0];
      y = animat[1];
      x2 = animat[2];
      y2 = animat[3];

      Selection.animMode(true);
      var anim_timer;

      function queueAnimator() {
        window.setTimeout(animator, interv);
      }
      var animator = (function () {
        return function () {
          pcent += (100 - pcent) / velocity;

          animat[0] = x + ((pcent / 100) * ix1);
          animat[1] = y + ((pcent / 100) * iy1);
          animat[2] = x2 + ((pcent / 100) * ix2);
          animat[3] = y2 + ((pcent / 100) * iy2);

          if (pcent >= 99.8) {
            pcent = 100;
          }
          if (pcent < 100) {
            setSelectRaw(animat);
            queueAnimator();
          } else {
            Selection.done();
            if (typeof(callback) === 'function') {
              callback.call(api);
            }
          }
        };
      }());
      queueAnimator();
    }
    //}}}
    function setSelect(rect) //{{{
    {
      setSelectRaw([rect[0] / xscale, rect[1] / yscale, rect[2] / xscale, rect[3] / yscale]);
      options.onSelect.call(api, unscale(Coords.getFixed()));
      Selection.enableHandles();
    }
    //}}}
    function setSelectRaw(l) //{{{
    {
      Coords.setPressed([l[0], l[1]]);
      Coords.setCurrent([l[2], l[3]]);
      Selection.update();
    }
    //}}}
    function tellSelect() //{{{
    {
      return unscale(Coords.getFixed());
    }
    //}}}
    function tellScaled() //{{{
    {
      return Coords.getFixed();
    }
    //}}}
    function setOptionsNew(opt) //{{{
    {
      setOptions(opt);
      interfaceUpdate();
    }
    //}}}
    function disableCrop() //{{{
    {
      options.disabled = true;
      Selection.disableHandles();
      Selection.setCursor('default');
      Tracker.setCursor('default');
    }
    //}}}
    function enableCrop() //{{{
    {
      options.disabled = false;
      interfaceUpdate();
    }
    //}}}
    function cancelCrop() //{{{
    {
      Selection.done();
      Tracker.activateHandlers(null, null);
    }
    //}}}
    function destroy() //{{{
    {
      $div.remove();
      $origimg.show();
      $(obj).removeData('Jcrop');
    }
    //}}}
    function setImage(src, callback) //{{{
    {
      Selection.release();
      disableCrop();
      var img = new Image();
      img.onload = function () {
        var iw = img.width;
        var ih = img.height;
        var bw = options.boxWidth;
        var bh = options.boxHeight;
        $img.width(iw).height(ih);
        $img.attr('src', src);
        $img2.attr('src', src);
        presize($img, bw, bh);
        boundx = $img.width();
        boundy = $img.height();
        $img2.width(boundx).height(boundy);
        $trk.width(boundx + (bound * 2)).height(boundy + (bound * 2));
        $div.width(boundx).height(boundy);
        Shade.resize(boundx,boundy);
        enableCrop();

        if (typeof(callback) === 'function') {
          callback.call(api);
        }
      };
      img.src = src;
    }
    //}}}
    function colorChangeMacro($obj,color,now) {
      var mycolor = color || options.bgColor;
      if (options.bgFade && supportsColorFade() && options.fadeTime && !now) {
        $obj.animate({
          backgroundColor: mycolor
        }, {
          queue: false,
          duration: options.fadeTime
        });
      } else {
        $obj.css('backgroundColor', mycolor);
      }
    }
    function interfaceUpdate(alt) //{{{
    // This method tweaks the interface based on options object.
    // Called when options are changed and at end of initialization.
    {
      if (options.allowResize) {
        if (alt) {
          Selection.enableOnly();
        } else {
          Selection.enableHandles();
        }
      } else {
        Selection.disableHandles();
      }

      Tracker.setCursor(options.allowSelect ? 'crosshair' : 'default');
      Selection.setCursor(options.allowMove ? 'move' : 'default');

      if (options.hasOwnProperty('trueSize')) {
        xscale = options.trueSize[0] / boundx;
        yscale = options.trueSize[1] / boundy;
      }

      if (options.hasOwnProperty('setSelect')) {
        setSelect(options.setSelect);
        Selection.done();
        delete(options.setSelect);
      }

      Shade.refresh();

      if (options.bgColor != bgcolor) {
        colorChangeMacro(
          options.shade? Shade.getShades(): $div,
          options.shade?
            (options.shadeColor || options.bgColor):
            options.bgColor
        );
        bgcolor = options.bgColor;
      }

      if (bgopacity != options.bgOpacity) {
        bgopacity = options.bgOpacity;
        if (options.shade) Shade.refresh();
          else Selection.setBgOpacity(bgopacity);
      }

      xlimit = options.maxSize[0] || 0;
      ylimit = options.maxSize[1] || 0;
      xmin = options.minSize[0] || 0;
      ymin = options.minSize[1] || 0;

      if (options.hasOwnProperty('outerImage')) {
        $img.attr('src', options.outerImage);
        delete(options.outerImage);
      }

      Selection.refresh();
    }
    //}}}
    //}}}

    if (Touch.support) $trk.bind('touchstart.jcrop', Touch.newSelection);

    $hdl_holder.hide();
    interfaceUpdate(true);

    var api = {
      setImage: setImage,
      animateTo: animateTo,
      setSelect: setSelect,
      setOptions: setOptionsNew,
      tellSelect: tellSelect,
      tellScaled: tellScaled,
      setClass: setClass,

      disable: disableCrop,
      enable: enableCrop,
      cancel: cancelCrop,
      release: Selection.release,
      destroy: destroy,

      focus: KeyManager.watchKeys,

      getBounds: function () {
        return [boundx * xscale, boundy * yscale];
      },
      getWidgetSize: function () {
        return [boundx, boundy];
      },
      getScaleFactor: function () {
        return [xscale, yscale];
      },
      getOptions: function() {
        // careful: internal values are returned
        return options;
      },

      ui: {
        holder: $div,
        selection: $sel
      }
    };

    if ($.browser.msie)
      $div.bind('selectstart', function () { return false; });

    $origimg.data('Jcrop', api);
    return api;
  };
  $.fn.Jcrop = function (options, callback) //{{{
  {
    var api;
    // Iterate over each object, attach Jcrop
    this.each(function () {
      // If we've already attached to this object
      if ($(this).data('Jcrop')) {
        // The API can be requested this way (undocumented)
        if (options === 'api') return $(this).data('Jcrop');
        // Otherwise, we just reset the options...
        else $(this).data('Jcrop').setOptions(options);
      }
      // If we haven't been attached, preload and attach
      else {
        if (this.tagName == 'IMG')
          $.Jcrop.Loader(this,function(){
            $(this).css({display:'block',visibility:'hidden'});
            api = $.Jcrop(this, options);
            if ($.isFunction(callback)) callback.call(api);
          });
        else {
          $(this).css({display:'block',visibility:'hidden'});
          api = $.Jcrop(this, options);
          if ($.isFunction(callback)) callback.call(api);
        }
      }
    });

    // Return "this" so the object is chainable (jQuery-style)
    return this;
  };
  //}}}
  // $.Jcrop.Loader - basic image loader {{{

  $.Jcrop.Loader = function(imgobj,success,error){
    var $img = $(imgobj), img = $img[0];

    function completeCheck(){
      if (img.complete) {
        $img.unbind('.jcloader');
        if ($.isFunction(success)) success.call(img);
      }
      else window.setTimeout(completeCheck,50);
    }

    $img
      .bind('load.jcloader',completeCheck)
      .bind('error.jcloader',function(e){
        $img.unbind('.jcloader');
        if ($.isFunction(error)) error.call(img);
      });

    if (img.complete && $.isFunction(success)){
      $img.unbind('.jcloader');
      success.call(img);
    }
  };

  //}}}
  // Global Defaults {{{
  $.Jcrop.defaults = {

    // Basic Settings
    allowSelect: true,
    allowMove: true,
    allowResize: true,

    trackDocument: true,

    // Styling Options
    baseClass: 'jcrop',
    addClass: null,
    bgColor: 'black',
    bgOpacity: 0.6,
    bgFade: false,
    borderOpacity: 0.4,
    handleOpacity: 0.5,
    handleSize: 7,

    aspectRatio: 0,
    keySupport: true,
    createHandles: ['n','s','e','w','nw','ne','se','sw'],
    createDragbars: ['n','s','e','w'],
    createBorders: ['n','s','e','w'],
    drawBorders: true,
    dragEdges: true,
    fixedSupport: true,
    touchSupport: null,

    shade: null,

    boxWidth: 0,
    boxHeight: 0,
    boundary: 2,
    fadeTime: 400,
    animationDelay: 20,
    swingSpeed: 3,

    minSelect: [0, 0],
    maxSize: [0, 0],
    minSize: [0, 0],

    // Callbacks / Event Handlers
    onChange: function () {},
    onSelect: function () {},
    onDblClick: function () {},
    onRelease: function () {}
  };

  // }}}
}(jQuery));

$( '#confirmCropButton' ).live( 'click', function() {
    var sel = jcrop.tellSelect(); //this gives top left coord, bottom right coord, height and width.
    var src = $( '.imageToBeCropped' ).attr( 'src' );
    //alert( sel.x + ' ' + sel.y + ' ' + sel.x2 + ' ' + sel.y2 + ' ' + sel.w + ' ' + sel.h + ' ' + src );
    if( sel.x - sel.x2 == 0 || sel.y - sel.y2 == 0 ) {
        alert( 'You haven\'t selected anything to crop!' );
        return false;
    }
    $.ajax( {  type: "POST",
                url: 'crop.php',
                cache: false,
                data: {'x1': sel.x, 'y1': sel.y, 'x2': sel.x2, 'y2': sel.y2, 'src': src },
                success: function( msg ) {
                    try {
                        msg = $.parseJSON( msg );
                        if( isNull( msg.valid ) || msg.valid == false || msg.valid == 0 || msg.valid == 'false' ) {
                            alert( msg );
                        } else {
                            alert( 'Image successfully cropped and saved!' );
                            $( '#pho_' + msg.albumid ).click();
                        }
                    } catch( e ) {
                        alert( msg );
                    }
                    return false;
                },
                error: function( msg ) {
                    alert( msg );
                    return false;
                }
            } );
} );

function launchCropTool() {
    var selectedObject = canvas.getActiveObject();
    if( isNull( selectedObject ) || selectedObject.type != "image" ) {
        alert( 'You must select a photo that you\'ve already added to your scrapbook' );
        return false;
    }

    var holderHtml = '<div id="imageToBeCroppedHolder">';
    holderHtml = holderHtml + '<div id="cropInstructions"><span class="instTop">Drag to select an area on the image, then click "crop" to crop.</span><br>';
    holderHtml = holderHtml + '<span class="instBot"> Both the new crop and the original image will still be saved.</span></div>';
    holderHtml = holderHtml + '<br><img src="' + selectedObject.getSrc() + '" class="imageToBeCropped">' + '<br>';
    holderHtml = holderHtml + '<img src="images/cropPopupCropButton.png" id="confirmCropButton">';
    holderHtml = holderHtml + '</div>';
    $( document ).bind( 'cbox_complete', function() {
        $( '.imageToBeCropped' ).Jcrop( {boxWidth: 400, boxHeight: 400}, function() {
            jcrop = this;
            $( '.jcrop-holder' ).css( 'display', 'inline-block' );
            var pos = $( '#imageToBeCroppedHolder' ).position();
            $( '#cboxClose' ).css( {'left': (pos.left + 10) + 'px', 'top': (-1 * pos.top - 20) + 'px'} );
            $.colorbox.resize();
        } );
    } );
    $.colorbox( {
                    html: holderHtml,
                    scrolling: true,
                    fastIframe: false,
                    onLoad: function() {
                        $( '#cboxClose' ).css( {height: '45px', width: '45px', 'position': 'absolute'} );
                    },
                    onComplete: function() {
                        jcrop.release();
                    },
                    onClose: function() {
                        jcrop.release();
                        jcrop.destroy();
                        $( '.imageToBeCropped' ).remove();
                        $( '.jcrop-holder' ).remove();
                        $( '#cboxClose' ).css( {height: 0, width: 0, 'position': 'relative'} );
                    },
                    onClosed: function() {
                        jcrop.release();
                        jcrop.destroy();
                        $( '.imageToBeCropped' ).remove();
                        $( '.jcrop-holder' ).remove();
                    }
                } );

}

// This function is bound to the onRelease handler...
// In certain circumstances (such as if you set minSize
// and aspectRatio together), you can inadvertently lose
// the selection. This callback re-enables creating selections
// in such a case. Although the need to do this is based on a
// buggy behavior, it's recommended that you in some way trap
// the onRelease callback if you use allowSelect: false
function releaseCheck() {
    jcrop.setOptions( { allowSelect: true } );
    $( '#can_click' ).attr( 'checked', false );
}

/*
 * 07/10/2012
 */
var canvas, fabric, page_zoom, isDelay;
var g_selBackground = 1;
var moveDistancex = [];
var moveDistancey = [];
var book_width = 1050;
var book_height = 600;
var book_posx = 425;
var book_posy = 315;
var default_zoom = 0.6;
var g_trinketsInDiv, g_fontInDiv;
var g_UndoObject = null;
var bookPageImagePath = "images/book.png";
var bookFrontCoverPath = "images/book_cover.png";
var bookBorder = "images/wallpaper_border.png";
var save_string = "Do you want to save changes to this page?";
var SELECT_MSG = "You must select something before you can send it to the back.";
var save_filed_string = "save failed...";
var saveurl = "save.php";
var issaved = false;
var isPreview = false;
var jcrop;

$( document ).ready( function() {
    Cufon.now();

    g_UndoObject = new Undo();

    $( '#cropBtn' ).click( function() {
        launchCropTool();
    } );

    // Prevent text selection
    $( '*' ).live( 'selectstart', function( e ) {
        if( $( '#addTextBox' ).is( ":focus" ) ) {
            return true;
        }

        return false;
    } );
    //keep the page scrolled up to the top
    $( 'body' ).scroll( function() {
        currentScrollTop = $( "#div" ).scrollTop();
    } );

    //initialize font editor components
    $( '#text-align-container' ).find( '.text-align-span' ).live( 'click', function() {
        $( '#text-align-container' ).find( '.text-align-span' ).each( function() {
            $( this ).removeClass( 'text-align-selected' );
            var src = $( this ).css( 'background-image' );
            if( src.indexOf( '_selected' ) >= 0 ) {
                $( this ).css( 'background-image', src.replace( '_selected.png', '.png' ) );
            }
        } );
        $( this ).css( 'background-image', $( this ).css( 'background-image' ).replace( '.png', '_selected.png' ) ).addClass( 'text-align-selected' );

        var id = $( this ).attr( 'id' );
        var text_aligns = id.split( '-' );

        $( '#txtFont' ).css( 'text-align', text_aligns[1] );
        $( '#editorVerticalFonts' ).find( '.fonts' ).each( function() {
            $( this ).find( 'textarea' ).css( 'text-align', text_aligns[1] );
        } );

        //add Canvas text
        $( '#addTextBox' ).css( 'text-align', text_aligns[1] );
        var sel_text = canvas.getActiveObject();
        if( sel_text.type == "text" ) {
            if( text_aligns[1] == "justify" ) {
                text_aligns[1] = "left";
            }
            sel_text.textAlign = text_aligns[1].toLowerCase();
            canvas.renderAll();
        }
    } );
    $( 'textarea#txtFont' ).live( 'click',function() {
        if( $( this ).val().toUpperCase() == ('Type your text here...').toUpperCase() ) {
            $( this ).val( '' );
        }
    } ).live( 'blur', function() {
                  if( $( this ).val() == '' ) {
                      $( this ).val( 'Type your text here...' );
                  }
              } );
    $( '#fontColorSelectorLabel' ).live( 'click', function() {
        $( '#fontColorSelector' ).click();
    } );

    $( '#backgroundColorSelectorLabel' ).live( 'click', function() {
        $( '#backgroundColorSelector' ).click();
    } );

    if( $( '#editorScrapbookCanvas' ).html() == null ) {
        return;
    }
    canvas = new fabric.Canvas( 'editorScrapbookCanvas' );
    canvas.selection = false;
    canvas.backgroundColor = 'rgba(48,62,71,1)';
    canvas.renderAll();

    //allow deleting canvas objects with the delete key
    $( 'html' ).keyup( function( e ) {
        if( e.keyCode == 46 || e.keyCode == 8 ) {
            if( $( '#addTextBox' ).is( ":focus" ) ) {
                return false;
            }
            var selected = canvas.getActiveObject();
            if( selected != g_selBackground ) {
                g_UndoObject.action = "delete-object";
                g_UndoObject.curItem = null;
                canvas.remove( selected );
            }
        }
    } );

    $( '#txtFont' ).live( 'focus', function() {
        canvas.deactivateAll();
    } );

    canvas.observe( 'object:selected', function( e ) {
        g_UndoObject.setUndoItem( e.target );
        if( e.target != g_selBackground ) {
            canvas.bringToFront( e.target );
        }

        if( g_selBackground == e.target ) {
            getDistances();
            g_UndoObject.undoItem = '{"left":"' + g_selBackground.get( 'left' ) + '",';
            g_UndoObject.undoItem += '"top":"' + g_selBackground.get( 'top' ) + '"}';
        }
        $( '#addTextBox' ).hide();
        if( e.target.type == "text" ) {
            positionTextBox( e.target );
            var colpick = $( '#' + $( '#fontColorSelector' ).data( 'colorpickerId' ) );
            colpick.find( '.colorpicker_current_color, .colorpicker_new_color' ).add( '#fontColorSelector div' ).css( 'background-color', e.target.fill );
            $( '#addTextBox' ).show();
        }

    } );

    canvas.observe( 'object:modified', function( e ) {
        dropped = e.target;
        droppedLeft = dropped.get( 'left' );
        droppedTop = dropped.get( 'top' );

        droppedWidth = 0 - dropped.getWidth() / 4;
        droppedHeight = 0 - dropped.getHeight() / 4;

        canvasHeight = canvas.getHeight();
        canvasWidth = canvas.getWidth();

        g_UndoObject.action = "move-object";
        if( e.target == g_selBackground ) {
            g_UndoObject.action = "move-background";
        }
        g_UndoObject.curItem = e.target;
        if( droppedLeft > canvasWidth || droppedLeft < droppedWidth || droppedTop > canvasHeight || droppedTop < droppedHeight ) {
            if( e.target != g_selBackground ) {
                //g_UndoObject.setUndoItem(e.target);
                g_UndoObject.action = "delete-object";
                g_UndoObject.curItem = null;
                canvas.remove( e.target );
            }
        }
        issaved = true;

    } );
    canvas.observe( 'object:added', function( e ) {
        // undo/redo
        if( g_UndoObject.action != "" ) {
            g_UndoObject.curItem = e.target;
        }

        if( e.target != g_selBackground ) {
            e.target.hasRotatingPoint = true;
        }
        $( '#addTextBox' ).hide();
    } );
    // default load book.png loaded
    loadPage();

    g_trinketsInDiv = false;
    g_fontInDiv = false;

    canvas.observe( 'object:moving', function( e ) {
        issaved = true;
        if( g_selBackground == e.target ) {
            setDistances();
        }
        if( e.target.type == "text" ) {
            $( '#addTextBox' ).hide();
        }
    } );
    canvas.observe( 'mouse:down', function( e ) {
        try {
            if( e.target.type == "text" ) {
                positionTextBox( e.target );
                $( '#addTextBox' ).show();
            }
        } catch( e ) {
            $( '#addTextBox' ).hide();
        }
    } );
    // search tager on canvas
    canvas.findTarget = (function( originalFn ) {
        return function() {
            var target = originalFn.apply( this, arguments );
            if( target ) {
                if( this._hoveredTarget !== target ) {
                    canvas.fire( 'object:over', {target: target} );
                    if( this._hoveredTarget ) {
                        canvas.fire( 'object:out', {target: this._hoveredTarget} );
                    }
                    this._hoveredTarget = target;
                }
            } else if( this._hoveredTarget ) {
                canvas.fire( 'object:out', {target: this._hoveredTarget} );
                this._hoveredTarget = null;
            }
            return target;
        };
    })( canvas.findTarget );

    //allow editing of text thats already been added
    $( '#addTextBox' ).keyup( function( event ) {
        var obj = canvas.getActiveObject();
        if( obj.type == "text" ) {
            obj.setText( $( '#addTextBox' ).val() );
        }
        canvas.renderAll();
    } );

    // Top menu buttons
    $( '#saveProgress' ).click( function() {
        savePage();
    } );
    $( '.closeEditor' ).click( function() {
        savePage();
        window.parent.$( '#cboxClose' ).click();
    } );
    $( '#inEditorPreview' ).click( function() {
        addPreview( $( '#book_id' ).val() );
    } );

    initializeTrinkets();
    initializeFilters();
    initializeBorders();
    initializeFonts();
    initializeWallpapers();
    initializeZoomScrollbar();

    //hopefully ensure that fonts are already loaded and correctly initialized
    Cufon.CSS.ready( function() {
        canvas.renderAll();
        setTimeout( function() {
            canvas.renderAll();
        }, 300 );
    } );

    $( '#send_to_back' ).click( function() {
        var selObj = canvas.getActiveObject();
        if( selObj == null || selObj == g_selBackground ) {
            selObj = canvas.getActiveGroup();
        }
        if( selObj == null || selObj == g_selBackground ) {
            alert( SELECT_MSG );
            return;
        }
        canvas.sendToBack( selObj );
        canvas.sendToBack( g_selBackground );
    } );

    $( '#scrapbookPageNumber' ).change( function() {
        loadPage();
    } );

    $( '#undoBtn' ).click( function() {
        g_UndoObject.runUndo();
    } );
    $( '#redoBtn' ).click( function() {
        g_UndoObject.runRedo();
    } );

} );
// Prevent the backspace key from navigating back.
$( document ).unbind( 'keydown' ).bind( 'keydown', function( event ) {
    var doPrevent = false;
    if( event.keyCode === 8 ) {
        var d = event.srcElement || event.target;
        if( (d.tagName.toUpperCase() === 'INPUT' && (d.type.toUpperCase() === 'TEXT' || d.type.toUpperCase() === 'PASSWORD')) || d.tagName.toUpperCase() === 'TEXTAREA' ) {
            doPrevent = d.readOnly || d.disabled;
        } else {
            doPrevent = true;
        }
    }

    if( doPrevent ) {
        event.preventDefault();
    }
} );

// convert canvas to json files
function getCanvasToJsons() {
    var jsons = '{"bookId":"';
    jsons += $( '#book_id' ).val() + '", "pages":"';
    jsons += $( "#scrapbookPageNumber" ).val() + '",';
    jsons += '"zoom":';
    jsons += '"' + default_zoom + '",';
    jsons += '"backgroundImage":';
    jsons += '"' + canvas.backgroundImage.src + '",';
    jsons += '"backgroundcolor":';
    jsons += '"' + canvas.backgroundColor + '",';
    jsons += '"images":[';
    var items = canvas.getObjects();
    var temp = "";
    $.each( items, function( index, item ) {
        var type = item.type;
        if( type == "image" ) {
            temp += getImageToJson( item ) + ",";
        } else if( type == "text" ) {
            temp += getTextToJson( item ) + ",";
        } else if( type == "group" ) {
            temp += getGroupToJson( item ) + ",";
        }
    } );
    jsons += temp.substring( 0, temp.length - 1 ) + ']}';
    return jsons;
}
function getGroupToJson( obj ) {
    var json;
    json = '{"type":"group",';
    if( obj == g_selBackground ) {
        json = '{"type":"background",';
    }
    var px = (obj.get( 'left' ) - g_selBackground.get( 'left' )) / page_zoom * default_zoom;
    var py = (obj.get( 'top' ) - g_selBackground.get( 'top' )) / page_zoom * default_zoom;

    json += '"left":"' + px + '",';
    json += '"top":"' + py + '",';
    json += '"scaleX":"' + obj.get( 'scaleX' ) / page_zoom * default_zoom + '",';
    json += '"scaleY":"' + obj.get( 'scaleY' ) / page_zoom * default_zoom + '",';
    json += '"angle":"' + obj.getAngle() + '",';
    json += '"items":[';
    var items = obj.getObjects();
    var temp = '';
    $.each( items, function( index, item ) {
        temp += getImageToJson( item, true ) + ",";
    } );
    var size = temp.length;
    json += temp.substring( 0, size - 1 ) + ']}';
    //   var j = JSON.parse( json );
    //      alert(json);
    return json;
}
function getImageToJson( img, isGroup ) {
    var j = img.toJSON();
    var jsons = "{";
    var filter = -1;
    for( var i = 0; i < 17; i++ ) {
        if( j.filters[i] != 0 && !isNull( j.filters[i] ) ) {
            filter = i;
            break;
        }
    }
    var px = (j.left - g_selBackground.get( 'left' )) / page_zoom * default_zoom;
    var py = (j.top - g_selBackground.get( 'top' )) / page_zoom * default_zoom;
    jsons += '"type":"' + j.type + '",';
    jsons += '"left":"' + px + '",';
    jsons += '"top":"' + py + '",';
    jsons += '"src":"' + j.src + '",';
    if( isGroup ) {
        jsons += '"scaleX":"' + j.scaleX + '",';
        jsons += '"scaleY":"' + j.scaleY + '",';
    } else {
        jsons += '"scaleX":"' + j.scaleX / page_zoom * default_zoom + '",';
        jsons += '"scaleY":"' + j.scaleY / page_zoom * default_zoom + '",';
    }
    jsons += '"angle":"' + j.angle + '",';
    jsons += '"filter":"' + filter + '"}';
    return jsons;
}

function getTextToJson( text ) {
    var json = text.toJSON();
    var jsons = "{";
    var px = (json.left - g_selBackground.get( 'left' )) / page_zoom * default_zoom;
    var py = (json.top - g_selBackground.get( 'top' )) / page_zoom * default_zoom;
    jsons += '"type":"' + json.type + '",';
    jsons += '"left":"' + px + '",';
    jsons += '"top":"' + py + '",';
    jsons += '"text":"' + escape( json.text ) + '",';
    jsons += '"scaleX":"' + (json.scaleX) / page_zoom * default_zoom + '",';
    jsons += '"scaleY":"' + (json.scaleY) / page_zoom * default_zoom + '",';
    jsons += '"angle":"' + json.angle + '",';
    jsons += '"fontFamily":"' + json.fontFamily + '",';
    jsons += '"fill":"' + json.fill + '",';
    jsons += '"textAlign":"' + json.textAlign + '"}';
    return jsons;
}

function clearCanvas() {
    canvas.clear();
    if( g_selBackground != null ) {
        delete g_selBackground;
        g_selBackground = null;
    }
    page_zoom = default_zoom;
    $( '#zoom_handle' ).css( 'left', 0 );
}

function preLoadBackground() {
    // default load book.png loaded
    bookPageImagePath = "images/book.png";
    if( $( '#scrapbookPageNumber' ).val() == "0" || $( '#scrapbookPageNumber' ).val() == 0 ) {
        bookPageImagePath = bookFrontCoverPath;
    }

    fabric.Image.fromURL( bookPageImagePath, function( obj ) {
        obj.hasRotatingPoint = false;
        obj.set( 'left', book_posx );
        obj.set( 'top', book_posy );

        var scalex = book_width / obj.get( 'width' ) * default_zoom;
        var scaley = book_height / obj.get( 'height' ) * default_zoom;

        obj.set( 'scaleX', scalex );
        obj.set( 'scaleY', scaley );
        var objArray = [];
        fabric.Image.fromURL( bookBorder, function( bg_border ) {
            bg_border.hasRotatingPoint = false;
            bg_border.set( 'left', book_posx );
            bg_border.set( 'top', book_posy );
            bg_border.set( 'scaleX', scalex );
            bg_border.set( 'scaleY', scaley );
            objArray.push( obj );
            objArray.push( bg_border );
            g_selBackground = new fabric.Group( objArray );
            if( $( '#scrapbookPageNumber' ).val() == "0" ) {
                g_selBackground.set( 'scaleX', 0.5 );
            }
            g_selBackground.hasBorder = g_selBackground.hasControls = false;
            canvas.add( g_selBackground );
        } );
    } );
    // load background color
    var backgroundColor = 'rgba(48,62,71,1)';
    $( '#backgroundColorSelector' ).find( 'div' ).css( 'background-color', backgroundColor );
    canvas.backgroundColor = backgroundColor;
    canvas.renderAll();
    g_UndoObject = new Undo();
}

// savePage
function savePage() {
    if( issaved ) {
        if( confirm( save_string ) ) {
            var strData = getCanvasToJsons();
            $.ajax( {
                        type: "POST",
                        url: saveurl,
                        cache: false,
                        data: {method: 'save', data: strData, bookId: $( "#book_id" ).val()},
                        success: function( msg ) {
                            if( msg == "error" ) {
                                alert( save_filed_string );
                            } else {
                                alert( msg );
                                issaved = false;
                            }
                        },
                        error: function( msg ) {
                            alert( save_filed_string );
                        }
                    } );
        }
    }
}

// load page
function loadPage() {
    $( document ).ajaxStart( function() {
        $( '#loading-canvas' ).show();
    } );
    $( document ).ajaxStop( function() {
        $( '#loading-canvas' ).hide();
    } );
    $.ajax( {
                type: "POST",
                url: saveurl,
                cache: false,
                data: {method: 'load', page: $( "#scrapbookPageNumber" ).val(), bookId: $( "#book_id" ).val()},
                success: function( msg ) {
                    if( msg != 'Access Denied' ) {
                        if( msg == "null" ) {
                            clearCanvas();
                            preLoadBackground();
                            return;
                        }
                        var json = JSON.parse( msg );
                        clearCanvas();
                        loadBackground( json );
                        setTimeout( function() {
                            loadData( json );
                            $( '#menuh' ).find( '.root_cat:first' ).find( 'a' ).each( function() {
                                $( this ).click();
                            } );
                        }, 200 );
                        issaved = false;
                    }
                }
            } );
}

// goto page
function gotoPage() {
    issaved = false;
    loadPage();
    $( '#pictures' ).click();
}
// load data and draw canvas
function loadData( json ) {
    var items = json.images;
    $.each( items, function( index, item ) {
        if( item.type == "text" ) {
            delay( 100 );
            setTimeout( function() {
                var text = new fabric.Text( unescape( item.text ), {
                    fontFamily: item.fontFamily,
                    fill: item.fill,
                    left: parseFloat( item.left ) * default_zoom / page_zoom + book_posx,
                    top: parseFloat( item.top ) * default_zoom / page_zoom + book_posy,
                    angle: item.angle,
                    scaleX: parseFloat( item.scaleX ) * default_zoom / page_zoom,
                    scaleY: parseFloat( item.scaleY ) * default_zoom / page_zoom
                } );
                text.lockUniScaling = true;
                text.textAlign = item.textAlign;
                if( isPreview ) {
                    text.selectable = false;
                }
                canvas.insertAt( text, index );
                isDelay = false;
                setTimeout( function() {
                    canvas.renderAll();
                }, 300 );
            }, 300 );
        } else if( item.type == "image" ) {
            delay( 200 );
            fabric.Image.fromURL( item.src, function( obj ) {
                obj.set( 'left', parseFloat( item.left ) * default_zoom / page_zoom + book_posx );
                obj.set( 'top', parseFloat( item.top ) * default_zoom / page_zoom + book_posy );
                obj.set( 'scaleX', parseFloat( item.scaleX ) * default_zoom / page_zoom );
                obj.set( 'scaleY', parseFloat( item.scaleY ) * default_zoom / page_zoom );
                obj.setAngle( item.angle );
                obj.lockUniScaling = true;
                setFilters( obj, item.filter );
                if( isPreview ) {
                    obj.selectable = false;
                }
                canvas.insertAt( obj, index );
                isDelay = false;
            } );
        } else if( item.type == "group" ) {
            delay( 200 );
            var objarray = [];
            loadGroup( objarray, 0, item, index );
        }
    } );

}

function loadGroup( subitems, index, item, zorder ) {
    try {
        var back_posx = book_posx;
        var back_posy = book_posy;
        if( g_selBackground != null ) {
            back_posx = g_selBackground.get( 'left' );
            back_posy = g_selBackground.get( 'top' );
        }
        var items = item.items;
        fabric.Image.fromURL( items[index].src, function( obj ) {
            obj.set( 'left', items[index].left );
            obj.set( 'top', items[index].top );
            obj.set( 'scaleX', parseFloat( items[index].scaleX ) );
            obj.set( 'scaleY', parseFloat( items[index].scaleY ) );
            obj.setAngle( items[index].angle );
            setFilters( obj, items[index].filter );
            subitems.push( obj );
            obj.lockUniScaling = true;
            if( index < items.length - 1 ) {
                index += 1;
                loadGroup( subitems, index, item, zorder );
            } else {
                var group = new fabric.Group( subitems );
                group.set( 'left', parseFloat( item.left ) * default_zoom / page_zoom + back_posx );
                group.set( 'top', parseFloat( item.top ) * default_zoom / page_zoom + back_posy );
                group.set( 'scaleX', parseFloat( item.scaleX ) * default_zoom / page_zoom );
                group.set( 'scaleY', parseFloat( item.scaleY ) * default_zoom / page_zoom );
                group.setAngle( item.angle );
                group.lockUniScaling = true;
                if( g_selBackground == null ) {
                    group.hasBorder = group.hasControls = false;
                    g_selBackground = group;
                } else {
                    if( isPreview ) {
                        group.selectable = false;
                    }
                }
                canvas.insertAt( group, zorder );
                return group;
                isDelay = false;
            }
        } );
    } catch( e ) {
        return;
    }
}
// load background
function loadBackground( json ) {
    // load zoom
    var width = parseInt( $( '#zoom_slider' ).css( 'width' ) );
    page_zoom = parseFloat( json.zoom );
    $( '#zoom_handle' ).css( 'left', 0 );

    // load background color
    var backgroundColor = json.backgroundcolor;
    var backgroundImage = json.backgroundImage;
    $( '#backgroundColorSelector' ).find( 'div' ).css( 'background-color', backgroundColor );
    canvas.backgroundColor = backgroundColor;
    if( !isNull( backgroundImage ) ) {
        canvas.setBackgroundImage( backgroundImage, canvas.renderAll.bind( canvas ) );
    }
    canvas.renderAll();
    g_UndoObject = new Undo();
    // book cover background image ?
    var items = json.images;
    $.each( items, function( index, item ) {
        if( item.type == "background" ) {
            var objarray = [];
            if( g_selBackground != null ) {
                delete g_selBackground;
            }
            g_selBackground = null;
            loadGroup( objarray, 0, item );
            return;
        }
    } );
}

// delay function
function delay( millis ) {
    var date = new Date();
    var curDate = null;
    isDelay = true;
    do {
        curDate = new Date();
    } while( isDelay & (curDate - date < millis) );
}

// zoom canvas
function zoomCanvas( rate ) {
    if( page_zoom < default_zoom ) {
        page_zoom = default_zoom;
    }

    var px = g_selBackground.get( 'left' );
    var py = g_selBackground.get( 'top' );
    var items = canvas.getObjects();

    var idx;
    var cnt = items.length;
    var dx, dy;
    for( idx = 0; idx < cnt; idx++ ) {
        var scaleX = items[idx].get( 'scaleX' );
        var scaleY = items[idx].get( 'scaleY' );

        items[idx].set( 'scaleX', scaleX * rate / page_zoom );
        items[idx].set( 'scaleY', scaleY * rate / page_zoom );

        if( items[idx] == g_selBackground ) {
            continue;
        }
        dx = items[idx].get( 'left' );
        dy = items[idx].get( 'top' );

        var disX = (px - dx) * rate / page_zoom;
        var disY = (py - dy) * rate / page_zoom;
        items[idx].set( 'left', px - disX );
        items[idx].set( 'top', py - disY );
    }
    page_zoom = rate;
    canvas.renderAll();
}

function setPositionToTextBox( obj ) {
    var absCoords = canvas.getAbsoluteCoords( obj );
    $( '#addTextBox' ).css( 'left', absCoords.left );
    $( '#addTextBox' ).css( 'top', absCoords.top );
    var width = obj.width;
    if( width > 650 ) {
        width = 650;
    }
    if( width < 300 ) {
        width = 300
    }
    $( '#addTextBox' ).css( 'width', width );
}

function positionTextBox( obj ) {
    setPositionToTextBox( obj );
    if( obj && obj.type === 'text' ) {
        $( '#addTextBox' ).val( obj.text );
        if( !isNull( previouslyClickedType ) && previouslyClickedType == 'font' ) {
            alert( obj.fill );
        }
        $( '#addTextBox' ).focus();
    }
}

function addPreview( newname ) {
    //var xheight = Math.round( $( window ).height() * 0.99 );
    //var xwidth = Math.round( $( window ).width() * 0.99 );
    var xheight = 600;
    var xwidth = 1100;
    var ceditor = '<div><iframe width="' + xwidth + 'px" height="' + xheight + 'px" src="' + 'view.php?bookId=' + newname + '"  scrolling="no" frameborder="0" ></iframe></div>';
    $.colorbox( {
                    html: ceditor,
                    innerHeight: xheight,
                    innerWidth: xwidth,
                    overlayClose: false,
                    escKey: false,
                    arrowKey: false,
                    fastIframe: false,
                    opacity: .7,
                    top: 30,
                    fixed: true,
                    scrolling: false,
                    onLoad: function() {
                        $( '#cboxClose' ).css( {height: '0px', width: '0px', 'position': 'absolute'} );
                        $( '#previewBtn' ).remove();
                    },
                    onComplete: function() {
                        var scrollx = $( document ).scrollTop();
                        $( document ).scrollTop( scrollx + xheight / 50 );
                    },
                    onClosed: function() {
                        $( '#cboxClose' ).css( {height: '45px', width: '45px', 'position': 'absolute'} );
                        var scrollx = $( document ).scrollTop();
                        $( document ).scrollTop( scrollx - xheight / 50 );
                    }
                } );
}

function clickAlbums( id ) {
    clearVerticalPhotos();
    $( '#editorVerticalContentHolder' ).find( '.content' ).each( function() {
        $( this ).hide();
    } );
    $.ajax( {
                type: "POST",
                url: saveurl,
                cache: false,
                data: {method: 'photos', albumId: id, 'uid': $( '#user_id' ).val()},
                success: function( msg ) {
                    if( isNull( msg ) ) {
                        alert( 'connect failed' );
                        return;
                    }
                    loadPhotos( msg );
                },
                error: function( msg ) {
                    alert( 'connect failed! ' + msg );
                }
            } );
}

function oPhotoSize( photoid ) {
    var newImg = new Image();
    var oImage = $( 'img[photoid="' + photoid + '"]' );
    newImg.onload = function() {
        var height = newImg.height;
        var width = newImg.width;
        oImage.attr( 'oheight', height );
        oImage.attr( 'owidth', width );
    }
    newImg.src = oImage.attr( 'src' ); // this must be done AFTER setting onload
}

function loadPhotos( photos ) {
    //if it's not a json, then it's probably an error message
    try {
        var json = JSON.parse( photos );
        var len = json.length;
    } catch( e ) {
        alert( photos );
    }

    var picPath = "./../userpics/" + $( '#user_id' ).val() + '/';

    for( var i = 0; i < len; i++ ) {
        var pic = '<div class="album_photo"><img photoid="' + json[i].photoid + '" src="' + picPath + json[i].filename + '" alt="photos" /></div>'; //class="album-title"
        $( pic ).insertBefore( $( '#editorVerticalPhotos' ).find( 'br' ) );
        oPhotoSize( json[i].photoid );
    }
    $( '#editorVerticalAlbums' ).hide();

    //initialize photos
    $( '#editorVerticalPhotos' ).find( 'div' ).each( function() {
        $( this ).css( 'z-index', '110' ).draggable( {
                                                         containment: '#editorMainHolder',
                                                         stack: ".placedTrinket",
                                                         helper: function( e ) {
                                                             var $target = $( e.target );
                                                             var src = $target.attr( 'src' );
                                                             if( isNull( src ) ) {
                                                                 $target = $target.find( 'img' );
                                                                 src = $target.attr( 'src' );
                                                             }
                                                             var size = getAspectRatioResize( $target.attr( 'owidth' ), $target.attr( 'oheight' ), 190 );
                                                             $( this ).draggable( "option", "cursorAt", { top: size.height / 2, left: size.width / 2  } );
                                                             return $( '<img src="' + src + '" height=' + size.height + ' width=' + size.width + '>' );
                                                         },
                                                         opacity: 0.5,
                                                         cursor: 'move',
                                                         cursorAt: {left: 100, top: 100},
                                                         iframeFix: true,
                                                         appendTo: 'body',
                                                         stop: function( e, ui ) {
                                                             if( g_trinketsInDiv ) {
                                                                 g_trinketsInDiv = false;
                                                                 return;
                                                             }
                                                             issaved = true;
                                                             var editorPos = $( '#editorScrapbookCanvas' ).offset();
                                                             var trinketPos = $( ui.helper ).offset();
                                                             var trinketWidth = $( ui.helper ).width();
                                                             var trinketHeight = $( ui.helper ).height();
                                                             fabric.Image.fromURL( $( this ).find( 'img' ).attr( 'src' ), function( obj ) {
                                                                 obj.hasRotatingPoint = true;
                                                                 obj.lockUniScaling = true;
                                                                 obj.set( 'scaleX', ( trinketWidth / obj.get( 'width' ) ) * page_zoom );
                                                                 obj.set( 'scaleY', ( trinketHeight / obj.get( 'height' ) ) * page_zoom );
                                                                 //obj.set( 'scaleX', obj.get( 'scaleX' ) * page_zoom );
                                                                 //obj.set( 'scaleY', obj.get( 'scaleY' ) * page_zoom );
                                                                 canvas.add( obj );
                                                                 canvas.setActiveObject( obj );
                                                             }, {
                                                                                       left: (trinketPos.left - editorPos.left) + trinketWidth / 2,
                                                                                       top: (trinketPos.top - editorPos.top) + trinketHeight / 2} );
                                                         }
                                                     } );
    } );
    $( '#editorVerticalPhotos' ).droppable( {
                                                'greedy': true,
                                                drop: function( event, ui ) {
                                                    g_trinketsInDiv = true;
                                                }
                                            } ).show();

    makeImagesFit( $( '#editorVerticalPhotos .album_photo' ) );
}

function initializeZoomScrollbar() {
    $( '#zoom_handle' ).draggable( {
                                       containment: '.zoom_slider_container',
                                       stack: "#zoom_handle",
                                       cursor: 'pointer',
                                       grid: [ 10, 0 ],
                                       axis: "x",
                                       appendTo: 'body',
                                       drag: function( e, ui ) {
                                           var pos = $( this ).offset();
                                           var con_pos = $( '.zoom_slider_container' ).offset();
                                           var posX = pos.left - con_pos.left + 6;
                                           posX = posX > 0 ? posX + 5 : 0;
                                           var width = parseInt( $( '#zoom_slider' ).css( 'width' ) );
                                           var zoom = default_zoom + Math.round( posX * 10 / width ) / 10;
                                           zoomCanvas( zoom );
                                           issaved = true;
                                       }
                                   } );

    $( '.zoom_slider_container' ).click( function( e ) {
        var left = parseInt( $( '#zoom_slider' ).css( 'left' ) );
        var width = parseInt( $( '#zoom_slider' ).css( 'width' ) );
        var right = width + left;
        var pos = $( '.zoom_slider_container' ).offset();
        var px = e.pageX - parseInt( pos.left );
        if( px < left ) {
            px = left;
        }
        if( px > right ) {
            px = right;
        }
        var posX = px - 10;
        posX = posX > 0 ? posX + 5 : 0;
        $( '#zoom_handle' ).css( 'left', posX );
        var zoom = default_zoom + Math.round( posX * 10 / width ) / 10;
        zoomCanvas( zoom );
        issaved = true;
    } );
}

// initialize photos dragdrop
function initializePhotos() {
    //#todo: IS THIS EVER USED ANYMORE?
    $( '#editorVerticalAlbums' ).find( 'div' ).each( function() {
        $( this ).click( function() {
            clickAlbums( $( this ).attr( 'id' ) );
        } );
    } );
    /*
     $( '#backBtn' ).click( function() {
     clearVerticalPhotos();
     $( '#editorVerticalPhotos' ).hide();
     $( '#editorVerticalAlbums' ).show();
     } );
     */
}

//initizalize trinkets dragdrop
function initializeTrinkets() {
    $( '#editorVerticalContentScroller' ).find( '.trinketContainer' ).each( function() {
        $( this ).find( '.trinket' ).load( function() {
            var vspace = 200 - $( this ).height();
            var hspace = 200 - $( this ).width();
            $( this ).css( {'padding-top': (vspace / 2), 'padding-bottom': (vspace / 2), 'padding-left': (hspace / 2), 'padding-right': (hspace / 2) } );
        } );
        var self = $( this );
        $( this ).parent().mousedown( function( event ) {
            self.trigger( "mousedown.draggable", [event] );
        } );

        $( this ).css( 'z-index', '110' ).draggable( {
                                                         containment: '#editorMainHolder',
                                                         stack: ".placedTrinket",
                                                         helper: function( e ) {
                                                             var size = getAspectRatioResize( $( e.target ).width(), $( e.target ).height(), 200 );
                                                             $( this ).draggable( "option", "cursorAt", { top: size.height / 2, left: size.width / 2  } );
                                                             return $( '<img src="' + $( e.target ).attr( 'src' ) + '" height=' + size.height + ' width=' + size.width + '>' );
                                                         },
                                                         opacity: 0.5,
                                                         cursor: 'move',
                                                         cursorAt: {left: 0, top: 0},
                                                         appendTo: 'body',
                                                         iframeFix: true,
                                                         stop: function( e, ui ) {
                                                             if( g_trinketsInDiv ) {
                                                                 g_trinketsInDiv = false;
                                                                 return;
                                                             }
                                                             issaved = true;
                                                             var editorPos = $( '#editorScrapbookCanvas' ).offset();
                                                             var trinketPos = $( ui.helper ).offset();
                                                             var trinketWidth = $( ui.helper ).width();
                                                             var trinketHeight = $( ui.helper ).height();

                                                             fabric.Image.fromURL( $( "img", this ).attr( 'src' ), function( obj ) {
                                                                 obj.hasRotatingPoint = true;
                                                                 var scaleX = obj.get( 'scaleX' ) * page_zoom;
                                                                 var scaleY = obj.get( 'scaleY' ) * page_zoom;
                                                                 obj.set( 'scaleX', scaleX );
                                                                 obj.set( 'scaleY', scaleY );
                                                                 obj.lockUniScaling = true;
                                                                 canvas.add( obj );
                                                                 g_UndoObject.setUndoItem( "{}" );
                                                                 g_UndoObject.action = "add-trinket";
                                                                 g_UndoObject.setCurItem( obj );
                                                                 canvas.setActiveObject( obj );
                                                             }, {
                                                                                       left: (trinketPos.left - editorPos.left) + trinketWidth / 2,
                                                                                       top: (trinketPos.top - editorPos.top) + trinketHeight / 2
                                                                                   } );
                                                         }
                                                     } );
    } );
    $( '#editorVerticalContentScroller' ).droppable( {
                                                         'greedy': true,
                                                         drop: function( event, ui ) {
                                                             g_trinketsInDiv = true;
                                                         }
                                                     } );
}

// filter dragdrop
function initializeFilters() {
    $( '#editorVerticalImageFilter' ).find( '.imageFilter' ).each( function() {
        $( this ).css( 'z-index', '111' ).draggable( {
                                                         containment: '#editorMainHolder',
                                                         stack: ".imagefilter",
                                                         helper: function( e ) {
                                                             return $( '<div id="' + $( e.target ).attr( 'id' ) + '" class="filterDragHelper">' );
                                                         },
                                                         cursorAt: {left: 9, top: 14},
                                                         opacity: 0.5,
                                                         cursor: 'move',
                                                         appendTo: 'body',

                                                         stop: function( e, ui ) {
                                                             issaved = true;
                                                             var filterName = $( this ).attr( 'id' );
                                                             var editorPos = $( '#editorScrapbookCanvas' ).offset();
                                                             var imagePos = $( ui.helper ).offset();
                                                             var imgx = imagePos.left - editorPos.left + $( ui.helper ).width() / 2;
                                                             var imgy = imagePos.top - editorPos.top + $( ui.helper ).height() / 2;

                                                             var min = 3000;
                                                             var selObj = null;
                                                             canvas.discardActiveObject();
                                                             canvas.discardActiveGroup();
                                                             var imageArray = canvas.getObjects();
                                                             $.each( imageArray, function( index, obj ) {
                                                                 if( obj.type != "text" && obj != g_selBackground ) {
                                                                     var cx = obj.get( 'left' );
                                                                     var cy = obj.get( 'top' );
                                                                     var cwidth = obj.get( 'width' ) * obj.scaleX;
                                                                     var cheight = obj.get( 'height' ) * obj.scaleY;
                                                                     var distance = Math.round( Math.sqrt( Math.pow( cwidth / 2, 2 ) + Math.pow( cheight / 2, 2 ) ) );

                                                                     var distX = Math.abs( imgx - cx );
                                                                     var distY = Math.abs( imgy - cy );
                                                                     var realdist = Math.round( Math.sqrt( Math.pow( distX, 2 ) + Math.pow( distY, 2 ) ) );

                                                                     if( realdist < distance ) {
                                                                         if( realdist < min ) {
                                                                             min = realdist;
                                                                             selObj = obj;
                                                                         }
                                                                     }
                                                                 }

                                                             } );
                                                             if( selObj != null ) {
                                                                 g_UndoObject.setUndoItem( selObj );
                                                                 g_UndoObject.action = "add-filter";
                                                                 g_UndoObject.setCurItem( selObj );
                                                                 if( selObj.type == "group" ) {
                                                                     var items = selObj.getObjects();
                                                                     selObj = items[0];
                                                                 }
                                                                 removeFilter( selObj );

                                                                 var namearr = filterName.split( '-' );
                                                                 switch( namearr[1] ) {
                                                                     case('jarques'):
                                                                         applyFilter( 0, new f.jarques(), selObj );
                                                                         break;
                                                                     case('lomo'):
                                                                         applyFilter( 1, new f.lomo(), selObj );
                                                                         break;
                                                                     case('love'):
                                                                         applyFilter( 2, new f.love(), selObj );
                                                                         break;
                                                                     case('nostalgia'):
                                                                         applyFilter( 3, new f.nostalgia(), selObj );
                                                                         break;
                                                                     case('oldBoot'):
                                                                         applyFilter( 4, new f.oldBoot(), selObj );
                                                                         break;
                                                                     case('orangePeel'):
                                                                         applyFilter( 5, new f.orangePeel(), selObj );
                                                                         break;
                                                                     case('pinhole'):
                                                                         applyFilter( 6, new f.pinhole(), selObj );
                                                                         break;
                                                                     case('sinCity'):
                                                                         applyFilter( 7, new f.sinCity(), selObj );
                                                                         break;
                                                                     case('sunrise'):
                                                                         applyFilter( 8, new f.sunrise(), selObj );
                                                                         break;
                                                                     case('vintage'):
                                                                         applyFilter( 9, new f.vintage(), selObj );
                                                                         break;
                                                                     case('herMajesty'):
                                                                         applyFilter( 10, new f.herMajesty(), selObj );
                                                                         break;
                                                                     case('hemingway'):
                                                                         applyFilter( 11, new f.hemingway(), selObj );
                                                                         break;
                                                                     case('hazyDays'):
                                                                         applyFilter( 12, new f.hazyDays(), selObj );
                                                                         break;
                                                                     case('grungy'):
                                                                         applyFilter( 13, new f.grungy(), selObj );
                                                                         break;
                                                                     case('glowingSun'):
                                                                         applyFilter( 14, new f.glowingSun(), selObj );
                                                                         break;
                                                                     case('crossProcess'):
                                                                         applyFilter( 15, new f.crossProcess(), selObj );
                                                                         break;
                                                                     case('clarity'):
                                                                         applyFilter( 16, new f.clarity(), selObj );
                                                                         break;
                                                                     case('removeEffects'):
                                                                         removeFilter( selObj );
                                                                         break;
                                                                 }
                                                             }
                                                         }
                                                     } );
    } );
}

function removeExistingColorPickers() {
    $( '.colorpicker' ).remove();
}

// font drag drop
function initializeFonts() {
    removeExistingColorPickers();
    canvas.renderAll();
    $( '#fontColorSelector' ).ColorPicker( {
                                               color: '#000000',
                                               onShow: function( colpkr ) {
                                                   canvas.renderAll();
                                                   var rgbcola = ( $( '#fontColorSelector div' ).css( 'background-color' ) ).match( /^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/ );
                                                   var col = ColorPicker.RGBToHSB( {r: rgbcola[1], g: rgbcola[2], b: rgbcola[3]} );
                                                   $( colpkr ).data( 'colorpicker' ).origColor = col;
                                                   $( colpkr ).data( 'colorpicker' ).color = col;
                                                   $( colpkr ).fadeIn( 500 );
                                                   return false;
                                               },
                                               onHide: function( colpkr ) {
                                                   $( colpkr ).fadeOut( 500 );
                                                   return false;
                                               },
                                               onChange: function( hsb, hex, rgb ) {
                                                   $( '#fontColorSelector div' ).css( 'backgroundColor', '#' + hex );
                                                   var selText = canvas.getActiveObject();
                                                   if( !isNull( selText ) && selText.type == "text" ) {
                                                       selText.set( 'fill', hex );
                                                       canvas.renderAll();
                                                   }
                                               }
                                           } );

    $( '#editorVerticalFonts' ).find( '.fonts' ).each( function() {
        $( this ).css( 'z-index', '111' ).draggable( {
                                                         cancel: '',
                                                         containment: '#editorMainHolder',
                                                         helper: function() {
                                                             var container = $( this ).clone();
                                                             container.find( 'textarea' ).val( $( '#txtFont' ).val() );
                                                             return container;
                                                         },
                                                         opacity: 0.5,
                                                         cursor: 'move',
                                                         appendTo: 'body',
                                                         stop: function( e, ui ) {
                                                             if( g_fontInDiv ) {
                                                                 g_fontInDiv = false;
                                                                 return;
                                                             }
                                                             var editorPos = $( '#editorScrapbookCanvas' ).offset();
                                                             var fontpos = $( ui.helper ).offset();
                                                             var obj = new fabric.Text( $( ui.helper ).find( 'textarea' ).val(), {
                                                                 fontFamily: $( e.target ).css( 'font-family' ),
                                                                 fill: $( '#fontColorSelector div' ).css( 'background-color' ),
                                                                 left: (fontpos.left - editorPos.left) + $( ui.helper ).width() / 2,
                                                                 top: (fontpos.top - editorPos.top) + $( ui.helper ).height() / 2
                                                             } );
                                                             obj.textAlign = $( ui.helper ).find( "textarea" ).css( 'text-align' ).toLowerCase();
                                                             obj.lockUniScaling = true;
                                                             // add font
                                                             g_UndoObject.setUndoItem( "" );
                                                             g_UndoObject.action = "add-text";
                                                             g_UndoObject.setCurItem( obj );
                                                             canvas.add( obj );
                                                             canvas.setActiveObject( obj );
                                                             issaved = true;
                                                         }
                                                     } );
    } );
    $( '#editorVerticalFonts' ).droppable( {
                                               'greedy': true,
                                               drop: function( event, ui ) {
                                                   g_fontInDiv = true;
                                               }
                                           } );

}

// wallpapers.
function initializeWallpapers() {
    removeExistingColorPickers();
    canvas.renderAll();
    $( '#backgroundColorSelector' ).ColorPicker( {
                                                     color: canvas.backgroundColor,
                                                     onShow: function( colpkr ) {
                                                         canvas.renderAll();
                                                         g_UndoObject.action = "add-backgroundColor";
                                                         g_UndoObject.undoItem = canvas.backgroundColor;
                                                         g_UndoObject.curItem = canvas.backgroundColor;
                                                         $( colpkr ).find( '.colorpicker_current_color, .colorpicker_new_color' ).css( 'background-color', canvas.backgroundColor );
                                                         $( colpkr ).data( 'colorpicker' ).origColor = ColorPicker.HexToHSB( canvas.backgroundColor );
                                                         $( colpkr ).data( 'colorpicker' ).color = ColorPicker.HexToHSB( canvas.backgroundColor );
                                                         $( colpkr ).fadeIn( 500 );
                                                         return false;
                                                     },
                                                     onHide: function( colpkr ) {
                                                         canvas.renderAll();
                                                         $( colpkr ).fadeOut( 500 );
                                                         issaved = true;
                                                         return false;
                                                     },
                                                     onChange: function( hsb, hex, rgb ) {
                                                         canvas.renderAll();
                                                         $( '#backgroundColorSelector div' ).css( 'background-color', canvas.backgroundColor );
                                                         canvas.backgroundColor = '#' + hex;
                                                         canvas.backgroundImage = '';
                                                         issaved = true;
                                                         return true;
                                                     }
                                                 } );
    $( '#backgroundColorSelector div' ).css( 'background-color', canvas.backgroundColor );

    $( '#editorVerticalwallpaper' ).find( 'div.wallpaperHolder' ).each( function() {
        $( this ).css( 'z-index', '111' ).draggable( {
                                                         containment: '#editorMainHolder',
                                                         stack: ".fonts",
                                                         helper: 'clone',
                                                         opacity: 0.5,
                                                         cursor: 'move',
                                                         cursorAt: {left: 85, top: 50},
                                                         appendTo: 'body',
                                                         stop: function( e, ui ) {
                                                             issaved = true;
                                                             var editorPos = $( '#editorScrapbookCanvas' ).offset();
                                                             var trinketPos = $( ui.helper ).offset();
                                                             var trinketWidth = $( ui.helper ).width();
                                                             var trinketHeight = $( ui.helper ).height();

                                                             var imagePos = $( ui.helper ).offset();
                                                             var imgx = imagePos.left - editorPos.left + $( ui.helper ).width() / 2;
                                                             var imgy = imagePos.top - editorPos.top + $( ui.helper ).height() / 2;

                                                             var cx = g_selBackground.get( 'left' );
                                                             var cy = g_selBackground.get( 'top' );
                                                             var cwidth = g_selBackground.get( 'width' ) * g_selBackground.scaleX;
                                                             var cheight = g_selBackground.get( 'height' ) * g_selBackground.scaleY;
                                                             var distX = Math.abs( imgx - cx ), distY = Math.abs( imgy - cy );
                                                             var src = $( this ).find( 'img' ).attr( 'src' );
                                                             if( (distX < cwidth / 2) && (distY < cheight / 2) ) {
                                                                 if( isNull( src ) ) {
                                                                     return;
                                                                 }
                                                                 //theres no book background on the cover page
                                                                 if( $( '#scrapbookPageNumber' ).val() == 0 ) {
                                                                     return;
                                                                 }
                                                                 //lets add an inner book background!
                                                                 fabric.Image.fromURL( $( this ).find( 'img' ).attr( 'src' ), function( obj ) {
                                                                     obj.lockUniScaling = true;
                                                                     obj.hasRotatingPoint = true;
                                                                     if( g_selBackground != null ) {
                                                                         g_UndoObject.setUndoItem( g_selBackground );
                                                                         g_UndoObject.action = "add-background";

                                                                         canvas.discardActiveGroup();
                                                                         var items = g_selBackground.getObjects();
                                                                         var px = g_selBackground.get( 'left' );
                                                                         var py = g_selBackground.get( 'top' );
                                                                         var scaleX = g_selBackground.get( 'scaleX' );
                                                                         var scaleY = g_selBackground.get( 'scaleY' );

                                                                         canvas.remove( g_selBackground );
                                                                         delete g_selBackground;

                                                                         obj.set( 'left', px );
                                                                         obj.set( 'top', py );
                                                                         obj.set( 'scaleX', items[1].get( 'scaleX' ) );
                                                                         obj.set( 'scaleY', items[1].get( 'scaleY' ) * 1.01 );
                                                                         items[1].set( 'left', px );
                                                                         items[1].set( 'top', py );
                                                                         items[0].set( 'left', px );
                                                                         items[0].set( 'top', py );

                                                                         g_UndoObject.setCurItem( g_selBackground );
                                                                         g_selBackground = new fabric.Group( [items[0], items[1], obj] );
                                                                         g_selBackground.set( 'scaleX', scaleX );
                                                                         g_selBackground.set( 'scaleY', scaleY );
                                                                         g_selBackground.hasBorder = g_selBackground.hasControls = false;
                                                                         canvas.add( g_selBackground );
                                                                         canvas.sendToBack( g_selBackground );
                                                                     }
                                                                 }, {left: (trinketPos.left - editorPos.left) + trinketWidth / 2,
                                                                                           top: (trinketPos.top - editorPos.top) + trinketHeight / 2} );
                                                                 canvas.renderAll();
                                                             } else {
                                                                 // add background;
                                                                 g_UndoObject.action = "add-backgroundImage";
                                                                 if( !isNull( canvas.backgroundImage ) ) {
                                                                     g_UndoObject.undoItem = canvas.backgroundImage.src;
                                                                 }
                                                                 g_UndoObject.curItem = src;
                                                                 canvas.setBackgroundImage( src, canvas.renderAll.bind( canvas ), {scaleX: 2, scaleY: 2} );
                                                             }
                                                             setTimeout( function() {
                                                                 canvas.renderAll();
                                                                 setTimeout( function() {
                                                                     canvas.renderAll();
                                                                 }, 100 );
                                                             }, 50 );

                                                             canvas.renderAll();
                                                         }
                                                     } );
    } );
}

// image borders
function initializeBorders() {
    $( '#editorVerticalborders' ).find( 'img' ).each( function() {
        $( this ).css( 'z-index', '111' ).draggable( {
                                                         containment: '#editorMainHolder',
                                                         stack: ".img",
                                                         helper: 'clone',
                                                         opacity: 0.5,
                                                         cursor: 'move',
                                                         appendTo: 'body',
                                                         cursorAt: {left: 90, top: 60},
                                                         stop: function( e, ui ) {
                                                             issaved = true;
                                                             var editorPos = $( '#editorScrapbookCanvas' ).offset();
                                                             var imagePos = $( ui.helper ).offset();
                                                             var imgx = imagePos.left - editorPos.left + $( ui.helper ).width() / 2;
                                                             var imgy = imagePos.top - editorPos.top + $( ui.helper ).height() / 2;

                                                             var min = 10000;
                                                             var selObj = null;
                                                             var selObjectIndex;

                                                             var imageArray = canvas.getObjects();
                                                             canvas.discardActiveGroup();
                                                             canvas.discardActiveObject();
                                                             $.each( imageArray, function( index, obj ) {
                                                                 if( obj.type != "text" && obj != g_selBackground ) {
                                                                     var cx = obj.get( 'left' );
                                                                     var cy = obj.get( 'top' );
                                                                     var cwidth = obj.get( 'width' ) * obj.scaleX;
                                                                     var cheight = obj.get( 'height' ) * obj.scaleY;
                                                                     var distance = Math.round( Math.sqrt( Math.pow( cwidth / 2, 2 ) + Math.pow( cheight / 2, 2 ) ) );

                                                                     var distX = Math.abs( imgx - cx ), distY = Math.abs( imgy - cy ), realdist = Math.round( Math.sqrt( Math.pow( distX,
                                                                                                                                                                                   2 ) + Math.pow( distY,
                                                                                                                                                                                                   2 ) ) );

                                                                     if( realdist < distance ) {
                                                                         if( realdist < min ) {
                                                                             min = realdist;
                                                                             selObj = obj;
                                                                             selObjectIndex = index;
                                                                         }
                                                                     }
                                                                 }
                                                             } );

                                                             if( selObj != null ) {
                                                                 // add editor
                                                                 g_UndoObject.setUndoItem( selObj );
                                                                 g_UndoObject.action = "add-border";
                                                                 // 
                                                                 if( selObj.type == "image" ) {
                                                                     var px = selObj.get( "left" );
                                                                     var py = selObj.get( "top" );
                                                                     var width = selObj.get( "width" );
                                                                     var height = selObj.get( "height" );
                                                                     var sx = selObj.scaleX;
                                                                     var sy = selObj.scaleY;
                                                                     var angle = selObj.getAngle();
                                                                     var zorder = imageArray.indexOf( selObj );

                                                                     fabric.Image.fromURL( $( this ).attr( 'src' ), function( img ) {
                                                                         img.set( {left: px, top: py} );
                                                                         var cwidth = img.get( 'width' );
                                                                         var cheight = img.get( 'height' );
                                                                         var csx = width / cwidth * sx * 1.2;
                                                                         var csy = height / cheight * sy * 1.2;
                                                                         img.setAngle( angle );
                                                                         img.set( 'scaleX', csx );
                                                                         img.set( 'scaleY', csy );
                                                                         canvas.remove( selObj );
                                                                         var imgGroup = new fabric.Group( [selObj, img] );

                                                                         // add Insert;
                                                                         g_UndoObject.setCurItem( imgGroup );
                                                                         canvas.insertAt( imgGroup, zorder );
                                                                     } );
                                                                 } else {

                                                                     zorder = imageArray.indexOf( selObj );
                                                                     var items = selObj.getObjects();
                                                                     var itemImg = items[0];
                                                                     var gsclx = selObj.get( 'scaleX' );
                                                                     var gscly = selObj.get( 'scaleY' );
                                                                     px = selObj.get( "left" );
                                                                     py = selObj.get( "top" );
                                                                     width = itemImg.get( "width" );
                                                                     height = itemImg.get( "height" );
                                                                     sx = itemImg.scaleX;
                                                                     sy = itemImg.scaleY;
                                                                     var selAngle = items[1].getAngle();
                                                                     angle = selObj.getAngle();

                                                                     items.forEach( function( object ) {
                                                                         canvas.remove( object );
                                                                         delete object;
                                                                     } );

                                                                     canvas.remove( selObj );
                                                                     delete selObj;

                                                                     fabric.Image.fromURL( $( this ).attr( 'src' ), function( img ) {
                                                                         img.set( {left: px, top: py} );
                                                                         var cwidth = img.get( 'width' );
                                                                         var cheight = img.get( 'height' );
                                                                         var csx = width / cwidth * sx * 1.2;
                                                                         var csy = height / cheight * sy * 1.2;

                                                                         img.set( 'scaleX', csx );
                                                                         img.set( 'scaleY', csy );
                                                                         img.setAngle( selAngle );
                                                                         itemImg.set( {left: px, top: py} );

                                                                         var imgGroup = new fabric.Group( [itemImg, img] );
                                                                         imgGroup.setAngle( angle );
                                                                         imgGroup.set( 'scaleX', gsclx );
                                                                         imgGroup.set( 'scaleY', gscly );
                                                                         // add Insert;
                                                                         g_UndoObject.setCurItem( imgGroup );
                                                                         canvas.insertAt( imgGroup, zorder );

                                                                     } );

                                                                 }
                                                             }
                                                         }
                                                     } );
    } );
}

function clearVerticalPhotos() {
    $( '#editorVerticalPhotos' ).find( 'div' ).each( function() {
        $( this ).remove();
    } );
}



var previouslyClickedType = '';
$( document ).ready( function() {
    //setup previous/next page functionality
    $( '.goToPreviousPage' ).click( function() {
        var page = $( '#scrapbookPageNumber' );
        var currentPage = parseInt( page.val() );
        savePage();
        if( currentPage > 0 ) {
            page.val( currentPage - 1 );
            gotoPage();
        }
    } );
    $( '.goToNextPage' ).click( function() {
        var page = $( '#scrapbookPageNumber' );
        var currentPage = parseInt( page.val() );
        savePage();
        page.val( currentPage + 1 );
        gotoPage();
    } );

    $( 'a.top_parent, .parent a, .child a' ).click( function() {
        var cat_id = this.id.substr( 4 );
        var cat_type = this.id.substr( 0, 4 );
        var type = $( this ).closest( '.root_cat' ).attr( 'data-type' );
        //dont load a category if its already loaded
        if( previouslyClickedType == type ) {
            return false;
        }
        $( '#menuh' ).find( '.selectedMenu' ).removeClass( 'selectedMenu' );
        $( this ).addClass( 'selectedMenu' );
        if( type == 'photo' ) {

            if( cat_type == 'cat_' ) {
                clickAlbums( 'allphotos' );
            } else {
                clickAlbums( cat_id );
            }
        } else {
            $.ajax( {
                        url: url_prefix + 'items/',
                        type: 'POST',
                        data: {cat_id: cat_id, type: type },
                        success: function( html ) {
                            $( '#editorVerticalContentHolder' ).find( '.content' ).each( function() {
                                $( this ).hide();
                            } );
                            switchToEditorFunction( type, html );
                        }
                    } );
        }
    } );

} );

// check if there is an overlap between two elements
function checkOverlap( a, b ) {
    function getPositions( elem ) {
        var pos, width, height;
        pos = $( elem ).position();
        width = $( elem ).width();
        height = $( elem ).height();
        return [
            [ pos.left, pos.left + width ],
            [ pos.top, pos.top + height ]
        ];
    }

    function comparePositions( p1, p2 ) {
        var r1, r2;
        r1 = p1[0] < p2[0] ? p1 : p2;
        r2 = p1[0] < p2[0] ? p2 : p1;
        return r1[1] > r2[0] || r1[0] === r2[0];
    }

    function doTheCheck( a, b ) {
        var pos1 = getPositions( a ), pos2 = getPositions( b );
        return comparePositions( pos1[0], pos2[0] ) && comparePositions( pos1[1], pos2[1] );
    }

    return doTheCheck( a, b );
}

// apply image filter
function applyFilter( index, filter ) {
    applyFilter( index, filter, null );
}

// apply image filter
function applyFilter( index, filter, target ) {
    var obj = canvas.getActiveObject();
    if( target != null ) {
        obj = target;
    }
    if( obj == null ) {
        return;
    }
    obj.filters[index] = filter;
    obj.applyFilters( canvas.renderAll.bind( canvas ) );
}

function removeFilter( target ) {
    var obj = canvas.getActiveObject();
    if( target != null ) {
        obj = target;
    }
    if( obj == null ) {
        return;
    }
    for( var i = 0; i < 17; i++ ) {
        obj.filters[i] = 0;
    }
    obj.filters.length = 0;
    obj.applyFilters( canvas.renderAll.bind( canvas ) );
}

// get to background from objects
function getDistances() {
    if( g_selBackground == null ) {
        return;
    }
    var items = canvas.getObjects();
    var idx;
    var cnt = items.length;
    var px = g_selBackground.get( 'left' );
    var py = g_selBackground.get( 'top' );
    var dx, dy;

    for( idx = 0; idx < cnt; idx++ ) {
        if( items[idx] == g_selBackground ) {
            continue;
        }
        dx = items[idx].get( 'left' );
        dy = items[idx].get( 'top' );
        moveDistancex[idx] = px - dx;
        moveDistancey[idx] = py - dy;
    }
}

// set distance to background from objects.
function setDistances() {
    if( moveDistancex.length == 0 ) {
        return;
    }
    var items = canvas.getObjects();
    var cnt = items.length;
    for( var idx = 0; idx < cnt; idx++ ) {
        if( items[idx] == g_selBackground ) {
            continue;
        }
        items[idx].set( 'left', g_selBackground.get( 'left' ) - moveDistancex[idx] );
        items[idx].set( 'top', g_selBackground.get( 'top' ) - moveDistancey[idx] );
    }
}

// set filters
function setFilters( selObj, index ) {
    switch( parseInt( index ) ) {
        case( 0 ):
            applyFilter( index, new f.jarques(), selObj );
            break;
        case( 1 ):
            applyFilter( index, new f.lomo(), selObj );
            break;
        case( 2 ):
            applyFilter( index, new f.love(), selObj );
            break;
        case( 3 ):
            applyFilter( index, new f.nostalgia(), selObj );
            break;
        case( 4 ):
            applyFilter( index, new f.oldBoot(), selObj );
            break;
        case( 5 ):
            applyFilter( index, new f.orangePeel(), selObj );
            break;
        case( 6 ):
            applyFilter( index, new f.pinhole(), selObj );
            break;
        case( 7 ):
            applyFilter( index, new f.sinCity(), selObj );
            break;
        case( 8 ):
            applyFilter( index, new f.sunrise(), selObj );
            break;
        case( 9 ):
            applyFilter( index, new f.vintage(), selObj );
            break;
        case( 10 ):
            applyFilter( index, new f.herMajesty(), selObj );
            break;
        case( 11 ):
            applyFilter( index, new f.hemingway(), selObj );
            break;
        case( 12 ):
            applyFilter( index, new f.hazyDays(), selObj );
            break;
        case( 13 ):
            applyFilter( index, new f.grungy(), selObj );
            break;
        case( 14 ):
            applyFilter( index, new f.glowingSun(), selObj );
            break;
        case( 15 ):
            applyFilter( index, new f.crossProcess(), selObj );
            break;
        case( 16 ):
            applyFilter( index, new f.clarity(), selObj );
            break;
    }
}

function switchToEditorFunction( type, html ) {
    switch( type ) {
        case 'trinket':
            $( "#editorVerticalContentScroller" ).show().html( html );
            initializeTrinkets();
            break;
        case 'border':
            $( '#editorVerticalborders' ).show().html( html );
            initializeBorders();
            break;
        case 'treatment':
            $( '#editorVerticalImageFilter' ).show().html( html );
            initializeFilters();
            break;
        case 'wallpaper':
            $( '#editorVerticalwallpaper' ).show().html( html );
            initializeWallpapers();
            break;
        case 'font':
            $( "#editorVerticalFonts" ).show().html( html );
            initializeFonts();
            break;
        case 'photo':
            $( "#editorVerticalAlbums" ).show().html( html );
            initializePhotos();
            break;
    }
}


/**
 * Date: 11/14/12
 * Time: 2:27 PM
 */


function Undo() {
    this.undoItem = null;
    this.curItem = null;
    this.action = "";
    this.isUndo = false;
    this.undoIndex = 0;

    this.runUndo = function() {
        var option = this.action.split( '-' );
        if( option.length == 2 ) {
            switch( option[0] ) {
                case "add":
                    this.undoAdd( option[1], "-R" );
                    break;
                case "delete":
                    this.undoDelete( option[1], "-R" );
                    break;
                case "move":
                    this.undoMove( option[1], "-R" );
                    break;
                default:
                    break;
            }
        }
    };

    this.runRedo = function() {
        var option = this.action.split( '-' );
        if( option.length == 3 ) {
            switch( option[0] ) {
                case "add":
                    this.undoAdd( option[1] );
                    break;
                case "delete":
                    this.undoDelete( option[1] );
                //#TODO: should there be a break here? I put it in, needs to be tested.
                 break;
                case "move":
                    this.undoMove( option[1] );
                    break;
            }
        }
    };

    this.undoMove = function( action, undoKey ) {
        if( isNull( undoKey ) ) {
            undoKey = "";
        }
        this.action = "move-" + action + undoKey;
        var json;
        if( action == "background" ) {
            json = JSON.parse( this.undoItem );
            this.undoItem = '{"left":"' + g_selBackground.get( 'left' ) + '",';
            this.undoItem += '"top":"' + g_selBackground.get( 'top' ) + '"}';
            g_selBackground.set( 'left', parseFloat( json.left ) );
            g_selBackground.set( 'top', parseFloat( json.top ) );
            setDistances();
        } else {
            json = JSON.parse( this.undoItem );
            this.setUndoItem( this.curItem );
            this.curItem.set( 'left', parseFloat( json.left ) * default_zoom / page_zoom + g_selBackground.get( 'left' ) );
            this.curItem.set( 'top', parseFloat( json.top ) * default_zoom / page_zoom + g_selBackground.get( 'top' ) );
            this.curItem.set( 'scaleX', parseFloat( json.scaleX ) * default_zoom / page_zoom );
            this.curItem.set( 'scaleY', parseFloat( json.scaleY ) * default_zoom / page_zoom );
            this.curItem.setAngle( parseFloat( json.angle ) );
        }
        canvas.renderAll();
    };

    this.undoDelete = function( action, undoKey ) {
        if( isNull( undoKey ) ) {
            undoKey = "";
        }
        this.action = "delete-" + action + undoKey;
        var json;
        // redo
        if( undoKey == "" ) {
            this.setUndoItem( this.curItem );
            canvas.remove( this.curItem );
        }
        //undo
        else {
            json = JSON.parse( this.undoItem );
            this.loadData( json );
        }
    };

    this.undoAdd = function( action, undoKey ) {
        if( isNull( undoKey ) ) {
            undoKey = "";
        }
        this.action = "add-" + action + undoKey;
        var json;
        if( action == "text" || action == "trinket" ) {
            json = JSON.parse( this.undoItem );
            $( '#addTextBox' ).hide();
            if( undoKey == "" ) {
                this.loadData( json );
                this.undoItem = "{}";
            } else {
                this.setUndoItem( this.curItem );
                canvas.remove( this.curItem );
            }
        } else if( action == "border" ) {
            json = JSON.parse( this.undoItem );
            this.setUndoItem( this.curItem );
            canvas.remove( this.curItem );
            this.loadData( json );
        } else if( action == "filter" ) {
            var selObj = this.curItem;
            json = JSON.parse( this.undoItem );
            this.setUndoItem( this.curItem );
            var filter;
            if( this.curItem.type == "group" ) {
                var items = selObj.getObjects();
                selObj = items[1];
                filter = json.items[1].filter;
            } else {
                filter = json.filter;
            }
            removeFilter( selObj );
            setFilters( selObj, filter );
        } else if( action == "background" ) {
            json = JSON.parse( this.undoItem );
            this.setUndoItem( g_selBackground );
            canvas.remove( g_selBackground );
            g_selBackground = null;
            json.type = "group";
            this.curItem = this.loadData( json );
        } else if( action == "backgroundColor" ) {
            canvas.backgroundColor = g_UndoObject.undoItem;
            g_UndoObject.undoItem = g_UndoObject.curItem;
            g_UndoObject.curItem = canvas.backgroundColor;
            canvas.renderAll();
        } else if( action == "backgroundImage" ) {
            canvas.setBackgroundImage( g_UndoObject.undoItem, canvas.renderAll.bind( canvas ) );
            g_UndoObject.undoItem = g_UndoObject.curItem;
            g_UndoObject.curItem = canvas.backgroundImage.src;
        }
    };

    this.loadData = function( item ) {
        var back_posx = g_selBackground.get( 'left' );
        var back_posy = g_selBackground.get( 'top' );
        if( item.type == "text" ) {
            var text = new fabric.Text( unescape( item.text ), {
                fontFamily: item.fontFamily,
                fill: item.fill,
                left: parseFloat( item.left ) * default_zoom / page_zoom + back_posx,
                top: parseFloat( item.top ) * default_zoom / page_zoom + back_posy,
                angle: item.angle,
                scaleX: parseFloat( item.scaleX ) * default_zoom / page_zoom,
                scaleY: parseFloat( item.scaleY ) * default_zoom / page_zoom
            } );
            text.textAlign = item.textAlign;
            canvas.insertAt( text, this.undoIndex );
            $( '#addTextBox' ).hide();
        } else if( item.type == "image" ) {
            var imgObj = null;
            var index = this.undoIndex;
            fabric.Image.fromURL( item.src, function( obj ) {
                obj.set( 'left', parseFloat( item.left ) * default_zoom / page_zoom + back_posx );
                obj.set( 'top', parseFloat( item.top ) * default_zoom / page_zoom + back_posy );
                obj.set( 'scaleX', parseFloat( item.scaleX ) * default_zoom / page_zoom );
                obj.set( 'scaleY', parseFloat( item.scaleY ) * default_zoom / page_zoom );
                obj.setAngle( item.angle );
                setFilters( obj, item.filter );
                canvas.insertAt( obj, index );
            } );
        } else if( item.type == "group" ) {
            var objarray = [];
            imgObj = loadGroup( objarray, 0, item, this.undoIndex );
        }
        return canvas.item( this.undoIndex );
    };
    this.setUndoItem = function( item ) {
        if( isNull( item ) ) {
            this.undoItem = "";
            return;
        }
        var type = item.type;
        if( type == "image" ) {
            this.undoItem = getImageToJson( item );
        } else if( type == "text" ) {
            this.undoItem = getTextToJson( item );
        } else if( type == "group" ) {
            this.undoItem = getGroupToJson( item );
        }
        this.undoIndex = canvas.getObjects().indexOf( item );
    };
    this.setCurItem = function( item ) {
        this.curItem = item;
    };
}

